// $ANTLR 3.2 Sep 23, 2009 12:02:23 ../etc/JamlAttrHash.g 2010-02-27 18:32:10

package com.cadrlife.jaml;
import java.util.LinkedHashMap;
import java.util.Map;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class JamlAttrHashParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "AND", "AND_ASSIGN", "ASSIGN", "AT", "BIT_SHIFT_RIGHT", "BIT_SHIFT_RIGHT_ASSIGN", "COLON", "COMMA", "DEC", "DIV", "DIV_ASSIGN", "DOT", "DOTSTAR", "ELLIPSIS", "EQUAL", "GREATER_OR_EQUAL", "GREATER_THAN", "INC", "LBRACK", "LCURLY", "LESS_OR_EQUAL", "LESS_THAN", "LOGICAL_AND", "LOGICAL_NOT", "LOGICAL_OR", "LPAREN", "MINUS", "MINUS_ASSIGN", "MOD", "MOD_ASSIGN", "NOT", "NOT_EQUAL", "OR", "OR_ASSIGN", "PLUS", "PLUS_ASSIGN", "QUESTION", "RBRACK", "RCURLY", "RPAREN", "SEMI", "SHIFT_LEFT", "SHIFT_LEFT_ASSIGN", "SHIFT_RIGHT", "SHIFT_RIGHT_ASSIGN", "STAR", "STAR_ASSIGN", "XOR", "XOR_ASSIGN", "ABSTRACT", "ASSERT", "BOOLEAN", "BREAK", "BYTE", "CASE", "CATCH", "CHAR", "CLASS", "CONTINUE", "DEFAULT", "DO", "DOUBLE", "ELSE", "ENUM", "EXTENDS", "FALSE", "FINAL", "FINALLY", "FLOAT", "FOR", "IF", "IMPLEMENTS", "INSTANCEOF", "INTERFACE", "IMPORT", "INT", "LONG", "NATIVE", "NEW", "NULL", "PACKAGE", "PRIVATE", "PROTECTED", "PUBLIC", "RETURN", "SHORT", "STATIC", "STRICTFP", "SUPER", "SWITCH", "SYNCHRONIZED", "THIS", "THROW", "THROWS", "TRANSIENT", "TRUE", "TRY", "VOID", "VOLATILE", "WHILE", "ANNOTATION_INIT_ARRAY_ELEMENT", "ANNOTATION_INIT_BLOCK", "ANNOTATION_INIT_DEFAULT_KEY", "ANNOTATION_INIT_KEY_LIST", "ANNOTATION_LIST", "ANNOTATION_METHOD_DECL", "ANNOTATION_SCOPE", "ANNOTATION_TOP_LEVEL_SCOPE", "ARGUMENT_LIST", "ARRAY_DECLARATOR", "ARRAY_DECLARATOR_LIST", "ARRAY_ELEMENT_ACCESS", "ARRAY_INITIALIZER", "BLOCK_SCOPE", "CAST_EXPR", "CATCH_CLAUSE_LIST", "CLASS_CONSTRUCTOR_CALL", "CLASS_INSTANCE_INITIALIZER", "CLASS_STATIC_INITIALIZER", "CLASS_TOP_LEVEL_SCOPE", "CONSTRUCTOR_DECL", "ENUM_TOP_LEVEL_SCOPE", "EXPR", "EXTENDS_BOUND_LIST", "EXTENDS_CLAUSE", "FOR_CONDITION", "FOR_EACH", "FOR_INIT", "FOR_UPDATE", "FORMAL_PARAM_LIST", "FORMAL_PARAM_STD_DECL", "FORMAL_PARAM_VARARG_DECL", "FUNCTION_METHOD_DECL", "GENERIC_TYPE_ARG_LIST", "GENERIC_TYPE_PARAM_LIST", "INTERFACE_TOP_LEVEL_SCOPE", "IMPLEMENTS_CLAUSE", "LABELED_STATEMENT", "LOCAL_MODIFIER_LIST", "JAVA_SOURCE", "METHOD_CALL", "MODIFIER_LIST", "PARENTESIZED_EXPR", "POST_DEC", "POST_INC", "PRE_DEC", "PRE_INC", "QUALIFIED_TYPE_IDENT", "STATIC_ARRAY_CREATOR", "SUPER_CONSTRUCTOR_CALL", "SWITCH_BLOCK_LABEL_LIST", "THIS_CONSTRUCTOR_CALL", "THROWS_CLAUSE", "TYPE", "UNARY_MINUS", "UNARY_PLUS", "VAR_DECLARATION", "VAR_DECLARATOR", "VAR_DECLARATOR_LIST", "VOID_METHOD_DECL", "IDENT", "HEX_LITERAL", "OCTAL_LITERAL", "DECIMAL_LITERAL", "FLOATING_POINT_LITERAL", "CHARACTER_LITERAL", "STRING_LITERAL", "HEX_DIGIT", "INTEGER_TYPE_SUFFIX", "EXPONENT", "FLOAT_TYPE_SUFFIX", "ESCAPE_SEQUENCE", "UNICODE_ESCAPE", "OCTAL_ESCAPE", "JAVA_ID_START", "JAVA_ID_PART", "WS", "COMMENT", "LINE_COMMENT"
    };
    public static final int PACKAGE=84;
    public static final int EXPONENT=173;
    public static final int STAR=49;
    public static final int WHILE=103;
    public static final int MOD=32;
    public static final int MOD_ASSIGN=33;
    public static final int CASE=58;
    public static final int CHAR=60;
    public static final int NEW=82;
    public static final int DO=64;
    public static final int GENERIC_TYPE_PARAM_LIST=138;
    public static final int CLASS_INSTANCE_INITIALIZER=121;
    public static final int ARRAY_ELEMENT_ACCESS=115;
    public static final int FOR_CONDITION=129;
    public static final int NOT=34;
    public static final int VAR_DECLARATION=160;
    public static final int ANNOTATION_METHOD_DECL=109;
    public static final int EOF=-1;
    public static final int DIV_ASSIGN=14;
    public static final int LOGICAL_AND=26;
    public static final int BREAK=56;
    public static final int UNARY_PLUS=159;
    public static final int BIT_SHIFT_RIGHT_ASSIGN=9;
    public static final int TYPE=157;
    public static final int RPAREN=43;
    public static final int INC=21;
    public static final int FINAL=70;
    public static final int IMPORT=78;
    public static final int STRING_LITERAL=170;
    public static final int FOR_UPDATE=132;
    public static final int FLOATING_POINT_LITERAL=168;
    public static final int CAST_EXPR=118;
    public static final int NOT_EQUAL=35;
    public static final int VOID_METHOD_DECL=163;
    public static final int THIS=95;
    public static final int RETURN=88;
    public static final int DOUBLE=65;
    public static final int ENUM_TOP_LEVEL_SCOPE=125;
    public static final int VOID=101;
    public static final int SUPER=92;
    public static final int COMMENT=181;
    public static final int ANNOTATION_INIT_KEY_LIST=107;
    public static final int JAVA_ID_START=178;
    public static final int FLOAT_TYPE_SUFFIX=174;
    public static final int PRE_DEC=149;
    public static final int RBRACK=41;
    public static final int IMPLEMENTS_CLAUSE=140;
    public static final int SWITCH_BLOCK_LABEL_LIST=154;
    public static final int LINE_COMMENT=182;
    public static final int PRIVATE=85;
    public static final int STATIC=90;
    public static final int BLOCK_SCOPE=117;
    public static final int ANNOTATION_INIT_DEFAULT_KEY=106;
    public static final int SWITCH=93;
    public static final int NULL=83;
    public static final int VAR_DECLARATOR=161;
    public static final int MINUS_ASSIGN=31;
    public static final int ELSE=66;
    public static final int STRICTFP=91;
    public static final int CHARACTER_LITERAL=169;
    public static final int PRE_INC=150;
    public static final int ANNOTATION_LIST=108;
    public static final int ELLIPSIS=17;
    public static final int NATIVE=81;
    public static final int OCTAL_ESCAPE=177;
    public static final int UNARY_MINUS=158;
    public static final int THROWS=97;
    public static final int LCURLY=23;
    public static final int INT=79;
    public static final int FORMAL_PARAM_VARARG_DECL=135;
    public static final int METHOD_CALL=144;
    public static final int ASSERT=54;
    public static final int TRY=100;
    public static final int INTERFACE_TOP_LEVEL_SCOPE=139;
    public static final int SHIFT_LEFT=45;
    public static final int WS=180;
    public static final int SHIFT_RIGHT=47;
    public static final int FORMAL_PARAM_STD_DECL=134;
    public static final int LOCAL_MODIFIER_LIST=142;
    public static final int OR=36;
    public static final int LESS_THAN=25;
    public static final int SHIFT_RIGHT_ASSIGN=48;
    public static final int EXTENDS_BOUND_LIST=127;
    public static final int JAVA_SOURCE=143;
    public static final int CATCH=59;
    public static final int FALSE=69;
    public static final int INTEGER_TYPE_SUFFIX=172;
    public static final int DECIMAL_LITERAL=167;
    public static final int THROW=96;
    public static final int FOR_INIT=131;
    public static final int DEC=12;
    public static final int PROTECTED=86;
    public static final int CLASS=61;
    public static final int LBRACK=22;
    public static final int BIT_SHIFT_RIGHT=8;
    public static final int THROWS_CLAUSE=156;
    public static final int GREATER_OR_EQUAL=19;
    public static final int FOR=73;
    public static final int THIS_CONSTRUCTOR_CALL=155;
    public static final int LOGICAL_NOT=27;
    public static final int FLOAT=72;
    public static final int ABSTRACT=53;
    public static final int AND=4;
    public static final int POST_DEC=147;
    public static final int AND_ASSIGN=5;
    public static final int STATIC_ARRAY_CREATOR=152;
    public static final int MODIFIER_LIST=145;
    public static final int ANNOTATION_SCOPE=110;
    public static final int LPAREN=29;
    public static final int IF=74;
    public static final int AT=7;
    public static final int ESCAPE_SEQUENCE=175;
    public static final int CONSTRUCTOR_DECL=124;
    public static final int LABELED_STATEMENT=141;
    public static final int UNICODE_ESCAPE=176;
    public static final int EXPR=126;
    public static final int SYNCHRONIZED=94;
    public static final int BOOLEAN=55;
    public static final int CLASS_TOP_LEVEL_SCOPE=123;
    public static final int IMPLEMENTS=75;
    public static final int CONTINUE=62;
    public static final int COMMA=11;
    public static final int TRANSIENT=98;
    public static final int EQUAL=18;
    public static final int XOR_ASSIGN=52;
    public static final int LOGICAL_OR=28;
    public static final int IDENT=164;
    public static final int QUALIFIED_TYPE_IDENT=151;
    public static final int ARGUMENT_LIST=112;
    public static final int PLUS=38;
    public static final int HEX_LITERAL=165;
    public static final int ANNOTATION_INIT_BLOCK=105;
    public static final int DOT=15;
    public static final int SHIFT_LEFT_ASSIGN=46;
    public static final int FORMAL_PARAM_LIST=133;
    public static final int GENERIC_TYPE_ARG_LIST=137;
    public static final int ANNOTATION_TOP_LEVEL_SCOPE=111;
    public static final int DOTSTAR=16;
    public static final int BYTE=57;
    public static final int XOR=51;
    public static final int JAVA_ID_PART=179;
    public static final int GREATER_THAN=20;
    public static final int VOLATILE=102;
    public static final int PARENTESIZED_EXPR=146;
    public static final int CLASS_STATIC_INITIALIZER=122;
    public static final int ARRAY_DECLARATOR_LIST=114;
    public static final int LESS_OR_EQUAL=24;
    public static final int DEFAULT=63;
    public static final int OCTAL_LITERAL=166;
    public static final int HEX_DIGIT=171;
    public static final int SHORT=89;
    public static final int INSTANCEOF=76;
    public static final int MINUS=30;
    public static final int EXTENDS_CLAUSE=128;
    public static final int TRUE=99;
    public static final int SEMI=44;
    public static final int STAR_ASSIGN=50;
    public static final int VAR_DECLARATOR_LIST=162;
    public static final int ARRAY_DECLARATOR=113;
    public static final int COLON=10;
    public static final int OR_ASSIGN=37;
    public static final int ENUM=67;
    public static final int QUESTION=40;
    public static final int FINALLY=71;
    public static final int RCURLY=42;
    public static final int PLUS_ASSIGN=39;
    public static final int ASSIGN=6;
    public static final int ANNOTATION_INIT_ARRAY_ELEMENT=104;
    public static final int FUNCTION_METHOD_DECL=136;
    public static final int INTERFACE=77;
    public static final int POST_INC=148;
    public static final int DIV=13;
    public static final int CLASS_CONSTRUCTOR_CALL=120;
    public static final int LONG=80;
    public static final int FOR_EACH=130;
    public static final int EXTENDS=68;
    public static final int PUBLIC=87;
    public static final int ARRAY_INITIALIZER=116;
    public static final int CATCH_CLAUSE_LIST=119;
    public static final int SUPER_CONSTRUCTOR_CALL=153;

    // delegates
    // delegators


        public JamlAttrHashParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public JamlAttrHashParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
            this.state.ruleMemo = new HashMap[415+1];
             
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return JamlAttrHashParser.tokenNames; }
    public String getGrammarFileName() { return "../etc/JamlAttrHash.g"; }


        Helper jamlUtil = new Helper(new JamlConfig());
        
        private boolean mMessageCollectionEnabled = false;
        private boolean mHasErrors = false;
        private List<String> mMessages;

        /**
         *  Switches error message collection on or of.
         *
         *  The standard destination for parser error messages is <code>System.err</code>.
         *  However, if <code>true</code> gets passed to this method this default
         *  behaviour will be switched off and all error messages will be collected
         *  instead of written to anywhere.
         *
         *  The default value is <code>false</code>.
         *
         *  @param pNewState  <code>true</code> if error messages should be collected.
         */
        public void enableErrorMessageCollection(boolean pNewState) {
            mMessageCollectionEnabled = pNewState;
            if (mMessages == null && mMessageCollectionEnabled) {
                mMessages = new ArrayList<String>();
            }
        }
        
        /**
         *  Collects an error message or passes the error message to <code>
         *  super.emitErrorMessage(...)</code>.
         *
         *  The actual behaviour depends on whether collecting error messages
         *  has been enabled or not.
         *
         *  @param pMessage  The error message.
         */
         @Override
        public void emitErrorMessage(String pMessage) {
            if (mMessageCollectionEnabled) {
                mMessages.add(pMessage);
            } else {
                super.emitErrorMessage(pMessage);
            }
        }
        
        /**
         *  Returns collected error messages.
         *
         *  @return  A list holding collected error messages or <code>null</code> if
         *           collecting error messages hasn't been enabled. Of course, this
         *           list may be empty if no error message has been emited.
         */
        public List<String> getMessages() {
            return mMessages;
        }
        
        /**
         *  Tells if parsing a Java source has caused any error messages.
         *
         *  @return  <code>true</code> if parsing a Java source has caused at least one error message.
         */
        public boolean hasErrors() {
            return mHasErrors;
        }


    public static class attrMappings_return extends ParserRuleReturnScope {
        public Map<String,String> attrMap;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attrMappings"
    // ../etc/JamlAttrHash.g:280:1: attrMappings returns [Map<String,String> attrMap] : (am= attrMapping ( ',' am= attrMapping )* ) ;
    public final JamlAttrHashParser.attrMappings_return attrMappings() throws RecognitionException {
    traceIn("attrMappings", 1);
        JamlAttrHashParser.attrMappings_return retval = new JamlAttrHashParser.attrMappings_return();
        retval.start = input.LT(1);
        int attrMappings_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal1=null;
        JamlAttrHashParser.attrMapping_return am = null;


        CommonTree char_literal1_tree=null;

        retval.attrMap = new LinkedHashMap<String,String>();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }
            // ../etc/JamlAttrHash.g:281:57: ( (am= attrMapping ( ',' am= attrMapping )* ) )
            // ../etc/JamlAttrHash.g:283:3: (am= attrMapping ( ',' am= attrMapping )* )
            {
            root_0 = (CommonTree)adaptor.nil();

            // ../etc/JamlAttrHash.g:283:3: (am= attrMapping ( ',' am= attrMapping )* )
            // ../etc/JamlAttrHash.g:283:5: am= attrMapping ( ',' am= attrMapping )*
            {
            pushFollow(FOLLOW_attrMapping_in_attrMappings4526);
            am=attrMapping();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, am.getTree());
            if ( state.backtracking==0 ) {
              retval.attrMap.put((am!=null?am.attr:null),(am!=null?am.value:null));
            }
            // ../etc/JamlAttrHash.g:284:5: ( ',' am= attrMapping )*
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==COMMA) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:284:6: ',' am= attrMapping
            	    {
            	    char_literal1=(Token)match(input,COMMA,FOLLOW_COMMA_in_attrMappings4537); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal1_tree = (CommonTree)adaptor.create(char_literal1);
            	    adaptor.addChild(root_0, char_literal1_tree);
            	    }
            	    pushFollow(FOLLOW_attrMapping_in_attrMappings4541);
            	    am=attrMapping();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, am.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.attrMap.put((am!=null?am.attr:null),(am!=null?am.value:null));
            	    }

            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("attrMappings", 1);
            if ( state.backtracking>0 ) { memoize(input, 1, attrMappings_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attrMappings"

    public static class attrMapping_return extends ParserRuleReturnScope {
        public String attr;
        public String value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attrMapping"
    // ../etc/JamlAttrHash.g:286:1: attrMapping returns [String attr, String value] : attribute '=' '>' attributeValue ;
    public final JamlAttrHashParser.attrMapping_return attrMapping() throws RecognitionException {
    traceIn("attrMapping", 2);
        JamlAttrHashParser.attrMapping_return retval = new JamlAttrHashParser.attrMapping_return();
        retval.start = input.LT(1);
        int attrMapping_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal3=null;
        Token char_literal4=null;
        JamlAttrHashParser.attribute_return attribute2 = null;

        JamlAttrHashParser.attributeValue_return attributeValue5 = null;


        CommonTree char_literal3_tree=null;
        CommonTree char_literal4_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }
            // ../etc/JamlAttrHash.g:286:48: ( attribute '=' '>' attributeValue )
            // ../etc/JamlAttrHash.g:287:3: attribute '=' '>' attributeValue
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_attribute_in_attrMapping4561);
            attribute2=attribute();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute2.getTree());
            if ( state.backtracking==0 ) {
              retval.attr =(attribute2!=null?attribute2.value:null);
            }
            char_literal3=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_attrMapping4568); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal3_tree = (CommonTree)adaptor.create(char_literal3);
            adaptor.addChild(root_0, char_literal3_tree);
            }
            char_literal4=(Token)match(input,GREATER_THAN,FOLLOW_GREATER_THAN_in_attrMapping4570); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal4_tree = (CommonTree)adaptor.create(char_literal4);
            adaptor.addChild(root_0, char_literal4_tree);
            }
            pushFollow(FOLLOW_attributeValue_in_attrMapping4575);
            attributeValue5=attributeValue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, attributeValue5.getTree());
            if ( state.backtracking==0 ) {
              retval.value =(attributeValue5!=null?attributeValue5.value:null);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("attrMapping", 2);
            if ( state.backtracking>0 ) { memoize(input, 2, attrMapping_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attrMapping"

    public static class attribute_return extends ParserRuleReturnScope {
        public String value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute"
    // ../etc/JamlAttrHash.g:291:1: attribute returns [String value] : ( ':' ( keyword | IDENT ) | literal );
    public final JamlAttrHashParser.attribute_return attribute() throws RecognitionException {
    traceIn("attribute", 3);
        JamlAttrHashParser.attribute_return retval = new JamlAttrHashParser.attribute_return();
        retval.start = input.LT(1);
        int attribute_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal6=null;
        Token IDENT8=null;
        JamlAttrHashParser.keyword_return keyword7 = null;

        JamlAttrHashParser.literal_return literal9 = null;


        CommonTree char_literal6_tree=null;
        CommonTree IDENT8_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }
            // ../etc/JamlAttrHash.g:291:33: ( ':' ( keyword | IDENT ) | literal )
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==COLON) ) {
                alt3=1;
            }
            else if ( (LA3_0==FALSE||LA3_0==NULL||LA3_0==TRUE||(LA3_0>=HEX_LITERAL && LA3_0<=STRING_LITERAL)) ) {
                alt3=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 3, 0, input);

                throw nvae;
            }
            switch (alt3) {
                case 1 :
                    // ../etc/JamlAttrHash.g:292:1: ':' ( keyword | IDENT )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal6=(Token)match(input,COLON,FOLLOW_COLON_in_attribute4589); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal6_tree = (CommonTree)adaptor.create(char_literal6);
                    adaptor.addChild(root_0, char_literal6_tree);
                    }
                    // ../etc/JamlAttrHash.g:292:5: ( keyword | IDENT )
                    int alt2=2;
                    int LA2_0 = input.LA(1);

                    if ( ((LA2_0>=ABSTRACT && LA2_0<=WHILE)) ) {
                        alt2=1;
                    }
                    else if ( (LA2_0==IDENT) ) {
                        alt2=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 2, 0, input);

                        throw nvae;
                    }
                    switch (alt2) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:292:6: keyword
                            {
                            pushFollow(FOLLOW_keyword_in_attribute4592);
                            keyword7=keyword();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyword7.getTree());
                            if ( state.backtracking==0 ) {
                              retval.value = (keyword7!=null?input.toString(keyword7.start,keyword7.stop):null);
                            }

                            }
                            break;
                        case 2 :
                            // ../etc/JamlAttrHash.g:292:42: IDENT
                            {
                            IDENT8=(Token)match(input,IDENT,FOLLOW_IDENT_in_attribute4598); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            IDENT8_tree = (CommonTree)adaptor.create(IDENT8);
                            adaptor.addChild(root_0, IDENT8_tree);
                            }
                            if ( state.backtracking==0 ) {
                              retval.value = (IDENT8!=null?IDENT8.getText():null);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:293:1: literal
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_literal_in_attribute4605);
                    literal9=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal9.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value =(literal9!=null?literal9.value:null);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("attribute", 3);
            if ( state.backtracking>0 ) { memoize(input, 3, attribute_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute"

    public static class attributeValue_return extends ParserRuleReturnScope {
        public String value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attributeValue"
    // ../etc/JamlAttrHash.g:296:1: attributeValue returns [String value] : ( ( literal ',' | literal EOF )=> literal | expression );
    public final JamlAttrHashParser.attributeValue_return attributeValue() throws RecognitionException {
    traceIn("attributeValue", 4);
        JamlAttrHashParser.attributeValue_return retval = new JamlAttrHashParser.attributeValue_return();
        retval.start = input.LT(1);
        int attributeValue_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.literal_return literal10 = null;

        JamlAttrHashParser.expression_return expression11 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }
            // ../etc/JamlAttrHash.g:296:38: ( ( literal ',' | literal EOF )=> literal | expression )
            int alt4=2;
            switch ( input.LA(1) ) {
            case HEX_LITERAL:
            case OCTAL_LITERAL:
            case DECIMAL_LITERAL:
                {
                int LA4_1 = input.LA(2);

                if ( (synpred5_JamlAttrHash()) ) {
                    alt4=1;
                }
                else if ( (true) ) {
                    alt4=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 4, 1, input);

                    throw nvae;
                }
                }
                break;
            case FLOATING_POINT_LITERAL:
                {
                int LA4_2 = input.LA(2);

                if ( (synpred5_JamlAttrHash()) ) {
                    alt4=1;
                }
                else if ( (true) ) {
                    alt4=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 4, 2, input);

                    throw nvae;
                }
                }
                break;
            case CHARACTER_LITERAL:
                {
                int LA4_3 = input.LA(2);

                if ( (synpred5_JamlAttrHash()) ) {
                    alt4=1;
                }
                else if ( (true) ) {
                    alt4=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 4, 3, input);

                    throw nvae;
                }
                }
                break;
            case STRING_LITERAL:
                {
                int LA4_4 = input.LA(2);

                if ( (synpred5_JamlAttrHash()) ) {
                    alt4=1;
                }
                else if ( (true) ) {
                    alt4=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 4, 4, input);

                    throw nvae;
                }
                }
                break;
            case FALSE:
            case NULL:
            case TRUE:
                {
                int LA4_5 = input.LA(2);

                if ( (synpred5_JamlAttrHash()) ) {
                    alt4=1;
                }
                else if ( (true) ) {
                    alt4=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 4, 5, input);

                    throw nvae;
                }
                }
                break;
            case DEC:
            case INC:
            case LESS_THAN:
            case LOGICAL_NOT:
            case LPAREN:
            case MINUS:
            case NOT:
            case PLUS:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case SHORT:
            case SUPER:
            case THIS:
            case VOID:
            case IDENT:
                {
                alt4=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 4, 0, input);

                throw nvae;
            }

            switch (alt4) {
                case 1 :
                    // ../etc/JamlAttrHash.g:297:1: ( literal ',' | literal EOF )=> literal
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_literal_in_attributeValue4634);
                    literal10=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal10.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value =(literal10!=null?literal10.value:null);
                    }

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:298:1: expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expression_in_attributeValue4641);
                    expression11=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression11.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = jamlUtil.jspExpression((expression11!=null?input.toString(expression11.start,expression11.stop):null));
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("attributeValue", 4);
            if ( state.backtracking>0 ) { memoize(input, 4, attributeValue_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attributeValue"

    public static class literal_return extends ParserRuleReturnScope {
        public String value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "literal"
    // ../etc/JamlAttrHash.g:301:1: literal returns [String value] : (lit= ( HEX_LITERAL | OCTAL_LITERAL | DECIMAL_LITERAL ) | lit= FLOATING_POINT_LITERAL | lit= CHARACTER_LITERAL | lit= STRING_LITERAL | lit= ( TRUE | FALSE | NULL ) );
    public final JamlAttrHashParser.literal_return literal() throws RecognitionException {
    traceIn("literal", 5);
        JamlAttrHashParser.literal_return retval = new JamlAttrHashParser.literal_return();
        retval.start = input.LT(1);
        int literal_StartIndex = input.index();
        CommonTree root_0 = null;

        Token lit=null;

        CommonTree lit_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }
            // ../etc/JamlAttrHash.g:301:32: (lit= ( HEX_LITERAL | OCTAL_LITERAL | DECIMAL_LITERAL ) | lit= FLOATING_POINT_LITERAL | lit= CHARACTER_LITERAL | lit= STRING_LITERAL | lit= ( TRUE | FALSE | NULL ) )
            int alt5=5;
            switch ( input.LA(1) ) {
            case HEX_LITERAL:
            case OCTAL_LITERAL:
            case DECIMAL_LITERAL:
                {
                alt5=1;
                }
                break;
            case FLOATING_POINT_LITERAL:
                {
                alt5=2;
                }
                break;
            case CHARACTER_LITERAL:
                {
                alt5=3;
                }
                break;
            case STRING_LITERAL:
                {
                alt5=4;
                }
                break;
            case FALSE:
            case NULL:
            case TRUE:
                {
                alt5=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 5, 0, input);

                throw nvae;
            }

            switch (alt5) {
                case 1 :
                    // ../etc/JamlAttrHash.g:302:3: lit= ( HEX_LITERAL | OCTAL_LITERAL | DECIMAL_LITERAL )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    lit=(Token)input.LT(1);
                    if ( (input.LA(1)>=HEX_LITERAL && input.LA(1)<=DECIMAL_LITERAL) ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(lit));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }

                    if ( state.backtracking==0 ) {
                      retval.value = jamlUtil.parseIntegerLiteral((lit!=null?lit.getText():null));
                    }

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:303:3: lit= FLOATING_POINT_LITERAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    lit=(Token)match(input,FLOATING_POINT_LITERAL,FOLLOW_FLOATING_POINT_LITERAL_in_literal4678); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    lit_tree = (CommonTree)adaptor.create(lit);
                    adaptor.addChild(root_0, lit_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = jamlUtil.parseFloatLiteral((lit!=null?lit.getText():null));
                    }

                    }
                    break;
                case 3 :
                    // ../etc/JamlAttrHash.g:304:3: lit= CHARACTER_LITERAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    lit=(Token)match(input,CHARACTER_LITERAL,FOLLOW_CHARACTER_LITERAL_in_literal4688); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    lit_tree = (CommonTree)adaptor.create(lit);
                    adaptor.addChild(root_0, lit_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = jamlUtil.parseCharLiteral((lit!=null?lit.getText():null));
                    }

                    }
                    break;
                case 4 :
                    // ../etc/JamlAttrHash.g:305:3: lit= STRING_LITERAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    lit=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_literal4698); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    lit_tree = (CommonTree)adaptor.create(lit);
                    adaptor.addChild(root_0, lit_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = jamlUtil.parseStringLiteral((lit!=null?lit.getText():null));
                    }

                    }
                    break;
                case 5 :
                    // ../etc/JamlAttrHash.g:306:3: lit= ( TRUE | FALSE | NULL )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    lit=(Token)input.LT(1);
                    if ( input.LA(1)==FALSE||input.LA(1)==NULL||input.LA(1)==TRUE ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(lit));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }

                    if ( state.backtracking==0 ) {
                      retval.value = (lit!=null?lit.getText():null);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("literal", 5);
            if ( state.backtracking>0 ) { memoize(input, 5, literal_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "literal"

    public static class keyword_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyword"
    // ../etc/JamlAttrHash.g:309:1: keyword : ( ABSTRACT | ASSERT | BOOLEAN | BREAK | BYTE | CASE | CATCH | CHAR | CLASS | CONTINUE | DEFAULT | DO | DOUBLE | ELSE | ENUM | EXTENDS | FALSE | FINAL | FINALLY | FLOAT | FOR | IF | IMPLEMENTS | INSTANCEOF | INTERFACE | IMPORT | INT | LONG | NATIVE | NEW | NULL | PACKAGE | PRIVATE | PROTECTED | PUBLIC | RETURN | SHORT | STATIC | STRICTFP | SUPER | SWITCH | SYNCHRONIZED | THIS | THROW | THROWS | TRANSIENT | TRUE | TRY | VOID | VOLATILE | WHILE );
    public final JamlAttrHashParser.keyword_return keyword() throws RecognitionException {
    traceIn("keyword", 6);
        JamlAttrHashParser.keyword_return retval = new JamlAttrHashParser.keyword_return();
        retval.start = input.LT(1);
        int keyword_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set12=null;

        CommonTree set12_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }
            // ../etc/JamlAttrHash.g:309:9: ( ABSTRACT | ASSERT | BOOLEAN | BREAK | BYTE | CASE | CATCH | CHAR | CLASS | CONTINUE | DEFAULT | DO | DOUBLE | ELSE | ENUM | EXTENDS | FALSE | FINAL | FINALLY | FLOAT | FOR | IF | IMPLEMENTS | INSTANCEOF | INTERFACE | IMPORT | INT | LONG | NATIVE | NEW | NULL | PACKAGE | PRIVATE | PROTECTED | PUBLIC | RETURN | SHORT | STATIC | STRICTFP | SUPER | SWITCH | SYNCHRONIZED | THIS | THROW | THROWS | TRANSIENT | TRUE | TRY | VOID | VOLATILE | WHILE )
            // ../etc/JamlAttrHash.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set12=(Token)input.LT(1);
            if ( (input.LA(1)>=ABSTRACT && input.LA(1)<=WHILE) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set12));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("keyword", 6);
            if ( state.backtracking>0 ) { memoize(input, 6, keyword_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyword"

    public static class javaSource_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "javaSource"
    // ../etc/JamlAttrHash.g:363:1: javaSource : compilationUnit -> ^( JAVA_SOURCE compilationUnit ) ;
    public final JamlAttrHashParser.javaSource_return javaSource() throws RecognitionException {
    traceIn("javaSource", 7);
        JamlAttrHashParser.javaSource_return retval = new JamlAttrHashParser.javaSource_return();
        retval.start = input.LT(1);
        int javaSource_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.compilationUnit_return compilationUnit13 = null;


        RewriteRuleSubtreeStream stream_compilationUnit=new RewriteRuleSubtreeStream(adaptor,"rule compilationUnit");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }
            // ../etc/JamlAttrHash.g:364:5: ( compilationUnit -> ^( JAVA_SOURCE compilationUnit ) )
            // ../etc/JamlAttrHash.g:364:9: compilationUnit
            {
            pushFollow(FOLLOW_compilationUnit_in_javaSource5355);
            compilationUnit13=compilationUnit();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_compilationUnit.add(compilationUnit13.getTree());


            // AST REWRITE
            // elements: compilationUnit
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 365:9: -> ^( JAVA_SOURCE compilationUnit )
            {
                // ../etc/JamlAttrHash.g:365:13: ^( JAVA_SOURCE compilationUnit )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(JAVA_SOURCE, "JAVA_SOURCE"), root_1);

                adaptor.addChild(root_1, stream_compilationUnit.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("javaSource", 7);
            if ( state.backtracking>0 ) { memoize(input, 7, javaSource_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "javaSource"

    public static class compilationUnit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compilationUnit"
    // ../etc/JamlAttrHash.g:368:1: compilationUnit : annotationList ( packageDeclaration )? ( importDeclaration )* ( typeDecls )* ;
    public final JamlAttrHashParser.compilationUnit_return compilationUnit() throws RecognitionException {
    traceIn("compilationUnit", 8);
        JamlAttrHashParser.compilationUnit_return retval = new JamlAttrHashParser.compilationUnit_return();
        retval.start = input.LT(1);
        int compilationUnit_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.annotationList_return annotationList14 = null;

        JamlAttrHashParser.packageDeclaration_return packageDeclaration15 = null;

        JamlAttrHashParser.importDeclaration_return importDeclaration16 = null;

        JamlAttrHashParser.typeDecls_return typeDecls17 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }
            // ../etc/JamlAttrHash.g:369:5: ( annotationList ( packageDeclaration )? ( importDeclaration )* ( typeDecls )* )
            // ../etc/JamlAttrHash.g:369:9: annotationList ( packageDeclaration )? ( importDeclaration )* ( typeDecls )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_annotationList_in_compilationUnit5391);
            annotationList14=annotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationList14.getTree());
            // ../etc/JamlAttrHash.g:370:9: ( packageDeclaration )?
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==PACKAGE) ) {
                alt6=1;
            }
            switch (alt6) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: packageDeclaration
                    {
                    pushFollow(FOLLOW_packageDeclaration_in_compilationUnit5402);
                    packageDeclaration15=packageDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, packageDeclaration15.getTree());

                    }
                    break;

            }

            // ../etc/JamlAttrHash.g:371:9: ( importDeclaration )*
            loop7:
            do {
                int alt7=2;
                int LA7_0 = input.LA(1);

                if ( (LA7_0==IMPORT) ) {
                    alt7=1;
                }


                switch (alt7) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:0:0: importDeclaration
            	    {
            	    pushFollow(FOLLOW_importDeclaration_in_compilationUnit5414);
            	    importDeclaration16=importDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, importDeclaration16.getTree());

            	    }
            	    break;

            	default :
            	    break loop7;
                }
            } while (true);

            // ../etc/JamlAttrHash.g:372:9: ( typeDecls )*
            loop8:
            do {
                int alt8=2;
                int LA8_0 = input.LA(1);

                if ( (LA8_0==AT||LA8_0==LESS_THAN||LA8_0==SEMI||LA8_0==ABSTRACT||LA8_0==BOOLEAN||LA8_0==BYTE||(LA8_0>=CHAR && LA8_0<=CLASS)||LA8_0==DOUBLE||LA8_0==ENUM||LA8_0==FINAL||LA8_0==FLOAT||LA8_0==INTERFACE||(LA8_0>=INT && LA8_0<=NATIVE)||(LA8_0>=PRIVATE && LA8_0<=PUBLIC)||(LA8_0>=SHORT && LA8_0<=STRICTFP)||LA8_0==SYNCHRONIZED||LA8_0==TRANSIENT||(LA8_0>=VOID && LA8_0<=VOLATILE)||LA8_0==IDENT) ) {
                    alt8=1;
                }


                switch (alt8) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:0:0: typeDecls
            	    {
            	    pushFollow(FOLLOW_typeDecls_in_compilationUnit5426);
            	    typeDecls17=typeDecls();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDecls17.getTree());

            	    }
            	    break;

            	default :
            	    break loop8;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("compilationUnit", 8);
            if ( state.backtracking>0 ) { memoize(input, 8, compilationUnit_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "compilationUnit"

    public static class typeDecls_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeDecls"
    // ../etc/JamlAttrHash.g:375:1: typeDecls : ( typeDeclaration | SEMI );
    public final JamlAttrHashParser.typeDecls_return typeDecls() throws RecognitionException {
    traceIn("typeDecls", 9);
        JamlAttrHashParser.typeDecls_return retval = new JamlAttrHashParser.typeDecls_return();
        retval.start = input.LT(1);
        int typeDecls_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SEMI19=null;
        JamlAttrHashParser.typeDeclaration_return typeDeclaration18 = null;


        CommonTree SEMI19_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }
            // ../etc/JamlAttrHash.g:376:5: ( typeDeclaration | SEMI )
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==AT||LA9_0==LESS_THAN||LA9_0==ABSTRACT||LA9_0==BOOLEAN||LA9_0==BYTE||(LA9_0>=CHAR && LA9_0<=CLASS)||LA9_0==DOUBLE||LA9_0==ENUM||LA9_0==FINAL||LA9_0==FLOAT||LA9_0==INTERFACE||(LA9_0>=INT && LA9_0<=NATIVE)||(LA9_0>=PRIVATE && LA9_0<=PUBLIC)||(LA9_0>=SHORT && LA9_0<=STRICTFP)||LA9_0==SYNCHRONIZED||LA9_0==TRANSIENT||(LA9_0>=VOID && LA9_0<=VOLATILE)||LA9_0==IDENT) ) {
                alt9=1;
            }
            else if ( (LA9_0==SEMI) ) {
                alt9=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;
            }
            switch (alt9) {
                case 1 :
                    // ../etc/JamlAttrHash.g:376:9: typeDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_typeDeclaration_in_typeDecls5446);
                    typeDeclaration18=typeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDeclaration18.getTree());

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:377:9: SEMI
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SEMI19=(Token)match(input,SEMI,FOLLOW_SEMI_in_typeDecls5456); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("typeDecls", 9);
            if ( state.backtracking>0 ) { memoize(input, 9, typeDecls_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeDecls"

    public static class packageDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "packageDeclaration"
    // ../etc/JamlAttrHash.g:380:1: packageDeclaration : PACKAGE qualifiedIdentifier SEMI ;
    public final JamlAttrHashParser.packageDeclaration_return packageDeclaration() throws RecognitionException {
    traceIn("packageDeclaration", 10);
        JamlAttrHashParser.packageDeclaration_return retval = new JamlAttrHashParser.packageDeclaration_return();
        retval.start = input.LT(1);
        int packageDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token PACKAGE20=null;
        Token SEMI22=null;
        JamlAttrHashParser.qualifiedIdentifier_return qualifiedIdentifier21 = null;


        CommonTree PACKAGE20_tree=null;
        CommonTree SEMI22_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }
            // ../etc/JamlAttrHash.g:381:5: ( PACKAGE qualifiedIdentifier SEMI )
            // ../etc/JamlAttrHash.g:381:9: PACKAGE qualifiedIdentifier SEMI
            {
            root_0 = (CommonTree)adaptor.nil();

            PACKAGE20=(Token)match(input,PACKAGE,FOLLOW_PACKAGE_in_packageDeclaration5476); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PACKAGE20_tree = (CommonTree)adaptor.create(PACKAGE20);
            root_0 = (CommonTree)adaptor.becomeRoot(PACKAGE20_tree, root_0);
            }
            pushFollow(FOLLOW_qualifiedIdentifier_in_packageDeclaration5479);
            qualifiedIdentifier21=qualifiedIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedIdentifier21.getTree());
            SEMI22=(Token)match(input,SEMI,FOLLOW_SEMI_in_packageDeclaration5481); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("packageDeclaration", 10);
            if ( state.backtracking>0 ) { memoize(input, 10, packageDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "packageDeclaration"

    public static class importDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "importDeclaration"
    // ../etc/JamlAttrHash.g:384:1: importDeclaration : IMPORT ( STATIC )? qualifiedIdentifier ( DOTSTAR )? SEMI ;
    public final JamlAttrHashParser.importDeclaration_return importDeclaration() throws RecognitionException {
    traceIn("importDeclaration", 11);
        JamlAttrHashParser.importDeclaration_return retval = new JamlAttrHashParser.importDeclaration_return();
        retval.start = input.LT(1);
        int importDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IMPORT23=null;
        Token STATIC24=null;
        Token DOTSTAR26=null;
        Token SEMI27=null;
        JamlAttrHashParser.qualifiedIdentifier_return qualifiedIdentifier25 = null;


        CommonTree IMPORT23_tree=null;
        CommonTree STATIC24_tree=null;
        CommonTree DOTSTAR26_tree=null;
        CommonTree SEMI27_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }
            // ../etc/JamlAttrHash.g:385:5: ( IMPORT ( STATIC )? qualifiedIdentifier ( DOTSTAR )? SEMI )
            // ../etc/JamlAttrHash.g:385:9: IMPORT ( STATIC )? qualifiedIdentifier ( DOTSTAR )? SEMI
            {
            root_0 = (CommonTree)adaptor.nil();

            IMPORT23=(Token)match(input,IMPORT,FOLLOW_IMPORT_in_importDeclaration5507); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IMPORT23_tree = (CommonTree)adaptor.create(IMPORT23);
            root_0 = (CommonTree)adaptor.becomeRoot(IMPORT23_tree, root_0);
            }
            // ../etc/JamlAttrHash.g:385:17: ( STATIC )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==STATIC) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: STATIC
                    {
                    STATIC24=(Token)match(input,STATIC,FOLLOW_STATIC_in_importDeclaration5510); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STATIC24_tree = (CommonTree)adaptor.create(STATIC24);
                    adaptor.addChild(root_0, STATIC24_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_qualifiedIdentifier_in_importDeclaration5513);
            qualifiedIdentifier25=qualifiedIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedIdentifier25.getTree());
            // ../etc/JamlAttrHash.g:385:45: ( DOTSTAR )?
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==DOTSTAR) ) {
                alt11=1;
            }
            switch (alt11) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: DOTSTAR
                    {
                    DOTSTAR26=(Token)match(input,DOTSTAR,FOLLOW_DOTSTAR_in_importDeclaration5515); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOTSTAR26_tree = (CommonTree)adaptor.create(DOTSTAR26);
                    adaptor.addChild(root_0, DOTSTAR26_tree);
                    }

                    }
                    break;

            }

            SEMI27=(Token)match(input,SEMI,FOLLOW_SEMI_in_importDeclaration5518); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("importDeclaration", 11);
            if ( state.backtracking>0 ) { memoize(input, 11, importDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "importDeclaration"

    public static class typeDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeDeclaration"
    // ../etc/JamlAttrHash.g:388:1: typeDeclaration : modifierList ( classTypeDeclaration[$modifierList.tree] | interfaceTypeDeclaration[$modifierList.tree] | enumTypeDeclaration[$modifierList.tree] | annotationTypeDeclaration[$modifierList.tree] ) ;
    public final JamlAttrHashParser.typeDeclaration_return typeDeclaration() throws RecognitionException {
    traceIn("typeDeclaration", 12);
        JamlAttrHashParser.typeDeclaration_return retval = new JamlAttrHashParser.typeDeclaration_return();
        retval.start = input.LT(1);
        int typeDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.modifierList_return modifierList28 = null;

        JamlAttrHashParser.classTypeDeclaration_return classTypeDeclaration29 = null;

        JamlAttrHashParser.interfaceTypeDeclaration_return interfaceTypeDeclaration30 = null;

        JamlAttrHashParser.enumTypeDeclaration_return enumTypeDeclaration31 = null;

        JamlAttrHashParser.annotationTypeDeclaration_return annotationTypeDeclaration32 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }
            // ../etc/JamlAttrHash.g:389:5: ( modifierList ( classTypeDeclaration[$modifierList.tree] | interfaceTypeDeclaration[$modifierList.tree] | enumTypeDeclaration[$modifierList.tree] | annotationTypeDeclaration[$modifierList.tree] ) )
            // ../etc/JamlAttrHash.g:389:9: modifierList ( classTypeDeclaration[$modifierList.tree] | interfaceTypeDeclaration[$modifierList.tree] | enumTypeDeclaration[$modifierList.tree] | annotationTypeDeclaration[$modifierList.tree] )
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_modifierList_in_typeDeclaration5542);
            modifierList28=modifierList();

            state._fsp--;
            if (state.failed) return retval;
            // ../etc/JamlAttrHash.g:390:9: ( classTypeDeclaration[$modifierList.tree] | interfaceTypeDeclaration[$modifierList.tree] | enumTypeDeclaration[$modifierList.tree] | annotationTypeDeclaration[$modifierList.tree] )
            int alt12=4;
            switch ( input.LA(1) ) {
            case CLASS:
                {
                alt12=1;
                }
                break;
            case INTERFACE:
                {
                alt12=2;
                }
                break;
            case ENUM:
                {
                alt12=3;
                }
                break;
            case AT:
                {
                alt12=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);

                throw nvae;
            }

            switch (alt12) {
                case 1 :
                    // ../etc/JamlAttrHash.g:390:13: classTypeDeclaration[$modifierList.tree]
                    {
                    pushFollow(FOLLOW_classTypeDeclaration_in_typeDeclaration5557);
                    classTypeDeclaration29=classTypeDeclaration((modifierList28!=null?((CommonTree)modifierList28.tree):null));

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classTypeDeclaration29.getTree());

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:391:13: interfaceTypeDeclaration[$modifierList.tree]
                    {
                    pushFollow(FOLLOW_interfaceTypeDeclaration_in_typeDeclaration5572);
                    interfaceTypeDeclaration30=interfaceTypeDeclaration((modifierList28!=null?((CommonTree)modifierList28.tree):null));

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceTypeDeclaration30.getTree());

                    }
                    break;
                case 3 :
                    // ../etc/JamlAttrHash.g:392:13: enumTypeDeclaration[$modifierList.tree]
                    {
                    pushFollow(FOLLOW_enumTypeDeclaration_in_typeDeclaration5587);
                    enumTypeDeclaration31=enumTypeDeclaration((modifierList28!=null?((CommonTree)modifierList28.tree):null));

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumTypeDeclaration31.getTree());

                    }
                    break;
                case 4 :
                    // ../etc/JamlAttrHash.g:393:13: annotationTypeDeclaration[$modifierList.tree]
                    {
                    pushFollow(FOLLOW_annotationTypeDeclaration_in_typeDeclaration5602);
                    annotationTypeDeclaration32=annotationTypeDeclaration((modifierList28!=null?((CommonTree)modifierList28.tree):null));

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeDeclaration32.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("typeDeclaration", 12);
            if ( state.backtracking>0 ) { memoize(input, 12, typeDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeDeclaration"

    public static class classTypeDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classTypeDeclaration"
    // ../etc/JamlAttrHash.g:397:1: classTypeDeclaration[CommonTree modifiers] : CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody -> ^( CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody ) ;
    public final JamlAttrHashParser.classTypeDeclaration_return classTypeDeclaration(CommonTree modifiers) throws RecognitionException {
    traceIn("classTypeDeclaration", 13);
        JamlAttrHashParser.classTypeDeclaration_return retval = new JamlAttrHashParser.classTypeDeclaration_return();
        retval.start = input.LT(1);
        int classTypeDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token CLASS33=null;
        Token IDENT34=null;
        JamlAttrHashParser.genericTypeParameterList_return genericTypeParameterList35 = null;

        JamlAttrHashParser.classExtendsClause_return classExtendsClause36 = null;

        JamlAttrHashParser.implementsClause_return implementsClause37 = null;

        JamlAttrHashParser.classBody_return classBody38 = null;


        CommonTree CLASS33_tree=null;
        CommonTree IDENT34_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
        RewriteRuleSubtreeStream stream_genericTypeParameterList=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeParameterList");
        RewriteRuleSubtreeStream stream_classExtendsClause=new RewriteRuleSubtreeStream(adaptor,"rule classExtendsClause");
        RewriteRuleSubtreeStream stream_implementsClause=new RewriteRuleSubtreeStream(adaptor,"rule implementsClause");
        RewriteRuleSubtreeStream stream_classBody=new RewriteRuleSubtreeStream(adaptor,"rule classBody");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }
            // ../etc/JamlAttrHash.g:398:5: ( CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody -> ^( CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody ) )
            // ../etc/JamlAttrHash.g:398:9: CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody
            {
            CLASS33=(Token)match(input,CLASS,FOLLOW_CLASS_in_classTypeDeclaration5637); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLASS.add(CLASS33);

            IDENT34=(Token)match(input,IDENT,FOLLOW_IDENT_in_classTypeDeclaration5639); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT34);

            // ../etc/JamlAttrHash.g:398:21: ( genericTypeParameterList )?
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==LESS_THAN) ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: genericTypeParameterList
                    {
                    pushFollow(FOLLOW_genericTypeParameterList_in_classTypeDeclaration5641);
                    genericTypeParameterList35=genericTypeParameterList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_genericTypeParameterList.add(genericTypeParameterList35.getTree());

                    }
                    break;

            }

            // ../etc/JamlAttrHash.g:398:47: ( classExtendsClause )?
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==EXTENDS) ) {
                alt14=1;
            }
            switch (alt14) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: classExtendsClause
                    {
                    pushFollow(FOLLOW_classExtendsClause_in_classTypeDeclaration5644);
                    classExtendsClause36=classExtendsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classExtendsClause.add(classExtendsClause36.getTree());

                    }
                    break;

            }

            // ../etc/JamlAttrHash.g:398:67: ( implementsClause )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==IMPLEMENTS) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: implementsClause
                    {
                    pushFollow(FOLLOW_implementsClause_in_classTypeDeclaration5647);
                    implementsClause37=implementsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_implementsClause.add(implementsClause37.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_classBody_in_classTypeDeclaration5650);
            classBody38=classBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classBody.add(classBody38.getTree());


            // AST REWRITE
            // elements: implementsClause, CLASS, IDENT, genericTypeParameterList, classExtendsClause, classBody
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 399:9: -> ^( CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody )
            {
                // ../etc/JamlAttrHash.g:399:13: ^( CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_CLASS.nextNode(), root_1);

                adaptor.addChild(root_1, modifiers);
                adaptor.addChild(root_1, stream_IDENT.nextNode());
                // ../etc/JamlAttrHash.g:399:40: ( genericTypeParameterList )?
                if ( stream_genericTypeParameterList.hasNext() ) {
                    adaptor.addChild(root_1, stream_genericTypeParameterList.nextTree());

                }
                stream_genericTypeParameterList.reset();
                // ../etc/JamlAttrHash.g:399:66: ( classExtendsClause )?
                if ( stream_classExtendsClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_classExtendsClause.nextTree());

                }
                stream_classExtendsClause.reset();
                // ../etc/JamlAttrHash.g:399:86: ( implementsClause )?
                if ( stream_implementsClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_implementsClause.nextTree());

                }
                stream_implementsClause.reset();
                adaptor.addChild(root_1, stream_classBody.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("classTypeDeclaration", 13);
            if ( state.backtracking>0 ) { memoize(input, 13, classTypeDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classTypeDeclaration"

    public static class classExtendsClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classExtendsClause"
    // ../etc/JamlAttrHash.g:402:1: classExtendsClause : EXTENDS type -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] type ) ;
    public final JamlAttrHashParser.classExtendsClause_return classExtendsClause() throws RecognitionException {
    traceIn("classExtendsClause", 14);
        JamlAttrHashParser.classExtendsClause_return retval = new JamlAttrHashParser.classExtendsClause_return();
        retval.start = input.LT(1);
        int classExtendsClause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token EXTENDS39=null;
        JamlAttrHashParser.type_return type40 = null;


        CommonTree EXTENDS39_tree=null;
        RewriteRuleTokenStream stream_EXTENDS=new RewriteRuleTokenStream(adaptor,"token EXTENDS");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }
            // ../etc/JamlAttrHash.g:403:5: ( EXTENDS type -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] type ) )
            // ../etc/JamlAttrHash.g:403:9: EXTENDS type
            {
            EXTENDS39=(Token)match(input,EXTENDS,FOLLOW_EXTENDS_in_classExtendsClause5703); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXTENDS.add(EXTENDS39);

            pushFollow(FOLLOW_type_in_classExtendsClause5705);
            type40=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type40.getTree());


            // AST REWRITE
            // elements: type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 404:9: -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] type )
            {
                // ../etc/JamlAttrHash.g:404:13: ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] type )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXTENDS_CLAUSE, EXTENDS39, "EXTENDS_CLAUSE"), root_1);

                adaptor.addChild(root_1, stream_type.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("classExtendsClause", 14);
            if ( state.backtracking>0 ) { memoize(input, 14, classExtendsClause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classExtendsClause"

    public static class interfaceExtendsClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceExtendsClause"
    // ../etc/JamlAttrHash.g:407:1: interfaceExtendsClause : EXTENDS typeList -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] typeList ) ;
    public final JamlAttrHashParser.interfaceExtendsClause_return interfaceExtendsClause() throws RecognitionException {
    traceIn("interfaceExtendsClause", 15);
        JamlAttrHashParser.interfaceExtendsClause_return retval = new JamlAttrHashParser.interfaceExtendsClause_return();
        retval.start = input.LT(1);
        int interfaceExtendsClause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token EXTENDS41=null;
        JamlAttrHashParser.typeList_return typeList42 = null;


        CommonTree EXTENDS41_tree=null;
        RewriteRuleTokenStream stream_EXTENDS=new RewriteRuleTokenStream(adaptor,"token EXTENDS");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }
            // ../etc/JamlAttrHash.g:408:5: ( EXTENDS typeList -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] typeList ) )
            // ../etc/JamlAttrHash.g:408:9: EXTENDS typeList
            {
            EXTENDS41=(Token)match(input,EXTENDS,FOLLOW_EXTENDS_in_interfaceExtendsClause5749); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXTENDS.add(EXTENDS41);

            pushFollow(FOLLOW_typeList_in_interfaceExtendsClause5751);
            typeList42=typeList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeList.add(typeList42.getTree());


            // AST REWRITE
            // elements: typeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 409:9: -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] typeList )
            {
                // ../etc/JamlAttrHash.g:409:13: ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] typeList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXTENDS_CLAUSE, EXTENDS41, "EXTENDS_CLAUSE"), root_1);

                adaptor.addChild(root_1, stream_typeList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("interfaceExtendsClause", 15);
            if ( state.backtracking>0 ) { memoize(input, 15, interfaceExtendsClause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceExtendsClause"

    public static class implementsClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "implementsClause"
    // ../etc/JamlAttrHash.g:412:1: implementsClause : IMPLEMENTS typeList -> ^( IMPLEMENTS_CLAUSE[$IMPLEMENTS, \"IMPLEMENTS_CLAUSE\"] typeList ) ;
    public final JamlAttrHashParser.implementsClause_return implementsClause() throws RecognitionException {
    traceIn("implementsClause", 16);
        JamlAttrHashParser.implementsClause_return retval = new JamlAttrHashParser.implementsClause_return();
        retval.start = input.LT(1);
        int implementsClause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IMPLEMENTS43=null;
        JamlAttrHashParser.typeList_return typeList44 = null;


        CommonTree IMPLEMENTS43_tree=null;
        RewriteRuleTokenStream stream_IMPLEMENTS=new RewriteRuleTokenStream(adaptor,"token IMPLEMENTS");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }
            // ../etc/JamlAttrHash.g:413:5: ( IMPLEMENTS typeList -> ^( IMPLEMENTS_CLAUSE[$IMPLEMENTS, \"IMPLEMENTS_CLAUSE\"] typeList ) )
            // ../etc/JamlAttrHash.g:413:9: IMPLEMENTS typeList
            {
            IMPLEMENTS43=(Token)match(input,IMPLEMENTS,FOLLOW_IMPLEMENTS_in_implementsClause5795); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IMPLEMENTS.add(IMPLEMENTS43);

            pushFollow(FOLLOW_typeList_in_implementsClause5797);
            typeList44=typeList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeList.add(typeList44.getTree());


            // AST REWRITE
            // elements: typeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 414:9: -> ^( IMPLEMENTS_CLAUSE[$IMPLEMENTS, \"IMPLEMENTS_CLAUSE\"] typeList )
            {
                // ../etc/JamlAttrHash.g:414:13: ^( IMPLEMENTS_CLAUSE[$IMPLEMENTS, \"IMPLEMENTS_CLAUSE\"] typeList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IMPLEMENTS_CLAUSE, IMPLEMENTS43, "IMPLEMENTS_CLAUSE"), root_1);

                adaptor.addChild(root_1, stream_typeList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("implementsClause", 16);
            if ( state.backtracking>0 ) { memoize(input, 16, implementsClause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "implementsClause"

    public static class genericTypeParameterList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericTypeParameterList"
    // ../etc/JamlAttrHash.g:417:1: genericTypeParameterList : LESS_THAN genericTypeParameter ( COMMA genericTypeParameter )* genericTypeListClosing -> ^( GENERIC_TYPE_PARAM_LIST[$LESS_THAN, \"GENERIC_TYPE_PARAM_LIST\"] ( genericTypeParameter )+ ) ;
    public final JamlAttrHashParser.genericTypeParameterList_return genericTypeParameterList() throws RecognitionException {
    traceIn("genericTypeParameterList", 17);
        JamlAttrHashParser.genericTypeParameterList_return retval = new JamlAttrHashParser.genericTypeParameterList_return();
        retval.start = input.LT(1);
        int genericTypeParameterList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LESS_THAN45=null;
        Token COMMA47=null;
        JamlAttrHashParser.genericTypeParameter_return genericTypeParameter46 = null;

        JamlAttrHashParser.genericTypeParameter_return genericTypeParameter48 = null;

        JamlAttrHashParser.genericTypeListClosing_return genericTypeListClosing49 = null;


        CommonTree LESS_THAN45_tree=null;
        CommonTree COMMA47_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LESS_THAN=new RewriteRuleTokenStream(adaptor,"token LESS_THAN");
        RewriteRuleSubtreeStream stream_genericTypeParameter=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeParameter");
        RewriteRuleSubtreeStream stream_genericTypeListClosing=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeListClosing");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }
            // ../etc/JamlAttrHash.g:418:5: ( LESS_THAN genericTypeParameter ( COMMA genericTypeParameter )* genericTypeListClosing -> ^( GENERIC_TYPE_PARAM_LIST[$LESS_THAN, \"GENERIC_TYPE_PARAM_LIST\"] ( genericTypeParameter )+ ) )
            // ../etc/JamlAttrHash.g:418:9: LESS_THAN genericTypeParameter ( COMMA genericTypeParameter )* genericTypeListClosing
            {
            LESS_THAN45=(Token)match(input,LESS_THAN,FOLLOW_LESS_THAN_in_genericTypeParameterList5842); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LESS_THAN.add(LESS_THAN45);

            pushFollow(FOLLOW_genericTypeParameter_in_genericTypeParameterList5844);
            genericTypeParameter46=genericTypeParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_genericTypeParameter.add(genericTypeParameter46.getTree());
            // ../etc/JamlAttrHash.g:418:40: ( COMMA genericTypeParameter )*
            loop16:
            do {
                int alt16=2;
                int LA16_0 = input.LA(1);

                if ( (LA16_0==COMMA) ) {
                    alt16=1;
                }


                switch (alt16) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:418:41: COMMA genericTypeParameter
            	    {
            	    COMMA47=(Token)match(input,COMMA,FOLLOW_COMMA_in_genericTypeParameterList5847); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA47);

            	    pushFollow(FOLLOW_genericTypeParameter_in_genericTypeParameterList5849);
            	    genericTypeParameter48=genericTypeParameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_genericTypeParameter.add(genericTypeParameter48.getTree());

            	    }
            	    break;

            	default :
            	    break loop16;
                }
            } while (true);

            pushFollow(FOLLOW_genericTypeListClosing_in_genericTypeParameterList5853);
            genericTypeListClosing49=genericTypeListClosing();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_genericTypeListClosing.add(genericTypeListClosing49.getTree());


            // AST REWRITE
            // elements: genericTypeParameter
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 419:9: -> ^( GENERIC_TYPE_PARAM_LIST[$LESS_THAN, \"GENERIC_TYPE_PARAM_LIST\"] ( genericTypeParameter )+ )
            {
                // ../etc/JamlAttrHash.g:419:13: ^( GENERIC_TYPE_PARAM_LIST[$LESS_THAN, \"GENERIC_TYPE_PARAM_LIST\"] ( genericTypeParameter )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GENERIC_TYPE_PARAM_LIST, LESS_THAN45, "GENERIC_TYPE_PARAM_LIST"), root_1);

                if ( !(stream_genericTypeParameter.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_genericTypeParameter.hasNext() ) {
                    adaptor.addChild(root_1, stream_genericTypeParameter.nextTree());

                }
                stream_genericTypeParameter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("genericTypeParameterList", 17);
            if ( state.backtracking>0 ) { memoize(input, 17, genericTypeParameterList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "genericTypeParameterList"

    public static class genericTypeListClosing_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericTypeListClosing"
    // ../etc/JamlAttrHash.g:422:1: genericTypeListClosing : ( GREATER_THAN | SHIFT_RIGHT | BIT_SHIFT_RIGHT | );
    public final JamlAttrHashParser.genericTypeListClosing_return genericTypeListClosing() throws RecognitionException {
    traceIn("genericTypeListClosing", 18);
        JamlAttrHashParser.genericTypeListClosing_return retval = new JamlAttrHashParser.genericTypeListClosing_return();
        retval.start = input.LT(1);
        int genericTypeListClosing_StartIndex = input.index();
        CommonTree root_0 = null;

        Token GREATER_THAN50=null;
        Token SHIFT_RIGHT51=null;
        Token BIT_SHIFT_RIGHT52=null;

        CommonTree GREATER_THAN50_tree=null;
        CommonTree SHIFT_RIGHT51_tree=null;
        CommonTree BIT_SHIFT_RIGHT52_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }
            // ../etc/JamlAttrHash.g:426:5: ( GREATER_THAN | SHIFT_RIGHT | BIT_SHIFT_RIGHT | )
            int alt17=4;
            switch ( input.LA(1) ) {
            case GREATER_THAN:
                {
                int LA17_1 = input.LA(2);

                if ( (synpred77_JamlAttrHash()) ) {
                    alt17=1;
                }
                else if ( (true) ) {
                    alt17=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 17, 1, input);

                    throw nvae;
                }
                }
                break;
            case SHIFT_RIGHT:
                {
                int LA17_2 = input.LA(2);

                if ( (synpred78_JamlAttrHash()) ) {
                    alt17=2;
                }
                else if ( (true) ) {
                    alt17=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 17, 2, input);

                    throw nvae;
                }
                }
                break;
            case BIT_SHIFT_RIGHT:
                {
                int LA17_3 = input.LA(2);

                if ( (synpred79_JamlAttrHash()) ) {
                    alt17=3;
                }
                else if ( (true) ) {
                    alt17=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 17, 3, input);

                    throw nvae;
                }
                }
                break;
            case EOF:
            case AND:
            case AND_ASSIGN:
            case ASSIGN:
            case BIT_SHIFT_RIGHT_ASSIGN:
            case COLON:
            case COMMA:
            case DIV_ASSIGN:
            case DOT:
            case ELLIPSIS:
            case EQUAL:
            case LBRACK:
            case LCURLY:
            case LOGICAL_AND:
            case LOGICAL_OR:
            case LPAREN:
            case MINUS_ASSIGN:
            case MOD_ASSIGN:
            case NOT_EQUAL:
            case OR:
            case OR_ASSIGN:
            case PLUS_ASSIGN:
            case QUESTION:
            case RBRACK:
            case RCURLY:
            case RPAREN:
            case SEMI:
            case SHIFT_LEFT_ASSIGN:
            case SHIFT_RIGHT_ASSIGN:
            case STAR_ASSIGN:
            case XOR:
            case XOR_ASSIGN:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case EXTENDS:
            case FLOAT:
            case IMPLEMENTS:
            case INT:
            case LONG:
            case SHORT:
            case SUPER:
            case THIS:
            case VOID:
            case IDENT:
                {
                alt17=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);

                throw nvae;
            }

            switch (alt17) {
                case 1 :
                    // ../etc/JamlAttrHash.g:426:9: GREATER_THAN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    GREATER_THAN50=(Token)match(input,GREATER_THAN,FOLLOW_GREATER_THAN_in_genericTypeListClosing5968); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GREATER_THAN50_tree = (CommonTree)adaptor.create(GREATER_THAN50);
                    adaptor.addChild(root_0, GREATER_THAN50_tree);
                    }

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:427:9: SHIFT_RIGHT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SHIFT_RIGHT51=(Token)match(input,SHIFT_RIGHT,FOLLOW_SHIFT_RIGHT_in_genericTypeListClosing5978); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SHIFT_RIGHT51_tree = (CommonTree)adaptor.create(SHIFT_RIGHT51);
                    adaptor.addChild(root_0, SHIFT_RIGHT51_tree);
                    }

                    }
                    break;
                case 3 :
                    // ../etc/JamlAttrHash.g:428:9: BIT_SHIFT_RIGHT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    BIT_SHIFT_RIGHT52=(Token)match(input,BIT_SHIFT_RIGHT,FOLLOW_BIT_SHIFT_RIGHT_in_genericTypeListClosing5988); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BIT_SHIFT_RIGHT52_tree = (CommonTree)adaptor.create(BIT_SHIFT_RIGHT52);
                    adaptor.addChild(root_0, BIT_SHIFT_RIGHT52_tree);
                    }

                    }
                    break;
                case 4 :
                    // ../etc/JamlAttrHash.g:430:5: 
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("genericTypeListClosing", 18);
            if ( state.backtracking>0 ) { memoize(input, 18, genericTypeListClosing_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "genericTypeListClosing"

    public static class genericTypeParameter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericTypeParameter"
    // ../etc/JamlAttrHash.g:432:1: genericTypeParameter : IDENT ( bound )? -> ^( IDENT ( bound )? ) ;
    public final JamlAttrHashParser.genericTypeParameter_return genericTypeParameter() throws RecognitionException {
    traceIn("genericTypeParameter", 19);
        JamlAttrHashParser.genericTypeParameter_return retval = new JamlAttrHashParser.genericTypeParameter_return();
        retval.start = input.LT(1);
        int genericTypeParameter_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT53=null;
        JamlAttrHashParser.bound_return bound54 = null;


        CommonTree IDENT53_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_bound=new RewriteRuleSubtreeStream(adaptor,"rule bound");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }
            // ../etc/JamlAttrHash.g:433:5: ( IDENT ( bound )? -> ^( IDENT ( bound )? ) )
            // ../etc/JamlAttrHash.g:433:9: IDENT ( bound )?
            {
            IDENT53=(Token)match(input,IDENT,FOLLOW_IDENT_in_genericTypeParameter6016); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT53);

            // ../etc/JamlAttrHash.g:433:15: ( bound )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==EXTENDS) ) {
                int LA18_1 = input.LA(2);

                if ( (LA18_1==BOOLEAN||LA18_1==BYTE||LA18_1==CHAR||LA18_1==DOUBLE||LA18_1==FLOAT||(LA18_1>=INT && LA18_1<=LONG)||LA18_1==SHORT) ) {
                    int LA18_3 = input.LA(3);

                    if ( (synpred80_JamlAttrHash()) ) {
                        alt18=1;
                    }
                }
                else if ( (LA18_1==IDENT) ) {
                    int LA18_4 = input.LA(3);

                    if ( (synpred80_JamlAttrHash()) ) {
                        alt18=1;
                    }
                }
            }
            switch (alt18) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: bound
                    {
                    pushFollow(FOLLOW_bound_in_genericTypeParameter6018);
                    bound54=bound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bound.add(bound54.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: IDENT, bound
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 434:9: -> ^( IDENT ( bound )? )
            {
                // ../etc/JamlAttrHash.g:434:13: ^( IDENT ( bound )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_IDENT.nextNode(), root_1);

                // ../etc/JamlAttrHash.g:434:21: ( bound )?
                if ( stream_bound.hasNext() ) {
                    adaptor.addChild(root_1, stream_bound.nextTree());

                }
                stream_bound.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("genericTypeParameter", 19);
            if ( state.backtracking>0 ) { memoize(input, 19, genericTypeParameter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "genericTypeParameter"

    public static class bound_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bound"
    // ../etc/JamlAttrHash.g:437:1: bound : EXTENDS type ( AND type )* -> ^( EXTENDS_BOUND_LIST[$EXTENDS, \"EXTENDS_BOUND_LIST\"] ( type )+ ) ;
    public final JamlAttrHashParser.bound_return bound() throws RecognitionException {
    traceIn("bound", 20);
        JamlAttrHashParser.bound_return retval = new JamlAttrHashParser.bound_return();
        retval.start = input.LT(1);
        int bound_StartIndex = input.index();
        CommonTree root_0 = null;

        Token EXTENDS55=null;
        Token AND57=null;
        JamlAttrHashParser.type_return type56 = null;

        JamlAttrHashParser.type_return type58 = null;


        CommonTree EXTENDS55_tree=null;
        CommonTree AND57_tree=null;
        RewriteRuleTokenStream stream_AND=new RewriteRuleTokenStream(adaptor,"token AND");
        RewriteRuleTokenStream stream_EXTENDS=new RewriteRuleTokenStream(adaptor,"token EXTENDS");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }
            // ../etc/JamlAttrHash.g:438:5: ( EXTENDS type ( AND type )* -> ^( EXTENDS_BOUND_LIST[$EXTENDS, \"EXTENDS_BOUND_LIST\"] ( type )+ ) )
            // ../etc/JamlAttrHash.g:438:9: EXTENDS type ( AND type )*
            {
            EXTENDS55=(Token)match(input,EXTENDS,FOLLOW_EXTENDS_in_bound6064); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXTENDS.add(EXTENDS55);

            pushFollow(FOLLOW_type_in_bound6066);
            type56=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type56.getTree());
            // ../etc/JamlAttrHash.g:438:22: ( AND type )*
            loop19:
            do {
                int alt19=2;
                int LA19_0 = input.LA(1);

                if ( (LA19_0==AND) ) {
                    alt19=1;
                }


                switch (alt19) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:438:23: AND type
            	    {
            	    AND57=(Token)match(input,AND,FOLLOW_AND_in_bound6069); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND.add(AND57);

            	    pushFollow(FOLLOW_type_in_bound6071);
            	    type58=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_type.add(type58.getTree());

            	    }
            	    break;

            	default :
            	    break loop19;
                }
            } while (true);



            // AST REWRITE
            // elements: type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 439:9: -> ^( EXTENDS_BOUND_LIST[$EXTENDS, \"EXTENDS_BOUND_LIST\"] ( type )+ )
            {
                // ../etc/JamlAttrHash.g:439:13: ^( EXTENDS_BOUND_LIST[$EXTENDS, \"EXTENDS_BOUND_LIST\"] ( type )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXTENDS_BOUND_LIST, EXTENDS55, "EXTENDS_BOUND_LIST"), root_1);

                if ( !(stream_type.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_type.hasNext() ) {
                    adaptor.addChild(root_1, stream_type.nextTree());

                }
                stream_type.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("bound", 20);
            if ( state.backtracking>0 ) { memoize(input, 20, bound_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bound"

    public static class enumTypeDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumTypeDeclaration"
    // ../etc/JamlAttrHash.g:442:1: enumTypeDeclaration[CommonTree modifiers] : ENUM IDENT ( implementsClause )? enumBody -> ^( ENUM IDENT ( implementsClause )? enumBody ) ;
    public final JamlAttrHashParser.enumTypeDeclaration_return enumTypeDeclaration(CommonTree modifiers) throws RecognitionException {
    traceIn("enumTypeDeclaration", 21);
        JamlAttrHashParser.enumTypeDeclaration_return retval = new JamlAttrHashParser.enumTypeDeclaration_return();
        retval.start = input.LT(1);
        int enumTypeDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ENUM59=null;
        Token IDENT60=null;
        JamlAttrHashParser.implementsClause_return implementsClause61 = null;

        JamlAttrHashParser.enumBody_return enumBody62 = null;


        CommonTree ENUM59_tree=null;
        CommonTree IDENT60_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_ENUM=new RewriteRuleTokenStream(adaptor,"token ENUM");
        RewriteRuleSubtreeStream stream_implementsClause=new RewriteRuleSubtreeStream(adaptor,"rule implementsClause");
        RewriteRuleSubtreeStream stream_enumBody=new RewriteRuleSubtreeStream(adaptor,"rule enumBody");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }
            // ../etc/JamlAttrHash.g:443:5: ( ENUM IDENT ( implementsClause )? enumBody -> ^( ENUM IDENT ( implementsClause )? enumBody ) )
            // ../etc/JamlAttrHash.g:443:9: ENUM IDENT ( implementsClause )? enumBody
            {
            ENUM59=(Token)match(input,ENUM,FOLLOW_ENUM_in_enumTypeDeclaration6112); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ENUM.add(ENUM59);

            IDENT60=(Token)match(input,IDENT,FOLLOW_IDENT_in_enumTypeDeclaration6114); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT60);

            // ../etc/JamlAttrHash.g:443:20: ( implementsClause )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==IMPLEMENTS) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: implementsClause
                    {
                    pushFollow(FOLLOW_implementsClause_in_enumTypeDeclaration6116);
                    implementsClause61=implementsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_implementsClause.add(implementsClause61.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_enumBody_in_enumTypeDeclaration6119);
            enumBody62=enumBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_enumBody.add(enumBody62.getTree());


            // AST REWRITE
            // elements: implementsClause, ENUM, IDENT, enumBody
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 444:9: -> ^( ENUM IDENT ( implementsClause )? enumBody )
            {
                // ../etc/JamlAttrHash.g:444:13: ^( ENUM IDENT ( implementsClause )? enumBody )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_ENUM.nextNode(), root_1);

                adaptor.addChild(root_1, modifiers);
                adaptor.addChild(root_1, stream_IDENT.nextNode());
                // ../etc/JamlAttrHash.g:444:39: ( implementsClause )?
                if ( stream_implementsClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_implementsClause.nextTree());

                }
                stream_implementsClause.reset();
                adaptor.addChild(root_1, stream_enumBody.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("enumTypeDeclaration", 21);
            if ( state.backtracking>0 ) { memoize(input, 21, enumTypeDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumTypeDeclaration"

    public static class enumBody_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumBody"
    // ../etc/JamlAttrHash.g:447:1: enumBody : LCURLY enumScopeDeclarations RCURLY -> ^( ENUM_TOP_LEVEL_SCOPE[$LCURLY, \"ENUM_TOP_LEVEL_SCOPE\"] enumScopeDeclarations ) ;
    public final JamlAttrHashParser.enumBody_return enumBody() throws RecognitionException {
    traceIn("enumBody", 22);
        JamlAttrHashParser.enumBody_return retval = new JamlAttrHashParser.enumBody_return();
        retval.start = input.LT(1);
        int enumBody_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LCURLY63=null;
        Token RCURLY65=null;
        JamlAttrHashParser.enumScopeDeclarations_return enumScopeDeclarations64 = null;


        CommonTree LCURLY63_tree=null;
        CommonTree RCURLY65_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_enumScopeDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule enumScopeDeclarations");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }
            // ../etc/JamlAttrHash.g:448:5: ( LCURLY enumScopeDeclarations RCURLY -> ^( ENUM_TOP_LEVEL_SCOPE[$LCURLY, \"ENUM_TOP_LEVEL_SCOPE\"] enumScopeDeclarations ) )
            // ../etc/JamlAttrHash.g:448:9: LCURLY enumScopeDeclarations RCURLY
            {
            LCURLY63=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_enumBody6166); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY63);

            pushFollow(FOLLOW_enumScopeDeclarations_in_enumBody6168);
            enumScopeDeclarations64=enumScopeDeclarations();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_enumScopeDeclarations.add(enumScopeDeclarations64.getTree());
            RCURLY65=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_enumBody6170); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY65);



            // AST REWRITE
            // elements: enumScopeDeclarations
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 449:9: -> ^( ENUM_TOP_LEVEL_SCOPE[$LCURLY, \"ENUM_TOP_LEVEL_SCOPE\"] enumScopeDeclarations )
            {
                // ../etc/JamlAttrHash.g:449:13: ^( ENUM_TOP_LEVEL_SCOPE[$LCURLY, \"ENUM_TOP_LEVEL_SCOPE\"] enumScopeDeclarations )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ENUM_TOP_LEVEL_SCOPE, LCURLY63, "ENUM_TOP_LEVEL_SCOPE"), root_1);

                adaptor.addChild(root_1, stream_enumScopeDeclarations.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("enumBody", 22);
            if ( state.backtracking>0 ) { memoize(input, 22, enumBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumBody"

    public static class enumScopeDeclarations_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumScopeDeclarations"
    // ../etc/JamlAttrHash.g:452:1: enumScopeDeclarations : enumConstants ( COMMA )? ( enumClassScopeDeclarations )? ;
    public final JamlAttrHashParser.enumScopeDeclarations_return enumScopeDeclarations() throws RecognitionException {
    traceIn("enumScopeDeclarations", 23);
        JamlAttrHashParser.enumScopeDeclarations_return retval = new JamlAttrHashParser.enumScopeDeclarations_return();
        retval.start = input.LT(1);
        int enumScopeDeclarations_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA67=null;
        JamlAttrHashParser.enumConstants_return enumConstants66 = null;

        JamlAttrHashParser.enumClassScopeDeclarations_return enumClassScopeDeclarations68 = null;


        CommonTree COMMA67_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }
            // ../etc/JamlAttrHash.g:453:5: ( enumConstants ( COMMA )? ( enumClassScopeDeclarations )? )
            // ../etc/JamlAttrHash.g:453:9: enumConstants ( COMMA )? ( enumClassScopeDeclarations )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_enumConstants_in_enumScopeDeclarations6207);
            enumConstants66=enumConstants();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, enumConstants66.getTree());
            // ../etc/JamlAttrHash.g:453:23: ( COMMA )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==COMMA) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // ../etc/JamlAttrHash.g:453:24: COMMA
                    {
                    COMMA67=(Token)match(input,COMMA,FOLLOW_COMMA_in_enumScopeDeclarations6210); if (state.failed) return retval;

                    }
                    break;

            }

            // ../etc/JamlAttrHash.g:453:33: ( enumClassScopeDeclarations )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==SEMI) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: enumClassScopeDeclarations
                    {
                    pushFollow(FOLLOW_enumClassScopeDeclarations_in_enumScopeDeclarations6215);
                    enumClassScopeDeclarations68=enumClassScopeDeclarations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumClassScopeDeclarations68.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("enumScopeDeclarations", 23);
            if ( state.backtracking>0 ) { memoize(input, 23, enumScopeDeclarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumScopeDeclarations"

    public static class enumClassScopeDeclarations_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumClassScopeDeclarations"
    // ../etc/JamlAttrHash.g:456:1: enumClassScopeDeclarations : SEMI ( classScopeDeclarations )* -> ^( CLASS_TOP_LEVEL_SCOPE[$SEMI, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* ) ;
    public final JamlAttrHashParser.enumClassScopeDeclarations_return enumClassScopeDeclarations() throws RecognitionException {
    traceIn("enumClassScopeDeclarations", 24);
        JamlAttrHashParser.enumClassScopeDeclarations_return retval = new JamlAttrHashParser.enumClassScopeDeclarations_return();
        retval.start = input.LT(1);
        int enumClassScopeDeclarations_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SEMI69=null;
        JamlAttrHashParser.classScopeDeclarations_return classScopeDeclarations70 = null;


        CommonTree SEMI69_tree=null;
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleSubtreeStream stream_classScopeDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule classScopeDeclarations");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }
            // ../etc/JamlAttrHash.g:457:5: ( SEMI ( classScopeDeclarations )* -> ^( CLASS_TOP_LEVEL_SCOPE[$SEMI, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* ) )
            // ../etc/JamlAttrHash.g:457:9: SEMI ( classScopeDeclarations )*
            {
            SEMI69=(Token)match(input,SEMI,FOLLOW_SEMI_in_enumClassScopeDeclarations6235); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(SEMI69);

            // ../etc/JamlAttrHash.g:457:14: ( classScopeDeclarations )*
            loop23:
            do {
                int alt23=2;
                int LA23_0 = input.LA(1);

                if ( (LA23_0==AT||LA23_0==LCURLY||LA23_0==LESS_THAN||LA23_0==SEMI||LA23_0==ABSTRACT||LA23_0==BOOLEAN||LA23_0==BYTE||(LA23_0>=CHAR && LA23_0<=CLASS)||LA23_0==DOUBLE||LA23_0==ENUM||LA23_0==FINAL||LA23_0==FLOAT||LA23_0==INTERFACE||(LA23_0>=INT && LA23_0<=NATIVE)||(LA23_0>=PRIVATE && LA23_0<=PUBLIC)||(LA23_0>=SHORT && LA23_0<=STRICTFP)||LA23_0==SYNCHRONIZED||LA23_0==TRANSIENT||(LA23_0>=VOID && LA23_0<=VOLATILE)||LA23_0==IDENT) ) {
                    alt23=1;
                }


                switch (alt23) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:0:0: classScopeDeclarations
            	    {
            	    pushFollow(FOLLOW_classScopeDeclarations_in_enumClassScopeDeclarations6237);
            	    classScopeDeclarations70=classScopeDeclarations();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_classScopeDeclarations.add(classScopeDeclarations70.getTree());

            	    }
            	    break;

            	default :
            	    break loop23;
                }
            } while (true);



            // AST REWRITE
            // elements: classScopeDeclarations
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 458:9: -> ^( CLASS_TOP_LEVEL_SCOPE[$SEMI, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* )
            {
                // ../etc/JamlAttrHash.g:458:13: ^( CLASS_TOP_LEVEL_SCOPE[$SEMI, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_TOP_LEVEL_SCOPE, SEMI69, "CLASS_TOP_LEVEL_SCOPE"), root_1);

                // ../etc/JamlAttrHash.g:458:69: ( classScopeDeclarations )*
                while ( stream_classScopeDeclarations.hasNext() ) {
                    adaptor.addChild(root_1, stream_classScopeDeclarations.nextTree());

                }
                stream_classScopeDeclarations.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("enumClassScopeDeclarations", 24);
            if ( state.backtracking>0 ) { memoize(input, 24, enumClassScopeDeclarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumClassScopeDeclarations"

    public static class enumConstants_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumConstants"
    // ../etc/JamlAttrHash.g:461:1: enumConstants : enumConstant ( COMMA enumConstant )* ;
    public final JamlAttrHashParser.enumConstants_return enumConstants() throws RecognitionException {
    traceIn("enumConstants", 25);
        JamlAttrHashParser.enumConstants_return retval = new JamlAttrHashParser.enumConstants_return();
        retval.start = input.LT(1);
        int enumConstants_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA72=null;
        JamlAttrHashParser.enumConstant_return enumConstant71 = null;

        JamlAttrHashParser.enumConstant_return enumConstant73 = null;


        CommonTree COMMA72_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }
            // ../etc/JamlAttrHash.g:462:5: ( enumConstant ( COMMA enumConstant )* )
            // ../etc/JamlAttrHash.g:462:9: enumConstant ( COMMA enumConstant )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_enumConstant_in_enumConstants6276);
            enumConstant71=enumConstant();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, enumConstant71.getTree());
            // ../etc/JamlAttrHash.g:462:22: ( COMMA enumConstant )*
            loop24:
            do {
                int alt24=2;
                int LA24_0 = input.LA(1);

                if ( (LA24_0==COMMA) ) {
                    int LA24_1 = input.LA(2);

                    if ( (LA24_1==AT||LA24_1==IDENT) ) {
                        alt24=1;
                    }


                }


                switch (alt24) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:462:23: COMMA enumConstant
            	    {
            	    COMMA72=(Token)match(input,COMMA,FOLLOW_COMMA_in_enumConstants6279); if (state.failed) return retval;
            	    pushFollow(FOLLOW_enumConstant_in_enumConstants6282);
            	    enumConstant73=enumConstant();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumConstant73.getTree());

            	    }
            	    break;

            	default :
            	    break loop24;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("enumConstants", 25);
            if ( state.backtracking>0 ) { memoize(input, 25, enumConstants_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumConstants"

    public static class enumConstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumConstant"
    // ../etc/JamlAttrHash.g:465:1: enumConstant : annotationList IDENT ( arguments )? ( classBody )? ;
    public final JamlAttrHashParser.enumConstant_return enumConstant() throws RecognitionException {
    traceIn("enumConstant", 26);
        JamlAttrHashParser.enumConstant_return retval = new JamlAttrHashParser.enumConstant_return();
        retval.start = input.LT(1);
        int enumConstant_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT75=null;
        JamlAttrHashParser.annotationList_return annotationList74 = null;

        JamlAttrHashParser.arguments_return arguments76 = null;

        JamlAttrHashParser.classBody_return classBody77 = null;


        CommonTree IDENT75_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }
            // ../etc/JamlAttrHash.g:466:5: ( annotationList IDENT ( arguments )? ( classBody )? )
            // ../etc/JamlAttrHash.g:466:9: annotationList IDENT ( arguments )? ( classBody )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_annotationList_in_enumConstant6307);
            annotationList74=annotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationList74.getTree());
            IDENT75=(Token)match(input,IDENT,FOLLOW_IDENT_in_enumConstant6309); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT75_tree = (CommonTree)adaptor.create(IDENT75);
            root_0 = (CommonTree)adaptor.becomeRoot(IDENT75_tree, root_0);
            }
            // ../etc/JamlAttrHash.g:466:31: ( arguments )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==LPAREN) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: arguments
                    {
                    pushFollow(FOLLOW_arguments_in_enumConstant6312);
                    arguments76=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments76.getTree());

                    }
                    break;

            }

            // ../etc/JamlAttrHash.g:466:42: ( classBody )?
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==LCURLY) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: classBody
                    {
                    pushFollow(FOLLOW_classBody_in_enumConstant6315);
                    classBody77=classBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classBody77.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("enumConstant", 26);
            if ( state.backtracking>0 ) { memoize(input, 26, enumConstant_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumConstant"

    public static class interfaceTypeDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceTypeDeclaration"
    // ../etc/JamlAttrHash.g:469:1: interfaceTypeDeclaration[CommonTree modifiers] : INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody -> ^( INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody ) ;
    public final JamlAttrHashParser.interfaceTypeDeclaration_return interfaceTypeDeclaration(CommonTree modifiers) throws RecognitionException {
    traceIn("interfaceTypeDeclaration", 27);
        JamlAttrHashParser.interfaceTypeDeclaration_return retval = new JamlAttrHashParser.interfaceTypeDeclaration_return();
        retval.start = input.LT(1);
        int interfaceTypeDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token INTERFACE78=null;
        Token IDENT79=null;
        JamlAttrHashParser.genericTypeParameterList_return genericTypeParameterList80 = null;

        JamlAttrHashParser.interfaceExtendsClause_return interfaceExtendsClause81 = null;

        JamlAttrHashParser.interfaceBody_return interfaceBody82 = null;


        CommonTree INTERFACE78_tree=null;
        CommonTree IDENT79_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_INTERFACE=new RewriteRuleTokenStream(adaptor,"token INTERFACE");
        RewriteRuleSubtreeStream stream_genericTypeParameterList=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeParameterList");
        RewriteRuleSubtreeStream stream_interfaceBody=new RewriteRuleSubtreeStream(adaptor,"rule interfaceBody");
        RewriteRuleSubtreeStream stream_interfaceExtendsClause=new RewriteRuleSubtreeStream(adaptor,"rule interfaceExtendsClause");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }
            // ../etc/JamlAttrHash.g:470:5: ( INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody -> ^( INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody ) )
            // ../etc/JamlAttrHash.g:470:9: INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody
            {
            INTERFACE78=(Token)match(input,INTERFACE,FOLLOW_INTERFACE_in_interfaceTypeDeclaration6340); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTERFACE.add(INTERFACE78);

            IDENT79=(Token)match(input,IDENT,FOLLOW_IDENT_in_interfaceTypeDeclaration6342); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT79);

            // ../etc/JamlAttrHash.g:470:25: ( genericTypeParameterList )?
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==LESS_THAN) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: genericTypeParameterList
                    {
                    pushFollow(FOLLOW_genericTypeParameterList_in_interfaceTypeDeclaration6344);
                    genericTypeParameterList80=genericTypeParameterList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_genericTypeParameterList.add(genericTypeParameterList80.getTree());

                    }
                    break;

            }

            // ../etc/JamlAttrHash.g:470:51: ( interfaceExtendsClause )?
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==EXTENDS) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: interfaceExtendsClause
                    {
                    pushFollow(FOLLOW_interfaceExtendsClause_in_interfaceTypeDeclaration6347);
                    interfaceExtendsClause81=interfaceExtendsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_interfaceExtendsClause.add(interfaceExtendsClause81.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_interfaceBody_in_interfaceTypeDeclaration6350);
            interfaceBody82=interfaceBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_interfaceBody.add(interfaceBody82.getTree());


            // AST REWRITE
            // elements: interfaceExtendsClause, INTERFACE, genericTypeParameterList, interfaceBody, IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 471:9: -> ^( INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody )
            {
                // ../etc/JamlAttrHash.g:471:13: ^( INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_INTERFACE.nextNode(), root_1);

                adaptor.addChild(root_1, modifiers);
                adaptor.addChild(root_1, stream_IDENT.nextNode());
                // ../etc/JamlAttrHash.g:471:44: ( genericTypeParameterList )?
                if ( stream_genericTypeParameterList.hasNext() ) {
                    adaptor.addChild(root_1, stream_genericTypeParameterList.nextTree());

                }
                stream_genericTypeParameterList.reset();
                // ../etc/JamlAttrHash.g:471:70: ( interfaceExtendsClause )?
                if ( stream_interfaceExtendsClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_interfaceExtendsClause.nextTree());

                }
                stream_interfaceExtendsClause.reset();
                adaptor.addChild(root_1, stream_interfaceBody.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("interfaceTypeDeclaration", 27);
            if ( state.backtracking>0 ) { memoize(input, 27, interfaceTypeDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceTypeDeclaration"

    public static class typeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeList"
    // ../etc/JamlAttrHash.g:474:1: typeList : type ( COMMA type )* ;
    public final JamlAttrHashParser.typeList_return typeList() throws RecognitionException {
    traceIn("typeList", 28);
        JamlAttrHashParser.typeList_return retval = new JamlAttrHashParser.typeList_return();
        retval.start = input.LT(1);
        int typeList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA84=null;
        JamlAttrHashParser.type_return type83 = null;

        JamlAttrHashParser.type_return type85 = null;


        CommonTree COMMA84_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }
            // ../etc/JamlAttrHash.g:475:5: ( type ( COMMA type )* )
            // ../etc/JamlAttrHash.g:475:9: type ( COMMA type )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_type_in_typeList6400);
            type83=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type83.getTree());
            // ../etc/JamlAttrHash.g:475:14: ( COMMA type )*
            loop29:
            do {
                int alt29=2;
                int LA29_0 = input.LA(1);

                if ( (LA29_0==COMMA) ) {
                    alt29=1;
                }


                switch (alt29) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:475:15: COMMA type
            	    {
            	    COMMA84=(Token)match(input,COMMA,FOLLOW_COMMA_in_typeList6403); if (state.failed) return retval;
            	    pushFollow(FOLLOW_type_in_typeList6406);
            	    type85=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, type85.getTree());

            	    }
            	    break;

            	default :
            	    break loop29;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("typeList", 28);
            if ( state.backtracking>0 ) { memoize(input, 28, typeList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeList"

    public static class classBody_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classBody"
    // ../etc/JamlAttrHash.g:478:1: classBody : LCURLY ( classScopeDeclarations )* RCURLY -> ^( CLASS_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* ) ;
    public final JamlAttrHashParser.classBody_return classBody() throws RecognitionException {
    traceIn("classBody", 29);
        JamlAttrHashParser.classBody_return retval = new JamlAttrHashParser.classBody_return();
        retval.start = input.LT(1);
        int classBody_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LCURLY86=null;
        Token RCURLY88=null;
        JamlAttrHashParser.classScopeDeclarations_return classScopeDeclarations87 = null;


        CommonTree LCURLY86_tree=null;
        CommonTree RCURLY88_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_classScopeDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule classScopeDeclarations");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }
            // ../etc/JamlAttrHash.g:479:5: ( LCURLY ( classScopeDeclarations )* RCURLY -> ^( CLASS_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* ) )
            // ../etc/JamlAttrHash.g:479:9: LCURLY ( classScopeDeclarations )* RCURLY
            {
            LCURLY86=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_classBody6431); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY86);

            // ../etc/JamlAttrHash.g:479:16: ( classScopeDeclarations )*
            loop30:
            do {
                int alt30=2;
                int LA30_0 = input.LA(1);

                if ( (LA30_0==AT||LA30_0==LCURLY||LA30_0==LESS_THAN||LA30_0==SEMI||LA30_0==ABSTRACT||LA30_0==BOOLEAN||LA30_0==BYTE||(LA30_0>=CHAR && LA30_0<=CLASS)||LA30_0==DOUBLE||LA30_0==ENUM||LA30_0==FINAL||LA30_0==FLOAT||LA30_0==INTERFACE||(LA30_0>=INT && LA30_0<=NATIVE)||(LA30_0>=PRIVATE && LA30_0<=PUBLIC)||(LA30_0>=SHORT && LA30_0<=STRICTFP)||LA30_0==SYNCHRONIZED||LA30_0==TRANSIENT||(LA30_0>=VOID && LA30_0<=VOLATILE)||LA30_0==IDENT) ) {
                    alt30=1;
                }


                switch (alt30) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:0:0: classScopeDeclarations
            	    {
            	    pushFollow(FOLLOW_classScopeDeclarations_in_classBody6433);
            	    classScopeDeclarations87=classScopeDeclarations();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_classScopeDeclarations.add(classScopeDeclarations87.getTree());

            	    }
            	    break;

            	default :
            	    break loop30;
                }
            } while (true);

            RCURLY88=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_classBody6436); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY88);



            // AST REWRITE
            // elements: classScopeDeclarations
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 480:9: -> ^( CLASS_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* )
            {
                // ../etc/JamlAttrHash.g:480:13: ^( CLASS_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_TOP_LEVEL_SCOPE, LCURLY86, "CLASS_TOP_LEVEL_SCOPE"), root_1);

                // ../etc/JamlAttrHash.g:480:71: ( classScopeDeclarations )*
                while ( stream_classScopeDeclarations.hasNext() ) {
                    adaptor.addChild(root_1, stream_classScopeDeclarations.nextTree());

                }
                stream_classScopeDeclarations.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("classBody", 29);
            if ( state.backtracking>0 ) { memoize(input, 29, classBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classBody"

    public static class interfaceBody_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceBody"
    // ../etc/JamlAttrHash.g:483:1: interfaceBody : LCURLY ( interfaceScopeDeclarations )* RCURLY -> ^( INTERFACE_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( interfaceScopeDeclarations )* ) ;
    public final JamlAttrHashParser.interfaceBody_return interfaceBody() throws RecognitionException {
    traceIn("interfaceBody", 30);
        JamlAttrHashParser.interfaceBody_return retval = new JamlAttrHashParser.interfaceBody_return();
        retval.start = input.LT(1);
        int interfaceBody_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LCURLY89=null;
        Token RCURLY91=null;
        JamlAttrHashParser.interfaceScopeDeclarations_return interfaceScopeDeclarations90 = null;


        CommonTree LCURLY89_tree=null;
        CommonTree RCURLY91_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_interfaceScopeDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule interfaceScopeDeclarations");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }
            // ../etc/JamlAttrHash.g:484:5: ( LCURLY ( interfaceScopeDeclarations )* RCURLY -> ^( INTERFACE_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( interfaceScopeDeclarations )* ) )
            // ../etc/JamlAttrHash.g:484:9: LCURLY ( interfaceScopeDeclarations )* RCURLY
            {
            LCURLY89=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_interfaceBody6478); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY89);

            // ../etc/JamlAttrHash.g:484:16: ( interfaceScopeDeclarations )*
            loop31:
            do {
                int alt31=2;
                int LA31_0 = input.LA(1);

                if ( (LA31_0==AT||LA31_0==LESS_THAN||LA31_0==SEMI||LA31_0==ABSTRACT||LA31_0==BOOLEAN||LA31_0==BYTE||(LA31_0>=CHAR && LA31_0<=CLASS)||LA31_0==DOUBLE||LA31_0==ENUM||LA31_0==FINAL||LA31_0==FLOAT||LA31_0==INTERFACE||(LA31_0>=INT && LA31_0<=NATIVE)||(LA31_0>=PRIVATE && LA31_0<=PUBLIC)||(LA31_0>=SHORT && LA31_0<=STRICTFP)||LA31_0==SYNCHRONIZED||LA31_0==TRANSIENT||(LA31_0>=VOID && LA31_0<=VOLATILE)||LA31_0==IDENT) ) {
                    alt31=1;
                }


                switch (alt31) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:0:0: interfaceScopeDeclarations
            	    {
            	    pushFollow(FOLLOW_interfaceScopeDeclarations_in_interfaceBody6480);
            	    interfaceScopeDeclarations90=interfaceScopeDeclarations();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_interfaceScopeDeclarations.add(interfaceScopeDeclarations90.getTree());

            	    }
            	    break;

            	default :
            	    break loop31;
                }
            } while (true);

            RCURLY91=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_interfaceBody6483); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY91);



            // AST REWRITE
            // elements: interfaceScopeDeclarations
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 485:9: -> ^( INTERFACE_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( interfaceScopeDeclarations )* )
            {
                // ../etc/JamlAttrHash.g:485:13: ^( INTERFACE_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( interfaceScopeDeclarations )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INTERFACE_TOP_LEVEL_SCOPE, LCURLY89, "CLASS_TOP_LEVEL_SCOPE"), root_1);

                // ../etc/JamlAttrHash.g:485:75: ( interfaceScopeDeclarations )*
                while ( stream_interfaceScopeDeclarations.hasNext() ) {
                    adaptor.addChild(root_1, stream_interfaceScopeDeclarations.nextTree());

                }
                stream_interfaceScopeDeclarations.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("interfaceBody", 30);
            if ( state.backtracking>0 ) { memoize(input, 30, interfaceBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceBody"

    public static class classScopeDeclarations_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classScopeDeclarations"
    // ../etc/JamlAttrHash.g:488:1: classScopeDeclarations : ( block -> ^( CLASS_INSTANCE_INITIALIZER block ) | STATIC block -> ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block ) | modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration | SEMI );
    public final JamlAttrHashParser.classScopeDeclarations_return classScopeDeclarations() throws RecognitionException {
    traceIn("classScopeDeclarations", 31);
        JamlAttrHashParser.classScopeDeclarations_return retval = new JamlAttrHashParser.classScopeDeclarations_return();
        retval.start = input.LT(1);
        int classScopeDeclarations_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ident=null;
        Token STATIC93=null;
        Token IDENT98=null;
        Token SEMI103=null;
        Token VOID104=null;
        Token IDENT105=null;
        Token SEMI109=null;
        Token SEMI115=null;
        Token SEMI117=null;
        JamlAttrHashParser.block_return block92 = null;

        JamlAttrHashParser.block_return block94 = null;

        JamlAttrHashParser.modifierList_return modifierList95 = null;

        JamlAttrHashParser.genericTypeParameterList_return genericTypeParameterList96 = null;

        JamlAttrHashParser.type_return type97 = null;

        JamlAttrHashParser.formalParameterList_return formalParameterList99 = null;

        JamlAttrHashParser.arrayDeclaratorList_return arrayDeclaratorList100 = null;

        JamlAttrHashParser.throwsClause_return throwsClause101 = null;

        JamlAttrHashParser.block_return block102 = null;

        JamlAttrHashParser.formalParameterList_return formalParameterList106 = null;

        JamlAttrHashParser.throwsClause_return throwsClause107 = null;

        JamlAttrHashParser.block_return block108 = null;

        JamlAttrHashParser.formalParameterList_return formalParameterList110 = null;

        JamlAttrHashParser.throwsClause_return throwsClause111 = null;

        JamlAttrHashParser.block_return block112 = null;

        JamlAttrHashParser.type_return type113 = null;

        JamlAttrHashParser.classFieldDeclaratorList_return classFieldDeclaratorList114 = null;

        JamlAttrHashParser.typeDeclaration_return typeDeclaration116 = null;


        CommonTree ident_tree=null;
        CommonTree STATIC93_tree=null;
        CommonTree IDENT98_tree=null;
        CommonTree SEMI103_tree=null;
        CommonTree VOID104_tree=null;
        CommonTree IDENT105_tree=null;
        CommonTree SEMI109_tree=null;
        CommonTree SEMI115_tree=null;
        CommonTree SEMI117_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_VOID=new RewriteRuleTokenStream(adaptor,"token VOID");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_STATIC=new RewriteRuleTokenStream(adaptor,"token STATIC");
        RewriteRuleSubtreeStream stream_arrayDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclaratorList");
        RewriteRuleSubtreeStream stream_throwsClause=new RewriteRuleSubtreeStream(adaptor,"rule throwsClause");
        RewriteRuleSubtreeStream stream_modifierList=new RewriteRuleSubtreeStream(adaptor,"rule modifierList");
        RewriteRuleSubtreeStream stream_genericTypeParameterList=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeParameterList");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_classFieldDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule classFieldDeclaratorList");
        RewriteRuleSubtreeStream stream_formalParameterList=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }
            // ../etc/JamlAttrHash.g:489:5: ( block -> ^( CLASS_INSTANCE_INITIALIZER block ) | STATIC block -> ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block ) | modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration | SEMI )
            int alt41=5;
            alt41 = dfa41.predict(input);
            switch (alt41) {
                case 1 :
                    // ../etc/JamlAttrHash.g:489:9: block
                    {
                    pushFollow(FOLLOW_block_in_classScopeDeclarations6521);
                    block92=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block92.getTree());


                    // AST REWRITE
                    // elements: block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 489:25: -> ^( CLASS_INSTANCE_INITIALIZER block )
                    {
                        // ../etc/JamlAttrHash.g:489:29: ^( CLASS_INSTANCE_INITIALIZER block )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_INSTANCE_INITIALIZER, "CLASS_INSTANCE_INITIALIZER"), root_1);

                        adaptor.addChild(root_1, stream_block.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:490:9: STATIC block
                    {
                    STATIC93=(Token)match(input,STATIC,FOLLOW_STATIC_in_classScopeDeclarations6550); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STATIC.add(STATIC93);

                    pushFollow(FOLLOW_block_in_classScopeDeclarations6552);
                    block94=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block94.getTree());


                    // AST REWRITE
                    // elements: block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 490:25: -> ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block )
                    {
                        // ../etc/JamlAttrHash.g:490:29: ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_STATIC_INITIALIZER, STATIC93, "CLASS_STATIC_INITIALIZER"), root_1);

                        adaptor.addChild(root_1, stream_block.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // ../etc/JamlAttrHash.g:491:9: modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) )
                    {
                    pushFollow(FOLLOW_modifierList_in_classScopeDeclarations6575);
                    modifierList95=modifierList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_modifierList.add(modifierList95.getTree());
                    // ../etc/JamlAttrHash.g:492:9: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) )
                    int alt40=2;
                    switch ( input.LA(1) ) {
                    case LESS_THAN:
                    case VOID:
                        {
                        alt40=1;
                        }
                        break;
                    case BOOLEAN:
                    case BYTE:
                    case CHAR:
                    case DOUBLE:
                    case FLOAT:
                    case INT:
                    case LONG:
                    case SHORT:
                        {
                        int LA40_2 = input.LA(2);

                        if ( (synpred105_JamlAttrHash()) ) {
                            alt40=1;
                        }
                        else if ( (true) ) {
                            alt40=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 40, 2, input);

                            throw nvae;
                        }
                        }
                        break;
                    case IDENT:
                        {
                        int LA40_3 = input.LA(2);

                        if ( (synpred105_JamlAttrHash()) ) {
                            alt40=1;
                        }
                        else if ( (true) ) {
                            alt40=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 40, 3, input);

                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 40, 0, input);

                        throw nvae;
                    }

                    switch (alt40) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:492:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) )
                            {
                            // ../etc/JamlAttrHash.g:492:13: ( genericTypeParameterList )?
                            int alt32=2;
                            int LA32_0 = input.LA(1);

                            if ( (LA32_0==LESS_THAN) ) {
                                alt32=1;
                            }
                            switch (alt32) {
                                case 1 :
                                    // ../etc/JamlAttrHash.g:0:0: genericTypeParameterList
                                    {
                                    pushFollow(FOLLOW_genericTypeParameterList_in_classScopeDeclarations6589);
                                    genericTypeParameterList96=genericTypeParameterList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_genericTypeParameterList.add(genericTypeParameterList96.getTree());

                                    }
                                    break;

                            }

                            // ../etc/JamlAttrHash.g:493:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) )
                            int alt39=3;
                            switch ( input.LA(1) ) {
                            case BOOLEAN:
                            case BYTE:
                            case CHAR:
                            case DOUBLE:
                            case FLOAT:
                            case INT:
                            case LONG:
                            case SHORT:
                                {
                                alt39=1;
                                }
                                break;
                            case IDENT:
                                {
                                int LA39_2 = input.LA(2);

                                if ( (LA39_2==LPAREN) ) {
                                    alt39=3;
                                }
                                else if ( (LA39_2==DOT||LA39_2==LBRACK||LA39_2==LESS_THAN||LA39_2==IDENT) ) {
                                    alt39=1;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 39, 2, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case VOID:
                                {
                                alt39=2;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 39, 0, input);

                                throw nvae;
                            }

                            switch (alt39) {
                                case 1 :
                                    // ../etc/JamlAttrHash.g:493:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI )
                                    {
                                    pushFollow(FOLLOW_type_in_classScopeDeclarations6608);
                                    type97=type();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_type.add(type97.getTree());
                                    IDENT98=(Token)match(input,IDENT,FOLLOW_IDENT_in_classScopeDeclarations6610); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT98);

                                    pushFollow(FOLLOW_formalParameterList_in_classScopeDeclarations6612);
                                    formalParameterList99=formalParameterList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_formalParameterList.add(formalParameterList99.getTree());
                                    // ../etc/JamlAttrHash.g:493:48: ( arrayDeclaratorList )?
                                    int alt33=2;
                                    int LA33_0 = input.LA(1);

                                    if ( (LA33_0==LBRACK) ) {
                                        alt33=1;
                                    }
                                    switch (alt33) {
                                        case 1 :
                                            // ../etc/JamlAttrHash.g:0:0: arrayDeclaratorList
                                            {
                                            pushFollow(FOLLOW_arrayDeclaratorList_in_classScopeDeclarations6614);
                                            arrayDeclaratorList100=arrayDeclaratorList();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) stream_arrayDeclaratorList.add(arrayDeclaratorList100.getTree());

                                            }
                                            break;

                                    }

                                    // ../etc/JamlAttrHash.g:493:69: ( throwsClause )?
                                    int alt34=2;
                                    int LA34_0 = input.LA(1);

                                    if ( (LA34_0==THROWS) ) {
                                        alt34=1;
                                    }
                                    switch (alt34) {
                                        case 1 :
                                            // ../etc/JamlAttrHash.g:0:0: throwsClause
                                            {
                                            pushFollow(FOLLOW_throwsClause_in_classScopeDeclarations6617);
                                            throwsClause101=throwsClause();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) stream_throwsClause.add(throwsClause101.getTree());

                                            }
                                            break;

                                    }

                                    // ../etc/JamlAttrHash.g:493:83: ( block | SEMI )
                                    int alt35=2;
                                    int LA35_0 = input.LA(1);

                                    if ( (LA35_0==LCURLY) ) {
                                        alt35=1;
                                    }
                                    else if ( (LA35_0==SEMI) ) {
                                        alt35=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 35, 0, input);

                                        throw nvae;
                                    }
                                    switch (alt35) {
                                        case 1 :
                                            // ../etc/JamlAttrHash.g:493:84: block
                                            {
                                            pushFollow(FOLLOW_block_in_classScopeDeclarations6621);
                                            block102=block();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) stream_block.add(block102.getTree());

                                            }
                                            break;
                                        case 2 :
                                            // ../etc/JamlAttrHash.g:493:92: SEMI
                                            {
                                            SEMI103=(Token)match(input,SEMI,FOLLOW_SEMI_in_classScopeDeclarations6625); if (state.failed) return retval; 
                                            if ( state.backtracking==0 ) stream_SEMI.add(SEMI103);


                                            }
                                            break;

                                    }



                                    // AST REWRITE
                                    // elements: genericTypeParameterList, throwsClause, block, type, IDENT, formalParameterList, modifierList, arrayDeclaratorList
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 494:17: -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? )
                                    {
                                        // ../etc/JamlAttrHash.g:494:21: ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FUNCTION_METHOD_DECL, "FUNCTION_METHOD_DECL"), root_1);

                                        adaptor.addChild(root_1, stream_modifierList.nextTree());
                                        // ../etc/JamlAttrHash.g:494:57: ( genericTypeParameterList )?
                                        if ( stream_genericTypeParameterList.hasNext() ) {
                                            adaptor.addChild(root_1, stream_genericTypeParameterList.nextTree());

                                        }
                                        stream_genericTypeParameterList.reset();
                                        adaptor.addChild(root_1, stream_type.nextTree());
                                        adaptor.addChild(root_1, stream_IDENT.nextNode());
                                        adaptor.addChild(root_1, stream_formalParameterList.nextTree());
                                        // ../etc/JamlAttrHash.g:494:114: ( arrayDeclaratorList )?
                                        if ( stream_arrayDeclaratorList.hasNext() ) {
                                            adaptor.addChild(root_1, stream_arrayDeclaratorList.nextTree());

                                        }
                                        stream_arrayDeclaratorList.reset();
                                        // ../etc/JamlAttrHash.g:494:135: ( throwsClause )?
                                        if ( stream_throwsClause.hasNext() ) {
                                            adaptor.addChild(root_1, stream_throwsClause.nextTree());

                                        }
                                        stream_throwsClause.reset();
                                        // ../etc/JamlAttrHash.g:494:149: ( block )?
                                        if ( stream_block.hasNext() ) {
                                            adaptor.addChild(root_1, stream_block.nextTree());

                                        }
                                        stream_block.reset();

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;
                                case 2 :
                                    // ../etc/JamlAttrHash.g:495:17: VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI )
                                    {
                                    VOID104=(Token)match(input,VOID,FOLLOW_VOID_in_classScopeDeclarations6687); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_VOID.add(VOID104);

                                    IDENT105=(Token)match(input,IDENT,FOLLOW_IDENT_in_classScopeDeclarations6689); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT105);

                                    pushFollow(FOLLOW_formalParameterList_in_classScopeDeclarations6691);
                                    formalParameterList106=formalParameterList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_formalParameterList.add(formalParameterList106.getTree());
                                    // ../etc/JamlAttrHash.g:495:48: ( throwsClause )?
                                    int alt36=2;
                                    int LA36_0 = input.LA(1);

                                    if ( (LA36_0==THROWS) ) {
                                        alt36=1;
                                    }
                                    switch (alt36) {
                                        case 1 :
                                            // ../etc/JamlAttrHash.g:0:0: throwsClause
                                            {
                                            pushFollow(FOLLOW_throwsClause_in_classScopeDeclarations6693);
                                            throwsClause107=throwsClause();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) stream_throwsClause.add(throwsClause107.getTree());

                                            }
                                            break;

                                    }

                                    // ../etc/JamlAttrHash.g:495:62: ( block | SEMI )
                                    int alt37=2;
                                    int LA37_0 = input.LA(1);

                                    if ( (LA37_0==LCURLY) ) {
                                        alt37=1;
                                    }
                                    else if ( (LA37_0==SEMI) ) {
                                        alt37=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 37, 0, input);

                                        throw nvae;
                                    }
                                    switch (alt37) {
                                        case 1 :
                                            // ../etc/JamlAttrHash.g:495:63: block
                                            {
                                            pushFollow(FOLLOW_block_in_classScopeDeclarations6697);
                                            block108=block();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) stream_block.add(block108.getTree());

                                            }
                                            break;
                                        case 2 :
                                            // ../etc/JamlAttrHash.g:495:71: SEMI
                                            {
                                            SEMI109=(Token)match(input,SEMI,FOLLOW_SEMI_in_classScopeDeclarations6701); if (state.failed) return retval; 
                                            if ( state.backtracking==0 ) stream_SEMI.add(SEMI109);


                                            }
                                            break;

                                    }



                                    // AST REWRITE
                                    // elements: block, formalParameterList, modifierList, IDENT, throwsClause, genericTypeParameterList
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 496:17: -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? )
                                    {
                                        // ../etc/JamlAttrHash.g:496:21: ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VOID_METHOD_DECL, "VOID_METHOD_DECL"), root_1);

                                        adaptor.addChild(root_1, stream_modifierList.nextTree());
                                        // ../etc/JamlAttrHash.g:496:53: ( genericTypeParameterList )?
                                        if ( stream_genericTypeParameterList.hasNext() ) {
                                            adaptor.addChild(root_1, stream_genericTypeParameterList.nextTree());

                                        }
                                        stream_genericTypeParameterList.reset();
                                        adaptor.addChild(root_1, stream_IDENT.nextNode());
                                        adaptor.addChild(root_1, stream_formalParameterList.nextTree());
                                        // ../etc/JamlAttrHash.g:496:105: ( throwsClause )?
                                        if ( stream_throwsClause.hasNext() ) {
                                            adaptor.addChild(root_1, stream_throwsClause.nextTree());

                                        }
                                        stream_throwsClause.reset();
                                        // ../etc/JamlAttrHash.g:496:119: ( block )?
                                        if ( stream_block.hasNext() ) {
                                            adaptor.addChild(root_1, stream_block.nextTree());

                                        }
                                        stream_block.reset();

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;
                                case 3 :
                                    // ../etc/JamlAttrHash.g:497:17: ident= IDENT formalParameterList ( throwsClause )? block
                                    {
                                    ident=(Token)match(input,IDENT,FOLLOW_IDENT_in_classScopeDeclarations6760); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(ident);

                                    pushFollow(FOLLOW_formalParameterList_in_classScopeDeclarations6762);
                                    formalParameterList110=formalParameterList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_formalParameterList.add(formalParameterList110.getTree());
                                    // ../etc/JamlAttrHash.g:497:49: ( throwsClause )?
                                    int alt38=2;
                                    int LA38_0 = input.LA(1);

                                    if ( (LA38_0==THROWS) ) {
                                        alt38=1;
                                    }
                                    switch (alt38) {
                                        case 1 :
                                            // ../etc/JamlAttrHash.g:0:0: throwsClause
                                            {
                                            pushFollow(FOLLOW_throwsClause_in_classScopeDeclarations6764);
                                            throwsClause111=throwsClause();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) stream_throwsClause.add(throwsClause111.getTree());

                                            }
                                            break;

                                    }

                                    pushFollow(FOLLOW_block_in_classScopeDeclarations6767);
                                    block112=block();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_block.add(block112.getTree());


                                    // AST REWRITE
                                    // elements: genericTypeParameterList, block, modifierList, formalParameterList, throwsClause
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 498:17: -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block )
                                    {
                                        // ../etc/JamlAttrHash.g:498:21: ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONSTRUCTOR_DECL, ident, "CONSTRUCTOR_DECL"), root_1);

                                        adaptor.addChild(root_1, stream_modifierList.nextTree());
                                        // ../etc/JamlAttrHash.g:498:81: ( genericTypeParameterList )?
                                        if ( stream_genericTypeParameterList.hasNext() ) {
                                            adaptor.addChild(root_1, stream_genericTypeParameterList.nextTree());

                                        }
                                        stream_genericTypeParameterList.reset();
                                        adaptor.addChild(root_1, stream_formalParameterList.nextTree());
                                        // ../etc/JamlAttrHash.g:498:127: ( throwsClause )?
                                        if ( stream_throwsClause.hasNext() ) {
                                            adaptor.addChild(root_1, stream_throwsClause.nextTree());

                                        }
                                        stream_throwsClause.reset();
                                        adaptor.addChild(root_1, stream_block.nextTree());

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // ../etc/JamlAttrHash.g:500:13: type classFieldDeclaratorList SEMI
                            {
                            pushFollow(FOLLOW_type_in_classScopeDeclarations6831);
                            type113=type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_type.add(type113.getTree());
                            pushFollow(FOLLOW_classFieldDeclaratorList_in_classScopeDeclarations6833);
                            classFieldDeclaratorList114=classFieldDeclaratorList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_classFieldDeclaratorList.add(classFieldDeclaratorList114.getTree());
                            SEMI115=(Token)match(input,SEMI,FOLLOW_SEMI_in_classScopeDeclarations6835); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMI.add(SEMI115);



                            // AST REWRITE
                            // elements: classFieldDeclaratorList, modifierList, type
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 501:13: -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList )
                            {
                                // ../etc/JamlAttrHash.g:501:17: ^( VAR_DECLARATION modifierList type classFieldDeclaratorList )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_DECLARATION, "VAR_DECLARATION"), root_1);

                                adaptor.addChild(root_1, stream_modifierList.nextTree());
                                adaptor.addChild(root_1, stream_type.nextTree());
                                adaptor.addChild(root_1, stream_classFieldDeclaratorList.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // ../etc/JamlAttrHash.g:503:9: typeDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_typeDeclaration_in_classScopeDeclarations6880);
                    typeDeclaration116=typeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDeclaration116.getTree());

                    }
                    break;
                case 5 :
                    // ../etc/JamlAttrHash.g:504:9: SEMI
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SEMI117=(Token)match(input,SEMI,FOLLOW_SEMI_in_classScopeDeclarations6890); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("classScopeDeclarations", 31);
            if ( state.backtracking>0 ) { memoize(input, 31, classScopeDeclarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classScopeDeclarations"

    public static class interfaceScopeDeclarations_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceScopeDeclarations"
    // ../etc/JamlAttrHash.g:507:1: interfaceScopeDeclarations : ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) ) | typeDeclaration | SEMI );
    public final JamlAttrHashParser.interfaceScopeDeclarations_return interfaceScopeDeclarations() throws RecognitionException {
    traceIn("interfaceScopeDeclarations", 32);
        JamlAttrHashParser.interfaceScopeDeclarations_return retval = new JamlAttrHashParser.interfaceScopeDeclarations_return();
        retval.start = input.LT(1);
        int interfaceScopeDeclarations_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT121=null;
        Token SEMI125=null;
        Token VOID126=null;
        Token IDENT127=null;
        Token SEMI130=null;
        Token SEMI133=null;
        Token SEMI135=null;
        JamlAttrHashParser.modifierList_return modifierList118 = null;

        JamlAttrHashParser.genericTypeParameterList_return genericTypeParameterList119 = null;

        JamlAttrHashParser.type_return type120 = null;

        JamlAttrHashParser.formalParameterList_return formalParameterList122 = null;

        JamlAttrHashParser.arrayDeclaratorList_return arrayDeclaratorList123 = null;

        JamlAttrHashParser.throwsClause_return throwsClause124 = null;

        JamlAttrHashParser.formalParameterList_return formalParameterList128 = null;

        JamlAttrHashParser.throwsClause_return throwsClause129 = null;

        JamlAttrHashParser.type_return type131 = null;

        JamlAttrHashParser.interfaceFieldDeclaratorList_return interfaceFieldDeclaratorList132 = null;

        JamlAttrHashParser.typeDeclaration_return typeDeclaration134 = null;


        CommonTree IDENT121_tree=null;
        CommonTree SEMI125_tree=null;
        CommonTree VOID126_tree=null;
        CommonTree IDENT127_tree=null;
        CommonTree SEMI130_tree=null;
        CommonTree SEMI133_tree=null;
        CommonTree SEMI135_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_VOID=new RewriteRuleTokenStream(adaptor,"token VOID");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleSubtreeStream stream_arrayDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclaratorList");
        RewriteRuleSubtreeStream stream_throwsClause=new RewriteRuleSubtreeStream(adaptor,"rule throwsClause");
        RewriteRuleSubtreeStream stream_modifierList=new RewriteRuleSubtreeStream(adaptor,"rule modifierList");
        RewriteRuleSubtreeStream stream_genericTypeParameterList=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeParameterList");
        RewriteRuleSubtreeStream stream_interfaceFieldDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule interfaceFieldDeclaratorList");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_formalParameterList=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }
            // ../etc/JamlAttrHash.g:508:5: ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) ) | typeDeclaration | SEMI )
            int alt48=3;
            alt48 = dfa48.predict(input);
            switch (alt48) {
                case 1 :
                    // ../etc/JamlAttrHash.g:508:9: modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) )
                    {
                    pushFollow(FOLLOW_modifierList_in_interfaceScopeDeclarations6922);
                    modifierList118=modifierList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_modifierList.add(modifierList118.getTree());
                    // ../etc/JamlAttrHash.g:509:9: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) )
                    int alt47=2;
                    switch ( input.LA(1) ) {
                    case LESS_THAN:
                    case VOID:
                        {
                        alt47=1;
                        }
                        break;
                    case BOOLEAN:
                    case BYTE:
                    case CHAR:
                    case DOUBLE:
                    case FLOAT:
                    case INT:
                    case LONG:
                    case SHORT:
                        {
                        int LA47_2 = input.LA(2);

                        if ( (synpred113_JamlAttrHash()) ) {
                            alt47=1;
                        }
                        else if ( (true) ) {
                            alt47=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 47, 2, input);

                            throw nvae;
                        }
                        }
                        break;
                    case IDENT:
                        {
                        int LA47_3 = input.LA(2);

                        if ( (synpred113_JamlAttrHash()) ) {
                            alt47=1;
                        }
                        else if ( (true) ) {
                            alt47=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 47, 3, input);

                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 47, 0, input);

                        throw nvae;
                    }

                    switch (alt47) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:509:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) )
                            {
                            // ../etc/JamlAttrHash.g:509:13: ( genericTypeParameterList )?
                            int alt42=2;
                            int LA42_0 = input.LA(1);

                            if ( (LA42_0==LESS_THAN) ) {
                                alt42=1;
                            }
                            switch (alt42) {
                                case 1 :
                                    // ../etc/JamlAttrHash.g:0:0: genericTypeParameterList
                                    {
                                    pushFollow(FOLLOW_genericTypeParameterList_in_interfaceScopeDeclarations6936);
                                    genericTypeParameterList119=genericTypeParameterList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_genericTypeParameterList.add(genericTypeParameterList119.getTree());

                                    }
                                    break;

                            }

                            // ../etc/JamlAttrHash.g:510:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) )
                            int alt46=2;
                            int LA46_0 = input.LA(1);

                            if ( (LA46_0==BOOLEAN||LA46_0==BYTE||LA46_0==CHAR||LA46_0==DOUBLE||LA46_0==FLOAT||(LA46_0>=INT && LA46_0<=LONG)||LA46_0==SHORT||LA46_0==IDENT) ) {
                                alt46=1;
                            }
                            else if ( (LA46_0==VOID) ) {
                                alt46=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 46, 0, input);

                                throw nvae;
                            }
                            switch (alt46) {
                                case 1 :
                                    // ../etc/JamlAttrHash.g:510:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI
                                    {
                                    pushFollow(FOLLOW_type_in_interfaceScopeDeclarations6955);
                                    type120=type();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_type.add(type120.getTree());
                                    IDENT121=(Token)match(input,IDENT,FOLLOW_IDENT_in_interfaceScopeDeclarations6957); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT121);

                                    pushFollow(FOLLOW_formalParameterList_in_interfaceScopeDeclarations6959);
                                    formalParameterList122=formalParameterList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_formalParameterList.add(formalParameterList122.getTree());
                                    // ../etc/JamlAttrHash.g:510:48: ( arrayDeclaratorList )?
                                    int alt43=2;
                                    int LA43_0 = input.LA(1);

                                    if ( (LA43_0==LBRACK) ) {
                                        alt43=1;
                                    }
                                    switch (alt43) {
                                        case 1 :
                                            // ../etc/JamlAttrHash.g:0:0: arrayDeclaratorList
                                            {
                                            pushFollow(FOLLOW_arrayDeclaratorList_in_interfaceScopeDeclarations6961);
                                            arrayDeclaratorList123=arrayDeclaratorList();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) stream_arrayDeclaratorList.add(arrayDeclaratorList123.getTree());

                                            }
                                            break;

                                    }

                                    // ../etc/JamlAttrHash.g:510:69: ( throwsClause )?
                                    int alt44=2;
                                    int LA44_0 = input.LA(1);

                                    if ( (LA44_0==THROWS) ) {
                                        alt44=1;
                                    }
                                    switch (alt44) {
                                        case 1 :
                                            // ../etc/JamlAttrHash.g:0:0: throwsClause
                                            {
                                            pushFollow(FOLLOW_throwsClause_in_interfaceScopeDeclarations6964);
                                            throwsClause124=throwsClause();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) stream_throwsClause.add(throwsClause124.getTree());

                                            }
                                            break;

                                    }

                                    SEMI125=(Token)match(input,SEMI,FOLLOW_SEMI_in_interfaceScopeDeclarations6967); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI125);



                                    // AST REWRITE
                                    // elements: genericTypeParameterList, type, throwsClause, IDENT, modifierList, arrayDeclaratorList, formalParameterList
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 511:17: -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? )
                                    {
                                        // ../etc/JamlAttrHash.g:511:21: ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FUNCTION_METHOD_DECL, "FUNCTION_METHOD_DECL"), root_1);

                                        adaptor.addChild(root_1, stream_modifierList.nextTree());
                                        // ../etc/JamlAttrHash.g:511:57: ( genericTypeParameterList )?
                                        if ( stream_genericTypeParameterList.hasNext() ) {
                                            adaptor.addChild(root_1, stream_genericTypeParameterList.nextTree());

                                        }
                                        stream_genericTypeParameterList.reset();
                                        adaptor.addChild(root_1, stream_type.nextTree());
                                        adaptor.addChild(root_1, stream_IDENT.nextNode());
                                        adaptor.addChild(root_1, stream_formalParameterList.nextTree());
                                        // ../etc/JamlAttrHash.g:511:114: ( arrayDeclaratorList )?
                                        if ( stream_arrayDeclaratorList.hasNext() ) {
                                            adaptor.addChild(root_1, stream_arrayDeclaratorList.nextTree());

                                        }
                                        stream_arrayDeclaratorList.reset();
                                        // ../etc/JamlAttrHash.g:511:135: ( throwsClause )?
                                        if ( stream_throwsClause.hasNext() ) {
                                            adaptor.addChild(root_1, stream_throwsClause.nextTree());

                                        }
                                        stream_throwsClause.reset();

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;
                                case 2 :
                                    // ../etc/JamlAttrHash.g:512:17: VOID IDENT formalParameterList ( throwsClause )? SEMI
                                    {
                                    VOID126=(Token)match(input,VOID,FOLLOW_VOID_in_interfaceScopeDeclarations7025); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_VOID.add(VOID126);

                                    IDENT127=(Token)match(input,IDENT,FOLLOW_IDENT_in_interfaceScopeDeclarations7027); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT127);

                                    pushFollow(FOLLOW_formalParameterList_in_interfaceScopeDeclarations7029);
                                    formalParameterList128=formalParameterList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_formalParameterList.add(formalParameterList128.getTree());
                                    // ../etc/JamlAttrHash.g:512:48: ( throwsClause )?
                                    int alt45=2;
                                    int LA45_0 = input.LA(1);

                                    if ( (LA45_0==THROWS) ) {
                                        alt45=1;
                                    }
                                    switch (alt45) {
                                        case 1 :
                                            // ../etc/JamlAttrHash.g:0:0: throwsClause
                                            {
                                            pushFollow(FOLLOW_throwsClause_in_interfaceScopeDeclarations7031);
                                            throwsClause129=throwsClause();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) stream_throwsClause.add(throwsClause129.getTree());

                                            }
                                            break;

                                    }

                                    SEMI130=(Token)match(input,SEMI,FOLLOW_SEMI_in_interfaceScopeDeclarations7034); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI130);



                                    // AST REWRITE
                                    // elements: throwsClause, modifierList, formalParameterList, genericTypeParameterList, IDENT
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 513:17: -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? )
                                    {
                                        // ../etc/JamlAttrHash.g:513:21: ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VOID_METHOD_DECL, "VOID_METHOD_DECL"), root_1);

                                        adaptor.addChild(root_1, stream_modifierList.nextTree());
                                        // ../etc/JamlAttrHash.g:513:53: ( genericTypeParameterList )?
                                        if ( stream_genericTypeParameterList.hasNext() ) {
                                            adaptor.addChild(root_1, stream_genericTypeParameterList.nextTree());

                                        }
                                        stream_genericTypeParameterList.reset();
                                        adaptor.addChild(root_1, stream_IDENT.nextNode());
                                        adaptor.addChild(root_1, stream_formalParameterList.nextTree());
                                        // ../etc/JamlAttrHash.g:513:105: ( throwsClause )?
                                        if ( stream_throwsClause.hasNext() ) {
                                            adaptor.addChild(root_1, stream_throwsClause.nextTree());

                                        }
                                        stream_throwsClause.reset();

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // ../etc/JamlAttrHash.g:515:13: type interfaceFieldDeclaratorList SEMI
                            {
                            pushFollow(FOLLOW_type_in_interfaceScopeDeclarations7097);
                            type131=type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_type.add(type131.getTree());
                            pushFollow(FOLLOW_interfaceFieldDeclaratorList_in_interfaceScopeDeclarations7099);
                            interfaceFieldDeclaratorList132=interfaceFieldDeclaratorList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_interfaceFieldDeclaratorList.add(interfaceFieldDeclaratorList132.getTree());
                            SEMI133=(Token)match(input,SEMI,FOLLOW_SEMI_in_interfaceScopeDeclarations7101); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMI.add(SEMI133);



                            // AST REWRITE
                            // elements: type, interfaceFieldDeclaratorList, modifierList
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 516:13: -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList )
                            {
                                // ../etc/JamlAttrHash.g:516:17: ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_DECLARATION, "VAR_DECLARATION"), root_1);

                                adaptor.addChild(root_1, stream_modifierList.nextTree());
                                adaptor.addChild(root_1, stream_type.nextTree());
                                adaptor.addChild(root_1, stream_interfaceFieldDeclaratorList.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:518:9: typeDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_typeDeclaration_in_interfaceScopeDeclarations7146);
                    typeDeclaration134=typeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDeclaration134.getTree());

                    }
                    break;
                case 3 :
                    // ../etc/JamlAttrHash.g:519:9: SEMI
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SEMI135=(Token)match(input,SEMI,FOLLOW_SEMI_in_interfaceScopeDeclarations7156); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("interfaceScopeDeclarations", 32);
            if ( state.backtracking>0 ) { memoize(input, 32, interfaceScopeDeclarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceScopeDeclarations"

    public static class classFieldDeclaratorList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classFieldDeclaratorList"
    // ../etc/JamlAttrHash.g:522:1: classFieldDeclaratorList : classFieldDeclarator ( COMMA classFieldDeclarator )* -> ^( VAR_DECLARATOR_LIST ( classFieldDeclarator )+ ) ;
    public final JamlAttrHashParser.classFieldDeclaratorList_return classFieldDeclaratorList() throws RecognitionException {
    traceIn("classFieldDeclaratorList", 33);
        JamlAttrHashParser.classFieldDeclaratorList_return retval = new JamlAttrHashParser.classFieldDeclaratorList_return();
        retval.start = input.LT(1);
        int classFieldDeclaratorList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA137=null;
        JamlAttrHashParser.classFieldDeclarator_return classFieldDeclarator136 = null;

        JamlAttrHashParser.classFieldDeclarator_return classFieldDeclarator138 = null;


        CommonTree COMMA137_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_classFieldDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule classFieldDeclarator");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }
            // ../etc/JamlAttrHash.g:523:5: ( classFieldDeclarator ( COMMA classFieldDeclarator )* -> ^( VAR_DECLARATOR_LIST ( classFieldDeclarator )+ ) )
            // ../etc/JamlAttrHash.g:523:9: classFieldDeclarator ( COMMA classFieldDeclarator )*
            {
            pushFollow(FOLLOW_classFieldDeclarator_in_classFieldDeclaratorList7176);
            classFieldDeclarator136=classFieldDeclarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classFieldDeclarator.add(classFieldDeclarator136.getTree());
            // ../etc/JamlAttrHash.g:523:30: ( COMMA classFieldDeclarator )*
            loop49:
            do {
                int alt49=2;
                int LA49_0 = input.LA(1);

                if ( (LA49_0==COMMA) ) {
                    alt49=1;
                }


                switch (alt49) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:523:31: COMMA classFieldDeclarator
            	    {
            	    COMMA137=(Token)match(input,COMMA,FOLLOW_COMMA_in_classFieldDeclaratorList7179); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA137);

            	    pushFollow(FOLLOW_classFieldDeclarator_in_classFieldDeclaratorList7181);
            	    classFieldDeclarator138=classFieldDeclarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_classFieldDeclarator.add(classFieldDeclarator138.getTree());

            	    }
            	    break;

            	default :
            	    break loop49;
                }
            } while (true);



            // AST REWRITE
            // elements: classFieldDeclarator
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 524:9: -> ^( VAR_DECLARATOR_LIST ( classFieldDeclarator )+ )
            {
                // ../etc/JamlAttrHash.g:524:13: ^( VAR_DECLARATOR_LIST ( classFieldDeclarator )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_DECLARATOR_LIST, "VAR_DECLARATOR_LIST"), root_1);

                if ( !(stream_classFieldDeclarator.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_classFieldDeclarator.hasNext() ) {
                    adaptor.addChild(root_1, stream_classFieldDeclarator.nextTree());

                }
                stream_classFieldDeclarator.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("classFieldDeclaratorList", 33);
            if ( state.backtracking>0 ) { memoize(input, 33, classFieldDeclaratorList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classFieldDeclaratorList"

    public static class classFieldDeclarator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classFieldDeclarator"
    // ../etc/JamlAttrHash.g:527:1: classFieldDeclarator : variableDeclaratorId ( ASSIGN variableInitializer )? -> ^( VAR_DECLARATOR variableDeclaratorId ( variableInitializer )? ) ;
    public final JamlAttrHashParser.classFieldDeclarator_return classFieldDeclarator() throws RecognitionException {
    traceIn("classFieldDeclarator", 34);
        JamlAttrHashParser.classFieldDeclarator_return retval = new JamlAttrHashParser.classFieldDeclarator_return();
        retval.start = input.LT(1);
        int classFieldDeclarator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ASSIGN140=null;
        JamlAttrHashParser.variableDeclaratorId_return variableDeclaratorId139 = null;

        JamlAttrHashParser.variableInitializer_return variableInitializer141 = null;


        CommonTree ASSIGN140_tree=null;
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_variableDeclaratorId=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorId");
        RewriteRuleSubtreeStream stream_variableInitializer=new RewriteRuleSubtreeStream(adaptor,"rule variableInitializer");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }
            // ../etc/JamlAttrHash.g:528:5: ( variableDeclaratorId ( ASSIGN variableInitializer )? -> ^( VAR_DECLARATOR variableDeclaratorId ( variableInitializer )? ) )
            // ../etc/JamlAttrHash.g:528:9: variableDeclaratorId ( ASSIGN variableInitializer )?
            {
            pushFollow(FOLLOW_variableDeclaratorId_in_classFieldDeclarator7220);
            variableDeclaratorId139=variableDeclaratorId();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableDeclaratorId.add(variableDeclaratorId139.getTree());
            // ../etc/JamlAttrHash.g:528:30: ( ASSIGN variableInitializer )?
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==ASSIGN) ) {
                alt50=1;
            }
            switch (alt50) {
                case 1 :
                    // ../etc/JamlAttrHash.g:528:31: ASSIGN variableInitializer
                    {
                    ASSIGN140=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_classFieldDeclarator7223); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN140);

                    pushFollow(FOLLOW_variableInitializer_in_classFieldDeclarator7225);
                    variableInitializer141=variableInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variableInitializer.add(variableInitializer141.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: variableInitializer, variableDeclaratorId
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 529:9: -> ^( VAR_DECLARATOR variableDeclaratorId ( variableInitializer )? )
            {
                // ../etc/JamlAttrHash.g:529:13: ^( VAR_DECLARATOR variableDeclaratorId ( variableInitializer )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_DECLARATOR, "VAR_DECLARATOR"), root_1);

                adaptor.addChild(root_1, stream_variableDeclaratorId.nextTree());
                // ../etc/JamlAttrHash.g:529:51: ( variableInitializer )?
                if ( stream_variableInitializer.hasNext() ) {
                    adaptor.addChild(root_1, stream_variableInitializer.nextTree());

                }
                stream_variableInitializer.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("classFieldDeclarator", 34);
            if ( state.backtracking>0 ) { memoize(input, 34, classFieldDeclarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classFieldDeclarator"

    public static class interfaceFieldDeclaratorList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceFieldDeclaratorList"
    // ../etc/JamlAttrHash.g:532:1: interfaceFieldDeclaratorList : interfaceFieldDeclarator ( COMMA interfaceFieldDeclarator )* -> ^( VAR_DECLARATOR_LIST ( interfaceFieldDeclarator )+ ) ;
    public final JamlAttrHashParser.interfaceFieldDeclaratorList_return interfaceFieldDeclaratorList() throws RecognitionException {
    traceIn("interfaceFieldDeclaratorList", 35);
        JamlAttrHashParser.interfaceFieldDeclaratorList_return retval = new JamlAttrHashParser.interfaceFieldDeclaratorList_return();
        retval.start = input.LT(1);
        int interfaceFieldDeclaratorList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA143=null;
        JamlAttrHashParser.interfaceFieldDeclarator_return interfaceFieldDeclarator142 = null;

        JamlAttrHashParser.interfaceFieldDeclarator_return interfaceFieldDeclarator144 = null;


        CommonTree COMMA143_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_interfaceFieldDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule interfaceFieldDeclarator");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }
            // ../etc/JamlAttrHash.g:533:5: ( interfaceFieldDeclarator ( COMMA interfaceFieldDeclarator )* -> ^( VAR_DECLARATOR_LIST ( interfaceFieldDeclarator )+ ) )
            // ../etc/JamlAttrHash.g:533:9: interfaceFieldDeclarator ( COMMA interfaceFieldDeclarator )*
            {
            pushFollow(FOLLOW_interfaceFieldDeclarator_in_interfaceFieldDeclaratorList7270);
            interfaceFieldDeclarator142=interfaceFieldDeclarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_interfaceFieldDeclarator.add(interfaceFieldDeclarator142.getTree());
            // ../etc/JamlAttrHash.g:533:34: ( COMMA interfaceFieldDeclarator )*
            loop51:
            do {
                int alt51=2;
                int LA51_0 = input.LA(1);

                if ( (LA51_0==COMMA) ) {
                    alt51=1;
                }


                switch (alt51) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:533:35: COMMA interfaceFieldDeclarator
            	    {
            	    COMMA143=(Token)match(input,COMMA,FOLLOW_COMMA_in_interfaceFieldDeclaratorList7273); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA143);

            	    pushFollow(FOLLOW_interfaceFieldDeclarator_in_interfaceFieldDeclaratorList7275);
            	    interfaceFieldDeclarator144=interfaceFieldDeclarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_interfaceFieldDeclarator.add(interfaceFieldDeclarator144.getTree());

            	    }
            	    break;

            	default :
            	    break loop51;
                }
            } while (true);



            // AST REWRITE
            // elements: interfaceFieldDeclarator
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 534:9: -> ^( VAR_DECLARATOR_LIST ( interfaceFieldDeclarator )+ )
            {
                // ../etc/JamlAttrHash.g:534:13: ^( VAR_DECLARATOR_LIST ( interfaceFieldDeclarator )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_DECLARATOR_LIST, "VAR_DECLARATOR_LIST"), root_1);

                if ( !(stream_interfaceFieldDeclarator.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_interfaceFieldDeclarator.hasNext() ) {
                    adaptor.addChild(root_1, stream_interfaceFieldDeclarator.nextTree());

                }
                stream_interfaceFieldDeclarator.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("interfaceFieldDeclaratorList", 35);
            if ( state.backtracking>0 ) { memoize(input, 35, interfaceFieldDeclaratorList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceFieldDeclaratorList"

    public static class interfaceFieldDeclarator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceFieldDeclarator"
    // ../etc/JamlAttrHash.g:537:1: interfaceFieldDeclarator : variableDeclaratorId ASSIGN variableInitializer -> ^( VAR_DECLARATOR variableDeclaratorId variableInitializer ) ;
    public final JamlAttrHashParser.interfaceFieldDeclarator_return interfaceFieldDeclarator() throws RecognitionException {
    traceIn("interfaceFieldDeclarator", 36);
        JamlAttrHashParser.interfaceFieldDeclarator_return retval = new JamlAttrHashParser.interfaceFieldDeclarator_return();
        retval.start = input.LT(1);
        int interfaceFieldDeclarator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ASSIGN146=null;
        JamlAttrHashParser.variableDeclaratorId_return variableDeclaratorId145 = null;

        JamlAttrHashParser.variableInitializer_return variableInitializer147 = null;


        CommonTree ASSIGN146_tree=null;
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_variableDeclaratorId=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorId");
        RewriteRuleSubtreeStream stream_variableInitializer=new RewriteRuleSubtreeStream(adaptor,"rule variableInitializer");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }
            // ../etc/JamlAttrHash.g:538:5: ( variableDeclaratorId ASSIGN variableInitializer -> ^( VAR_DECLARATOR variableDeclaratorId variableInitializer ) )
            // ../etc/JamlAttrHash.g:538:9: variableDeclaratorId ASSIGN variableInitializer
            {
            pushFollow(FOLLOW_variableDeclaratorId_in_interfaceFieldDeclarator7314);
            variableDeclaratorId145=variableDeclaratorId();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableDeclaratorId.add(variableDeclaratorId145.getTree());
            ASSIGN146=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_interfaceFieldDeclarator7316); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN146);

            pushFollow(FOLLOW_variableInitializer_in_interfaceFieldDeclarator7318);
            variableInitializer147=variableInitializer();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableInitializer.add(variableInitializer147.getTree());


            // AST REWRITE
            // elements: variableDeclaratorId, variableInitializer
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 539:9: -> ^( VAR_DECLARATOR variableDeclaratorId variableInitializer )
            {
                // ../etc/JamlAttrHash.g:539:13: ^( VAR_DECLARATOR variableDeclaratorId variableInitializer )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_DECLARATOR, "VAR_DECLARATOR"), root_1);

                adaptor.addChild(root_1, stream_variableDeclaratorId.nextTree());
                adaptor.addChild(root_1, stream_variableInitializer.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("interfaceFieldDeclarator", 36);
            if ( state.backtracking>0 ) { memoize(input, 36, interfaceFieldDeclarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceFieldDeclarator"

    public static class variableDeclaratorId_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclaratorId"
    // ../etc/JamlAttrHash.g:542:1: variableDeclaratorId : IDENT ( arrayDeclaratorList )? ;
    public final JamlAttrHashParser.variableDeclaratorId_return variableDeclaratorId() throws RecognitionException {
    traceIn("variableDeclaratorId", 37);
        JamlAttrHashParser.variableDeclaratorId_return retval = new JamlAttrHashParser.variableDeclaratorId_return();
        retval.start = input.LT(1);
        int variableDeclaratorId_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT148=null;
        JamlAttrHashParser.arrayDeclaratorList_return arrayDeclaratorList149 = null;


        CommonTree IDENT148_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }
            // ../etc/JamlAttrHash.g:543:5: ( IDENT ( arrayDeclaratorList )? )
            // ../etc/JamlAttrHash.g:543:9: IDENT ( arrayDeclaratorList )?
            {
            root_0 = (CommonTree)adaptor.nil();

            IDENT148=(Token)match(input,IDENT,FOLLOW_IDENT_in_variableDeclaratorId7360); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT148_tree = (CommonTree)adaptor.create(IDENT148);
            root_0 = (CommonTree)adaptor.becomeRoot(IDENT148_tree, root_0);
            }
            // ../etc/JamlAttrHash.g:543:16: ( arrayDeclaratorList )?
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==LBRACK) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: arrayDeclaratorList
                    {
                    pushFollow(FOLLOW_arrayDeclaratorList_in_variableDeclaratorId7363);
                    arrayDeclaratorList149=arrayDeclaratorList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayDeclaratorList149.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("variableDeclaratorId", 37);
            if ( state.backtracking>0 ) { memoize(input, 37, variableDeclaratorId_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableDeclaratorId"

    public static class variableInitializer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableInitializer"
    // ../etc/JamlAttrHash.g:546:1: variableInitializer : ( arrayInitializer | expression );
    public final JamlAttrHashParser.variableInitializer_return variableInitializer() throws RecognitionException {
    traceIn("variableInitializer", 38);
        JamlAttrHashParser.variableInitializer_return retval = new JamlAttrHashParser.variableInitializer_return();
        retval.start = input.LT(1);
        int variableInitializer_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.arrayInitializer_return arrayInitializer150 = null;

        JamlAttrHashParser.expression_return expression151 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }
            // ../etc/JamlAttrHash.g:547:5: ( arrayInitializer | expression )
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==LCURLY) ) {
                alt53=1;
            }
            else if ( (LA53_0==DEC||LA53_0==INC||LA53_0==LESS_THAN||LA53_0==LOGICAL_NOT||(LA53_0>=LPAREN && LA53_0<=MINUS)||LA53_0==NOT||LA53_0==PLUS||LA53_0==BOOLEAN||LA53_0==BYTE||LA53_0==CHAR||LA53_0==DOUBLE||LA53_0==FALSE||LA53_0==FLOAT||(LA53_0>=INT && LA53_0<=LONG)||(LA53_0>=NEW && LA53_0<=NULL)||LA53_0==SHORT||LA53_0==SUPER||LA53_0==THIS||LA53_0==TRUE||LA53_0==VOID||(LA53_0>=IDENT && LA53_0<=STRING_LITERAL)) ) {
                alt53=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 53, 0, input);

                throw nvae;
            }
            switch (alt53) {
                case 1 :
                    // ../etc/JamlAttrHash.g:547:9: arrayInitializer
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_arrayInitializer_in_variableInitializer7383);
                    arrayInitializer150=arrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayInitializer150.getTree());

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:548:9: expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expression_in_variableInitializer7393);
                    expression151=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression151.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("variableInitializer", 38);
            if ( state.backtracking>0 ) { memoize(input, 38, variableInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableInitializer"

    public static class arrayDeclarator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayDeclarator"
    // ../etc/JamlAttrHash.g:551:1: arrayDeclarator : LBRACK RBRACK -> ^( ARRAY_DECLARATOR ) ;
    public final JamlAttrHashParser.arrayDeclarator_return arrayDeclarator() throws RecognitionException {
    traceIn("arrayDeclarator", 39);
        JamlAttrHashParser.arrayDeclarator_return retval = new JamlAttrHashParser.arrayDeclarator_return();
        retval.start = input.LT(1);
        int arrayDeclarator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LBRACK152=null;
        Token RBRACK153=null;

        CommonTree LBRACK152_tree=null;
        CommonTree RBRACK153_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }
            // ../etc/JamlAttrHash.g:552:5: ( LBRACK RBRACK -> ^( ARRAY_DECLARATOR ) )
            // ../etc/JamlAttrHash.g:552:9: LBRACK RBRACK
            {
            LBRACK152=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_arrayDeclarator7412); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK152);

            RBRACK153=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_arrayDeclarator7414); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK153);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 553:9: -> ^( ARRAY_DECLARATOR )
            {
                // ../etc/JamlAttrHash.g:553:13: ^( ARRAY_DECLARATOR )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_DECLARATOR, "ARRAY_DECLARATOR"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("arrayDeclarator", 39);
            if ( state.backtracking>0 ) { memoize(input, 39, arrayDeclarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arrayDeclarator"

    public static class arrayDeclaratorList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayDeclaratorList"
    // ../etc/JamlAttrHash.g:556:1: arrayDeclaratorList : ( arrayDeclarator )+ -> ^( ARRAY_DECLARATOR_LIST ( arrayDeclarator )+ ) ;
    public final JamlAttrHashParser.arrayDeclaratorList_return arrayDeclaratorList() throws RecognitionException {
    traceIn("arrayDeclaratorList", 40);
        JamlAttrHashParser.arrayDeclaratorList_return retval = new JamlAttrHashParser.arrayDeclaratorList_return();
        retval.start = input.LT(1);
        int arrayDeclaratorList_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.arrayDeclarator_return arrayDeclarator154 = null;


        RewriteRuleSubtreeStream stream_arrayDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclarator");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }
            // ../etc/JamlAttrHash.g:557:5: ( ( arrayDeclarator )+ -> ^( ARRAY_DECLARATOR_LIST ( arrayDeclarator )+ ) )
            // ../etc/JamlAttrHash.g:557:9: ( arrayDeclarator )+
            {
            // ../etc/JamlAttrHash.g:557:9: ( arrayDeclarator )+
            int cnt54=0;
            loop54:
            do {
                int alt54=2;
                int LA54_0 = input.LA(1);

                if ( (LA54_0==LBRACK) ) {
                    int LA54_2 = input.LA(2);

                    if ( (synpred121_JamlAttrHash()) ) {
                        alt54=1;
                    }


                }


                switch (alt54) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:0:0: arrayDeclarator
            	    {
            	    pushFollow(FOLLOW_arrayDeclarator_in_arrayDeclaratorList7448);
            	    arrayDeclarator154=arrayDeclarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_arrayDeclarator.add(arrayDeclarator154.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt54 >= 1 ) break loop54;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(54, input);
                        throw eee;
                }
                cnt54++;
            } while (true);



            // AST REWRITE
            // elements: arrayDeclarator
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 558:9: -> ^( ARRAY_DECLARATOR_LIST ( arrayDeclarator )+ )
            {
                // ../etc/JamlAttrHash.g:558:13: ^( ARRAY_DECLARATOR_LIST ( arrayDeclarator )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_DECLARATOR_LIST, "ARRAY_DECLARATOR_LIST"), root_1);

                if ( !(stream_arrayDeclarator.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_arrayDeclarator.hasNext() ) {
                    adaptor.addChild(root_1, stream_arrayDeclarator.nextTree());

                }
                stream_arrayDeclarator.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("arrayDeclaratorList", 40);
            if ( state.backtracking>0 ) { memoize(input, 40, arrayDeclaratorList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arrayDeclaratorList"

    public static class arrayInitializer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayInitializer"
    // ../etc/JamlAttrHash.g:561:1: arrayInitializer : LCURLY ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )? RCURLY -> ^( ARRAY_INITIALIZER[$LCURLY, \"ARRAY_INITIALIZER\"] ( variableInitializer )* ) ;
    public final JamlAttrHashParser.arrayInitializer_return arrayInitializer() throws RecognitionException {
    traceIn("arrayInitializer", 41);
        JamlAttrHashParser.arrayInitializer_return retval = new JamlAttrHashParser.arrayInitializer_return();
        retval.start = input.LT(1);
        int arrayInitializer_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LCURLY155=null;
        Token COMMA157=null;
        Token COMMA159=null;
        Token RCURLY160=null;
        JamlAttrHashParser.variableInitializer_return variableInitializer156 = null;

        JamlAttrHashParser.variableInitializer_return variableInitializer158 = null;


        CommonTree LCURLY155_tree=null;
        CommonTree COMMA157_tree=null;
        CommonTree COMMA159_tree=null;
        CommonTree RCURLY160_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_variableInitializer=new RewriteRuleSubtreeStream(adaptor,"rule variableInitializer");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }
            // ../etc/JamlAttrHash.g:562:5: ( LCURLY ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )? RCURLY -> ^( ARRAY_INITIALIZER[$LCURLY, \"ARRAY_INITIALIZER\"] ( variableInitializer )* ) )
            // ../etc/JamlAttrHash.g:562:9: LCURLY ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )? RCURLY
            {
            LCURLY155=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_arrayInitializer7493); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY155);

            // ../etc/JamlAttrHash.g:562:16: ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )?
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==DEC||LA57_0==INC||LA57_0==LCURLY||LA57_0==LESS_THAN||LA57_0==LOGICAL_NOT||(LA57_0>=LPAREN && LA57_0<=MINUS)||LA57_0==NOT||LA57_0==PLUS||LA57_0==BOOLEAN||LA57_0==BYTE||LA57_0==CHAR||LA57_0==DOUBLE||LA57_0==FALSE||LA57_0==FLOAT||(LA57_0>=INT && LA57_0<=LONG)||(LA57_0>=NEW && LA57_0<=NULL)||LA57_0==SHORT||LA57_0==SUPER||LA57_0==THIS||LA57_0==TRUE||LA57_0==VOID||(LA57_0>=IDENT && LA57_0<=STRING_LITERAL)) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    // ../etc/JamlAttrHash.g:562:17: variableInitializer ( COMMA variableInitializer )* ( COMMA )?
                    {
                    pushFollow(FOLLOW_variableInitializer_in_arrayInitializer7496);
                    variableInitializer156=variableInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variableInitializer.add(variableInitializer156.getTree());
                    // ../etc/JamlAttrHash.g:562:37: ( COMMA variableInitializer )*
                    loop55:
                    do {
                        int alt55=2;
                        int LA55_0 = input.LA(1);

                        if ( (LA55_0==COMMA) ) {
                            int LA55_1 = input.LA(2);

                            if ( (LA55_1==DEC||LA55_1==INC||LA55_1==LCURLY||LA55_1==LESS_THAN||LA55_1==LOGICAL_NOT||(LA55_1>=LPAREN && LA55_1<=MINUS)||LA55_1==NOT||LA55_1==PLUS||LA55_1==BOOLEAN||LA55_1==BYTE||LA55_1==CHAR||LA55_1==DOUBLE||LA55_1==FALSE||LA55_1==FLOAT||(LA55_1>=INT && LA55_1<=LONG)||(LA55_1>=NEW && LA55_1<=NULL)||LA55_1==SHORT||LA55_1==SUPER||LA55_1==THIS||LA55_1==TRUE||LA55_1==VOID||(LA55_1>=IDENT && LA55_1<=STRING_LITERAL)) ) {
                                alt55=1;
                            }


                        }


                        switch (alt55) {
                    	case 1 :
                    	    // ../etc/JamlAttrHash.g:562:38: COMMA variableInitializer
                    	    {
                    	    COMMA157=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer7499); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA157);

                    	    pushFollow(FOLLOW_variableInitializer_in_arrayInitializer7501);
                    	    variableInitializer158=variableInitializer();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_variableInitializer.add(variableInitializer158.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop55;
                        }
                    } while (true);

                    // ../etc/JamlAttrHash.g:562:66: ( COMMA )?
                    int alt56=2;
                    int LA56_0 = input.LA(1);

                    if ( (LA56_0==COMMA) ) {
                        alt56=1;
                    }
                    switch (alt56) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:0:0: COMMA
                            {
                            COMMA159=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer7505); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA159);


                            }
                            break;

                    }


                    }
                    break;

            }

            RCURLY160=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_arrayInitializer7510); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY160);



            // AST REWRITE
            // elements: variableInitializer
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 563:9: -> ^( ARRAY_INITIALIZER[$LCURLY, \"ARRAY_INITIALIZER\"] ( variableInitializer )* )
            {
                // ../etc/JamlAttrHash.g:563:13: ^( ARRAY_INITIALIZER[$LCURLY, \"ARRAY_INITIALIZER\"] ( variableInitializer )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_INITIALIZER, LCURLY155, "ARRAY_INITIALIZER"), root_1);

                // ../etc/JamlAttrHash.g:563:63: ( variableInitializer )*
                while ( stream_variableInitializer.hasNext() ) {
                    adaptor.addChild(root_1, stream_variableInitializer.nextTree());

                }
                stream_variableInitializer.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("arrayInitializer", 41);
            if ( state.backtracking>0 ) { memoize(input, 41, arrayInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arrayInitializer"

    public static class throwsClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "throwsClause"
    // ../etc/JamlAttrHash.g:566:1: throwsClause : THROWS qualifiedIdentList -> ^( THROWS_CLAUSE[$THROWS, \"THROWS_CLAUSE\"] qualifiedIdentList ) ;
    public final JamlAttrHashParser.throwsClause_return throwsClause() throws RecognitionException {
    traceIn("throwsClause", 42);
        JamlAttrHashParser.throwsClause_return retval = new JamlAttrHashParser.throwsClause_return();
        retval.start = input.LT(1);
        int throwsClause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token THROWS161=null;
        JamlAttrHashParser.qualifiedIdentList_return qualifiedIdentList162 = null;


        CommonTree THROWS161_tree=null;
        RewriteRuleTokenStream stream_THROWS=new RewriteRuleTokenStream(adaptor,"token THROWS");
        RewriteRuleSubtreeStream stream_qualifiedIdentList=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedIdentList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }
            // ../etc/JamlAttrHash.g:567:5: ( THROWS qualifiedIdentList -> ^( THROWS_CLAUSE[$THROWS, \"THROWS_CLAUSE\"] qualifiedIdentList ) )
            // ../etc/JamlAttrHash.g:567:9: THROWS qualifiedIdentList
            {
            THROWS161=(Token)match(input,THROWS,FOLLOW_THROWS_in_throwsClause7548); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_THROWS.add(THROWS161);

            pushFollow(FOLLOW_qualifiedIdentList_in_throwsClause7550);
            qualifiedIdentList162=qualifiedIdentList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifiedIdentList.add(qualifiedIdentList162.getTree());


            // AST REWRITE
            // elements: qualifiedIdentList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 568:9: -> ^( THROWS_CLAUSE[$THROWS, \"THROWS_CLAUSE\"] qualifiedIdentList )
            {
                // ../etc/JamlAttrHash.g:568:13: ^( THROWS_CLAUSE[$THROWS, \"THROWS_CLAUSE\"] qualifiedIdentList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(THROWS_CLAUSE, THROWS161, "THROWS_CLAUSE"), root_1);

                adaptor.addChild(root_1, stream_qualifiedIdentList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("throwsClause", 42);
            if ( state.backtracking>0 ) { memoize(input, 42, throwsClause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "throwsClause"

    public static class modifierList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "modifierList"
    // ../etc/JamlAttrHash.g:571:1: modifierList : ( modifier )* -> ^( MODIFIER_LIST ( modifier )* ) ;
    public final JamlAttrHashParser.modifierList_return modifierList() throws RecognitionException {
    traceIn("modifierList", 43);
        JamlAttrHashParser.modifierList_return retval = new JamlAttrHashParser.modifierList_return();
        retval.start = input.LT(1);
        int modifierList_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.modifier_return modifier163 = null;


        RewriteRuleSubtreeStream stream_modifier=new RewriteRuleSubtreeStream(adaptor,"rule modifier");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }
            // ../etc/JamlAttrHash.g:572:5: ( ( modifier )* -> ^( MODIFIER_LIST ( modifier )* ) )
            // ../etc/JamlAttrHash.g:572:9: ( modifier )*
            {
            // ../etc/JamlAttrHash.g:572:9: ( modifier )*
            loop58:
            do {
                int alt58=2;
                int LA58_0 = input.LA(1);

                if ( (LA58_0==AT) ) {
                    int LA58_2 = input.LA(2);

                    if ( (LA58_2==IDENT) ) {
                        alt58=1;
                    }


                }
                else if ( (LA58_0==ABSTRACT||LA58_0==FINAL||LA58_0==NATIVE||(LA58_0>=PRIVATE && LA58_0<=PUBLIC)||(LA58_0>=STATIC && LA58_0<=STRICTFP)||LA58_0==SYNCHRONIZED||LA58_0==TRANSIENT||LA58_0==VOLATILE) ) {
                    alt58=1;
                }


                switch (alt58) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:0:0: modifier
            	    {
            	    pushFollow(FOLLOW_modifier_in_modifierList7587);
            	    modifier163=modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_modifier.add(modifier163.getTree());

            	    }
            	    break;

            	default :
            	    break loop58;
                }
            } while (true);



            // AST REWRITE
            // elements: modifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 573:9: -> ^( MODIFIER_LIST ( modifier )* )
            {
                // ../etc/JamlAttrHash.g:573:13: ^( MODIFIER_LIST ( modifier )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MODIFIER_LIST, "MODIFIER_LIST"), root_1);

                // ../etc/JamlAttrHash.g:573:29: ( modifier )*
                while ( stream_modifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_modifier.nextTree());

                }
                stream_modifier.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("modifierList", 43);
            if ( state.backtracking>0 ) { memoize(input, 43, modifierList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "modifierList"

    public static class modifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "modifier"
    // ../etc/JamlAttrHash.g:576:1: modifier : ( PUBLIC | PROTECTED | PRIVATE | STATIC | ABSTRACT | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | localModifier );
    public final JamlAttrHashParser.modifier_return modifier() throws RecognitionException {
    traceIn("modifier", 44);
        JamlAttrHashParser.modifier_return retval = new JamlAttrHashParser.modifier_return();
        retval.start = input.LT(1);
        int modifier_StartIndex = input.index();
        CommonTree root_0 = null;

        Token PUBLIC164=null;
        Token PROTECTED165=null;
        Token PRIVATE166=null;
        Token STATIC167=null;
        Token ABSTRACT168=null;
        Token NATIVE169=null;
        Token SYNCHRONIZED170=null;
        Token TRANSIENT171=null;
        Token VOLATILE172=null;
        Token STRICTFP173=null;
        JamlAttrHashParser.localModifier_return localModifier174 = null;


        CommonTree PUBLIC164_tree=null;
        CommonTree PROTECTED165_tree=null;
        CommonTree PRIVATE166_tree=null;
        CommonTree STATIC167_tree=null;
        CommonTree ABSTRACT168_tree=null;
        CommonTree NATIVE169_tree=null;
        CommonTree SYNCHRONIZED170_tree=null;
        CommonTree TRANSIENT171_tree=null;
        CommonTree VOLATILE172_tree=null;
        CommonTree STRICTFP173_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }
            // ../etc/JamlAttrHash.g:577:5: ( PUBLIC | PROTECTED | PRIVATE | STATIC | ABSTRACT | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | localModifier )
            int alt59=11;
            switch ( input.LA(1) ) {
            case PUBLIC:
                {
                alt59=1;
                }
                break;
            case PROTECTED:
                {
                alt59=2;
                }
                break;
            case PRIVATE:
                {
                alt59=3;
                }
                break;
            case STATIC:
                {
                alt59=4;
                }
                break;
            case ABSTRACT:
                {
                alt59=5;
                }
                break;
            case NATIVE:
                {
                alt59=6;
                }
                break;
            case SYNCHRONIZED:
                {
                alt59=7;
                }
                break;
            case TRANSIENT:
                {
                alt59=8;
                }
                break;
            case VOLATILE:
                {
                alt59=9;
                }
                break;
            case STRICTFP:
                {
                alt59=10;
                }
                break;
            case AT:
            case FINAL:
                {
                alt59=11;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 59, 0, input);

                throw nvae;
            }

            switch (alt59) {
                case 1 :
                    // ../etc/JamlAttrHash.g:577:9: PUBLIC
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PUBLIC164=(Token)match(input,PUBLIC,FOLLOW_PUBLIC_in_modifier7628); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PUBLIC164_tree = (CommonTree)adaptor.create(PUBLIC164);
                    adaptor.addChild(root_0, PUBLIC164_tree);
                    }

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:578:9: PROTECTED
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PROTECTED165=(Token)match(input,PROTECTED,FOLLOW_PROTECTED_in_modifier7638); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PROTECTED165_tree = (CommonTree)adaptor.create(PROTECTED165);
                    adaptor.addChild(root_0, PROTECTED165_tree);
                    }

                    }
                    break;
                case 3 :
                    // ../etc/JamlAttrHash.g:579:9: PRIVATE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PRIVATE166=(Token)match(input,PRIVATE,FOLLOW_PRIVATE_in_modifier7648); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIVATE166_tree = (CommonTree)adaptor.create(PRIVATE166);
                    adaptor.addChild(root_0, PRIVATE166_tree);
                    }

                    }
                    break;
                case 4 :
                    // ../etc/JamlAttrHash.g:580:9: STATIC
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STATIC167=(Token)match(input,STATIC,FOLLOW_STATIC_in_modifier7658); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STATIC167_tree = (CommonTree)adaptor.create(STATIC167);
                    adaptor.addChild(root_0, STATIC167_tree);
                    }

                    }
                    break;
                case 5 :
                    // ../etc/JamlAttrHash.g:581:9: ABSTRACT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ABSTRACT168=(Token)match(input,ABSTRACT,FOLLOW_ABSTRACT_in_modifier7668); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ABSTRACT168_tree = (CommonTree)adaptor.create(ABSTRACT168);
                    adaptor.addChild(root_0, ABSTRACT168_tree);
                    }

                    }
                    break;
                case 6 :
                    // ../etc/JamlAttrHash.g:582:9: NATIVE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    NATIVE169=(Token)match(input,NATIVE,FOLLOW_NATIVE_in_modifier7678); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NATIVE169_tree = (CommonTree)adaptor.create(NATIVE169);
                    adaptor.addChild(root_0, NATIVE169_tree);
                    }

                    }
                    break;
                case 7 :
                    // ../etc/JamlAttrHash.g:583:9: SYNCHRONIZED
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SYNCHRONIZED170=(Token)match(input,SYNCHRONIZED,FOLLOW_SYNCHRONIZED_in_modifier7688); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SYNCHRONIZED170_tree = (CommonTree)adaptor.create(SYNCHRONIZED170);
                    adaptor.addChild(root_0, SYNCHRONIZED170_tree);
                    }

                    }
                    break;
                case 8 :
                    // ../etc/JamlAttrHash.g:584:9: TRANSIENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    TRANSIENT171=(Token)match(input,TRANSIENT,FOLLOW_TRANSIENT_in_modifier7698); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TRANSIENT171_tree = (CommonTree)adaptor.create(TRANSIENT171);
                    adaptor.addChild(root_0, TRANSIENT171_tree);
                    }

                    }
                    break;
                case 9 :
                    // ../etc/JamlAttrHash.g:585:9: VOLATILE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    VOLATILE172=(Token)match(input,VOLATILE,FOLLOW_VOLATILE_in_modifier7708); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VOLATILE172_tree = (CommonTree)adaptor.create(VOLATILE172);
                    adaptor.addChild(root_0, VOLATILE172_tree);
                    }

                    }
                    break;
                case 10 :
                    // ../etc/JamlAttrHash.g:586:9: STRICTFP
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STRICTFP173=(Token)match(input,STRICTFP,FOLLOW_STRICTFP_in_modifier7718); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STRICTFP173_tree = (CommonTree)adaptor.create(STRICTFP173);
                    adaptor.addChild(root_0, STRICTFP173_tree);
                    }

                    }
                    break;
                case 11 :
                    // ../etc/JamlAttrHash.g:587:9: localModifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_localModifier_in_modifier7728);
                    localModifier174=localModifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, localModifier174.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("modifier", 44);
            if ( state.backtracking>0 ) { memoize(input, 44, modifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "modifier"

    public static class localModifierList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "localModifierList"
    // ../etc/JamlAttrHash.g:590:1: localModifierList : ( localModifier )* -> ^( LOCAL_MODIFIER_LIST ( localModifier )* ) ;
    public final JamlAttrHashParser.localModifierList_return localModifierList() throws RecognitionException {
    traceIn("localModifierList", 45);
        JamlAttrHashParser.localModifierList_return retval = new JamlAttrHashParser.localModifierList_return();
        retval.start = input.LT(1);
        int localModifierList_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.localModifier_return localModifier175 = null;


        RewriteRuleSubtreeStream stream_localModifier=new RewriteRuleSubtreeStream(adaptor,"rule localModifier");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }
            // ../etc/JamlAttrHash.g:591:5: ( ( localModifier )* -> ^( LOCAL_MODIFIER_LIST ( localModifier )* ) )
            // ../etc/JamlAttrHash.g:591:9: ( localModifier )*
            {
            // ../etc/JamlAttrHash.g:591:9: ( localModifier )*
            loop60:
            do {
                int alt60=2;
                int LA60_0 = input.LA(1);

                if ( (LA60_0==AT||LA60_0==FINAL) ) {
                    alt60=1;
                }


                switch (alt60) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:0:0: localModifier
            	    {
            	    pushFollow(FOLLOW_localModifier_in_localModifierList7747);
            	    localModifier175=localModifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_localModifier.add(localModifier175.getTree());

            	    }
            	    break;

            	default :
            	    break loop60;
                }
            } while (true);



            // AST REWRITE
            // elements: localModifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 592:9: -> ^( LOCAL_MODIFIER_LIST ( localModifier )* )
            {
                // ../etc/JamlAttrHash.g:592:12: ^( LOCAL_MODIFIER_LIST ( localModifier )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LOCAL_MODIFIER_LIST, "LOCAL_MODIFIER_LIST"), root_1);

                // ../etc/JamlAttrHash.g:592:34: ( localModifier )*
                while ( stream_localModifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_localModifier.nextTree());

                }
                stream_localModifier.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("localModifierList", 45);
            if ( state.backtracking>0 ) { memoize(input, 45, localModifierList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "localModifierList"

    public static class localModifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "localModifier"
    // ../etc/JamlAttrHash.g:595:1: localModifier : ( FINAL | annotation );
    public final JamlAttrHashParser.localModifier_return localModifier() throws RecognitionException {
    traceIn("localModifier", 46);
        JamlAttrHashParser.localModifier_return retval = new JamlAttrHashParser.localModifier_return();
        retval.start = input.LT(1);
        int localModifier_StartIndex = input.index();
        CommonTree root_0 = null;

        Token FINAL176=null;
        JamlAttrHashParser.annotation_return annotation177 = null;


        CommonTree FINAL176_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }
            // ../etc/JamlAttrHash.g:596:5: ( FINAL | annotation )
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==FINAL) ) {
                alt61=1;
            }
            else if ( (LA61_0==AT) ) {
                alt61=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 61, 0, input);

                throw nvae;
            }
            switch (alt61) {
                case 1 :
                    // ../etc/JamlAttrHash.g:596:9: FINAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    FINAL176=(Token)match(input,FINAL,FOLLOW_FINAL_in_localModifier7788); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FINAL176_tree = (CommonTree)adaptor.create(FINAL176);
                    adaptor.addChild(root_0, FINAL176_tree);
                    }

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:597:9: annotation
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_annotation_in_localModifier7798);
                    annotation177=annotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotation177.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("localModifier", 46);
            if ( state.backtracking>0 ) { memoize(input, 46, localModifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "localModifier"

    public static class type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type"
    // ../etc/JamlAttrHash.g:600:1: type : ( simpleType | objectType );
    public final JamlAttrHashParser.type_return type() throws RecognitionException {
    traceIn("type", 47);
        JamlAttrHashParser.type_return retval = new JamlAttrHashParser.type_return();
        retval.start = input.LT(1);
        int type_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.simpleType_return simpleType178 = null;

        JamlAttrHashParser.objectType_return objectType179 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }
            // ../etc/JamlAttrHash.g:601:5: ( simpleType | objectType )
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==BOOLEAN||LA62_0==BYTE||LA62_0==CHAR||LA62_0==DOUBLE||LA62_0==FLOAT||(LA62_0>=INT && LA62_0<=LONG)||LA62_0==SHORT) ) {
                alt62=1;
            }
            else if ( (LA62_0==IDENT) ) {
                alt62=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 62, 0, input);

                throw nvae;
            }
            switch (alt62) {
                case 1 :
                    // ../etc/JamlAttrHash.g:601:9: simpleType
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_simpleType_in_type7817);
                    simpleType178=simpleType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleType178.getTree());

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:602:9: objectType
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_objectType_in_type7827);
                    objectType179=objectType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, objectType179.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("type", 47);
            if ( state.backtracking>0 ) { memoize(input, 47, type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type"

    public static class simpleType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "simpleType"
    // ../etc/JamlAttrHash.g:605:1: simpleType : primitiveType ( arrayDeclaratorList )? -> ^( TYPE primitiveType ( arrayDeclaratorList )? ) ;
    public final JamlAttrHashParser.simpleType_return simpleType() throws RecognitionException {
    traceIn("simpleType", 48);
        JamlAttrHashParser.simpleType_return retval = new JamlAttrHashParser.simpleType_return();
        retval.start = input.LT(1);
        int simpleType_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.primitiveType_return primitiveType180 = null;

        JamlAttrHashParser.arrayDeclaratorList_return arrayDeclaratorList181 = null;


        RewriteRuleSubtreeStream stream_arrayDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclaratorList");
        RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }
            // ../etc/JamlAttrHash.g:606:5: ( primitiveType ( arrayDeclaratorList )? -> ^( TYPE primitiveType ( arrayDeclaratorList )? ) )
            // ../etc/JamlAttrHash.g:606:9: primitiveType ( arrayDeclaratorList )?
            {
            pushFollow(FOLLOW_primitiveType_in_simpleType7847);
            primitiveType180=primitiveType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_primitiveType.add(primitiveType180.getTree());
            // ../etc/JamlAttrHash.g:606:23: ( arrayDeclaratorList )?
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==LBRACK) ) {
                int LA63_1 = input.LA(2);

                if ( (LA63_1==RBRACK) ) {
                    int LA63_3 = input.LA(3);

                    if ( (synpred139_JamlAttrHash()) ) {
                        alt63=1;
                    }
                }
            }
            switch (alt63) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: arrayDeclaratorList
                    {
                    pushFollow(FOLLOW_arrayDeclaratorList_in_simpleType7849);
                    arrayDeclaratorList181=arrayDeclaratorList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arrayDeclaratorList.add(arrayDeclaratorList181.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: arrayDeclaratorList, primitiveType
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 607:9: -> ^( TYPE primitiveType ( arrayDeclaratorList )? )
            {
                // ../etc/JamlAttrHash.g:607:13: ^( TYPE primitiveType ( arrayDeclaratorList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE, "TYPE"), root_1);

                adaptor.addChild(root_1, stream_primitiveType.nextTree());
                // ../etc/JamlAttrHash.g:607:34: ( arrayDeclaratorList )?
                if ( stream_arrayDeclaratorList.hasNext() ) {
                    adaptor.addChild(root_1, stream_arrayDeclaratorList.nextTree());

                }
                stream_arrayDeclaratorList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("simpleType", 48);
            if ( state.backtracking>0 ) { memoize(input, 48, simpleType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "simpleType"

    public static class objectType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "objectType"
    // ../etc/JamlAttrHash.g:610:1: objectType : qualifiedTypeIdent ( arrayDeclaratorList )? -> ^( TYPE qualifiedTypeIdent ( arrayDeclaratorList )? ) ;
    public final JamlAttrHashParser.objectType_return objectType() throws RecognitionException {
    traceIn("objectType", 49);
        JamlAttrHashParser.objectType_return retval = new JamlAttrHashParser.objectType_return();
        retval.start = input.LT(1);
        int objectType_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.qualifiedTypeIdent_return qualifiedTypeIdent182 = null;

        JamlAttrHashParser.arrayDeclaratorList_return arrayDeclaratorList183 = null;


        RewriteRuleSubtreeStream stream_arrayDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclaratorList");
        RewriteRuleSubtreeStream stream_qualifiedTypeIdent=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedTypeIdent");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }
            // ../etc/JamlAttrHash.g:611:5: ( qualifiedTypeIdent ( arrayDeclaratorList )? -> ^( TYPE qualifiedTypeIdent ( arrayDeclaratorList )? ) )
            // ../etc/JamlAttrHash.g:611:9: qualifiedTypeIdent ( arrayDeclaratorList )?
            {
            pushFollow(FOLLOW_qualifiedTypeIdent_in_objectType7896);
            qualifiedTypeIdent182=qualifiedTypeIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifiedTypeIdent.add(qualifiedTypeIdent182.getTree());
            // ../etc/JamlAttrHash.g:611:28: ( arrayDeclaratorList )?
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==LBRACK) ) {
                int LA64_1 = input.LA(2);

                if ( (synpred140_JamlAttrHash()) ) {
                    alt64=1;
                }
            }
            switch (alt64) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: arrayDeclaratorList
                    {
                    pushFollow(FOLLOW_arrayDeclaratorList_in_objectType7898);
                    arrayDeclaratorList183=arrayDeclaratorList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arrayDeclaratorList.add(arrayDeclaratorList183.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: arrayDeclaratorList, qualifiedTypeIdent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 612:9: -> ^( TYPE qualifiedTypeIdent ( arrayDeclaratorList )? )
            {
                // ../etc/JamlAttrHash.g:612:13: ^( TYPE qualifiedTypeIdent ( arrayDeclaratorList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE, "TYPE"), root_1);

                adaptor.addChild(root_1, stream_qualifiedTypeIdent.nextTree());
                // ../etc/JamlAttrHash.g:612:39: ( arrayDeclaratorList )?
                if ( stream_arrayDeclaratorList.hasNext() ) {
                    adaptor.addChild(root_1, stream_arrayDeclaratorList.nextTree());

                }
                stream_arrayDeclaratorList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("objectType", 49);
            if ( state.backtracking>0 ) { memoize(input, 49, objectType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "objectType"

    public static class objectTypeSimplified_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "objectTypeSimplified"
    // ../etc/JamlAttrHash.g:615:1: objectTypeSimplified : qualifiedTypeIdentSimplified ( arrayDeclaratorList )? -> ^( TYPE qualifiedTypeIdentSimplified ( arrayDeclaratorList )? ) ;
    public final JamlAttrHashParser.objectTypeSimplified_return objectTypeSimplified() throws RecognitionException {
    traceIn("objectTypeSimplified", 50);
        JamlAttrHashParser.objectTypeSimplified_return retval = new JamlAttrHashParser.objectTypeSimplified_return();
        retval.start = input.LT(1);
        int objectTypeSimplified_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.qualifiedTypeIdentSimplified_return qualifiedTypeIdentSimplified184 = null;

        JamlAttrHashParser.arrayDeclaratorList_return arrayDeclaratorList185 = null;


        RewriteRuleSubtreeStream stream_arrayDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclaratorList");
        RewriteRuleSubtreeStream stream_qualifiedTypeIdentSimplified=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedTypeIdentSimplified");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }
            // ../etc/JamlAttrHash.g:616:5: ( qualifiedTypeIdentSimplified ( arrayDeclaratorList )? -> ^( TYPE qualifiedTypeIdentSimplified ( arrayDeclaratorList )? ) )
            // ../etc/JamlAttrHash.g:616:9: qualifiedTypeIdentSimplified ( arrayDeclaratorList )?
            {
            pushFollow(FOLLOW_qualifiedTypeIdentSimplified_in_objectTypeSimplified7938);
            qualifiedTypeIdentSimplified184=qualifiedTypeIdentSimplified();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifiedTypeIdentSimplified.add(qualifiedTypeIdentSimplified184.getTree());
            // ../etc/JamlAttrHash.g:616:38: ( arrayDeclaratorList )?
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==LBRACK) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: arrayDeclaratorList
                    {
                    pushFollow(FOLLOW_arrayDeclaratorList_in_objectTypeSimplified7940);
                    arrayDeclaratorList185=arrayDeclaratorList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arrayDeclaratorList.add(arrayDeclaratorList185.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: arrayDeclaratorList, qualifiedTypeIdentSimplified
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 617:9: -> ^( TYPE qualifiedTypeIdentSimplified ( arrayDeclaratorList )? )
            {
                // ../etc/JamlAttrHash.g:617:13: ^( TYPE qualifiedTypeIdentSimplified ( arrayDeclaratorList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE, "TYPE"), root_1);

                adaptor.addChild(root_1, stream_qualifiedTypeIdentSimplified.nextTree());
                // ../etc/JamlAttrHash.g:617:49: ( arrayDeclaratorList )?
                if ( stream_arrayDeclaratorList.hasNext() ) {
                    adaptor.addChild(root_1, stream_arrayDeclaratorList.nextTree());

                }
                stream_arrayDeclaratorList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("objectTypeSimplified", 50);
            if ( state.backtracking>0 ) { memoize(input, 50, objectTypeSimplified_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "objectTypeSimplified"

    public static class qualifiedTypeIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedTypeIdent"
    // ../etc/JamlAttrHash.g:620:1: qualifiedTypeIdent : typeIdent ( DOT typeIdent )* -> ^( QUALIFIED_TYPE_IDENT ( typeIdent )+ ) ;
    public final JamlAttrHashParser.qualifiedTypeIdent_return qualifiedTypeIdent() throws RecognitionException {
    traceIn("qualifiedTypeIdent", 51);
        JamlAttrHashParser.qualifiedTypeIdent_return retval = new JamlAttrHashParser.qualifiedTypeIdent_return();
        retval.start = input.LT(1);
        int qualifiedTypeIdent_StartIndex = input.index();
        CommonTree root_0 = null;

        Token DOT187=null;
        JamlAttrHashParser.typeIdent_return typeIdent186 = null;

        JamlAttrHashParser.typeIdent_return typeIdent188 = null;


        CommonTree DOT187_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_typeIdent=new RewriteRuleSubtreeStream(adaptor,"rule typeIdent");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }
            // ../etc/JamlAttrHash.g:621:5: ( typeIdent ( DOT typeIdent )* -> ^( QUALIFIED_TYPE_IDENT ( typeIdent )+ ) )
            // ../etc/JamlAttrHash.g:621:9: typeIdent ( DOT typeIdent )*
            {
            pushFollow(FOLLOW_typeIdent_in_qualifiedTypeIdent7980);
            typeIdent186=typeIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeIdent.add(typeIdent186.getTree());
            // ../etc/JamlAttrHash.g:621:19: ( DOT typeIdent )*
            loop66:
            do {
                int alt66=2;
                int LA66_0 = input.LA(1);

                if ( (LA66_0==DOT) ) {
                    int LA66_2 = input.LA(2);

                    if ( (synpred142_JamlAttrHash()) ) {
                        alt66=1;
                    }


                }


                switch (alt66) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:621:20: DOT typeIdent
            	    {
            	    DOT187=(Token)match(input,DOT,FOLLOW_DOT_in_qualifiedTypeIdent7983); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT187);

            	    pushFollow(FOLLOW_typeIdent_in_qualifiedTypeIdent7985);
            	    typeIdent188=typeIdent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_typeIdent.add(typeIdent188.getTree());

            	    }
            	    break;

            	default :
            	    break loop66;
                }
            } while (true);



            // AST REWRITE
            // elements: typeIdent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 622:9: -> ^( QUALIFIED_TYPE_IDENT ( typeIdent )+ )
            {
                // ../etc/JamlAttrHash.g:622:13: ^( QUALIFIED_TYPE_IDENT ( typeIdent )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(QUALIFIED_TYPE_IDENT, "QUALIFIED_TYPE_IDENT"), root_1);

                if ( !(stream_typeIdent.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_typeIdent.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeIdent.nextTree());

                }
                stream_typeIdent.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("qualifiedTypeIdent", 51);
            if ( state.backtracking>0 ) { memoize(input, 51, qualifiedTypeIdent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedTypeIdent"

    public static class qualifiedTypeIdentSimplified_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedTypeIdentSimplified"
    // ../etc/JamlAttrHash.g:625:1: qualifiedTypeIdentSimplified : typeIdentSimplified ( DOT typeIdentSimplified )* -> ^( QUALIFIED_TYPE_IDENT ( typeIdentSimplified )+ ) ;
    public final JamlAttrHashParser.qualifiedTypeIdentSimplified_return qualifiedTypeIdentSimplified() throws RecognitionException {
    traceIn("qualifiedTypeIdentSimplified", 52);
        JamlAttrHashParser.qualifiedTypeIdentSimplified_return retval = new JamlAttrHashParser.qualifiedTypeIdentSimplified_return();
        retval.start = input.LT(1);
        int qualifiedTypeIdentSimplified_StartIndex = input.index();
        CommonTree root_0 = null;

        Token DOT190=null;
        JamlAttrHashParser.typeIdentSimplified_return typeIdentSimplified189 = null;

        JamlAttrHashParser.typeIdentSimplified_return typeIdentSimplified191 = null;


        CommonTree DOT190_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_typeIdentSimplified=new RewriteRuleSubtreeStream(adaptor,"rule typeIdentSimplified");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }
            // ../etc/JamlAttrHash.g:626:5: ( typeIdentSimplified ( DOT typeIdentSimplified )* -> ^( QUALIFIED_TYPE_IDENT ( typeIdentSimplified )+ ) )
            // ../etc/JamlAttrHash.g:626:9: typeIdentSimplified ( DOT typeIdentSimplified )*
            {
            pushFollow(FOLLOW_typeIdentSimplified_in_qualifiedTypeIdentSimplified8025);
            typeIdentSimplified189=typeIdentSimplified();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeIdentSimplified.add(typeIdentSimplified189.getTree());
            // ../etc/JamlAttrHash.g:626:29: ( DOT typeIdentSimplified )*
            loop67:
            do {
                int alt67=2;
                int LA67_0 = input.LA(1);

                if ( (LA67_0==DOT) ) {
                    alt67=1;
                }


                switch (alt67) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:626:30: DOT typeIdentSimplified
            	    {
            	    DOT190=(Token)match(input,DOT,FOLLOW_DOT_in_qualifiedTypeIdentSimplified8028); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT190);

            	    pushFollow(FOLLOW_typeIdentSimplified_in_qualifiedTypeIdentSimplified8030);
            	    typeIdentSimplified191=typeIdentSimplified();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_typeIdentSimplified.add(typeIdentSimplified191.getTree());

            	    }
            	    break;

            	default :
            	    break loop67;
                }
            } while (true);



            // AST REWRITE
            // elements: typeIdentSimplified
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 627:9: -> ^( QUALIFIED_TYPE_IDENT ( typeIdentSimplified )+ )
            {
                // ../etc/JamlAttrHash.g:627:13: ^( QUALIFIED_TYPE_IDENT ( typeIdentSimplified )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(QUALIFIED_TYPE_IDENT, "QUALIFIED_TYPE_IDENT"), root_1);

                if ( !(stream_typeIdentSimplified.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_typeIdentSimplified.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeIdentSimplified.nextTree());

                }
                stream_typeIdentSimplified.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("qualifiedTypeIdentSimplified", 52);
            if ( state.backtracking>0 ) { memoize(input, 52, qualifiedTypeIdentSimplified_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedTypeIdentSimplified"

    public static class typeIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeIdent"
    // ../etc/JamlAttrHash.g:630:1: typeIdent : IDENT ( genericTypeArgumentList )? ;
    public final JamlAttrHashParser.typeIdent_return typeIdent() throws RecognitionException {
    traceIn("typeIdent", 53);
        JamlAttrHashParser.typeIdent_return retval = new JamlAttrHashParser.typeIdent_return();
        retval.start = input.LT(1);
        int typeIdent_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT192=null;
        JamlAttrHashParser.genericTypeArgumentList_return genericTypeArgumentList193 = null;


        CommonTree IDENT192_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }
            // ../etc/JamlAttrHash.g:631:5: ( IDENT ( genericTypeArgumentList )? )
            // ../etc/JamlAttrHash.g:631:9: IDENT ( genericTypeArgumentList )?
            {
            root_0 = (CommonTree)adaptor.nil();

            IDENT192=(Token)match(input,IDENT,FOLLOW_IDENT_in_typeIdent8070); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT192_tree = (CommonTree)adaptor.create(IDENT192);
            root_0 = (CommonTree)adaptor.becomeRoot(IDENT192_tree, root_0);
            }
            // ../etc/JamlAttrHash.g:631:16: ( genericTypeArgumentList )?
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==LESS_THAN) ) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: genericTypeArgumentList
                    {
                    pushFollow(FOLLOW_genericTypeArgumentList_in_typeIdent8073);
                    genericTypeArgumentList193=genericTypeArgumentList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, genericTypeArgumentList193.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("typeIdent", 53);
            if ( state.backtracking>0 ) { memoize(input, 53, typeIdent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeIdent"

    public static class typeIdentSimplified_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeIdentSimplified"
    // ../etc/JamlAttrHash.g:634:1: typeIdentSimplified : IDENT ( genericTypeArgumentListSimplified )? ;
    public final JamlAttrHashParser.typeIdentSimplified_return typeIdentSimplified() throws RecognitionException {
    traceIn("typeIdentSimplified", 54);
        JamlAttrHashParser.typeIdentSimplified_return retval = new JamlAttrHashParser.typeIdentSimplified_return();
        retval.start = input.LT(1);
        int typeIdentSimplified_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT194=null;
        JamlAttrHashParser.genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified195 = null;


        CommonTree IDENT194_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }
            // ../etc/JamlAttrHash.g:635:5: ( IDENT ( genericTypeArgumentListSimplified )? )
            // ../etc/JamlAttrHash.g:635:9: IDENT ( genericTypeArgumentListSimplified )?
            {
            root_0 = (CommonTree)adaptor.nil();

            IDENT194=(Token)match(input,IDENT,FOLLOW_IDENT_in_typeIdentSimplified8093); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT194_tree = (CommonTree)adaptor.create(IDENT194);
            root_0 = (CommonTree)adaptor.becomeRoot(IDENT194_tree, root_0);
            }
            // ../etc/JamlAttrHash.g:635:16: ( genericTypeArgumentListSimplified )?
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==LESS_THAN) ) {
                alt69=1;
            }
            switch (alt69) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: genericTypeArgumentListSimplified
                    {
                    pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_typeIdentSimplified8096);
                    genericTypeArgumentListSimplified195=genericTypeArgumentListSimplified();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, genericTypeArgumentListSimplified195.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("typeIdentSimplified", 54);
            if ( state.backtracking>0 ) { memoize(input, 54, typeIdentSimplified_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeIdentSimplified"

    public static class primitiveType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primitiveType"
    // ../etc/JamlAttrHash.g:638:1: primitiveType : ( BOOLEAN | CHAR | BYTE | SHORT | INT | LONG | FLOAT | DOUBLE );
    public final JamlAttrHashParser.primitiveType_return primitiveType() throws RecognitionException {
    traceIn("primitiveType", 55);
        JamlAttrHashParser.primitiveType_return retval = new JamlAttrHashParser.primitiveType_return();
        retval.start = input.LT(1);
        int primitiveType_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set196=null;

        CommonTree set196_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }
            // ../etc/JamlAttrHash.g:639:5: ( BOOLEAN | CHAR | BYTE | SHORT | INT | LONG | FLOAT | DOUBLE )
            // ../etc/JamlAttrHash.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set196=(Token)input.LT(1);
            if ( input.LA(1)==BOOLEAN||input.LA(1)==BYTE||input.LA(1)==CHAR||input.LA(1)==DOUBLE||input.LA(1)==FLOAT||(input.LA(1)>=INT && input.LA(1)<=LONG)||input.LA(1)==SHORT ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set196));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("primitiveType", 55);
            if ( state.backtracking>0 ) { memoize(input, 55, primitiveType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "primitiveType"

    public static class genericTypeArgumentList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericTypeArgumentList"
    // ../etc/JamlAttrHash.g:649:1: genericTypeArgumentList : LESS_THAN genericTypeArgument ( COMMA genericTypeArgument )* genericTypeListClosing -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgument )+ ) ;
    public final JamlAttrHashParser.genericTypeArgumentList_return genericTypeArgumentList() throws RecognitionException {
    traceIn("genericTypeArgumentList", 56);
        JamlAttrHashParser.genericTypeArgumentList_return retval = new JamlAttrHashParser.genericTypeArgumentList_return();
        retval.start = input.LT(1);
        int genericTypeArgumentList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LESS_THAN197=null;
        Token COMMA199=null;
        JamlAttrHashParser.genericTypeArgument_return genericTypeArgument198 = null;

        JamlAttrHashParser.genericTypeArgument_return genericTypeArgument200 = null;

        JamlAttrHashParser.genericTypeListClosing_return genericTypeListClosing201 = null;


        CommonTree LESS_THAN197_tree=null;
        CommonTree COMMA199_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LESS_THAN=new RewriteRuleTokenStream(adaptor,"token LESS_THAN");
        RewriteRuleSubtreeStream stream_genericTypeArgument=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgument");
        RewriteRuleSubtreeStream stream_genericTypeListClosing=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeListClosing");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }
            // ../etc/JamlAttrHash.g:650:5: ( LESS_THAN genericTypeArgument ( COMMA genericTypeArgument )* genericTypeListClosing -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgument )+ ) )
            // ../etc/JamlAttrHash.g:650:9: LESS_THAN genericTypeArgument ( COMMA genericTypeArgument )* genericTypeListClosing
            {
            LESS_THAN197=(Token)match(input,LESS_THAN,FOLLOW_LESS_THAN_in_genericTypeArgumentList8205); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LESS_THAN.add(LESS_THAN197);

            pushFollow(FOLLOW_genericTypeArgument_in_genericTypeArgumentList8207);
            genericTypeArgument198=genericTypeArgument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_genericTypeArgument.add(genericTypeArgument198.getTree());
            // ../etc/JamlAttrHash.g:650:39: ( COMMA genericTypeArgument )*
            loop70:
            do {
                int alt70=2;
                int LA70_0 = input.LA(1);

                if ( (LA70_0==COMMA) ) {
                    int LA70_2 = input.LA(2);

                    if ( (synpred153_JamlAttrHash()) ) {
                        alt70=1;
                    }


                }


                switch (alt70) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:650:40: COMMA genericTypeArgument
            	    {
            	    COMMA199=(Token)match(input,COMMA,FOLLOW_COMMA_in_genericTypeArgumentList8210); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA199);

            	    pushFollow(FOLLOW_genericTypeArgument_in_genericTypeArgumentList8212);
            	    genericTypeArgument200=genericTypeArgument();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_genericTypeArgument.add(genericTypeArgument200.getTree());

            	    }
            	    break;

            	default :
            	    break loop70;
                }
            } while (true);

            pushFollow(FOLLOW_genericTypeListClosing_in_genericTypeArgumentList8216);
            genericTypeListClosing201=genericTypeListClosing();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_genericTypeListClosing.add(genericTypeListClosing201.getTree());


            // AST REWRITE
            // elements: genericTypeArgument
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 651:9: -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgument )+ )
            {
                // ../etc/JamlAttrHash.g:651:13: ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgument )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GENERIC_TYPE_ARG_LIST, LESS_THAN197, "GENERIC_TYPE_ARG_LIST"), root_1);

                if ( !(stream_genericTypeArgument.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_genericTypeArgument.hasNext() ) {
                    adaptor.addChild(root_1, stream_genericTypeArgument.nextTree());

                }
                stream_genericTypeArgument.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("genericTypeArgumentList", 56);
            if ( state.backtracking>0 ) { memoize(input, 56, genericTypeArgumentList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "genericTypeArgumentList"

    public static class genericTypeArgument_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericTypeArgument"
    // ../etc/JamlAttrHash.g:654:1: genericTypeArgument : ( type | QUESTION ( genericWildcardBoundType )? -> ^( QUESTION ( genericWildcardBoundType )? ) );
    public final JamlAttrHashParser.genericTypeArgument_return genericTypeArgument() throws RecognitionException {
    traceIn("genericTypeArgument", 57);
        JamlAttrHashParser.genericTypeArgument_return retval = new JamlAttrHashParser.genericTypeArgument_return();
        retval.start = input.LT(1);
        int genericTypeArgument_StartIndex = input.index();
        CommonTree root_0 = null;

        Token QUESTION203=null;
        JamlAttrHashParser.type_return type202 = null;

        JamlAttrHashParser.genericWildcardBoundType_return genericWildcardBoundType204 = null;


        CommonTree QUESTION203_tree=null;
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleSubtreeStream stream_genericWildcardBoundType=new RewriteRuleSubtreeStream(adaptor,"rule genericWildcardBoundType");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }
            // ../etc/JamlAttrHash.g:655:5: ( type | QUESTION ( genericWildcardBoundType )? -> ^( QUESTION ( genericWildcardBoundType )? ) )
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==BOOLEAN||LA72_0==BYTE||LA72_0==CHAR||LA72_0==DOUBLE||LA72_0==FLOAT||(LA72_0>=INT && LA72_0<=LONG)||LA72_0==SHORT||LA72_0==IDENT) ) {
                alt72=1;
            }
            else if ( (LA72_0==QUESTION) ) {
                alt72=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 72, 0, input);

                throw nvae;
            }
            switch (alt72) {
                case 1 :
                    // ../etc/JamlAttrHash.g:655:9: type
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_type_in_genericTypeArgument8254);
                    type202=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type202.getTree());

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:656:9: QUESTION ( genericWildcardBoundType )?
                    {
                    QUESTION203=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_genericTypeArgument8264); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(QUESTION203);

                    // ../etc/JamlAttrHash.g:656:18: ( genericWildcardBoundType )?
                    int alt71=2;
                    int LA71_0 = input.LA(1);

                    if ( (LA71_0==EXTENDS) ) {
                        int LA71_1 = input.LA(2);

                        if ( (LA71_1==BOOLEAN||LA71_1==BYTE||LA71_1==CHAR||LA71_1==DOUBLE||LA71_1==FLOAT||(LA71_1>=INT && LA71_1<=LONG)||LA71_1==SHORT) ) {
                            int LA71_4 = input.LA(3);

                            if ( (synpred155_JamlAttrHash()) ) {
                                alt71=1;
                            }
                        }
                        else if ( (LA71_1==IDENT) ) {
                            int LA71_5 = input.LA(3);

                            if ( (synpred155_JamlAttrHash()) ) {
                                alt71=1;
                            }
                        }
                    }
                    else if ( (LA71_0==SUPER) ) {
                        int LA71_3 = input.LA(2);

                        if ( (LA71_3==BOOLEAN||LA71_3==BYTE||LA71_3==CHAR||LA71_3==DOUBLE||LA71_3==FLOAT||(LA71_3>=INT && LA71_3<=LONG)||LA71_3==SHORT||LA71_3==IDENT) ) {
                            alt71=1;
                        }
                    }
                    switch (alt71) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:0:0: genericWildcardBoundType
                            {
                            pushFollow(FOLLOW_genericWildcardBoundType_in_genericTypeArgument8266);
                            genericWildcardBoundType204=genericWildcardBoundType();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_genericWildcardBoundType.add(genericWildcardBoundType204.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: genericWildcardBoundType, QUESTION
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 657:9: -> ^( QUESTION ( genericWildcardBoundType )? )
                    {
                        // ../etc/JamlAttrHash.g:657:13: ^( QUESTION ( genericWildcardBoundType )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_QUESTION.nextNode(), root_1);

                        // ../etc/JamlAttrHash.g:657:24: ( genericWildcardBoundType )?
                        if ( stream_genericWildcardBoundType.hasNext() ) {
                            adaptor.addChild(root_1, stream_genericWildcardBoundType.nextTree());

                        }
                        stream_genericWildcardBoundType.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("genericTypeArgument", 57);
            if ( state.backtracking>0 ) { memoize(input, 57, genericTypeArgument_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "genericTypeArgument"

    public static class genericWildcardBoundType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericWildcardBoundType"
    // ../etc/JamlAttrHash.g:660:1: genericWildcardBoundType : ( EXTENDS | SUPER ) type ;
    public final JamlAttrHashParser.genericWildcardBoundType_return genericWildcardBoundType() throws RecognitionException {
    traceIn("genericWildcardBoundType", 58);
        JamlAttrHashParser.genericWildcardBoundType_return retval = new JamlAttrHashParser.genericWildcardBoundType_return();
        retval.start = input.LT(1);
        int genericWildcardBoundType_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set205=null;
        JamlAttrHashParser.type_return type206 = null;


        CommonTree set205_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }
            // ../etc/JamlAttrHash.g:661:5: ( ( EXTENDS | SUPER ) type )
            // ../etc/JamlAttrHash.g:661:9: ( EXTENDS | SUPER ) type
            {
            root_0 = (CommonTree)adaptor.nil();

            set205=(Token)input.LT(1);
            set205=(Token)input.LT(1);
            if ( input.LA(1)==EXTENDS||input.LA(1)==SUPER ) {
                input.consume();
                if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(set205), root_0);
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            pushFollow(FOLLOW_type_in_genericWildcardBoundType8317);
            type206=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type206.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("genericWildcardBoundType", 58);
            if ( state.backtracking>0 ) { memoize(input, 58, genericWildcardBoundType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "genericWildcardBoundType"

    public static class genericTypeArgumentListSimplified_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericTypeArgumentListSimplified"
    // ../etc/JamlAttrHash.g:664:1: genericTypeArgumentListSimplified : LESS_THAN genericTypeArgumentSimplified ( COMMA genericTypeArgumentSimplified )* genericTypeListClosing -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgumentSimplified )+ ) ;
    public final JamlAttrHashParser.genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified() throws RecognitionException {
    traceIn("genericTypeArgumentListSimplified", 59);
        JamlAttrHashParser.genericTypeArgumentListSimplified_return retval = new JamlAttrHashParser.genericTypeArgumentListSimplified_return();
        retval.start = input.LT(1);
        int genericTypeArgumentListSimplified_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LESS_THAN207=null;
        Token COMMA209=null;
        JamlAttrHashParser.genericTypeArgumentSimplified_return genericTypeArgumentSimplified208 = null;

        JamlAttrHashParser.genericTypeArgumentSimplified_return genericTypeArgumentSimplified210 = null;

        JamlAttrHashParser.genericTypeListClosing_return genericTypeListClosing211 = null;


        CommonTree LESS_THAN207_tree=null;
        CommonTree COMMA209_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LESS_THAN=new RewriteRuleTokenStream(adaptor,"token LESS_THAN");
        RewriteRuleSubtreeStream stream_genericTypeArgumentSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentSimplified");
        RewriteRuleSubtreeStream stream_genericTypeListClosing=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeListClosing");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }
            // ../etc/JamlAttrHash.g:665:5: ( LESS_THAN genericTypeArgumentSimplified ( COMMA genericTypeArgumentSimplified )* genericTypeListClosing -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgumentSimplified )+ ) )
            // ../etc/JamlAttrHash.g:665:9: LESS_THAN genericTypeArgumentSimplified ( COMMA genericTypeArgumentSimplified )* genericTypeListClosing
            {
            LESS_THAN207=(Token)match(input,LESS_THAN,FOLLOW_LESS_THAN_in_genericTypeArgumentListSimplified8336); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LESS_THAN.add(LESS_THAN207);

            pushFollow(FOLLOW_genericTypeArgumentSimplified_in_genericTypeArgumentListSimplified8338);
            genericTypeArgumentSimplified208=genericTypeArgumentSimplified();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_genericTypeArgumentSimplified.add(genericTypeArgumentSimplified208.getTree());
            // ../etc/JamlAttrHash.g:665:49: ( COMMA genericTypeArgumentSimplified )*
            loop73:
            do {
                int alt73=2;
                int LA73_0 = input.LA(1);

                if ( (LA73_0==COMMA) ) {
                    alt73=1;
                }


                switch (alt73) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:665:50: COMMA genericTypeArgumentSimplified
            	    {
            	    COMMA209=(Token)match(input,COMMA,FOLLOW_COMMA_in_genericTypeArgumentListSimplified8341); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA209);

            	    pushFollow(FOLLOW_genericTypeArgumentSimplified_in_genericTypeArgumentListSimplified8343);
            	    genericTypeArgumentSimplified210=genericTypeArgumentSimplified();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_genericTypeArgumentSimplified.add(genericTypeArgumentSimplified210.getTree());

            	    }
            	    break;

            	default :
            	    break loop73;
                }
            } while (true);

            pushFollow(FOLLOW_genericTypeListClosing_in_genericTypeArgumentListSimplified8347);
            genericTypeListClosing211=genericTypeListClosing();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_genericTypeListClosing.add(genericTypeListClosing211.getTree());


            // AST REWRITE
            // elements: genericTypeArgumentSimplified
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 666:9: -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgumentSimplified )+ )
            {
                // ../etc/JamlAttrHash.g:666:13: ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgumentSimplified )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GENERIC_TYPE_ARG_LIST, LESS_THAN207, "GENERIC_TYPE_ARG_LIST"), root_1);

                if ( !(stream_genericTypeArgumentSimplified.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_genericTypeArgumentSimplified.hasNext() ) {
                    adaptor.addChild(root_1, stream_genericTypeArgumentSimplified.nextTree());

                }
                stream_genericTypeArgumentSimplified.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("genericTypeArgumentListSimplified", 59);
            if ( state.backtracking>0 ) { memoize(input, 59, genericTypeArgumentListSimplified_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "genericTypeArgumentListSimplified"

    public static class genericTypeArgumentSimplified_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericTypeArgumentSimplified"
    // ../etc/JamlAttrHash.g:669:1: genericTypeArgumentSimplified : ( type | QUESTION );
    public final JamlAttrHashParser.genericTypeArgumentSimplified_return genericTypeArgumentSimplified() throws RecognitionException {
    traceIn("genericTypeArgumentSimplified", 60);
        JamlAttrHashParser.genericTypeArgumentSimplified_return retval = new JamlAttrHashParser.genericTypeArgumentSimplified_return();
        retval.start = input.LT(1);
        int genericTypeArgumentSimplified_StartIndex = input.index();
        CommonTree root_0 = null;

        Token QUESTION213=null;
        JamlAttrHashParser.type_return type212 = null;


        CommonTree QUESTION213_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }
            // ../etc/JamlAttrHash.g:670:5: ( type | QUESTION )
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==BOOLEAN||LA74_0==BYTE||LA74_0==CHAR||LA74_0==DOUBLE||LA74_0==FLOAT||(LA74_0>=INT && LA74_0<=LONG)||LA74_0==SHORT||LA74_0==IDENT) ) {
                alt74=1;
            }
            else if ( (LA74_0==QUESTION) ) {
                alt74=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 74, 0, input);

                throw nvae;
            }
            switch (alt74) {
                case 1 :
                    // ../etc/JamlAttrHash.g:670:9: type
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_type_in_genericTypeArgumentSimplified8389);
                    type212=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type212.getTree());

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:671:9: QUESTION
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    QUESTION213=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_genericTypeArgumentSimplified8399); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUESTION213_tree = (CommonTree)adaptor.create(QUESTION213);
                    adaptor.addChild(root_0, QUESTION213_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("genericTypeArgumentSimplified", 60);
            if ( state.backtracking>0 ) { memoize(input, 60, genericTypeArgumentSimplified_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "genericTypeArgumentSimplified"

    public static class qualifiedIdentList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedIdentList"
    // ../etc/JamlAttrHash.g:674:1: qualifiedIdentList : qualifiedIdentifier ( COMMA qualifiedIdentifier )* ;
    public final JamlAttrHashParser.qualifiedIdentList_return qualifiedIdentList() throws RecognitionException {
    traceIn("qualifiedIdentList", 61);
        JamlAttrHashParser.qualifiedIdentList_return retval = new JamlAttrHashParser.qualifiedIdentList_return();
        retval.start = input.LT(1);
        int qualifiedIdentList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA215=null;
        JamlAttrHashParser.qualifiedIdentifier_return qualifiedIdentifier214 = null;

        JamlAttrHashParser.qualifiedIdentifier_return qualifiedIdentifier216 = null;


        CommonTree COMMA215_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }
            // ../etc/JamlAttrHash.g:675:5: ( qualifiedIdentifier ( COMMA qualifiedIdentifier )* )
            // ../etc/JamlAttrHash.g:675:9: qualifiedIdentifier ( COMMA qualifiedIdentifier )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_qualifiedIdentifier_in_qualifiedIdentList8422);
            qualifiedIdentifier214=qualifiedIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedIdentifier214.getTree());
            // ../etc/JamlAttrHash.g:675:29: ( COMMA qualifiedIdentifier )*
            loop75:
            do {
                int alt75=2;
                int LA75_0 = input.LA(1);

                if ( (LA75_0==COMMA) ) {
                    alt75=1;
                }


                switch (alt75) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:675:30: COMMA qualifiedIdentifier
            	    {
            	    COMMA215=(Token)match(input,COMMA,FOLLOW_COMMA_in_qualifiedIdentList8425); if (state.failed) return retval;
            	    pushFollow(FOLLOW_qualifiedIdentifier_in_qualifiedIdentList8428);
            	    qualifiedIdentifier216=qualifiedIdentifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedIdentifier216.getTree());

            	    }
            	    break;

            	default :
            	    break loop75;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("qualifiedIdentList", 61);
            if ( state.backtracking>0 ) { memoize(input, 61, qualifiedIdentList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedIdentList"

    public static class formalParameterList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formalParameterList"
    // ../etc/JamlAttrHash.g:678:1: formalParameterList : LPAREN ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? ) | formalParameterVarArgDecl -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl ) | -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ) ) RPAREN ;
    public final JamlAttrHashParser.formalParameterList_return formalParameterList() throws RecognitionException {
    traceIn("formalParameterList", 62);
        JamlAttrHashParser.formalParameterList_return retval = new JamlAttrHashParser.formalParameterList_return();
        retval.start = input.LT(1);
        int formalParameterList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LPAREN217=null;
        Token COMMA219=null;
        Token COMMA221=null;
        Token RPAREN224=null;
        JamlAttrHashParser.formalParameterStandardDecl_return formalParameterStandardDecl218 = null;

        JamlAttrHashParser.formalParameterStandardDecl_return formalParameterStandardDecl220 = null;

        JamlAttrHashParser.formalParameterVarArgDecl_return formalParameterVarArgDecl222 = null;

        JamlAttrHashParser.formalParameterVarArgDecl_return formalParameterVarArgDecl223 = null;


        CommonTree LPAREN217_tree=null;
        CommonTree COMMA219_tree=null;
        CommonTree COMMA221_tree=null;
        CommonTree RPAREN224_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_formalParameterVarArgDecl=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterVarArgDecl");
        RewriteRuleSubtreeStream stream_formalParameterStandardDecl=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterStandardDecl");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }
            // ../etc/JamlAttrHash.g:679:5: ( LPAREN ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? ) | formalParameterVarArgDecl -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl ) | -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ) ) RPAREN )
            // ../etc/JamlAttrHash.g:679:9: LPAREN ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? ) | formalParameterVarArgDecl -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl ) | -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ) ) RPAREN
            {
            LPAREN217=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_formalParameterList8453); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN217);

            // ../etc/JamlAttrHash.g:680:9: ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? ) | formalParameterVarArgDecl -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl ) | -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ) )
            int alt78=3;
            switch ( input.LA(1) ) {
            case FINAL:
                {
                int LA78_1 = input.LA(2);

                if ( (synpred162_JamlAttrHash()) ) {
                    alt78=1;
                }
                else if ( (synpred163_JamlAttrHash()) ) {
                    alt78=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 78, 1, input);

                    throw nvae;
                }
                }
                break;
            case AT:
                {
                int LA78_2 = input.LA(2);

                if ( (synpred162_JamlAttrHash()) ) {
                    alt78=1;
                }
                else if ( (synpred163_JamlAttrHash()) ) {
                    alt78=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 78, 2, input);

                    throw nvae;
                }
                }
                break;
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
                {
                int LA78_3 = input.LA(2);

                if ( (synpred162_JamlAttrHash()) ) {
                    alt78=1;
                }
                else if ( (synpred163_JamlAttrHash()) ) {
                    alt78=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 78, 3, input);

                    throw nvae;
                }
                }
                break;
            case IDENT:
                {
                int LA78_4 = input.LA(2);

                if ( (synpred162_JamlAttrHash()) ) {
                    alt78=1;
                }
                else if ( (synpred163_JamlAttrHash()) ) {
                    alt78=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 78, 4, input);

                    throw nvae;
                }
                }
                break;
            case RPAREN:
                {
                alt78=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 78, 0, input);

                throw nvae;
            }

            switch (alt78) {
                case 1 :
                    // ../etc/JamlAttrHash.g:681:13: formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )?
                    {
                    pushFollow(FOLLOW_formalParameterStandardDecl_in_formalParameterList8481);
                    formalParameterStandardDecl218=formalParameterStandardDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_formalParameterStandardDecl.add(formalParameterStandardDecl218.getTree());
                    // ../etc/JamlAttrHash.g:681:41: ( COMMA formalParameterStandardDecl )*
                    loop76:
                    do {
                        int alt76=2;
                        int LA76_0 = input.LA(1);

                        if ( (LA76_0==COMMA) ) {
                            int LA76_1 = input.LA(2);

                            if ( (synpred160_JamlAttrHash()) ) {
                                alt76=1;
                            }


                        }


                        switch (alt76) {
                    	case 1 :
                    	    // ../etc/JamlAttrHash.g:681:42: COMMA formalParameterStandardDecl
                    	    {
                    	    COMMA219=(Token)match(input,COMMA,FOLLOW_COMMA_in_formalParameterList8484); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA219);

                    	    pushFollow(FOLLOW_formalParameterStandardDecl_in_formalParameterList8486);
                    	    formalParameterStandardDecl220=formalParameterStandardDecl();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_formalParameterStandardDecl.add(formalParameterStandardDecl220.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop76;
                        }
                    } while (true);

                    // ../etc/JamlAttrHash.g:681:78: ( COMMA formalParameterVarArgDecl )?
                    int alt77=2;
                    int LA77_0 = input.LA(1);

                    if ( (LA77_0==COMMA) ) {
                        alt77=1;
                    }
                    switch (alt77) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:681:79: COMMA formalParameterVarArgDecl
                            {
                            COMMA221=(Token)match(input,COMMA,FOLLOW_COMMA_in_formalParameterList8491); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA221);

                            pushFollow(FOLLOW_formalParameterVarArgDecl_in_formalParameterList8493);
                            formalParameterVarArgDecl222=formalParameterVarArgDecl();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_formalParameterVarArgDecl.add(formalParameterVarArgDecl222.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: formalParameterStandardDecl, formalParameterVarArgDecl
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 682:13: -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? )
                    {
                        // ../etc/JamlAttrHash.g:682:17: ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FORMAL_PARAM_LIST, LPAREN217, "FORMAL_PARAM_LIST"), root_1);

                        if ( !(stream_formalParameterStandardDecl.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_formalParameterStandardDecl.hasNext() ) {
                            adaptor.addChild(root_1, stream_formalParameterStandardDecl.nextTree());

                        }
                        stream_formalParameterStandardDecl.reset();
                        // ../etc/JamlAttrHash.g:682:96: ( formalParameterVarArgDecl )?
                        if ( stream_formalParameterVarArgDecl.hasNext() ) {
                            adaptor.addChild(root_1, stream_formalParameterVarArgDecl.nextTree());

                        }
                        stream_formalParameterVarArgDecl.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:684:13: formalParameterVarArgDecl
                    {
                    pushFollow(FOLLOW_formalParameterVarArgDecl_in_formalParameterList8550);
                    formalParameterVarArgDecl223=formalParameterVarArgDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_formalParameterVarArgDecl.add(formalParameterVarArgDecl223.getTree());


                    // AST REWRITE
                    // elements: formalParameterVarArgDecl
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 685:13: -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl )
                    {
                        // ../etc/JamlAttrHash.g:685:17: ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FORMAL_PARAM_LIST, LPAREN217, "FORMAL_PARAM_LIST"), root_1);

                        adaptor.addChild(root_1, stream_formalParameterVarArgDecl.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // ../etc/JamlAttrHash.g:687:13: 
                    {

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 687:13: -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] )
                    {
                        // ../etc/JamlAttrHash.g:687:17: ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FORMAL_PARAM_LIST, LPAREN217, "FORMAL_PARAM_LIST"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }

            RPAREN224=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_formalParameterList8627); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN224);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("formalParameterList", 62);
            if ( state.backtracking>0 ) { memoize(input, 62, formalParameterList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formalParameterList"

    public static class formalParameterStandardDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formalParameterStandardDecl"
    // ../etc/JamlAttrHash.g:692:1: formalParameterStandardDecl : localModifierList type variableDeclaratorId -> ^( FORMAL_PARAM_STD_DECL localModifierList type variableDeclaratorId ) ;
    public final JamlAttrHashParser.formalParameterStandardDecl_return formalParameterStandardDecl() throws RecognitionException {
    traceIn("formalParameterStandardDecl", 63);
        JamlAttrHashParser.formalParameterStandardDecl_return retval = new JamlAttrHashParser.formalParameterStandardDecl_return();
        retval.start = input.LT(1);
        int formalParameterStandardDecl_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.localModifierList_return localModifierList225 = null;

        JamlAttrHashParser.type_return type226 = null;

        JamlAttrHashParser.variableDeclaratorId_return variableDeclaratorId227 = null;


        RewriteRuleSubtreeStream stream_variableDeclaratorId=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorId");
        RewriteRuleSubtreeStream stream_localModifierList=new RewriteRuleSubtreeStream(adaptor,"rule localModifierList");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }
            // ../etc/JamlAttrHash.g:693:5: ( localModifierList type variableDeclaratorId -> ^( FORMAL_PARAM_STD_DECL localModifierList type variableDeclaratorId ) )
            // ../etc/JamlAttrHash.g:693:9: localModifierList type variableDeclaratorId
            {
            pushFollow(FOLLOW_localModifierList_in_formalParameterStandardDecl8650);
            localModifierList225=localModifierList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_localModifierList.add(localModifierList225.getTree());
            pushFollow(FOLLOW_type_in_formalParameterStandardDecl8652);
            type226=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type226.getTree());
            pushFollow(FOLLOW_variableDeclaratorId_in_formalParameterStandardDecl8654);
            variableDeclaratorId227=variableDeclaratorId();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableDeclaratorId.add(variableDeclaratorId227.getTree());


            // AST REWRITE
            // elements: variableDeclaratorId, localModifierList, type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 694:9: -> ^( FORMAL_PARAM_STD_DECL localModifierList type variableDeclaratorId )
            {
                // ../etc/JamlAttrHash.g:694:13: ^( FORMAL_PARAM_STD_DECL localModifierList type variableDeclaratorId )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FORMAL_PARAM_STD_DECL, "FORMAL_PARAM_STD_DECL"), root_1);

                adaptor.addChild(root_1, stream_localModifierList.nextTree());
                adaptor.addChild(root_1, stream_type.nextTree());
                adaptor.addChild(root_1, stream_variableDeclaratorId.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("formalParameterStandardDecl", 63);
            if ( state.backtracking>0 ) { memoize(input, 63, formalParameterStandardDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formalParameterStandardDecl"

    public static class formalParameterVarArgDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formalParameterVarArgDecl"
    // ../etc/JamlAttrHash.g:697:1: formalParameterVarArgDecl : localModifierList type ELLIPSIS variableDeclaratorId -> ^( FORMAL_PARAM_VARARG_DECL localModifierList type variableDeclaratorId ) ;
    public final JamlAttrHashParser.formalParameterVarArgDecl_return formalParameterVarArgDecl() throws RecognitionException {
    traceIn("formalParameterVarArgDecl", 64);
        JamlAttrHashParser.formalParameterVarArgDecl_return retval = new JamlAttrHashParser.formalParameterVarArgDecl_return();
        retval.start = input.LT(1);
        int formalParameterVarArgDecl_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ELLIPSIS230=null;
        JamlAttrHashParser.localModifierList_return localModifierList228 = null;

        JamlAttrHashParser.type_return type229 = null;

        JamlAttrHashParser.variableDeclaratorId_return variableDeclaratorId231 = null;


        CommonTree ELLIPSIS230_tree=null;
        RewriteRuleTokenStream stream_ELLIPSIS=new RewriteRuleTokenStream(adaptor,"token ELLIPSIS");
        RewriteRuleSubtreeStream stream_variableDeclaratorId=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorId");
        RewriteRuleSubtreeStream stream_localModifierList=new RewriteRuleSubtreeStream(adaptor,"rule localModifierList");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }
            // ../etc/JamlAttrHash.g:698:5: ( localModifierList type ELLIPSIS variableDeclaratorId -> ^( FORMAL_PARAM_VARARG_DECL localModifierList type variableDeclaratorId ) )
            // ../etc/JamlAttrHash.g:698:9: localModifierList type ELLIPSIS variableDeclaratorId
            {
            pushFollow(FOLLOW_localModifierList_in_formalParameterVarArgDecl8698);
            localModifierList228=localModifierList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_localModifierList.add(localModifierList228.getTree());
            pushFollow(FOLLOW_type_in_formalParameterVarArgDecl8700);
            type229=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type229.getTree());
            ELLIPSIS230=(Token)match(input,ELLIPSIS,FOLLOW_ELLIPSIS_in_formalParameterVarArgDecl8702); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ELLIPSIS.add(ELLIPSIS230);

            pushFollow(FOLLOW_variableDeclaratorId_in_formalParameterVarArgDecl8704);
            variableDeclaratorId231=variableDeclaratorId();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableDeclaratorId.add(variableDeclaratorId231.getTree());


            // AST REWRITE
            // elements: localModifierList, type, variableDeclaratorId
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 699:9: -> ^( FORMAL_PARAM_VARARG_DECL localModifierList type variableDeclaratorId )
            {
                // ../etc/JamlAttrHash.g:699:13: ^( FORMAL_PARAM_VARARG_DECL localModifierList type variableDeclaratorId )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FORMAL_PARAM_VARARG_DECL, "FORMAL_PARAM_VARARG_DECL"), root_1);

                adaptor.addChild(root_1, stream_localModifierList.nextTree());
                adaptor.addChild(root_1, stream_type.nextTree());
                adaptor.addChild(root_1, stream_variableDeclaratorId.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("formalParameterVarArgDecl", 64);
            if ( state.backtracking>0 ) { memoize(input, 64, formalParameterVarArgDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formalParameterVarArgDecl"

    public static class qualifiedIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedIdentifier"
    // ../etc/JamlAttrHash.g:702:1: qualifiedIdentifier : ( IDENT -> IDENT ) ( DOT ident= IDENT -> ^( DOT $qualifiedIdentifier $ident) )* ;
    public final JamlAttrHashParser.qualifiedIdentifier_return qualifiedIdentifier() throws RecognitionException {
    traceIn("qualifiedIdentifier", 65);
        JamlAttrHashParser.qualifiedIdentifier_return retval = new JamlAttrHashParser.qualifiedIdentifier_return();
        retval.start = input.LT(1);
        int qualifiedIdentifier_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ident=null;
        Token IDENT232=null;
        Token DOT233=null;

        CommonTree ident_tree=null;
        CommonTree IDENT232_tree=null;
        CommonTree DOT233_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }
            // ../etc/JamlAttrHash.g:703:5: ( ( IDENT -> IDENT ) ( DOT ident= IDENT -> ^( DOT $qualifiedIdentifier $ident) )* )
            // ../etc/JamlAttrHash.g:703:9: ( IDENT -> IDENT ) ( DOT ident= IDENT -> ^( DOT $qualifiedIdentifier $ident) )*
            {
            // ../etc/JamlAttrHash.g:703:9: ( IDENT -> IDENT )
            // ../etc/JamlAttrHash.g:703:13: IDENT
            {
            IDENT232=(Token)match(input,IDENT,FOLLOW_IDENT_in_qualifiedIdentifier8752); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT232);



            // AST REWRITE
            // elements: IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 703:33: -> IDENT
            {
                adaptor.addChild(root_0, stream_IDENT.nextNode());

            }

            retval.tree = root_0;}
            }

            // ../etc/JamlAttrHash.g:705:9: ( DOT ident= IDENT -> ^( DOT $qualifiedIdentifier $ident) )*
            loop79:
            do {
                int alt79=2;
                int LA79_0 = input.LA(1);

                if ( (LA79_0==DOT) ) {
                    int LA79_2 = input.LA(2);

                    if ( (LA79_2==IDENT) ) {
                        int LA79_3 = input.LA(3);

                        if ( (synpred164_JamlAttrHash()) ) {
                            alt79=1;
                        }


                    }


                }


                switch (alt79) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:705:13: DOT ident= IDENT
            	    {
            	    DOT233=(Token)match(input,DOT,FOLLOW_DOT_in_qualifiedIdentifier8795); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT233);

            	    ident=(Token)match(input,IDENT,FOLLOW_IDENT_in_qualifiedIdentifier8799); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_IDENT.add(ident);



            	    // AST REWRITE
            	    // elements: DOT, ident, qualifiedIdentifier
            	    // token labels: ident
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {
            	    retval.tree = root_0;
            	    RewriteRuleTokenStream stream_ident=new RewriteRuleTokenStream(adaptor,"token ident",ident);
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (CommonTree)adaptor.nil();
            	    // 705:33: -> ^( DOT $qualifiedIdentifier $ident)
            	    {
            	        // ../etc/JamlAttrHash.g:705:37: ^( DOT $qualifiedIdentifier $ident)
            	        {
            	        CommonTree root_1 = (CommonTree)adaptor.nil();
            	        root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

            	        adaptor.addChild(root_1, stream_retval.nextTree());
            	        adaptor.addChild(root_1, stream_ident.nextNode());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }

            	    retval.tree = root_0;}
            	    }
            	    break;

            	default :
            	    break loop79;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("qualifiedIdentifier", 65);
            if ( state.backtracking>0 ) { memoize(input, 65, qualifiedIdentifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedIdentifier"

    public static class annotationList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationList"
    // ../etc/JamlAttrHash.g:711:1: annotationList : ( annotation )* -> ^( ANNOTATION_LIST ( annotation )* ) ;
    public final JamlAttrHashParser.annotationList_return annotationList() throws RecognitionException {
    traceIn("annotationList", 66);
        JamlAttrHashParser.annotationList_return retval = new JamlAttrHashParser.annotationList_return();
        retval.start = input.LT(1);
        int annotationList_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.annotation_return annotation234 = null;


        RewriteRuleSubtreeStream stream_annotation=new RewriteRuleSubtreeStream(adaptor,"rule annotation");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }
            // ../etc/JamlAttrHash.g:712:5: ( ( annotation )* -> ^( ANNOTATION_LIST ( annotation )* ) )
            // ../etc/JamlAttrHash.g:712:9: ( annotation )*
            {
            // ../etc/JamlAttrHash.g:712:9: ( annotation )*
            loop80:
            do {
                int alt80=2;
                int LA80_0 = input.LA(1);

                if ( (LA80_0==AT) ) {
                    int LA80_2 = input.LA(2);

                    if ( (LA80_2==IDENT) ) {
                        int LA80_3 = input.LA(3);

                        if ( (synpred165_JamlAttrHash()) ) {
                            alt80=1;
                        }


                    }


                }


                switch (alt80) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:0:0: annotation
            	    {
            	    pushFollow(FOLLOW_annotation_in_annotationList8852);
            	    annotation234=annotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_annotation.add(annotation234.getTree());

            	    }
            	    break;

            	default :
            	    break loop80;
                }
            } while (true);



            // AST REWRITE
            // elements: annotation
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 713:9: -> ^( ANNOTATION_LIST ( annotation )* )
            {
                // ../etc/JamlAttrHash.g:713:13: ^( ANNOTATION_LIST ( annotation )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_LIST, "ANNOTATION_LIST"), root_1);

                // ../etc/JamlAttrHash.g:713:31: ( annotation )*
                while ( stream_annotation.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotation.nextTree());

                }
                stream_annotation.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("annotationList", 66);
            if ( state.backtracking>0 ) { memoize(input, 66, annotationList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationList"

    public static class annotation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotation"
    // ../etc/JamlAttrHash.g:716:1: annotation : AT qualifiedIdentifier ( annotationInit )? ;
    public final JamlAttrHashParser.annotation_return annotation() throws RecognitionException {
    traceIn("annotation", 67);
        JamlAttrHashParser.annotation_return retval = new JamlAttrHashParser.annotation_return();
        retval.start = input.LT(1);
        int annotation_StartIndex = input.index();
        CommonTree root_0 = null;

        Token AT235=null;
        JamlAttrHashParser.qualifiedIdentifier_return qualifiedIdentifier236 = null;

        JamlAttrHashParser.annotationInit_return annotationInit237 = null;


        CommonTree AT235_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }
            // ../etc/JamlAttrHash.g:717:5: ( AT qualifiedIdentifier ( annotationInit )? )
            // ../etc/JamlAttrHash.g:717:9: AT qualifiedIdentifier ( annotationInit )?
            {
            root_0 = (CommonTree)adaptor.nil();

            AT235=(Token)match(input,AT,FOLLOW_AT_in_annotation8890); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            AT235_tree = (CommonTree)adaptor.create(AT235);
            root_0 = (CommonTree)adaptor.becomeRoot(AT235_tree, root_0);
            }
            pushFollow(FOLLOW_qualifiedIdentifier_in_annotation8893);
            qualifiedIdentifier236=qualifiedIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedIdentifier236.getTree());
            // ../etc/JamlAttrHash.g:717:33: ( annotationInit )?
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==LPAREN) ) {
                alt81=1;
            }
            switch (alt81) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: annotationInit
                    {
                    pushFollow(FOLLOW_annotationInit_in_annotation8895);
                    annotationInit237=annotationInit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationInit237.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("annotation", 67);
            if ( state.backtracking>0 ) { memoize(input, 67, annotation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotation"

    public static class annotationInit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationInit"
    // ../etc/JamlAttrHash.g:720:1: annotationInit : LPAREN annotationInitializers RPAREN -> ^( ANNOTATION_INIT_BLOCK[$LPAREN, \"ANNOTATION_INIT_BLOCK\"] annotationInitializers ) ;
    public final JamlAttrHashParser.annotationInit_return annotationInit() throws RecognitionException {
    traceIn("annotationInit", 68);
        JamlAttrHashParser.annotationInit_return retval = new JamlAttrHashParser.annotationInit_return();
        retval.start = input.LT(1);
        int annotationInit_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LPAREN238=null;
        Token RPAREN240=null;
        JamlAttrHashParser.annotationInitializers_return annotationInitializers239 = null;


        CommonTree LPAREN238_tree=null;
        CommonTree RPAREN240_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_annotationInitializers=new RewriteRuleSubtreeStream(adaptor,"rule annotationInitializers");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }
            // ../etc/JamlAttrHash.g:721:5: ( LPAREN annotationInitializers RPAREN -> ^( ANNOTATION_INIT_BLOCK[$LPAREN, \"ANNOTATION_INIT_BLOCK\"] annotationInitializers ) )
            // ../etc/JamlAttrHash.g:721:9: LPAREN annotationInitializers RPAREN
            {
            LPAREN238=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationInit8919); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN238);

            pushFollow(FOLLOW_annotationInitializers_in_annotationInit8921);
            annotationInitializers239=annotationInitializers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_annotationInitializers.add(annotationInitializers239.getTree());
            RPAREN240=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationInit8923); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN240);



            // AST REWRITE
            // elements: annotationInitializers
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 722:9: -> ^( ANNOTATION_INIT_BLOCK[$LPAREN, \"ANNOTATION_INIT_BLOCK\"] annotationInitializers )
            {
                // ../etc/JamlAttrHash.g:722:13: ^( ANNOTATION_INIT_BLOCK[$LPAREN, \"ANNOTATION_INIT_BLOCK\"] annotationInitializers )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_INIT_BLOCK, LPAREN238, "ANNOTATION_INIT_BLOCK"), root_1);

                adaptor.addChild(root_1, stream_annotationInitializers.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("annotationInit", 68);
            if ( state.backtracking>0 ) { memoize(input, 68, annotationInit_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationInit"

    public static class annotationInitializers_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationInitializers"
    // ../etc/JamlAttrHash.g:725:1: annotationInitializers : ( annotationInitializer ( COMMA annotationInitializer )* -> ^( ANNOTATION_INIT_KEY_LIST ( annotationInitializer )+ ) | annotationElementValue -> ^( ANNOTATION_INIT_DEFAULT_KEY annotationElementValue ) );
    public final JamlAttrHashParser.annotationInitializers_return annotationInitializers() throws RecognitionException {
    traceIn("annotationInitializers", 69);
        JamlAttrHashParser.annotationInitializers_return retval = new JamlAttrHashParser.annotationInitializers_return();
        retval.start = input.LT(1);
        int annotationInitializers_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA242=null;
        JamlAttrHashParser.annotationInitializer_return annotationInitializer241 = null;

        JamlAttrHashParser.annotationInitializer_return annotationInitializer243 = null;

        JamlAttrHashParser.annotationElementValue_return annotationElementValue244 = null;


        CommonTree COMMA242_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_annotationElementValue=new RewriteRuleSubtreeStream(adaptor,"rule annotationElementValue");
        RewriteRuleSubtreeStream stream_annotationInitializer=new RewriteRuleSubtreeStream(adaptor,"rule annotationInitializer");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }
            // ../etc/JamlAttrHash.g:726:5: ( annotationInitializer ( COMMA annotationInitializer )* -> ^( ANNOTATION_INIT_KEY_LIST ( annotationInitializer )+ ) | annotationElementValue -> ^( ANNOTATION_INIT_DEFAULT_KEY annotationElementValue ) )
            int alt83=2;
            int LA83_0 = input.LA(1);

            if ( (LA83_0==IDENT) ) {
                int LA83_1 = input.LA(2);

                if ( (LA83_1==ASSIGN) ) {
                    alt83=1;
                }
                else if ( (LA83_1==AND||LA83_1==BIT_SHIFT_RIGHT||(LA83_1>=DEC && LA83_1<=DIV)||LA83_1==DOT||(LA83_1>=EQUAL && LA83_1<=LBRACK)||(LA83_1>=LESS_OR_EQUAL && LA83_1<=LOGICAL_AND)||(LA83_1>=LOGICAL_OR && LA83_1<=MINUS)||LA83_1==MOD||(LA83_1>=NOT_EQUAL && LA83_1<=OR)||LA83_1==PLUS||LA83_1==QUESTION||LA83_1==RPAREN||LA83_1==SHIFT_LEFT||LA83_1==SHIFT_RIGHT||LA83_1==STAR||LA83_1==XOR||LA83_1==INSTANCEOF) ) {
                    alt83=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 83, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA83_0==AT||LA83_0==DEC||LA83_0==INC||LA83_0==LCURLY||LA83_0==LESS_THAN||LA83_0==LOGICAL_NOT||(LA83_0>=LPAREN && LA83_0<=MINUS)||LA83_0==NOT||LA83_0==PLUS||LA83_0==BOOLEAN||LA83_0==BYTE||LA83_0==CHAR||LA83_0==DOUBLE||LA83_0==FALSE||LA83_0==FLOAT||(LA83_0>=INT && LA83_0<=LONG)||(LA83_0>=NEW && LA83_0<=NULL)||LA83_0==SHORT||LA83_0==SUPER||LA83_0==THIS||LA83_0==TRUE||LA83_0==VOID||(LA83_0>=HEX_LITERAL && LA83_0<=STRING_LITERAL)) ) {
                alt83=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 83, 0, input);

                throw nvae;
            }
            switch (alt83) {
                case 1 :
                    // ../etc/JamlAttrHash.g:726:9: annotationInitializer ( COMMA annotationInitializer )*
                    {
                    pushFollow(FOLLOW_annotationInitializer_in_annotationInitializers8960);
                    annotationInitializer241=annotationInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_annotationInitializer.add(annotationInitializer241.getTree());
                    // ../etc/JamlAttrHash.g:726:31: ( COMMA annotationInitializer )*
                    loop82:
                    do {
                        int alt82=2;
                        int LA82_0 = input.LA(1);

                        if ( (LA82_0==COMMA) ) {
                            alt82=1;
                        }


                        switch (alt82) {
                    	case 1 :
                    	    // ../etc/JamlAttrHash.g:726:32: COMMA annotationInitializer
                    	    {
                    	    COMMA242=(Token)match(input,COMMA,FOLLOW_COMMA_in_annotationInitializers8963); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA242);

                    	    pushFollow(FOLLOW_annotationInitializer_in_annotationInitializers8965);
                    	    annotationInitializer243=annotationInitializer();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_annotationInitializer.add(annotationInitializer243.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop82;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: annotationInitializer
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 727:9: -> ^( ANNOTATION_INIT_KEY_LIST ( annotationInitializer )+ )
                    {
                        // ../etc/JamlAttrHash.g:727:13: ^( ANNOTATION_INIT_KEY_LIST ( annotationInitializer )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_INIT_KEY_LIST, "ANNOTATION_INIT_KEY_LIST"), root_1);

                        if ( !(stream_annotationInitializer.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_annotationInitializer.hasNext() ) {
                            adaptor.addChild(root_1, stream_annotationInitializer.nextTree());

                        }
                        stream_annotationInitializer.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:728:9: annotationElementValue
                    {
                    pushFollow(FOLLOW_annotationElementValue_in_annotationInitializers8995);
                    annotationElementValue244=annotationElementValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_annotationElementValue.add(annotationElementValue244.getTree());


                    // AST REWRITE
                    // elements: annotationElementValue
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 729:9: -> ^( ANNOTATION_INIT_DEFAULT_KEY annotationElementValue )
                    {
                        // ../etc/JamlAttrHash.g:729:13: ^( ANNOTATION_INIT_DEFAULT_KEY annotationElementValue )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_INIT_DEFAULT_KEY, "ANNOTATION_INIT_DEFAULT_KEY"), root_1);

                        adaptor.addChild(root_1, stream_annotationElementValue.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("annotationInitializers", 69);
            if ( state.backtracking>0 ) { memoize(input, 69, annotationInitializers_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationInitializers"

    public static class annotationInitializer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationInitializer"
    // ../etc/JamlAttrHash.g:732:1: annotationInitializer : IDENT ASSIGN annotationElementValue ;
    public final JamlAttrHashParser.annotationInitializer_return annotationInitializer() throws RecognitionException {
    traceIn("annotationInitializer", 70);
        JamlAttrHashParser.annotationInitializer_return retval = new JamlAttrHashParser.annotationInitializer_return();
        retval.start = input.LT(1);
        int annotationInitializer_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT245=null;
        Token ASSIGN246=null;
        JamlAttrHashParser.annotationElementValue_return annotationElementValue247 = null;


        CommonTree IDENT245_tree=null;
        CommonTree ASSIGN246_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }
            // ../etc/JamlAttrHash.g:733:5: ( IDENT ASSIGN annotationElementValue )
            // ../etc/JamlAttrHash.g:733:9: IDENT ASSIGN annotationElementValue
            {
            root_0 = (CommonTree)adaptor.nil();

            IDENT245=(Token)match(input,IDENT,FOLLOW_IDENT_in_annotationInitializer9036); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT245_tree = (CommonTree)adaptor.create(IDENT245);
            root_0 = (CommonTree)adaptor.becomeRoot(IDENT245_tree, root_0);
            }
            ASSIGN246=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_annotationInitializer9039); if (state.failed) return retval;
            pushFollow(FOLLOW_annotationElementValue_in_annotationInitializer9042);
            annotationElementValue247=annotationElementValue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationElementValue247.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("annotationInitializer", 70);
            if ( state.backtracking>0 ) { memoize(input, 70, annotationInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationInitializer"

    public static class annotationElementValue_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationElementValue"
    // ../etc/JamlAttrHash.g:736:1: annotationElementValue : ( annotationElementValueExpression | annotation | annotationElementValueArrayInitializer );
    public final JamlAttrHashParser.annotationElementValue_return annotationElementValue() throws RecognitionException {
    traceIn("annotationElementValue", 71);
        JamlAttrHashParser.annotationElementValue_return retval = new JamlAttrHashParser.annotationElementValue_return();
        retval.start = input.LT(1);
        int annotationElementValue_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.annotationElementValueExpression_return annotationElementValueExpression248 = null;

        JamlAttrHashParser.annotation_return annotation249 = null;

        JamlAttrHashParser.annotationElementValueArrayInitializer_return annotationElementValueArrayInitializer250 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }
            // ../etc/JamlAttrHash.g:737:5: ( annotationElementValueExpression | annotation | annotationElementValueArrayInitializer )
            int alt84=3;
            switch ( input.LA(1) ) {
            case DEC:
            case INC:
            case LESS_THAN:
            case LOGICAL_NOT:
            case LPAREN:
            case MINUS:
            case NOT:
            case PLUS:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case SHORT:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
            case IDENT:
            case HEX_LITERAL:
            case OCTAL_LITERAL:
            case DECIMAL_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
                {
                alt84=1;
                }
                break;
            case AT:
                {
                alt84=2;
                }
                break;
            case LCURLY:
                {
                alt84=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 84, 0, input);

                throw nvae;
            }

            switch (alt84) {
                case 1 :
                    // ../etc/JamlAttrHash.g:737:9: annotationElementValueExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_annotationElementValueExpression_in_annotationElementValue9065);
                    annotationElementValueExpression248=annotationElementValueExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationElementValueExpression248.getTree());

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:738:9: annotation
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_annotation_in_annotationElementValue9075);
                    annotation249=annotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotation249.getTree());

                    }
                    break;
                case 3 :
                    // ../etc/JamlAttrHash.g:739:9: annotationElementValueArrayInitializer
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_annotationElementValueArrayInitializer_in_annotationElementValue9085);
                    annotationElementValueArrayInitializer250=annotationElementValueArrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationElementValueArrayInitializer250.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("annotationElementValue", 71);
            if ( state.backtracking>0 ) { memoize(input, 71, annotationElementValue_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationElementValue"

    public static class annotationElementValueExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationElementValueExpression"
    // ../etc/JamlAttrHash.g:742:1: annotationElementValueExpression : conditionalExpression -> ^( EXPR conditionalExpression ) ;
    public final JamlAttrHashParser.annotationElementValueExpression_return annotationElementValueExpression() throws RecognitionException {
    traceIn("annotationElementValueExpression", 72);
        JamlAttrHashParser.annotationElementValueExpression_return retval = new JamlAttrHashParser.annotationElementValueExpression_return();
        retval.start = input.LT(1);
        int annotationElementValueExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.conditionalExpression_return conditionalExpression251 = null;


        RewriteRuleSubtreeStream stream_conditionalExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }
            // ../etc/JamlAttrHash.g:743:5: ( conditionalExpression -> ^( EXPR conditionalExpression ) )
            // ../etc/JamlAttrHash.g:743:9: conditionalExpression
            {
            pushFollow(FOLLOW_conditionalExpression_in_annotationElementValueExpression9108);
            conditionalExpression251=conditionalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_conditionalExpression.add(conditionalExpression251.getTree());


            // AST REWRITE
            // elements: conditionalExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 744:9: -> ^( EXPR conditionalExpression )
            {
                // ../etc/JamlAttrHash.g:744:13: ^( EXPR conditionalExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXPR, "EXPR"), root_1);

                adaptor.addChild(root_1, stream_conditionalExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("annotationElementValueExpression", 72);
            if ( state.backtracking>0 ) { memoize(input, 72, annotationElementValueExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationElementValueExpression"

    public static class annotationElementValueArrayInitializer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationElementValueArrayInitializer"
    // ../etc/JamlAttrHash.g:747:1: annotationElementValueArrayInitializer : LCURLY ( annotationElementValue ( COMMA annotationElementValue )* )? ( COMMA )? RCURLY -> ^( ANNOTATION_INIT_ARRAY_ELEMENT[$LCURLY, \"ANNOTATION_ELEM_VALUE_ARRAY_INIT\"] ( annotationElementValue )* ) ;
    public final JamlAttrHashParser.annotationElementValueArrayInitializer_return annotationElementValueArrayInitializer() throws RecognitionException {
    traceIn("annotationElementValueArrayInitializer", 73);
        JamlAttrHashParser.annotationElementValueArrayInitializer_return retval = new JamlAttrHashParser.annotationElementValueArrayInitializer_return();
        retval.start = input.LT(1);
        int annotationElementValueArrayInitializer_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LCURLY252=null;
        Token COMMA254=null;
        Token COMMA256=null;
        Token RCURLY257=null;
        JamlAttrHashParser.annotationElementValue_return annotationElementValue253 = null;

        JamlAttrHashParser.annotationElementValue_return annotationElementValue255 = null;


        CommonTree LCURLY252_tree=null;
        CommonTree COMMA254_tree=null;
        CommonTree COMMA256_tree=null;
        CommonTree RCURLY257_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_annotationElementValue=new RewriteRuleSubtreeStream(adaptor,"rule annotationElementValue");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }
            // ../etc/JamlAttrHash.g:748:5: ( LCURLY ( annotationElementValue ( COMMA annotationElementValue )* )? ( COMMA )? RCURLY -> ^( ANNOTATION_INIT_ARRAY_ELEMENT[$LCURLY, \"ANNOTATION_ELEM_VALUE_ARRAY_INIT\"] ( annotationElementValue )* ) )
            // ../etc/JamlAttrHash.g:748:9: LCURLY ( annotationElementValue ( COMMA annotationElementValue )* )? ( COMMA )? RCURLY
            {
            LCURLY252=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_annotationElementValueArrayInitializer9148); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY252);

            // ../etc/JamlAttrHash.g:748:16: ( annotationElementValue ( COMMA annotationElementValue )* )?
            int alt86=2;
            int LA86_0 = input.LA(1);

            if ( (LA86_0==AT||LA86_0==DEC||LA86_0==INC||LA86_0==LCURLY||LA86_0==LESS_THAN||LA86_0==LOGICAL_NOT||(LA86_0>=LPAREN && LA86_0<=MINUS)||LA86_0==NOT||LA86_0==PLUS||LA86_0==BOOLEAN||LA86_0==BYTE||LA86_0==CHAR||LA86_0==DOUBLE||LA86_0==FALSE||LA86_0==FLOAT||(LA86_0>=INT && LA86_0<=LONG)||(LA86_0>=NEW && LA86_0<=NULL)||LA86_0==SHORT||LA86_0==SUPER||LA86_0==THIS||LA86_0==TRUE||LA86_0==VOID||(LA86_0>=IDENT && LA86_0<=STRING_LITERAL)) ) {
                alt86=1;
            }
            switch (alt86) {
                case 1 :
                    // ../etc/JamlAttrHash.g:748:17: annotationElementValue ( COMMA annotationElementValue )*
                    {
                    pushFollow(FOLLOW_annotationElementValue_in_annotationElementValueArrayInitializer9151);
                    annotationElementValue253=annotationElementValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_annotationElementValue.add(annotationElementValue253.getTree());
                    // ../etc/JamlAttrHash.g:748:40: ( COMMA annotationElementValue )*
                    loop85:
                    do {
                        int alt85=2;
                        int LA85_0 = input.LA(1);

                        if ( (LA85_0==COMMA) ) {
                            int LA85_1 = input.LA(2);

                            if ( (LA85_1==AT||LA85_1==DEC||LA85_1==INC||LA85_1==LCURLY||LA85_1==LESS_THAN||LA85_1==LOGICAL_NOT||(LA85_1>=LPAREN && LA85_1<=MINUS)||LA85_1==NOT||LA85_1==PLUS||LA85_1==BOOLEAN||LA85_1==BYTE||LA85_1==CHAR||LA85_1==DOUBLE||LA85_1==FALSE||LA85_1==FLOAT||(LA85_1>=INT && LA85_1<=LONG)||(LA85_1>=NEW && LA85_1<=NULL)||LA85_1==SHORT||LA85_1==SUPER||LA85_1==THIS||LA85_1==TRUE||LA85_1==VOID||(LA85_1>=IDENT && LA85_1<=STRING_LITERAL)) ) {
                                alt85=1;
                            }


                        }


                        switch (alt85) {
                    	case 1 :
                    	    // ../etc/JamlAttrHash.g:748:41: COMMA annotationElementValue
                    	    {
                    	    COMMA254=(Token)match(input,COMMA,FOLLOW_COMMA_in_annotationElementValueArrayInitializer9154); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA254);

                    	    pushFollow(FOLLOW_annotationElementValue_in_annotationElementValueArrayInitializer9156);
                    	    annotationElementValue255=annotationElementValue();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_annotationElementValue.add(annotationElementValue255.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop85;
                        }
                    } while (true);


                    }
                    break;

            }

            // ../etc/JamlAttrHash.g:748:74: ( COMMA )?
            int alt87=2;
            int LA87_0 = input.LA(1);

            if ( (LA87_0==COMMA) ) {
                alt87=1;
            }
            switch (alt87) {
                case 1 :
                    // ../etc/JamlAttrHash.g:748:75: COMMA
                    {
                    COMMA256=(Token)match(input,COMMA,FOLLOW_COMMA_in_annotationElementValueArrayInitializer9163); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA256);


                    }
                    break;

            }

            RCURLY257=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_annotationElementValueArrayInitializer9167); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY257);



            // AST REWRITE
            // elements: annotationElementValue
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 749:9: -> ^( ANNOTATION_INIT_ARRAY_ELEMENT[$LCURLY, \"ANNOTATION_ELEM_VALUE_ARRAY_INIT\"] ( annotationElementValue )* )
            {
                // ../etc/JamlAttrHash.g:749:13: ^( ANNOTATION_INIT_ARRAY_ELEMENT[$LCURLY, \"ANNOTATION_ELEM_VALUE_ARRAY_INIT\"] ( annotationElementValue )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_INIT_ARRAY_ELEMENT, LCURLY252, "ANNOTATION_ELEM_VALUE_ARRAY_INIT"), root_1);

                // ../etc/JamlAttrHash.g:749:90: ( annotationElementValue )*
                while ( stream_annotationElementValue.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotationElementValue.nextTree());

                }
                stream_annotationElementValue.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("annotationElementValueArrayInitializer", 73);
            if ( state.backtracking>0 ) { memoize(input, 73, annotationElementValueArrayInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationElementValueArrayInitializer"

    public static class annotationTypeDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeDeclaration"
    // ../etc/JamlAttrHash.g:752:1: annotationTypeDeclaration[CommonTree modifiers] : AT INTERFACE IDENT annotationBody -> ^( AT IDENT annotationBody ) ;
    public final JamlAttrHashParser.annotationTypeDeclaration_return annotationTypeDeclaration(CommonTree modifiers) throws RecognitionException {
    traceIn("annotationTypeDeclaration", 74);
        JamlAttrHashParser.annotationTypeDeclaration_return retval = new JamlAttrHashParser.annotationTypeDeclaration_return();
        retval.start = input.LT(1);
        int annotationTypeDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token AT258=null;
        Token INTERFACE259=null;
        Token IDENT260=null;
        JamlAttrHashParser.annotationBody_return annotationBody261 = null;


        CommonTree AT258_tree=null;
        CommonTree INTERFACE259_tree=null;
        CommonTree IDENT260_tree=null;
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_INTERFACE=new RewriteRuleTokenStream(adaptor,"token INTERFACE");
        RewriteRuleSubtreeStream stream_annotationBody=new RewriteRuleSubtreeStream(adaptor,"rule annotationBody");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }
            // ../etc/JamlAttrHash.g:753:5: ( AT INTERFACE IDENT annotationBody -> ^( AT IDENT annotationBody ) )
            // ../etc/JamlAttrHash.g:753:9: AT INTERFACE IDENT annotationBody
            {
            AT258=(Token)match(input,AT,FOLLOW_AT_in_annotationTypeDeclaration9210); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AT.add(AT258);

            INTERFACE259=(Token)match(input,INTERFACE,FOLLOW_INTERFACE_in_annotationTypeDeclaration9212); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTERFACE.add(INTERFACE259);

            IDENT260=(Token)match(input,IDENT,FOLLOW_IDENT_in_annotationTypeDeclaration9214); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT260);

            pushFollow(FOLLOW_annotationBody_in_annotationTypeDeclaration9216);
            annotationBody261=annotationBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_annotationBody.add(annotationBody261.getTree());


            // AST REWRITE
            // elements: annotationBody, AT, IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 754:9: -> ^( AT IDENT annotationBody )
            {
                // ../etc/JamlAttrHash.g:754:12: ^( AT IDENT annotationBody )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AT.nextNode(), root_1);

                adaptor.addChild(root_1, modifiers);
                adaptor.addChild(root_1, stream_IDENT.nextNode());
                adaptor.addChild(root_1, stream_annotationBody.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("annotationTypeDeclaration", 74);
            if ( state.backtracking>0 ) { memoize(input, 74, annotationTypeDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationTypeDeclaration"

    public static class annotationBody_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationBody"
    // ../etc/JamlAttrHash.g:757:1: annotationBody : LCURLY ( annotationScopeDeclarations )* RCURLY -> ^( ANNOTATION_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( annotationScopeDeclarations )* ) ;
    public final JamlAttrHashParser.annotationBody_return annotationBody() throws RecognitionException {
    traceIn("annotationBody", 75);
        JamlAttrHashParser.annotationBody_return retval = new JamlAttrHashParser.annotationBody_return();
        retval.start = input.LT(1);
        int annotationBody_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LCURLY262=null;
        Token RCURLY264=null;
        JamlAttrHashParser.annotationScopeDeclarations_return annotationScopeDeclarations263 = null;


        CommonTree LCURLY262_tree=null;
        CommonTree RCURLY264_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_annotationScopeDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule annotationScopeDeclarations");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }
            // ../etc/JamlAttrHash.g:758:5: ( LCURLY ( annotationScopeDeclarations )* RCURLY -> ^( ANNOTATION_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( annotationScopeDeclarations )* ) )
            // ../etc/JamlAttrHash.g:758:9: LCURLY ( annotationScopeDeclarations )* RCURLY
            {
            LCURLY262=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_annotationBody9259); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY262);

            // ../etc/JamlAttrHash.g:758:16: ( annotationScopeDeclarations )*
            loop88:
            do {
                int alt88=2;
                int LA88_0 = input.LA(1);

                if ( (LA88_0==AT||LA88_0==LESS_THAN||LA88_0==ABSTRACT||LA88_0==BOOLEAN||LA88_0==BYTE||(LA88_0>=CHAR && LA88_0<=CLASS)||LA88_0==DOUBLE||LA88_0==ENUM||LA88_0==FINAL||LA88_0==FLOAT||LA88_0==INTERFACE||(LA88_0>=INT && LA88_0<=NATIVE)||(LA88_0>=PRIVATE && LA88_0<=PUBLIC)||(LA88_0>=SHORT && LA88_0<=STRICTFP)||LA88_0==SYNCHRONIZED||LA88_0==TRANSIENT||(LA88_0>=VOID && LA88_0<=VOLATILE)||LA88_0==IDENT) ) {
                    alt88=1;
                }


                switch (alt88) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:0:0: annotationScopeDeclarations
            	    {
            	    pushFollow(FOLLOW_annotationScopeDeclarations_in_annotationBody9261);
            	    annotationScopeDeclarations263=annotationScopeDeclarations();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_annotationScopeDeclarations.add(annotationScopeDeclarations263.getTree());

            	    }
            	    break;

            	default :
            	    break loop88;
                }
            } while (true);

            RCURLY264=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_annotationBody9264); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY264);



            // AST REWRITE
            // elements: annotationScopeDeclarations
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 759:9: -> ^( ANNOTATION_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( annotationScopeDeclarations )* )
            {
                // ../etc/JamlAttrHash.g:759:13: ^( ANNOTATION_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( annotationScopeDeclarations )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_TOP_LEVEL_SCOPE, LCURLY262, "CLASS_TOP_LEVEL_SCOPE"), root_1);

                // ../etc/JamlAttrHash.g:759:76: ( annotationScopeDeclarations )*
                while ( stream_annotationScopeDeclarations.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotationScopeDeclarations.nextTree());

                }
                stream_annotationScopeDeclarations.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("annotationBody", 75);
            if ( state.backtracking>0 ) { memoize(input, 75, annotationBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationBody"

    public static class annotationScopeDeclarations_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationScopeDeclarations"
    // ../etc/JamlAttrHash.g:762:1: annotationScopeDeclarations : ( modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration );
    public final JamlAttrHashParser.annotationScopeDeclarations_return annotationScopeDeclarations() throws RecognitionException {
    traceIn("annotationScopeDeclarations", 76);
        JamlAttrHashParser.annotationScopeDeclarations_return retval = new JamlAttrHashParser.annotationScopeDeclarations_return();
        retval.start = input.LT(1);
        int annotationScopeDeclarations_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT267=null;
        Token LPAREN268=null;
        Token RPAREN269=null;
        Token SEMI271=null;
        Token SEMI273=null;
        JamlAttrHashParser.modifierList_return modifierList265 = null;

        JamlAttrHashParser.type_return type266 = null;

        JamlAttrHashParser.annotationDefaultValue_return annotationDefaultValue270 = null;

        JamlAttrHashParser.classFieldDeclaratorList_return classFieldDeclaratorList272 = null;

        JamlAttrHashParser.typeDeclaration_return typeDeclaration274 = null;


        CommonTree IDENT267_tree=null;
        CommonTree LPAREN268_tree=null;
        CommonTree RPAREN269_tree=null;
        CommonTree SEMI271_tree=null;
        CommonTree SEMI273_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_modifierList=new RewriteRuleSubtreeStream(adaptor,"rule modifierList");
        RewriteRuleSubtreeStream stream_annotationDefaultValue=new RewriteRuleSubtreeStream(adaptor,"rule annotationDefaultValue");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_classFieldDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule classFieldDeclaratorList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }
            // ../etc/JamlAttrHash.g:763:5: ( modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration )
            int alt91=2;
            alt91 = dfa91.predict(input);
            switch (alt91) {
                case 1 :
                    // ../etc/JamlAttrHash.g:763:9: modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) )
                    {
                    pushFollow(FOLLOW_modifierList_in_annotationScopeDeclarations9306);
                    modifierList265=modifierList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_modifierList.add(modifierList265.getTree());
                    pushFollow(FOLLOW_type_in_annotationScopeDeclarations9308);
                    type266=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type266.getTree());
                    // ../etc/JamlAttrHash.g:764:9: ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) )
                    int alt90=2;
                    int LA90_0 = input.LA(1);

                    if ( (LA90_0==IDENT) ) {
                        int LA90_1 = input.LA(2);

                        if ( (LA90_1==LPAREN) ) {
                            alt90=1;
                        }
                        else if ( (LA90_1==ASSIGN||LA90_1==COMMA||LA90_1==LBRACK||LA90_1==SEMI) ) {
                            alt90=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 90, 1, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 90, 0, input);

                        throw nvae;
                    }
                    switch (alt90) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:764:13: IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI
                            {
                            IDENT267=(Token)match(input,IDENT,FOLLOW_IDENT_in_annotationScopeDeclarations9322); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(IDENT267);

                            LPAREN268=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationScopeDeclarations9324); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN268);

                            RPAREN269=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationScopeDeclarations9326); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN269);

                            // ../etc/JamlAttrHash.g:764:33: ( annotationDefaultValue )?
                            int alt89=2;
                            int LA89_0 = input.LA(1);

                            if ( (LA89_0==DEFAULT) ) {
                                alt89=1;
                            }
                            switch (alt89) {
                                case 1 :
                                    // ../etc/JamlAttrHash.g:0:0: annotationDefaultValue
                                    {
                                    pushFollow(FOLLOW_annotationDefaultValue_in_annotationScopeDeclarations9328);
                                    annotationDefaultValue270=annotationDefaultValue();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_annotationDefaultValue.add(annotationDefaultValue270.getTree());

                                    }
                                    break;

                            }

                            SEMI271=(Token)match(input,SEMI,FOLLOW_SEMI_in_annotationScopeDeclarations9331); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMI.add(SEMI271);



                            // AST REWRITE
                            // elements: IDENT, modifierList, annotationDefaultValue, type
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 765:13: -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? )
                            {
                                // ../etc/JamlAttrHash.g:765:17: ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_METHOD_DECL, "ANNOTATION_METHOD_DECL"), root_1);

                                adaptor.addChild(root_1, stream_modifierList.nextTree());
                                adaptor.addChild(root_1, stream_type.nextTree());
                                adaptor.addChild(root_1, stream_IDENT.nextNode());
                                // ../etc/JamlAttrHash.g:765:66: ( annotationDefaultValue )?
                                if ( stream_annotationDefaultValue.hasNext() ) {
                                    adaptor.addChild(root_1, stream_annotationDefaultValue.nextTree());

                                }
                                stream_annotationDefaultValue.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // ../etc/JamlAttrHash.g:766:13: classFieldDeclaratorList SEMI
                            {
                            pushFollow(FOLLOW_classFieldDeclaratorList_in_annotationScopeDeclarations9373);
                            classFieldDeclaratorList272=classFieldDeclaratorList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_classFieldDeclaratorList.add(classFieldDeclaratorList272.getTree());
                            SEMI273=(Token)match(input,SEMI,FOLLOW_SEMI_in_annotationScopeDeclarations9375); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMI.add(SEMI273);



                            // AST REWRITE
                            // elements: type, classFieldDeclaratorList, modifierList
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 767:13: -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList )
                            {
                                // ../etc/JamlAttrHash.g:767:17: ^( VAR_DECLARATION modifierList type classFieldDeclaratorList )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_DECLARATION, "VAR_DECLARATION"), root_1);

                                adaptor.addChild(root_1, stream_modifierList.nextTree());
                                adaptor.addChild(root_1, stream_type.nextTree());
                                adaptor.addChild(root_1, stream_classFieldDeclaratorList.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:769:9: typeDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_typeDeclaration_in_annotationScopeDeclarations9420);
                    typeDeclaration274=typeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDeclaration274.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("annotationScopeDeclarations", 76);
            if ( state.backtracking>0 ) { memoize(input, 76, annotationScopeDeclarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationScopeDeclarations"

    public static class annotationDefaultValue_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationDefaultValue"
    // ../etc/JamlAttrHash.g:772:1: annotationDefaultValue : DEFAULT annotationElementValue ;
    public final JamlAttrHashParser.annotationDefaultValue_return annotationDefaultValue() throws RecognitionException {
    traceIn("annotationDefaultValue", 77);
        JamlAttrHashParser.annotationDefaultValue_return retval = new JamlAttrHashParser.annotationDefaultValue_return();
        retval.start = input.LT(1);
        int annotationDefaultValue_StartIndex = input.index();
        CommonTree root_0 = null;

        Token DEFAULT275=null;
        JamlAttrHashParser.annotationElementValue_return annotationElementValue276 = null;


        CommonTree DEFAULT275_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }
            // ../etc/JamlAttrHash.g:773:5: ( DEFAULT annotationElementValue )
            // ../etc/JamlAttrHash.g:773:9: DEFAULT annotationElementValue
            {
            root_0 = (CommonTree)adaptor.nil();

            DEFAULT275=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_annotationDefaultValue9443); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DEFAULT275_tree = (CommonTree)adaptor.create(DEFAULT275);
            root_0 = (CommonTree)adaptor.becomeRoot(DEFAULT275_tree, root_0);
            }
            pushFollow(FOLLOW_annotationElementValue_in_annotationDefaultValue9446);
            annotationElementValue276=annotationElementValue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationElementValue276.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("annotationDefaultValue", 77);
            if ( state.backtracking>0 ) { memoize(input, 77, annotationDefaultValue_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationDefaultValue"

    public static class block_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "block"
    // ../etc/JamlAttrHash.g:778:1: block : LCURLY ( blockStatement )* RCURLY -> ^( BLOCK_SCOPE[$LCURLY, \"BLOCK_SCOPE\"] ( blockStatement )* ) ;
    public final JamlAttrHashParser.block_return block() throws RecognitionException {
    traceIn("block", 78);
        JamlAttrHashParser.block_return retval = new JamlAttrHashParser.block_return();
        retval.start = input.LT(1);
        int block_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LCURLY277=null;
        Token RCURLY279=null;
        JamlAttrHashParser.blockStatement_return blockStatement278 = null;


        CommonTree LCURLY277_tree=null;
        CommonTree RCURLY279_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_blockStatement=new RewriteRuleSubtreeStream(adaptor,"rule blockStatement");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }
            // ../etc/JamlAttrHash.g:779:5: ( LCURLY ( blockStatement )* RCURLY -> ^( BLOCK_SCOPE[$LCURLY, \"BLOCK_SCOPE\"] ( blockStatement )* ) )
            // ../etc/JamlAttrHash.g:779:9: LCURLY ( blockStatement )* RCURLY
            {
            LCURLY277=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_block9467); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY277);

            // ../etc/JamlAttrHash.g:779:16: ( blockStatement )*
            loop92:
            do {
                int alt92=2;
                int LA92_0 = input.LA(1);

                if ( (LA92_0==AT||LA92_0==DEC||LA92_0==INC||LA92_0==LCURLY||LA92_0==LESS_THAN||LA92_0==LOGICAL_NOT||(LA92_0>=LPAREN && LA92_0<=MINUS)||LA92_0==NOT||LA92_0==PLUS||LA92_0==SEMI||(LA92_0>=ABSTRACT && LA92_0<=BYTE)||(LA92_0>=CHAR && LA92_0<=CONTINUE)||(LA92_0>=DO && LA92_0<=DOUBLE)||LA92_0==ENUM||(LA92_0>=FALSE && LA92_0<=FINAL)||(LA92_0>=FLOAT && LA92_0<=IF)||LA92_0==INTERFACE||(LA92_0>=INT && LA92_0<=NULL)||(LA92_0>=PRIVATE && LA92_0<=THROW)||(LA92_0>=TRANSIENT && LA92_0<=WHILE)||(LA92_0>=IDENT && LA92_0<=STRING_LITERAL)) ) {
                    alt92=1;
                }


                switch (alt92) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:0:0: blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_block9469);
            	    blockStatement278=blockStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_blockStatement.add(blockStatement278.getTree());

            	    }
            	    break;

            	default :
            	    break loop92;
                }
            } while (true);

            RCURLY279=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_block9472); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY279);



            // AST REWRITE
            // elements: blockStatement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 780:9: -> ^( BLOCK_SCOPE[$LCURLY, \"BLOCK_SCOPE\"] ( blockStatement )* )
            {
                // ../etc/JamlAttrHash.g:780:13: ^( BLOCK_SCOPE[$LCURLY, \"BLOCK_SCOPE\"] ( blockStatement )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BLOCK_SCOPE, LCURLY277, "BLOCK_SCOPE"), root_1);

                // ../etc/JamlAttrHash.g:780:51: ( blockStatement )*
                while ( stream_blockStatement.hasNext() ) {
                    adaptor.addChild(root_1, stream_blockStatement.nextTree());

                }
                stream_blockStatement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("block", 78);
            if ( state.backtracking>0 ) { memoize(input, 78, block_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "block"

    public static class blockStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "blockStatement"
    // ../etc/JamlAttrHash.g:783:1: blockStatement : ( localVariableDeclaration SEMI | typeDeclaration | statement );
    public final JamlAttrHashParser.blockStatement_return blockStatement() throws RecognitionException {
    traceIn("blockStatement", 79);
        JamlAttrHashParser.blockStatement_return retval = new JamlAttrHashParser.blockStatement_return();
        retval.start = input.LT(1);
        int blockStatement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SEMI281=null;
        JamlAttrHashParser.localVariableDeclaration_return localVariableDeclaration280 = null;

        JamlAttrHashParser.typeDeclaration_return typeDeclaration282 = null;

        JamlAttrHashParser.statement_return statement283 = null;


        CommonTree SEMI281_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }
            // ../etc/JamlAttrHash.g:784:5: ( localVariableDeclaration SEMI | typeDeclaration | statement )
            int alt93=3;
            alt93 = dfa93.predict(input);
            switch (alt93) {
                case 1 :
                    // ../etc/JamlAttrHash.g:784:9: localVariableDeclaration SEMI
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_localVariableDeclaration_in_blockStatement9510);
                    localVariableDeclaration280=localVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, localVariableDeclaration280.getTree());
                    SEMI281=(Token)match(input,SEMI,FOLLOW_SEMI_in_blockStatement9512); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:785:9: typeDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_typeDeclaration_in_blockStatement9523);
                    typeDeclaration282=typeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDeclaration282.getTree());

                    }
                    break;
                case 3 :
                    // ../etc/JamlAttrHash.g:786:9: statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_statement_in_blockStatement9533);
                    statement283=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, statement283.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("blockStatement", 79);
            if ( state.backtracking>0 ) { memoize(input, 79, blockStatement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "blockStatement"

    public static class localVariableDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "localVariableDeclaration"
    // ../etc/JamlAttrHash.g:789:1: localVariableDeclaration : localModifierList type classFieldDeclaratorList -> ^( VAR_DECLARATION localModifierList type classFieldDeclaratorList ) ;
    public final JamlAttrHashParser.localVariableDeclaration_return localVariableDeclaration() throws RecognitionException {
    traceIn("localVariableDeclaration", 80);
        JamlAttrHashParser.localVariableDeclaration_return retval = new JamlAttrHashParser.localVariableDeclaration_return();
        retval.start = input.LT(1);
        int localVariableDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.localModifierList_return localModifierList284 = null;

        JamlAttrHashParser.type_return type285 = null;

        JamlAttrHashParser.classFieldDeclaratorList_return classFieldDeclaratorList286 = null;


        RewriteRuleSubtreeStream stream_localModifierList=new RewriteRuleSubtreeStream(adaptor,"rule localModifierList");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_classFieldDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule classFieldDeclaratorList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }
            // ../etc/JamlAttrHash.g:790:5: ( localModifierList type classFieldDeclaratorList -> ^( VAR_DECLARATION localModifierList type classFieldDeclaratorList ) )
            // ../etc/JamlAttrHash.g:790:9: localModifierList type classFieldDeclaratorList
            {
            pushFollow(FOLLOW_localModifierList_in_localVariableDeclaration9556);
            localModifierList284=localModifierList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_localModifierList.add(localModifierList284.getTree());
            pushFollow(FOLLOW_type_in_localVariableDeclaration9558);
            type285=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type285.getTree());
            pushFollow(FOLLOW_classFieldDeclaratorList_in_localVariableDeclaration9560);
            classFieldDeclaratorList286=classFieldDeclaratorList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classFieldDeclaratorList.add(classFieldDeclaratorList286.getTree());


            // AST REWRITE
            // elements: type, localModifierList, classFieldDeclaratorList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 791:9: -> ^( VAR_DECLARATION localModifierList type classFieldDeclaratorList )
            {
                // ../etc/JamlAttrHash.g:791:13: ^( VAR_DECLARATION localModifierList type classFieldDeclaratorList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_DECLARATION, "VAR_DECLARATION"), root_1);

                adaptor.addChild(root_1, stream_localModifierList.nextTree());
                adaptor.addChild(root_1, stream_type.nextTree());
                adaptor.addChild(root_1, stream_classFieldDeclaratorList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("localVariableDeclaration", 80);
            if ( state.backtracking>0 ) { memoize(input, 80, localVariableDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "localVariableDeclaration"

    public static class statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statement"
    // ../etc/JamlAttrHash.g:795:1: statement : ( block | ASSERT expr1= expression ( COLON expr2= expression SEMI -> ^( ASSERT $expr1 $expr2) | SEMI -> ^( ASSERT $expr1) ) | IF parenthesizedExpression ifStat= statement ( ELSE elseStat= statement -> ^( IF parenthesizedExpression $ifStat $elseStat) | -> ^( IF parenthesizedExpression $ifStat) ) | FOR LPAREN ( forInit SEMI forCondition SEMI forUpdater RPAREN statement -> ^( FOR forInit forCondition forUpdater statement ) | localModifierList type IDENT COLON expression RPAREN statement -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement ) ) | WHILE parenthesizedExpression statement -> ^( WHILE parenthesizedExpression statement ) | DO statement WHILE parenthesizedExpression SEMI -> ^( DO statement parenthesizedExpression ) | TRY block ( catches ( finallyClause )? | finallyClause ) -> ^( TRY block ( catches )? ( finallyClause )? ) | SWITCH parenthesizedExpression LCURLY switchBlockLabels RCURLY -> ^( SWITCH parenthesizedExpression switchBlockLabels ) | SYNCHRONIZED parenthesizedExpression block -> ^( SYNCHRONIZED parenthesizedExpression block ) | RETURN ( expression )? SEMI -> ^( RETURN ( expression )? ) | THROW expression SEMI -> ^( THROW expression ) | BREAK ( IDENT )? SEMI -> ^( BREAK ( IDENT )? ) | CONTINUE ( IDENT )? SEMI -> ^( CONTINUE ( IDENT )? ) | IDENT COLON statement -> ^( LABELED_STATEMENT IDENT statement ) | expression SEMI | SEMI );
    public final JamlAttrHashParser.statement_return statement() throws RecognitionException {
    traceIn("statement", 81);
        JamlAttrHashParser.statement_return retval = new JamlAttrHashParser.statement_return();
        retval.start = input.LT(1);
        int statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ASSERT288=null;
        Token COLON289=null;
        Token SEMI290=null;
        Token SEMI291=null;
        Token IF292=null;
        Token ELSE294=null;
        Token FOR295=null;
        Token LPAREN296=null;
        Token SEMI298=null;
        Token SEMI300=null;
        Token RPAREN302=null;
        Token IDENT306=null;
        Token COLON307=null;
        Token RPAREN309=null;
        Token WHILE311=null;
        Token DO314=null;
        Token WHILE316=null;
        Token SEMI318=null;
        Token TRY319=null;
        Token SWITCH324=null;
        Token LCURLY326=null;
        Token RCURLY328=null;
        Token SYNCHRONIZED329=null;
        Token RETURN332=null;
        Token SEMI334=null;
        Token THROW335=null;
        Token SEMI337=null;
        Token BREAK338=null;
        Token IDENT339=null;
        Token SEMI340=null;
        Token CONTINUE341=null;
        Token IDENT342=null;
        Token SEMI343=null;
        Token IDENT344=null;
        Token COLON345=null;
        Token SEMI348=null;
        Token SEMI349=null;
        JamlAttrHashParser.expression_return expr1 = null;

        JamlAttrHashParser.expression_return expr2 = null;

        JamlAttrHashParser.statement_return ifStat = null;

        JamlAttrHashParser.statement_return elseStat = null;

        JamlAttrHashParser.block_return block287 = null;

        JamlAttrHashParser.parenthesizedExpression_return parenthesizedExpression293 = null;

        JamlAttrHashParser.forInit_return forInit297 = null;

        JamlAttrHashParser.forCondition_return forCondition299 = null;

        JamlAttrHashParser.forUpdater_return forUpdater301 = null;

        JamlAttrHashParser.statement_return statement303 = null;

        JamlAttrHashParser.localModifierList_return localModifierList304 = null;

        JamlAttrHashParser.type_return type305 = null;

        JamlAttrHashParser.expression_return expression308 = null;

        JamlAttrHashParser.statement_return statement310 = null;

        JamlAttrHashParser.parenthesizedExpression_return parenthesizedExpression312 = null;

        JamlAttrHashParser.statement_return statement313 = null;

        JamlAttrHashParser.statement_return statement315 = null;

        JamlAttrHashParser.parenthesizedExpression_return parenthesizedExpression317 = null;

        JamlAttrHashParser.block_return block320 = null;

        JamlAttrHashParser.catches_return catches321 = null;

        JamlAttrHashParser.finallyClause_return finallyClause322 = null;

        JamlAttrHashParser.finallyClause_return finallyClause323 = null;

        JamlAttrHashParser.parenthesizedExpression_return parenthesizedExpression325 = null;

        JamlAttrHashParser.switchBlockLabels_return switchBlockLabels327 = null;

        JamlAttrHashParser.parenthesizedExpression_return parenthesizedExpression330 = null;

        JamlAttrHashParser.block_return block331 = null;

        JamlAttrHashParser.expression_return expression333 = null;

        JamlAttrHashParser.expression_return expression336 = null;

        JamlAttrHashParser.statement_return statement346 = null;

        JamlAttrHashParser.expression_return expression347 = null;


        CommonTree ASSERT288_tree=null;
        CommonTree COLON289_tree=null;
        CommonTree SEMI290_tree=null;
        CommonTree SEMI291_tree=null;
        CommonTree IF292_tree=null;
        CommonTree ELSE294_tree=null;
        CommonTree FOR295_tree=null;
        CommonTree LPAREN296_tree=null;
        CommonTree SEMI298_tree=null;
        CommonTree SEMI300_tree=null;
        CommonTree RPAREN302_tree=null;
        CommonTree IDENT306_tree=null;
        CommonTree COLON307_tree=null;
        CommonTree RPAREN309_tree=null;
        CommonTree WHILE311_tree=null;
        CommonTree DO314_tree=null;
        CommonTree WHILE316_tree=null;
        CommonTree SEMI318_tree=null;
        CommonTree TRY319_tree=null;
        CommonTree SWITCH324_tree=null;
        CommonTree LCURLY326_tree=null;
        CommonTree RCURLY328_tree=null;
        CommonTree SYNCHRONIZED329_tree=null;
        CommonTree RETURN332_tree=null;
        CommonTree SEMI334_tree=null;
        CommonTree THROW335_tree=null;
        CommonTree SEMI337_tree=null;
        CommonTree BREAK338_tree=null;
        CommonTree IDENT339_tree=null;
        CommonTree SEMI340_tree=null;
        CommonTree CONTINUE341_tree=null;
        CommonTree IDENT342_tree=null;
        CommonTree SEMI343_tree=null;
        CommonTree IDENT344_tree=null;
        CommonTree COLON345_tree=null;
        CommonTree SEMI348_tree=null;
        CommonTree SEMI349_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_SYNCHRONIZED=new RewriteRuleTokenStream(adaptor,"token SYNCHRONIZED");
        RewriteRuleTokenStream stream_WHILE=new RewriteRuleTokenStream(adaptor,"token WHILE");
        RewriteRuleTokenStream stream_CONTINUE=new RewriteRuleTokenStream(adaptor,"token CONTINUE");
        RewriteRuleTokenStream stream_SWITCH=new RewriteRuleTokenStream(adaptor,"token SWITCH");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleTokenStream stream_ELSE=new RewriteRuleTokenStream(adaptor,"token ELSE");
        RewriteRuleTokenStream stream_RETURN=new RewriteRuleTokenStream(adaptor,"token RETURN");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_FOR=new RewriteRuleTokenStream(adaptor,"token FOR");
        RewriteRuleTokenStream stream_DO=new RewriteRuleTokenStream(adaptor,"token DO");
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_ASSERT=new RewriteRuleTokenStream(adaptor,"token ASSERT");
        RewriteRuleTokenStream stream_BREAK=new RewriteRuleTokenStream(adaptor,"token BREAK");
        RewriteRuleTokenStream stream_THROW=new RewriteRuleTokenStream(adaptor,"token THROW");
        RewriteRuleTokenStream stream_TRY=new RewriteRuleTokenStream(adaptor,"token TRY");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_IF=new RewriteRuleTokenStream(adaptor,"token IF");
        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_finallyClause=new RewriteRuleSubtreeStream(adaptor,"rule finallyClause");
        RewriteRuleSubtreeStream stream_catches=new RewriteRuleSubtreeStream(adaptor,"rule catches");
        RewriteRuleSubtreeStream stream_forUpdater=new RewriteRuleSubtreeStream(adaptor,"rule forUpdater");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        RewriteRuleSubtreeStream stream_forCondition=new RewriteRuleSubtreeStream(adaptor,"rule forCondition");
        RewriteRuleSubtreeStream stream_localModifierList=new RewriteRuleSubtreeStream(adaptor,"rule localModifierList");
        RewriteRuleSubtreeStream stream_forInit=new RewriteRuleSubtreeStream(adaptor,"rule forInit");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_switchBlockLabels=new RewriteRuleSubtreeStream(adaptor,"rule switchBlockLabels");
        RewriteRuleSubtreeStream stream_parenthesizedExpression=new RewriteRuleSubtreeStream(adaptor,"rule parenthesizedExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }
            // ../etc/JamlAttrHash.g:796:5: ( block | ASSERT expr1= expression ( COLON expr2= expression SEMI -> ^( ASSERT $expr1 $expr2) | SEMI -> ^( ASSERT $expr1) ) | IF parenthesizedExpression ifStat= statement ( ELSE elseStat= statement -> ^( IF parenthesizedExpression $ifStat $elseStat) | -> ^( IF parenthesizedExpression $ifStat) ) | FOR LPAREN ( forInit SEMI forCondition SEMI forUpdater RPAREN statement -> ^( FOR forInit forCondition forUpdater statement ) | localModifierList type IDENT COLON expression RPAREN statement -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement ) ) | WHILE parenthesizedExpression statement -> ^( WHILE parenthesizedExpression statement ) | DO statement WHILE parenthesizedExpression SEMI -> ^( DO statement parenthesizedExpression ) | TRY block ( catches ( finallyClause )? | finallyClause ) -> ^( TRY block ( catches )? ( finallyClause )? ) | SWITCH parenthesizedExpression LCURLY switchBlockLabels RCURLY -> ^( SWITCH parenthesizedExpression switchBlockLabels ) | SYNCHRONIZED parenthesizedExpression block -> ^( SYNCHRONIZED parenthesizedExpression block ) | RETURN ( expression )? SEMI -> ^( RETURN ( expression )? ) | THROW expression SEMI -> ^( THROW expression ) | BREAK ( IDENT )? SEMI -> ^( BREAK ( IDENT )? ) | CONTINUE ( IDENT )? SEMI -> ^( CONTINUE ( IDENT )? ) | IDENT COLON statement -> ^( LABELED_STATEMENT IDENT statement ) | expression SEMI | SEMI )
            int alt102=16;
            alt102 = dfa102.predict(input);
            switch (alt102) {
                case 1 :
                    // ../etc/JamlAttrHash.g:796:9: block
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_block_in_statement9613);
                    block287=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block287.getTree());

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:797:9: ASSERT expr1= expression ( COLON expr2= expression SEMI -> ^( ASSERT $expr1 $expr2) | SEMI -> ^( ASSERT $expr1) )
                    {
                    ASSERT288=(Token)match(input,ASSERT,FOLLOW_ASSERT_in_statement9623); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSERT.add(ASSERT288);

                    pushFollow(FOLLOW_expression_in_statement9627);
                    expr1=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expr1.getTree());
                    // ../etc/JamlAttrHash.g:798:9: ( COLON expr2= expression SEMI -> ^( ASSERT $expr1 $expr2) | SEMI -> ^( ASSERT $expr1) )
                    int alt94=2;
                    int LA94_0 = input.LA(1);

                    if ( (LA94_0==COLON) ) {
                        alt94=1;
                    }
                    else if ( (LA94_0==SEMI) ) {
                        alt94=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 94, 0, input);

                        throw nvae;
                    }
                    switch (alt94) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:798:13: COLON expr2= expression SEMI
                            {
                            COLON289=(Token)match(input,COLON,FOLLOW_COLON_in_statement9642); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(COLON289);

                            pushFollow(FOLLOW_expression_in_statement9646);
                            expr2=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expr2.getTree());
                            SEMI290=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement9648); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMI.add(SEMI290);



                            // AST REWRITE
                            // elements: ASSERT, expr1, expr2
                            // token labels: 
                            // rule labels: retval, expr1, expr2
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            RewriteRuleSubtreeStream stream_expr1=new RewriteRuleSubtreeStream(adaptor,"rule expr1",expr1!=null?expr1.tree:null);
                            RewriteRuleSubtreeStream stream_expr2=new RewriteRuleSubtreeStream(adaptor,"rule expr2",expr2!=null?expr2.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 798:77: -> ^( ASSERT $expr1 $expr2)
                            {
                                // ../etc/JamlAttrHash.g:798:81: ^( ASSERT $expr1 $expr2)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_ASSERT.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_expr1.nextTree());
                                adaptor.addChild(root_1, stream_expr2.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // ../etc/JamlAttrHash.g:799:13: SEMI
                            {
                            SEMI291=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement9711); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMI.add(SEMI291);



                            // AST REWRITE
                            // elements: ASSERT, expr1
                            // token labels: 
                            // rule labels: retval, expr1
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            RewriteRuleSubtreeStream stream_expr1=new RewriteRuleSubtreeStream(adaptor,"rule expr1",expr1!=null?expr1.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 799:77: -> ^( ASSERT $expr1)
                            {
                                // ../etc/JamlAttrHash.g:799:81: ^( ASSERT $expr1)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_ASSERT.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_expr1.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // ../etc/JamlAttrHash.g:801:9: IF parenthesizedExpression ifStat= statement ( ELSE elseStat= statement -> ^( IF parenthesizedExpression $ifStat $elseStat) | -> ^( IF parenthesizedExpression $ifStat) )
                    {
                    IF292=(Token)match(input,IF,FOLLOW_IF_in_statement9800); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IF.add(IF292);

                    pushFollow(FOLLOW_parenthesizedExpression_in_statement9802);
                    parenthesizedExpression293=parenthesizedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parenthesizedExpression.add(parenthesizedExpression293.getTree());
                    pushFollow(FOLLOW_statement_in_statement9806);
                    ifStat=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(ifStat.getTree());
                    // ../etc/JamlAttrHash.g:802:9: ( ELSE elseStat= statement -> ^( IF parenthesizedExpression $ifStat $elseStat) | -> ^( IF parenthesizedExpression $ifStat) )
                    int alt95=2;
                    int LA95_0 = input.LA(1);

                    if ( (LA95_0==ELSE) ) {
                        int LA95_1 = input.LA(2);

                        if ( (synpred184_JamlAttrHash()) ) {
                            alt95=1;
                        }
                        else if ( (true) ) {
                            alt95=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 95, 1, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA95_0==EOF||LA95_0==AT||LA95_0==DEC||LA95_0==INC||LA95_0==LCURLY||LA95_0==LESS_THAN||LA95_0==LOGICAL_NOT||(LA95_0>=LPAREN && LA95_0<=MINUS)||LA95_0==NOT||LA95_0==PLUS||LA95_0==RCURLY||LA95_0==SEMI||(LA95_0>=ABSTRACT && LA95_0<=CASE)||(LA95_0>=CHAR && LA95_0<=DOUBLE)||LA95_0==ENUM||(LA95_0>=FALSE && LA95_0<=FINAL)||(LA95_0>=FLOAT && LA95_0<=IF)||LA95_0==INTERFACE||(LA95_0>=INT && LA95_0<=NULL)||(LA95_0>=PRIVATE && LA95_0<=THROW)||(LA95_0>=TRANSIENT && LA95_0<=WHILE)||(LA95_0>=IDENT && LA95_0<=STRING_LITERAL)) ) {
                        alt95=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 95, 0, input);

                        throw nvae;
                    }
                    switch (alt95) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:802:13: ELSE elseStat= statement
                            {
                            ELSE294=(Token)match(input,ELSE,FOLLOW_ELSE_in_statement9821); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_ELSE.add(ELSE294);

                            pushFollow(FOLLOW_statement_in_statement9825);
                            elseStat=statement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_statement.add(elseStat.getTree());


                            // AST REWRITE
                            // elements: IF, ifStat, elseStat, parenthesizedExpression
                            // token labels: 
                            // rule labels: retval, ifStat, elseStat
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            RewriteRuleSubtreeStream stream_ifStat=new RewriteRuleSubtreeStream(adaptor,"rule ifStat",ifStat!=null?ifStat.tree:null);
                            RewriteRuleSubtreeStream stream_elseStat=new RewriteRuleSubtreeStream(adaptor,"rule elseStat",elseStat!=null?elseStat.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 802:77: -> ^( IF parenthesizedExpression $ifStat $elseStat)
                            {
                                // ../etc/JamlAttrHash.g:802:81: ^( IF parenthesizedExpression $ifStat $elseStat)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_IF.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_parenthesizedExpression.nextTree());
                                adaptor.addChild(root_1, stream_ifStat.nextTree());
                                adaptor.addChild(root_1, stream_elseStat.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // ../etc/JamlAttrHash.g:803:77: 
                            {

                            // AST REWRITE
                            // elements: parenthesizedExpression, ifStat, IF
                            // token labels: 
                            // rule labels: retval, ifStat
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            RewriteRuleSubtreeStream stream_ifStat=new RewriteRuleSubtreeStream(adaptor,"rule ifStat",ifStat!=null?ifStat.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 803:77: -> ^( IF parenthesizedExpression $ifStat)
                            {
                                // ../etc/JamlAttrHash.g:803:81: ^( IF parenthesizedExpression $ifStat)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_IF.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_parenthesizedExpression.nextTree());
                                adaptor.addChild(root_1, stream_ifStat.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // ../etc/JamlAttrHash.g:805:9: FOR LPAREN ( forInit SEMI forCondition SEMI forUpdater RPAREN statement -> ^( FOR forInit forCondition forUpdater statement ) | localModifierList type IDENT COLON expression RPAREN statement -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement ) )
                    {
                    FOR295=(Token)match(input,FOR,FOLLOW_FOR_in_statement9991); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOR.add(FOR295);

                    LPAREN296=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_statement9993); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN296);

                    // ../etc/JamlAttrHash.g:806:9: ( forInit SEMI forCondition SEMI forUpdater RPAREN statement -> ^( FOR forInit forCondition forUpdater statement ) | localModifierList type IDENT COLON expression RPAREN statement -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement ) )
                    int alt96=2;
                    alt96 = dfa96.predict(input);
                    switch (alt96) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:806:13: forInit SEMI forCondition SEMI forUpdater RPAREN statement
                            {
                            pushFollow(FOLLOW_forInit_in_statement10008);
                            forInit297=forInit();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_forInit.add(forInit297.getTree());
                            SEMI298=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement10010); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMI.add(SEMI298);

                            pushFollow(FOLLOW_forCondition_in_statement10012);
                            forCondition299=forCondition();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_forCondition.add(forCondition299.getTree());
                            SEMI300=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement10014); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMI.add(SEMI300);

                            pushFollow(FOLLOW_forUpdater_in_statement10016);
                            forUpdater301=forUpdater();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_forUpdater.add(forUpdater301.getTree());
                            RPAREN302=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_statement10018); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN302);

                            pushFollow(FOLLOW_statement_in_statement10020);
                            statement303=statement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_statement.add(statement303.getTree());


                            // AST REWRITE
                            // elements: forUpdater, forCondition, statement, FOR, forInit
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 806:77: -> ^( FOR forInit forCondition forUpdater statement )
                            {
                                // ../etc/JamlAttrHash.g:806:81: ^( FOR forInit forCondition forUpdater statement )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_FOR.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_forInit.nextTree());
                                adaptor.addChild(root_1, stream_forCondition.nextTree());
                                adaptor.addChild(root_1, stream_forUpdater.nextTree());
                                adaptor.addChild(root_1, stream_statement.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // ../etc/JamlAttrHash.g:807:13: localModifierList type IDENT COLON expression RPAREN statement
                            {
                            pushFollow(FOLLOW_localModifierList_in_statement10055);
                            localModifierList304=localModifierList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_localModifierList.add(localModifierList304.getTree());
                            pushFollow(FOLLOW_type_in_statement10057);
                            type305=type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_type.add(type305.getTree());
                            IDENT306=(Token)match(input,IDENT,FOLLOW_IDENT_in_statement10059); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(IDENT306);

                            COLON307=(Token)match(input,COLON,FOLLOW_COLON_in_statement10061); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(COLON307);

                            pushFollow(FOLLOW_expression_in_statement10063);
                            expression308=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression308.getTree());
                            RPAREN309=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_statement10065); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN309);

                            pushFollow(FOLLOW_statement_in_statement10067);
                            statement310=statement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_statement.add(statement310.getTree());


                            // AST REWRITE
                            // elements: localModifierList, statement, expression, type, IDENT
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 808:77: -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement )
                            {
                                // ../etc/JamlAttrHash.g:808:81: ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOR_EACH, FOR295, "FOR_EACH"), root_1);

                                adaptor.addChild(root_1, stream_localModifierList.nextTree());
                                adaptor.addChild(root_1, stream_type.nextTree());
                                adaptor.addChild(root_1, stream_IDENT.nextNode());
                                adaptor.addChild(root_1, stream_expression.nextTree());
                                adaptor.addChild(root_1, stream_statement.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 5 :
                    // ../etc/JamlAttrHash.g:810:9: WHILE parenthesizedExpression statement
                    {
                    WHILE311=(Token)match(input,WHILE,FOLLOW_WHILE_in_statement10182); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHILE.add(WHILE311);

                    pushFollow(FOLLOW_parenthesizedExpression_in_statement10184);
                    parenthesizedExpression312=parenthesizedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parenthesizedExpression.add(parenthesizedExpression312.getTree());
                    pushFollow(FOLLOW_statement_in_statement10186);
                    statement313=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement313.getTree());


                    // AST REWRITE
                    // elements: statement, WHILE, parenthesizedExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 810:77: -> ^( WHILE parenthesizedExpression statement )
                    {
                        // ../etc/JamlAttrHash.g:810:81: ^( WHILE parenthesizedExpression statement )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_WHILE.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_parenthesizedExpression.nextTree());
                        adaptor.addChild(root_1, stream_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // ../etc/JamlAttrHash.g:811:9: DO statement WHILE parenthesizedExpression SEMI
                    {
                    DO314=(Token)match(input,DO,FOLLOW_DO_in_statement10235); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DO.add(DO314);

                    pushFollow(FOLLOW_statement_in_statement10237);
                    statement315=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement315.getTree());
                    WHILE316=(Token)match(input,WHILE,FOLLOW_WHILE_in_statement10239); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHILE.add(WHILE316);

                    pushFollow(FOLLOW_parenthesizedExpression_in_statement10241);
                    parenthesizedExpression317=parenthesizedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parenthesizedExpression.add(parenthesizedExpression317.getTree());
                    SEMI318=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement10243); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI318);



                    // AST REWRITE
                    // elements: DO, parenthesizedExpression, statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 811:77: -> ^( DO statement parenthesizedExpression )
                    {
                        // ../etc/JamlAttrHash.g:811:81: ^( DO statement parenthesizedExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_DO.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_statement.nextTree());
                        adaptor.addChild(root_1, stream_parenthesizedExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    // ../etc/JamlAttrHash.g:812:9: TRY block ( catches ( finallyClause )? | finallyClause )
                    {
                    TRY319=(Token)match(input,TRY,FOLLOW_TRY_in_statement10284); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TRY.add(TRY319);

                    pushFollow(FOLLOW_block_in_statement10286);
                    block320=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block320.getTree());
                    // ../etc/JamlAttrHash.g:812:19: ( catches ( finallyClause )? | finallyClause )
                    int alt98=2;
                    int LA98_0 = input.LA(1);

                    if ( (LA98_0==CATCH) ) {
                        alt98=1;
                    }
                    else if ( (LA98_0==FINALLY) ) {
                        alt98=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 98, 0, input);

                        throw nvae;
                    }
                    switch (alt98) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:812:20: catches ( finallyClause )?
                            {
                            pushFollow(FOLLOW_catches_in_statement10289);
                            catches321=catches();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_catches.add(catches321.getTree());
                            // ../etc/JamlAttrHash.g:812:28: ( finallyClause )?
                            int alt97=2;
                            int LA97_0 = input.LA(1);

                            if ( (LA97_0==FINALLY) ) {
                                alt97=1;
                            }
                            switch (alt97) {
                                case 1 :
                                    // ../etc/JamlAttrHash.g:0:0: finallyClause
                                    {
                                    pushFollow(FOLLOW_finallyClause_in_statement10291);
                                    finallyClause322=finallyClause();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_finallyClause.add(finallyClause322.getTree());

                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // ../etc/JamlAttrHash.g:812:45: finallyClause
                            {
                            pushFollow(FOLLOW_finallyClause_in_statement10296);
                            finallyClause323=finallyClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_finallyClause.add(finallyClause323.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: TRY, finallyClause, catches, block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 812:77: -> ^( TRY block ( catches )? ( finallyClause )? )
                    {
                        // ../etc/JamlAttrHash.g:812:81: ^( TRY block ( catches )? ( finallyClause )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_TRY.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_block.nextTree());
                        // ../etc/JamlAttrHash.g:812:93: ( catches )?
                        if ( stream_catches.hasNext() ) {
                            adaptor.addChild(root_1, stream_catches.nextTree());

                        }
                        stream_catches.reset();
                        // ../etc/JamlAttrHash.g:812:102: ( finallyClause )?
                        if ( stream_finallyClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_finallyClause.nextTree());

                        }
                        stream_finallyClause.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 8 :
                    // ../etc/JamlAttrHash.g:813:9: SWITCH parenthesizedExpression LCURLY switchBlockLabels RCURLY
                    {
                    SWITCH324=(Token)match(input,SWITCH,FOLLOW_SWITCH_in_statement10339); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SWITCH.add(SWITCH324);

                    pushFollow(FOLLOW_parenthesizedExpression_in_statement10341);
                    parenthesizedExpression325=parenthesizedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parenthesizedExpression.add(parenthesizedExpression325.getTree());
                    LCURLY326=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_statement10343); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY326);

                    pushFollow(FOLLOW_switchBlockLabels_in_statement10345);
                    switchBlockLabels327=switchBlockLabels();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_switchBlockLabels.add(switchBlockLabels327.getTree());
                    RCURLY328=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_statement10347); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY328);



                    // AST REWRITE
                    // elements: parenthesizedExpression, switchBlockLabels, SWITCH
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 813:77: -> ^( SWITCH parenthesizedExpression switchBlockLabels )
                    {
                        // ../etc/JamlAttrHash.g:813:81: ^( SWITCH parenthesizedExpression switchBlockLabels )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_SWITCH.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_parenthesizedExpression.nextTree());
                        adaptor.addChild(root_1, stream_switchBlockLabels.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 9 :
                    // ../etc/JamlAttrHash.g:814:9: SYNCHRONIZED parenthesizedExpression block
                    {
                    SYNCHRONIZED329=(Token)match(input,SYNCHRONIZED,FOLLOW_SYNCHRONIZED_in_statement10373); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SYNCHRONIZED.add(SYNCHRONIZED329);

                    pushFollow(FOLLOW_parenthesizedExpression_in_statement10375);
                    parenthesizedExpression330=parenthesizedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parenthesizedExpression.add(parenthesizedExpression330.getTree());
                    pushFollow(FOLLOW_block_in_statement10377);
                    block331=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block331.getTree());


                    // AST REWRITE
                    // elements: block, SYNCHRONIZED, parenthesizedExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 814:77: -> ^( SYNCHRONIZED parenthesizedExpression block )
                    {
                        // ../etc/JamlAttrHash.g:814:81: ^( SYNCHRONIZED parenthesizedExpression block )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_SYNCHRONIZED.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_parenthesizedExpression.nextTree());
                        adaptor.addChild(root_1, stream_block.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 10 :
                    // ../etc/JamlAttrHash.g:815:9: RETURN ( expression )? SEMI
                    {
                    RETURN332=(Token)match(input,RETURN,FOLLOW_RETURN_in_statement10423); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETURN.add(RETURN332);

                    // ../etc/JamlAttrHash.g:815:16: ( expression )?
                    int alt99=2;
                    int LA99_0 = input.LA(1);

                    if ( (LA99_0==DEC||LA99_0==INC||LA99_0==LESS_THAN||LA99_0==LOGICAL_NOT||(LA99_0>=LPAREN && LA99_0<=MINUS)||LA99_0==NOT||LA99_0==PLUS||LA99_0==BOOLEAN||LA99_0==BYTE||LA99_0==CHAR||LA99_0==DOUBLE||LA99_0==FALSE||LA99_0==FLOAT||(LA99_0>=INT && LA99_0<=LONG)||(LA99_0>=NEW && LA99_0<=NULL)||LA99_0==SHORT||LA99_0==SUPER||LA99_0==THIS||LA99_0==TRUE||LA99_0==VOID||(LA99_0>=IDENT && LA99_0<=STRING_LITERAL)) ) {
                        alt99=1;
                    }
                    switch (alt99) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:0:0: expression
                            {
                            pushFollow(FOLLOW_expression_in_statement10425);
                            expression333=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression333.getTree());

                            }
                            break;

                    }

                    SEMI334=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement10428); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI334);



                    // AST REWRITE
                    // elements: expression, RETURN
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 815:77: -> ^( RETURN ( expression )? )
                    {
                        // ../etc/JamlAttrHash.g:815:81: ^( RETURN ( expression )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_RETURN.nextNode(), root_1);

                        // ../etc/JamlAttrHash.g:815:90: ( expression )?
                        if ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());

                        }
                        stream_expression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 11 :
                    // ../etc/JamlAttrHash.g:816:9: THROW expression SEMI
                    {
                    THROW335=(Token)match(input,THROW,FOLLOW_THROW_in_statement10492); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_THROW.add(THROW335);

                    pushFollow(FOLLOW_expression_in_statement10494);
                    expression336=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression336.getTree());
                    SEMI337=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement10496); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI337);



                    // AST REWRITE
                    // elements: THROW, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 816:77: -> ^( THROW expression )
                    {
                        // ../etc/JamlAttrHash.g:816:81: ^( THROW expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_THROW.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 12 :
                    // ../etc/JamlAttrHash.g:817:9: BREAK ( IDENT )? SEMI
                    {
                    BREAK338=(Token)match(input,BREAK,FOLLOW_BREAK_in_statement10561); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BREAK.add(BREAK338);

                    // ../etc/JamlAttrHash.g:817:15: ( IDENT )?
                    int alt100=2;
                    int LA100_0 = input.LA(1);

                    if ( (LA100_0==IDENT) ) {
                        alt100=1;
                    }
                    switch (alt100) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:0:0: IDENT
                            {
                            IDENT339=(Token)match(input,IDENT,FOLLOW_IDENT_in_statement10563); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(IDENT339);


                            }
                            break;

                    }

                    SEMI340=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement10566); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI340);



                    // AST REWRITE
                    // elements: IDENT, BREAK
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 817:77: -> ^( BREAK ( IDENT )? )
                    {
                        // ../etc/JamlAttrHash.g:817:81: ^( BREAK ( IDENT )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_BREAK.nextNode(), root_1);

                        // ../etc/JamlAttrHash.g:817:89: ( IDENT )?
                        if ( stream_IDENT.hasNext() ) {
                            adaptor.addChild(root_1, stream_IDENT.nextNode());

                        }
                        stream_IDENT.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 13 :
                    // ../etc/JamlAttrHash.g:818:9: CONTINUE ( IDENT )? SEMI
                    {
                    CONTINUE341=(Token)match(input,CONTINUE,FOLLOW_CONTINUE_in_statement10636); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CONTINUE.add(CONTINUE341);

                    // ../etc/JamlAttrHash.g:818:18: ( IDENT )?
                    int alt101=2;
                    int LA101_0 = input.LA(1);

                    if ( (LA101_0==IDENT) ) {
                        alt101=1;
                    }
                    switch (alt101) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:0:0: IDENT
                            {
                            IDENT342=(Token)match(input,IDENT,FOLLOW_IDENT_in_statement10638); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(IDENT342);


                            }
                            break;

                    }

                    SEMI343=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement10641); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI343);



                    // AST REWRITE
                    // elements: CONTINUE, IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 818:77: -> ^( CONTINUE ( IDENT )? )
                    {
                        // ../etc/JamlAttrHash.g:818:81: ^( CONTINUE ( IDENT )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_CONTINUE.nextNode(), root_1);

                        // ../etc/JamlAttrHash.g:818:92: ( IDENT )?
                        if ( stream_IDENT.hasNext() ) {
                            adaptor.addChild(root_1, stream_IDENT.nextNode());

                        }
                        stream_IDENT.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 14 :
                    // ../etc/JamlAttrHash.g:819:9: IDENT COLON statement
                    {
                    IDENT344=(Token)match(input,IDENT,FOLLOW_IDENT_in_statement10708); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT344);

                    COLON345=(Token)match(input,COLON,FOLLOW_COLON_in_statement10710); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(COLON345);

                    pushFollow(FOLLOW_statement_in_statement10712);
                    statement346=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement346.getTree());


                    // AST REWRITE
                    // elements: statement, IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 819:77: -> ^( LABELED_STATEMENT IDENT statement )
                    {
                        // ../etc/JamlAttrHash.g:819:81: ^( LABELED_STATEMENT IDENT statement )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LABELED_STATEMENT, "LABELED_STATEMENT"), root_1);

                        adaptor.addChild(root_1, stream_IDENT.nextNode());
                        adaptor.addChild(root_1, stream_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 15 :
                    // ../etc/JamlAttrHash.g:820:9: expression SEMI
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expression_in_statement10779);
                    expression347=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression347.getTree());
                    SEMI348=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement10781); if (state.failed) return retval;

                    }
                    break;
                case 16 :
                    // ../etc/JamlAttrHash.g:821:9: SEMI
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SEMI349=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement10792); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMI349_tree = (CommonTree)adaptor.create(SEMI349);
                    adaptor.addChild(root_0, SEMI349_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("statement", 81);
            if ( state.backtracking>0 ) { memoize(input, 81, statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "statement"

    public static class catches_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "catches"
    // ../etc/JamlAttrHash.g:824:1: catches : ( catchClause )+ -> ^( CATCH_CLAUSE_LIST ( catchClause )+ ) ;
    public final JamlAttrHashParser.catches_return catches() throws RecognitionException {
    traceIn("catches", 82);
        JamlAttrHashParser.catches_return retval = new JamlAttrHashParser.catches_return();
        retval.start = input.LT(1);
        int catches_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.catchClause_return catchClause350 = null;


        RewriteRuleSubtreeStream stream_catchClause=new RewriteRuleSubtreeStream(adaptor,"rule catchClause");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }
            // ../etc/JamlAttrHash.g:825:5: ( ( catchClause )+ -> ^( CATCH_CLAUSE_LIST ( catchClause )+ ) )
            // ../etc/JamlAttrHash.g:825:9: ( catchClause )+
            {
            // ../etc/JamlAttrHash.g:825:9: ( catchClause )+
            int cnt103=0;
            loop103:
            do {
                int alt103=2;
                int LA103_0 = input.LA(1);

                if ( (LA103_0==CATCH) ) {
                    alt103=1;
                }


                switch (alt103) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:0:0: catchClause
            	    {
            	    pushFollow(FOLLOW_catchClause_in_catches10831);
            	    catchClause350=catchClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_catchClause.add(catchClause350.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt103 >= 1 ) break loop103;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(103, input);
                        throw eee;
                }
                cnt103++;
            } while (true);



            // AST REWRITE
            // elements: catchClause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 826:9: -> ^( CATCH_CLAUSE_LIST ( catchClause )+ )
            {
                // ../etc/JamlAttrHash.g:826:13: ^( CATCH_CLAUSE_LIST ( catchClause )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CATCH_CLAUSE_LIST, "CATCH_CLAUSE_LIST"), root_1);

                if ( !(stream_catchClause.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_catchClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_catchClause.nextTree());

                }
                stream_catchClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("catches", 82);
            if ( state.backtracking>0 ) { memoize(input, 82, catches_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "catches"

    public static class catchClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "catchClause"
    // ../etc/JamlAttrHash.g:829:1: catchClause : CATCH LPAREN formalParameterStandardDecl RPAREN block ;
    public final JamlAttrHashParser.catchClause_return catchClause() throws RecognitionException {
    traceIn("catchClause", 83);
        JamlAttrHashParser.catchClause_return retval = new JamlAttrHashParser.catchClause_return();
        retval.start = input.LT(1);
        int catchClause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token CATCH351=null;
        Token LPAREN352=null;
        Token RPAREN354=null;
        JamlAttrHashParser.formalParameterStandardDecl_return formalParameterStandardDecl353 = null;

        JamlAttrHashParser.block_return block355 = null;


        CommonTree CATCH351_tree=null;
        CommonTree LPAREN352_tree=null;
        CommonTree RPAREN354_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }
            // ../etc/JamlAttrHash.g:830:5: ( CATCH LPAREN formalParameterStandardDecl RPAREN block )
            // ../etc/JamlAttrHash.g:830:9: CATCH LPAREN formalParameterStandardDecl RPAREN block
            {
            root_0 = (CommonTree)adaptor.nil();

            CATCH351=(Token)match(input,CATCH,FOLLOW_CATCH_in_catchClause10873); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CATCH351_tree = (CommonTree)adaptor.create(CATCH351);
            root_0 = (CommonTree)adaptor.becomeRoot(CATCH351_tree, root_0);
            }
            LPAREN352=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_catchClause10876); if (state.failed) return retval;
            pushFollow(FOLLOW_formalParameterStandardDecl_in_catchClause10879);
            formalParameterStandardDecl353=formalParameterStandardDecl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameterStandardDecl353.getTree());
            RPAREN354=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_catchClause10881); if (state.failed) return retval;
            pushFollow(FOLLOW_block_in_catchClause10884);
            block355=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block355.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("catchClause", 83);
            if ( state.backtracking>0 ) { memoize(input, 83, catchClause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "catchClause"

    public static class finallyClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "finallyClause"
    // ../etc/JamlAttrHash.g:833:1: finallyClause : FINALLY block -> block ;
    public final JamlAttrHashParser.finallyClause_return finallyClause() throws RecognitionException {
    traceIn("finallyClause", 84);
        JamlAttrHashParser.finallyClause_return retval = new JamlAttrHashParser.finallyClause_return();
        retval.start = input.LT(1);
        int finallyClause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token FINALLY356=null;
        JamlAttrHashParser.block_return block357 = null;


        CommonTree FINALLY356_tree=null;
        RewriteRuleTokenStream stream_FINALLY=new RewriteRuleTokenStream(adaptor,"token FINALLY");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }
            // ../etc/JamlAttrHash.g:834:5: ( FINALLY block -> block )
            // ../etc/JamlAttrHash.g:834:9: FINALLY block
            {
            FINALLY356=(Token)match(input,FINALLY,FOLLOW_FINALLY_in_finallyClause10903); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FINALLY.add(FINALLY356);

            pushFollow(FOLLOW_block_in_finallyClause10905);
            block357=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block357.getTree());


            // AST REWRITE
            // elements: block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 835:9: -> block
            {
                adaptor.addChild(root_0, stream_block.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("finallyClause", 84);
            if ( state.backtracking>0 ) { memoize(input, 84, finallyClause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "finallyClause"

    public static class switchBlockLabels_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchBlockLabels"
    // ../etc/JamlAttrHash.g:838:1: switchBlockLabels : switchCaseLabels ( switchDefaultLabel )? switchCaseLabels -> ^( SWITCH_BLOCK_LABEL_LIST switchCaseLabels ( switchDefaultLabel )? switchCaseLabels ) ;
    public final JamlAttrHashParser.switchBlockLabels_return switchBlockLabels() throws RecognitionException {
    traceIn("switchBlockLabels", 85);
        JamlAttrHashParser.switchBlockLabels_return retval = new JamlAttrHashParser.switchBlockLabels_return();
        retval.start = input.LT(1);
        int switchBlockLabels_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.switchCaseLabels_return switchCaseLabels358 = null;

        JamlAttrHashParser.switchDefaultLabel_return switchDefaultLabel359 = null;

        JamlAttrHashParser.switchCaseLabels_return switchCaseLabels360 = null;


        RewriteRuleSubtreeStream stream_switchDefaultLabel=new RewriteRuleSubtreeStream(adaptor,"rule switchDefaultLabel");
        RewriteRuleSubtreeStream stream_switchCaseLabels=new RewriteRuleSubtreeStream(adaptor,"rule switchCaseLabels");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }
            // ../etc/JamlAttrHash.g:839:5: ( switchCaseLabels ( switchDefaultLabel )? switchCaseLabels -> ^( SWITCH_BLOCK_LABEL_LIST switchCaseLabels ( switchDefaultLabel )? switchCaseLabels ) )
            // ../etc/JamlAttrHash.g:839:9: switchCaseLabels ( switchDefaultLabel )? switchCaseLabels
            {
            pushFollow(FOLLOW_switchCaseLabels_in_switchBlockLabels10937);
            switchCaseLabels358=switchCaseLabels();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_switchCaseLabels.add(switchCaseLabels358.getTree());
            // ../etc/JamlAttrHash.g:839:26: ( switchDefaultLabel )?
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==DEFAULT) ) {
                alt104=1;
            }
            switch (alt104) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: switchDefaultLabel
                    {
                    pushFollow(FOLLOW_switchDefaultLabel_in_switchBlockLabels10939);
                    switchDefaultLabel359=switchDefaultLabel();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_switchDefaultLabel.add(switchDefaultLabel359.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_switchCaseLabels_in_switchBlockLabels10942);
            switchCaseLabels360=switchCaseLabels();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_switchCaseLabels.add(switchCaseLabels360.getTree());


            // AST REWRITE
            // elements: switchCaseLabels, switchCaseLabels, switchDefaultLabel
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 840:9: -> ^( SWITCH_BLOCK_LABEL_LIST switchCaseLabels ( switchDefaultLabel )? switchCaseLabels )
            {
                // ../etc/JamlAttrHash.g:840:13: ^( SWITCH_BLOCK_LABEL_LIST switchCaseLabels ( switchDefaultLabel )? switchCaseLabels )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SWITCH_BLOCK_LABEL_LIST, "SWITCH_BLOCK_LABEL_LIST"), root_1);

                adaptor.addChild(root_1, stream_switchCaseLabels.nextTree());
                // ../etc/JamlAttrHash.g:840:56: ( switchDefaultLabel )?
                if ( stream_switchDefaultLabel.hasNext() ) {
                    adaptor.addChild(root_1, stream_switchDefaultLabel.nextTree());

                }
                stream_switchDefaultLabel.reset();
                adaptor.addChild(root_1, stream_switchCaseLabels.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("switchBlockLabels", 85);
            if ( state.backtracking>0 ) { memoize(input, 85, switchBlockLabels_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchBlockLabels"

    public static class switchCaseLabels_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchCaseLabels"
    // ../etc/JamlAttrHash.g:843:1: switchCaseLabels : ( switchCaseLabel )* ;
    public final JamlAttrHashParser.switchCaseLabels_return switchCaseLabels() throws RecognitionException {
    traceIn("switchCaseLabels", 86);
        JamlAttrHashParser.switchCaseLabels_return retval = new JamlAttrHashParser.switchCaseLabels_return();
        retval.start = input.LT(1);
        int switchCaseLabels_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.switchCaseLabel_return switchCaseLabel361 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }
            // ../etc/JamlAttrHash.g:844:5: ( ( switchCaseLabel )* )
            // ../etc/JamlAttrHash.g:844:9: ( switchCaseLabel )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // ../etc/JamlAttrHash.g:844:9: ( switchCaseLabel )*
            loop105:
            do {
                int alt105=2;
                int LA105_0 = input.LA(1);

                if ( (LA105_0==CASE) ) {
                    int LA105_2 = input.LA(2);

                    if ( (synpred206_JamlAttrHash()) ) {
                        alt105=1;
                    }


                }


                switch (alt105) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:0:0: switchCaseLabel
            	    {
            	    pushFollow(FOLLOW_switchCaseLabel_in_switchCaseLabels10987);
            	    switchCaseLabel361=switchCaseLabel();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, switchCaseLabel361.getTree());

            	    }
            	    break;

            	default :
            	    break loop105;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("switchCaseLabels", 86);
            if ( state.backtracking>0 ) { memoize(input, 86, switchCaseLabels_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchCaseLabels"

    public static class switchCaseLabel_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchCaseLabel"
    // ../etc/JamlAttrHash.g:847:1: switchCaseLabel : CASE expression COLON ( blockStatement )* ;
    public final JamlAttrHashParser.switchCaseLabel_return switchCaseLabel() throws RecognitionException {
    traceIn("switchCaseLabel", 87);
        JamlAttrHashParser.switchCaseLabel_return retval = new JamlAttrHashParser.switchCaseLabel_return();
        retval.start = input.LT(1);
        int switchCaseLabel_StartIndex = input.index();
        CommonTree root_0 = null;

        Token CASE362=null;
        Token COLON364=null;
        JamlAttrHashParser.expression_return expression363 = null;

        JamlAttrHashParser.blockStatement_return blockStatement365 = null;


        CommonTree CASE362_tree=null;
        CommonTree COLON364_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }
            // ../etc/JamlAttrHash.g:848:5: ( CASE expression COLON ( blockStatement )* )
            // ../etc/JamlAttrHash.g:848:9: CASE expression COLON ( blockStatement )*
            {
            root_0 = (CommonTree)adaptor.nil();

            CASE362=(Token)match(input,CASE,FOLLOW_CASE_in_switchCaseLabel11015); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CASE362_tree = (CommonTree)adaptor.create(CASE362);
            root_0 = (CommonTree)adaptor.becomeRoot(CASE362_tree, root_0);
            }
            pushFollow(FOLLOW_expression_in_switchCaseLabel11018);
            expression363=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression363.getTree());
            COLON364=(Token)match(input,COLON,FOLLOW_COLON_in_switchCaseLabel11020); if (state.failed) return retval;
            // ../etc/JamlAttrHash.g:848:33: ( blockStatement )*
            loop106:
            do {
                int alt106=2;
                int LA106_0 = input.LA(1);

                if ( (LA106_0==AT||LA106_0==DEC||LA106_0==INC||LA106_0==LCURLY||LA106_0==LESS_THAN||LA106_0==LOGICAL_NOT||(LA106_0>=LPAREN && LA106_0<=MINUS)||LA106_0==NOT||LA106_0==PLUS||LA106_0==SEMI||(LA106_0>=ABSTRACT && LA106_0<=BYTE)||(LA106_0>=CHAR && LA106_0<=CONTINUE)||(LA106_0>=DO && LA106_0<=DOUBLE)||LA106_0==ENUM||(LA106_0>=FALSE && LA106_0<=FINAL)||(LA106_0>=FLOAT && LA106_0<=IF)||LA106_0==INTERFACE||(LA106_0>=INT && LA106_0<=NULL)||(LA106_0>=PRIVATE && LA106_0<=THROW)||(LA106_0>=TRANSIENT && LA106_0<=WHILE)||(LA106_0>=IDENT && LA106_0<=STRING_LITERAL)) ) {
                    alt106=1;
                }


                switch (alt106) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:0:0: blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_switchCaseLabel11023);
            	    blockStatement365=blockStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, blockStatement365.getTree());

            	    }
            	    break;

            	default :
            	    break loop106;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("switchCaseLabel", 87);
            if ( state.backtracking>0 ) { memoize(input, 87, switchCaseLabel_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchCaseLabel"

    public static class switchDefaultLabel_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchDefaultLabel"
    // ../etc/JamlAttrHash.g:851:1: switchDefaultLabel : DEFAULT COLON ( blockStatement )* ;
    public final JamlAttrHashParser.switchDefaultLabel_return switchDefaultLabel() throws RecognitionException {
    traceIn("switchDefaultLabel", 88);
        JamlAttrHashParser.switchDefaultLabel_return retval = new JamlAttrHashParser.switchDefaultLabel_return();
        retval.start = input.LT(1);
        int switchDefaultLabel_StartIndex = input.index();
        CommonTree root_0 = null;

        Token DEFAULT366=null;
        Token COLON367=null;
        JamlAttrHashParser.blockStatement_return blockStatement368 = null;


        CommonTree DEFAULT366_tree=null;
        CommonTree COLON367_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }
            // ../etc/JamlAttrHash.g:852:5: ( DEFAULT COLON ( blockStatement )* )
            // ../etc/JamlAttrHash.g:852:9: DEFAULT COLON ( blockStatement )*
            {
            root_0 = (CommonTree)adaptor.nil();

            DEFAULT366=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_switchDefaultLabel11047); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DEFAULT366_tree = (CommonTree)adaptor.create(DEFAULT366);
            root_0 = (CommonTree)adaptor.becomeRoot(DEFAULT366_tree, root_0);
            }
            COLON367=(Token)match(input,COLON,FOLLOW_COLON_in_switchDefaultLabel11050); if (state.failed) return retval;
            // ../etc/JamlAttrHash.g:852:25: ( blockStatement )*
            loop107:
            do {
                int alt107=2;
                int LA107_0 = input.LA(1);

                if ( (LA107_0==AT||LA107_0==DEC||LA107_0==INC||LA107_0==LCURLY||LA107_0==LESS_THAN||LA107_0==LOGICAL_NOT||(LA107_0>=LPAREN && LA107_0<=MINUS)||LA107_0==NOT||LA107_0==PLUS||LA107_0==SEMI||(LA107_0>=ABSTRACT && LA107_0<=BYTE)||(LA107_0>=CHAR && LA107_0<=CONTINUE)||(LA107_0>=DO && LA107_0<=DOUBLE)||LA107_0==ENUM||(LA107_0>=FALSE && LA107_0<=FINAL)||(LA107_0>=FLOAT && LA107_0<=IF)||LA107_0==INTERFACE||(LA107_0>=INT && LA107_0<=NULL)||(LA107_0>=PRIVATE && LA107_0<=THROW)||(LA107_0>=TRANSIENT && LA107_0<=WHILE)||(LA107_0>=IDENT && LA107_0<=STRING_LITERAL)) ) {
                    alt107=1;
                }


                switch (alt107) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:0:0: blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_switchDefaultLabel11053);
            	    blockStatement368=blockStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, blockStatement368.getTree());

            	    }
            	    break;

            	default :
            	    break loop107;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("switchDefaultLabel", 88);
            if ( state.backtracking>0 ) { memoize(input, 88, switchDefaultLabel_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchDefaultLabel"

    public static class forInit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forInit"
    // ../etc/JamlAttrHash.g:855:1: forInit : ( localVariableDeclaration -> ^( FOR_INIT localVariableDeclaration ) | expressionList -> ^( FOR_INIT expressionList ) | -> ^( FOR_INIT ) );
    public final JamlAttrHashParser.forInit_return forInit() throws RecognitionException {
    traceIn("forInit", 89);
        JamlAttrHashParser.forInit_return retval = new JamlAttrHashParser.forInit_return();
        retval.start = input.LT(1);
        int forInit_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.localVariableDeclaration_return localVariableDeclaration369 = null;

        JamlAttrHashParser.expressionList_return expressionList370 = null;


        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_localVariableDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule localVariableDeclaration");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }
            // ../etc/JamlAttrHash.g:856:5: ( localVariableDeclaration -> ^( FOR_INIT localVariableDeclaration ) | expressionList -> ^( FOR_INIT expressionList ) | -> ^( FOR_INIT ) )
            int alt108=3;
            alt108 = dfa108.predict(input);
            switch (alt108) {
                case 1 :
                    // ../etc/JamlAttrHash.g:856:9: localVariableDeclaration
                    {
                    pushFollow(FOLLOW_localVariableDeclaration_in_forInit11077);
                    localVariableDeclaration369=localVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_localVariableDeclaration.add(localVariableDeclaration369.getTree());


                    // AST REWRITE
                    // elements: localVariableDeclaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 856:37: -> ^( FOR_INIT localVariableDeclaration )
                    {
                        // ../etc/JamlAttrHash.g:856:41: ^( FOR_INIT localVariableDeclaration )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOR_INIT, "FOR_INIT"), root_1);

                        adaptor.addChild(root_1, stream_localVariableDeclaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:857:9: expressionList
                    {
                    pushFollow(FOLLOW_expressionList_in_forInit11099);
                    expressionList370=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionList.add(expressionList370.getTree());


                    // AST REWRITE
                    // elements: expressionList
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 857:37: -> ^( FOR_INIT expressionList )
                    {
                        // ../etc/JamlAttrHash.g:857:41: ^( FOR_INIT expressionList )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOR_INIT, "FOR_INIT"), root_1);

                        adaptor.addChild(root_1, stream_expressionList.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // ../etc/JamlAttrHash.g:858:37: 
                    {

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 858:37: -> ^( FOR_INIT )
                    {
                        // ../etc/JamlAttrHash.g:858:41: ^( FOR_INIT )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOR_INIT, "FOR_INIT"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("forInit", 89);
            if ( state.backtracking>0 ) { memoize(input, 89, forInit_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forInit"

    public static class forCondition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forCondition"
    // ../etc/JamlAttrHash.g:861:1: forCondition : ( expression )? -> ^( FOR_CONDITION ( expression )? ) ;
    public final JamlAttrHashParser.forCondition_return forCondition() throws RecognitionException {
    traceIn("forCondition", 90);
        JamlAttrHashParser.forCondition_return retval = new JamlAttrHashParser.forCondition_return();
        retval.start = input.LT(1);
        int forCondition_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.expression_return expression371 = null;


        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }
            // ../etc/JamlAttrHash.g:862:5: ( ( expression )? -> ^( FOR_CONDITION ( expression )? ) )
            // ../etc/JamlAttrHash.g:862:9: ( expression )?
            {
            // ../etc/JamlAttrHash.g:862:9: ( expression )?
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==DEC||LA109_0==INC||LA109_0==LESS_THAN||LA109_0==LOGICAL_NOT||(LA109_0>=LPAREN && LA109_0<=MINUS)||LA109_0==NOT||LA109_0==PLUS||LA109_0==BOOLEAN||LA109_0==BYTE||LA109_0==CHAR||LA109_0==DOUBLE||LA109_0==FALSE||LA109_0==FLOAT||(LA109_0>=INT && LA109_0<=LONG)||(LA109_0>=NEW && LA109_0<=NULL)||LA109_0==SHORT||LA109_0==SUPER||LA109_0==THIS||LA109_0==TRUE||LA109_0==VOID||(LA109_0>=IDENT && LA109_0<=STRING_LITERAL)) ) {
                alt109=1;
            }
            switch (alt109) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: expression
                    {
                    pushFollow(FOLLOW_expression_in_forCondition11187);
                    expression371=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression371.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 863:9: -> ^( FOR_CONDITION ( expression )? )
            {
                // ../etc/JamlAttrHash.g:863:13: ^( FOR_CONDITION ( expression )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOR_CONDITION, "FOR_CONDITION"), root_1);

                // ../etc/JamlAttrHash.g:863:29: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("forCondition", 90);
            if ( state.backtracking>0 ) { memoize(input, 90, forCondition_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forCondition"

    public static class forUpdater_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forUpdater"
    // ../etc/JamlAttrHash.g:866:1: forUpdater : ( expressionList )? -> ^( FOR_UPDATE ( expressionList )? ) ;
    public final JamlAttrHashParser.forUpdater_return forUpdater() throws RecognitionException {
    traceIn("forUpdater", 91);
        JamlAttrHashParser.forUpdater_return retval = new JamlAttrHashParser.forUpdater_return();
        retval.start = input.LT(1);
        int forUpdater_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.expressionList_return expressionList372 = null;


        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }
            // ../etc/JamlAttrHash.g:867:5: ( ( expressionList )? -> ^( FOR_UPDATE ( expressionList )? ) )
            // ../etc/JamlAttrHash.g:867:9: ( expressionList )?
            {
            // ../etc/JamlAttrHash.g:867:9: ( expressionList )?
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==DEC||LA110_0==INC||LA110_0==LESS_THAN||LA110_0==LOGICAL_NOT||(LA110_0>=LPAREN && LA110_0<=MINUS)||LA110_0==NOT||LA110_0==PLUS||LA110_0==BOOLEAN||LA110_0==BYTE||LA110_0==CHAR||LA110_0==DOUBLE||LA110_0==FALSE||LA110_0==FLOAT||(LA110_0>=INT && LA110_0<=LONG)||(LA110_0>=NEW && LA110_0<=NULL)||LA110_0==SHORT||LA110_0==SUPER||LA110_0==THIS||LA110_0==TRUE||LA110_0==VOID||(LA110_0>=IDENT && LA110_0<=STRING_LITERAL)) ) {
                alt110=1;
            }
            switch (alt110) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: expressionList
                    {
                    pushFollow(FOLLOW_expressionList_in_forUpdater11229);
                    expressionList372=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionList.add(expressionList372.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: expressionList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 868:9: -> ^( FOR_UPDATE ( expressionList )? )
            {
                // ../etc/JamlAttrHash.g:868:13: ^( FOR_UPDATE ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOR_UPDATE, "FOR_UPDATE"), root_1);

                // ../etc/JamlAttrHash.g:868:26: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("forUpdater", 91);
            if ( state.backtracking>0 ) { memoize(input, 91, forUpdater_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forUpdater"

    public static class parenthesizedExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parenthesizedExpression"
    // ../etc/JamlAttrHash.g:873:1: parenthesizedExpression : LPAREN expression RPAREN -> ^( PARENTESIZED_EXPR[$LPAREN, \"PARENTESIZED_EXPR\"] expression ) ;
    public final JamlAttrHashParser.parenthesizedExpression_return parenthesizedExpression() throws RecognitionException {
    traceIn("parenthesizedExpression", 92);
        JamlAttrHashParser.parenthesizedExpression_return retval = new JamlAttrHashParser.parenthesizedExpression_return();
        retval.start = input.LT(1);
        int parenthesizedExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LPAREN373=null;
        Token RPAREN375=null;
        JamlAttrHashParser.expression_return expression374 = null;


        CommonTree LPAREN373_tree=null;
        CommonTree RPAREN375_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }
            // ../etc/JamlAttrHash.g:874:5: ( LPAREN expression RPAREN -> ^( PARENTESIZED_EXPR[$LPAREN, \"PARENTESIZED_EXPR\"] expression ) )
            // ../etc/JamlAttrHash.g:874:9: LPAREN expression RPAREN
            {
            LPAREN373=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_parenthesizedExpression11269); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN373);

            pushFollow(FOLLOW_expression_in_parenthesizedExpression11271);
            expression374=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression374.getTree());
            RPAREN375=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_parenthesizedExpression11273); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN375);



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 875:9: -> ^( PARENTESIZED_EXPR[$LPAREN, \"PARENTESIZED_EXPR\"] expression )
            {
                // ../etc/JamlAttrHash.g:875:13: ^( PARENTESIZED_EXPR[$LPAREN, \"PARENTESIZED_EXPR\"] expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PARENTESIZED_EXPR, LPAREN373, "PARENTESIZED_EXPR"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("parenthesizedExpression", 92);
            if ( state.backtracking>0 ) { memoize(input, 92, parenthesizedExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parenthesizedExpression"

    public static class expressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionList"
    // ../etc/JamlAttrHash.g:878:1: expressionList : expression ( COMMA expression )* ;
    public final JamlAttrHashParser.expressionList_return expressionList() throws RecognitionException {
    traceIn("expressionList", 93);
        JamlAttrHashParser.expressionList_return retval = new JamlAttrHashParser.expressionList_return();
        retval.start = input.LT(1);
        int expressionList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA377=null;
        JamlAttrHashParser.expression_return expression376 = null;

        JamlAttrHashParser.expression_return expression378 = null;


        CommonTree COMMA377_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }
            // ../etc/JamlAttrHash.g:879:5: ( expression ( COMMA expression )* )
            // ../etc/JamlAttrHash.g:879:9: expression ( COMMA expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_expressionList11314);
            expression376=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression376.getTree());
            // ../etc/JamlAttrHash.g:879:20: ( COMMA expression )*
            loop111:
            do {
                int alt111=2;
                int LA111_0 = input.LA(1);

                if ( (LA111_0==COMMA) ) {
                    alt111=1;
                }


                switch (alt111) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:879:21: COMMA expression
            	    {
            	    COMMA377=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList11317); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_expressionList11320);
            	    expression378=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression378.getTree());

            	    }
            	    break;

            	default :
            	    break loop111;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("expressionList", 93);
            if ( state.backtracking>0 ) { memoize(input, 93, expressionList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expressionList"

    public static class expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression"
    // ../etc/JamlAttrHash.g:882:1: expression : assignmentExpression -> ^( EXPR assignmentExpression ) ;
    public final JamlAttrHashParser.expression_return expression() throws RecognitionException {
    traceIn("expression", 94);
        JamlAttrHashParser.expression_return retval = new JamlAttrHashParser.expression_return();
        retval.start = input.LT(1);
        int expression_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.assignmentExpression_return assignmentExpression379 = null;


        RewriteRuleSubtreeStream stream_assignmentExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignmentExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }
            // ../etc/JamlAttrHash.g:883:5: ( assignmentExpression -> ^( EXPR assignmentExpression ) )
            // ../etc/JamlAttrHash.g:883:9: assignmentExpression
            {
            pushFollow(FOLLOW_assignmentExpression_in_expression11341);
            assignmentExpression379=assignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_assignmentExpression.add(assignmentExpression379.getTree());


            // AST REWRITE
            // elements: assignmentExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 884:9: -> ^( EXPR assignmentExpression )
            {
                // ../etc/JamlAttrHash.g:884:13: ^( EXPR assignmentExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXPR, "EXPR"), root_1);

                adaptor.addChild(root_1, stream_assignmentExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("expression", 94);
            if ( state.backtracking>0 ) { memoize(input, 94, expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expression"

    public static class assignmentExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "assignmentExpression"
    // ../etc/JamlAttrHash.g:887:1: assignmentExpression : conditionalExpression ( ( ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | STAR_ASSIGN | DIV_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | MOD_ASSIGN | SHIFT_LEFT_ASSIGN | SHIFT_RIGHT_ASSIGN | BIT_SHIFT_RIGHT_ASSIGN ) assignmentExpression )? ;
    public final JamlAttrHashParser.assignmentExpression_return assignmentExpression() throws RecognitionException {
    traceIn("assignmentExpression", 95);
        JamlAttrHashParser.assignmentExpression_return retval = new JamlAttrHashParser.assignmentExpression_return();
        retval.start = input.LT(1);
        int assignmentExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ASSIGN381=null;
        Token PLUS_ASSIGN382=null;
        Token MINUS_ASSIGN383=null;
        Token STAR_ASSIGN384=null;
        Token DIV_ASSIGN385=null;
        Token AND_ASSIGN386=null;
        Token OR_ASSIGN387=null;
        Token XOR_ASSIGN388=null;
        Token MOD_ASSIGN389=null;
        Token SHIFT_LEFT_ASSIGN390=null;
        Token SHIFT_RIGHT_ASSIGN391=null;
        Token BIT_SHIFT_RIGHT_ASSIGN392=null;
        JamlAttrHashParser.conditionalExpression_return conditionalExpression380 = null;

        JamlAttrHashParser.assignmentExpression_return assignmentExpression393 = null;


        CommonTree ASSIGN381_tree=null;
        CommonTree PLUS_ASSIGN382_tree=null;
        CommonTree MINUS_ASSIGN383_tree=null;
        CommonTree STAR_ASSIGN384_tree=null;
        CommonTree DIV_ASSIGN385_tree=null;
        CommonTree AND_ASSIGN386_tree=null;
        CommonTree OR_ASSIGN387_tree=null;
        CommonTree XOR_ASSIGN388_tree=null;
        CommonTree MOD_ASSIGN389_tree=null;
        CommonTree SHIFT_LEFT_ASSIGN390_tree=null;
        CommonTree SHIFT_RIGHT_ASSIGN391_tree=null;
        CommonTree BIT_SHIFT_RIGHT_ASSIGN392_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }
            // ../etc/JamlAttrHash.g:888:5: ( conditionalExpression ( ( ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | STAR_ASSIGN | DIV_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | MOD_ASSIGN | SHIFT_LEFT_ASSIGN | SHIFT_RIGHT_ASSIGN | BIT_SHIFT_RIGHT_ASSIGN ) assignmentExpression )? )
            // ../etc/JamlAttrHash.g:888:9: conditionalExpression ( ( ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | STAR_ASSIGN | DIV_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | MOD_ASSIGN | SHIFT_LEFT_ASSIGN | SHIFT_RIGHT_ASSIGN | BIT_SHIFT_RIGHT_ASSIGN ) assignmentExpression )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_conditionalExpression_in_assignmentExpression11377);
            conditionalExpression380=conditionalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalExpression380.getTree());
            // ../etc/JamlAttrHash.g:889:9: ( ( ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | STAR_ASSIGN | DIV_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | MOD_ASSIGN | SHIFT_LEFT_ASSIGN | SHIFT_RIGHT_ASSIGN | BIT_SHIFT_RIGHT_ASSIGN ) assignmentExpression )?
            int alt113=2;
            int LA113_0 = input.LA(1);

            if ( ((LA113_0>=AND_ASSIGN && LA113_0<=ASSIGN)||LA113_0==BIT_SHIFT_RIGHT_ASSIGN||LA113_0==DIV_ASSIGN||LA113_0==MINUS_ASSIGN||LA113_0==MOD_ASSIGN||LA113_0==OR_ASSIGN||LA113_0==PLUS_ASSIGN||LA113_0==SHIFT_LEFT_ASSIGN||LA113_0==SHIFT_RIGHT_ASSIGN||LA113_0==STAR_ASSIGN||LA113_0==XOR_ASSIGN) ) {
                alt113=1;
            }
            switch (alt113) {
                case 1 :
                    // ../etc/JamlAttrHash.g:889:13: ( ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | STAR_ASSIGN | DIV_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | MOD_ASSIGN | SHIFT_LEFT_ASSIGN | SHIFT_RIGHT_ASSIGN | BIT_SHIFT_RIGHT_ASSIGN ) assignmentExpression
                    {
                    // ../etc/JamlAttrHash.g:889:13: ( ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | STAR_ASSIGN | DIV_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | MOD_ASSIGN | SHIFT_LEFT_ASSIGN | SHIFT_RIGHT_ASSIGN | BIT_SHIFT_RIGHT_ASSIGN )
                    int alt112=12;
                    switch ( input.LA(1) ) {
                    case ASSIGN:
                        {
                        alt112=1;
                        }
                        break;
                    case PLUS_ASSIGN:
                        {
                        alt112=2;
                        }
                        break;
                    case MINUS_ASSIGN:
                        {
                        alt112=3;
                        }
                        break;
                    case STAR_ASSIGN:
                        {
                        alt112=4;
                        }
                        break;
                    case DIV_ASSIGN:
                        {
                        alt112=5;
                        }
                        break;
                    case AND_ASSIGN:
                        {
                        alt112=6;
                        }
                        break;
                    case OR_ASSIGN:
                        {
                        alt112=7;
                        }
                        break;
                    case XOR_ASSIGN:
                        {
                        alt112=8;
                        }
                        break;
                    case MOD_ASSIGN:
                        {
                        alt112=9;
                        }
                        break;
                    case SHIFT_LEFT_ASSIGN:
                        {
                        alt112=10;
                        }
                        break;
                    case SHIFT_RIGHT_ASSIGN:
                        {
                        alt112=11;
                        }
                        break;
                    case BIT_SHIFT_RIGHT_ASSIGN:
                        {
                        alt112=12;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 112, 0, input);

                        throw nvae;
                    }

                    switch (alt112) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:889:17: ASSIGN
                            {
                            ASSIGN381=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_assignmentExpression11396); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            ASSIGN381_tree = (CommonTree)adaptor.create(ASSIGN381);
                            root_0 = (CommonTree)adaptor.becomeRoot(ASSIGN381_tree, root_0);
                            }

                            }
                            break;
                        case 2 :
                            // ../etc/JamlAttrHash.g:890:17: PLUS_ASSIGN
                            {
                            PLUS_ASSIGN382=(Token)match(input,PLUS_ASSIGN,FOLLOW_PLUS_ASSIGN_in_assignmentExpression11415); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            PLUS_ASSIGN382_tree = (CommonTree)adaptor.create(PLUS_ASSIGN382);
                            root_0 = (CommonTree)adaptor.becomeRoot(PLUS_ASSIGN382_tree, root_0);
                            }

                            }
                            break;
                        case 3 :
                            // ../etc/JamlAttrHash.g:891:17: MINUS_ASSIGN
                            {
                            MINUS_ASSIGN383=(Token)match(input,MINUS_ASSIGN,FOLLOW_MINUS_ASSIGN_in_assignmentExpression11434); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            MINUS_ASSIGN383_tree = (CommonTree)adaptor.create(MINUS_ASSIGN383);
                            root_0 = (CommonTree)adaptor.becomeRoot(MINUS_ASSIGN383_tree, root_0);
                            }

                            }
                            break;
                        case 4 :
                            // ../etc/JamlAttrHash.g:892:17: STAR_ASSIGN
                            {
                            STAR_ASSIGN384=(Token)match(input,STAR_ASSIGN,FOLLOW_STAR_ASSIGN_in_assignmentExpression11453); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            STAR_ASSIGN384_tree = (CommonTree)adaptor.create(STAR_ASSIGN384);
                            root_0 = (CommonTree)adaptor.becomeRoot(STAR_ASSIGN384_tree, root_0);
                            }

                            }
                            break;
                        case 5 :
                            // ../etc/JamlAttrHash.g:893:17: DIV_ASSIGN
                            {
                            DIV_ASSIGN385=(Token)match(input,DIV_ASSIGN,FOLLOW_DIV_ASSIGN_in_assignmentExpression11472); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DIV_ASSIGN385_tree = (CommonTree)adaptor.create(DIV_ASSIGN385);
                            root_0 = (CommonTree)adaptor.becomeRoot(DIV_ASSIGN385_tree, root_0);
                            }

                            }
                            break;
                        case 6 :
                            // ../etc/JamlAttrHash.g:894:17: AND_ASSIGN
                            {
                            AND_ASSIGN386=(Token)match(input,AND_ASSIGN,FOLLOW_AND_ASSIGN_in_assignmentExpression11491); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            AND_ASSIGN386_tree = (CommonTree)adaptor.create(AND_ASSIGN386);
                            root_0 = (CommonTree)adaptor.becomeRoot(AND_ASSIGN386_tree, root_0);
                            }

                            }
                            break;
                        case 7 :
                            // ../etc/JamlAttrHash.g:895:17: OR_ASSIGN
                            {
                            OR_ASSIGN387=(Token)match(input,OR_ASSIGN,FOLLOW_OR_ASSIGN_in_assignmentExpression11510); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            OR_ASSIGN387_tree = (CommonTree)adaptor.create(OR_ASSIGN387);
                            root_0 = (CommonTree)adaptor.becomeRoot(OR_ASSIGN387_tree, root_0);
                            }

                            }
                            break;
                        case 8 :
                            // ../etc/JamlAttrHash.g:896:17: XOR_ASSIGN
                            {
                            XOR_ASSIGN388=(Token)match(input,XOR_ASSIGN,FOLLOW_XOR_ASSIGN_in_assignmentExpression11529); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            XOR_ASSIGN388_tree = (CommonTree)adaptor.create(XOR_ASSIGN388);
                            root_0 = (CommonTree)adaptor.becomeRoot(XOR_ASSIGN388_tree, root_0);
                            }

                            }
                            break;
                        case 9 :
                            // ../etc/JamlAttrHash.g:897:17: MOD_ASSIGN
                            {
                            MOD_ASSIGN389=(Token)match(input,MOD_ASSIGN,FOLLOW_MOD_ASSIGN_in_assignmentExpression11548); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            MOD_ASSIGN389_tree = (CommonTree)adaptor.create(MOD_ASSIGN389);
                            root_0 = (CommonTree)adaptor.becomeRoot(MOD_ASSIGN389_tree, root_0);
                            }

                            }
                            break;
                        case 10 :
                            // ../etc/JamlAttrHash.g:898:17: SHIFT_LEFT_ASSIGN
                            {
                            SHIFT_LEFT_ASSIGN390=(Token)match(input,SHIFT_LEFT_ASSIGN,FOLLOW_SHIFT_LEFT_ASSIGN_in_assignmentExpression11567); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            SHIFT_LEFT_ASSIGN390_tree = (CommonTree)adaptor.create(SHIFT_LEFT_ASSIGN390);
                            root_0 = (CommonTree)adaptor.becomeRoot(SHIFT_LEFT_ASSIGN390_tree, root_0);
                            }

                            }
                            break;
                        case 11 :
                            // ../etc/JamlAttrHash.g:899:17: SHIFT_RIGHT_ASSIGN
                            {
                            SHIFT_RIGHT_ASSIGN391=(Token)match(input,SHIFT_RIGHT_ASSIGN,FOLLOW_SHIFT_RIGHT_ASSIGN_in_assignmentExpression11586); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            SHIFT_RIGHT_ASSIGN391_tree = (CommonTree)adaptor.create(SHIFT_RIGHT_ASSIGN391);
                            root_0 = (CommonTree)adaptor.becomeRoot(SHIFT_RIGHT_ASSIGN391_tree, root_0);
                            }

                            }
                            break;
                        case 12 :
                            // ../etc/JamlAttrHash.g:900:17: BIT_SHIFT_RIGHT_ASSIGN
                            {
                            BIT_SHIFT_RIGHT_ASSIGN392=(Token)match(input,BIT_SHIFT_RIGHT_ASSIGN,FOLLOW_BIT_SHIFT_RIGHT_ASSIGN_in_assignmentExpression11605); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            BIT_SHIFT_RIGHT_ASSIGN392_tree = (CommonTree)adaptor.create(BIT_SHIFT_RIGHT_ASSIGN392);
                            root_0 = (CommonTree)adaptor.becomeRoot(BIT_SHIFT_RIGHT_ASSIGN392_tree, root_0);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_assignmentExpression_in_assignmentExpression11627);
                    assignmentExpression393=assignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignmentExpression393.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("assignmentExpression", 95);
            if ( state.backtracking>0 ) { memoize(input, 95, assignmentExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "assignmentExpression"

    public static class conditionalExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalExpression"
    // ../etc/JamlAttrHash.g:905:1: conditionalExpression : logicalOrExpression ( QUESTION assignmentExpression COLON conditionalExpression )? ;
    public final JamlAttrHashParser.conditionalExpression_return conditionalExpression() throws RecognitionException {
    traceIn("conditionalExpression", 96);
        JamlAttrHashParser.conditionalExpression_return retval = new JamlAttrHashParser.conditionalExpression_return();
        retval.start = input.LT(1);
        int conditionalExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token QUESTION395=null;
        Token COLON397=null;
        JamlAttrHashParser.logicalOrExpression_return logicalOrExpression394 = null;

        JamlAttrHashParser.assignmentExpression_return assignmentExpression396 = null;

        JamlAttrHashParser.conditionalExpression_return conditionalExpression398 = null;


        CommonTree QUESTION395_tree=null;
        CommonTree COLON397_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }
            // ../etc/JamlAttrHash.g:906:5: ( logicalOrExpression ( QUESTION assignmentExpression COLON conditionalExpression )? )
            // ../etc/JamlAttrHash.g:906:9: logicalOrExpression ( QUESTION assignmentExpression COLON conditionalExpression )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_logicalOrExpression_in_conditionalExpression11652);
            logicalOrExpression394=logicalOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, logicalOrExpression394.getTree());
            // ../etc/JamlAttrHash.g:906:29: ( QUESTION assignmentExpression COLON conditionalExpression )?
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==QUESTION) ) {
                alt114=1;
            }
            switch (alt114) {
                case 1 :
                    // ../etc/JamlAttrHash.g:906:30: QUESTION assignmentExpression COLON conditionalExpression
                    {
                    QUESTION395=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_conditionalExpression11655); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUESTION395_tree = (CommonTree)adaptor.create(QUESTION395);
                    root_0 = (CommonTree)adaptor.becomeRoot(QUESTION395_tree, root_0);
                    }
                    pushFollow(FOLLOW_assignmentExpression_in_conditionalExpression11658);
                    assignmentExpression396=assignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignmentExpression396.getTree());
                    COLON397=(Token)match(input,COLON,FOLLOW_COLON_in_conditionalExpression11660); if (state.failed) return retval;
                    pushFollow(FOLLOW_conditionalExpression_in_conditionalExpression11663);
                    conditionalExpression398=conditionalExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalExpression398.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("conditionalExpression", 96);
            if ( state.backtracking>0 ) { memoize(input, 96, conditionalExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conditionalExpression"

    public static class logicalOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "logicalOrExpression"
    // ../etc/JamlAttrHash.g:909:1: logicalOrExpression : logicalAndExpression ( LOGICAL_OR logicalAndExpression )* ;
    public final JamlAttrHashParser.logicalOrExpression_return logicalOrExpression() throws RecognitionException {
    traceIn("logicalOrExpression", 97);
        JamlAttrHashParser.logicalOrExpression_return retval = new JamlAttrHashParser.logicalOrExpression_return();
        retval.start = input.LT(1);
        int logicalOrExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LOGICAL_OR400=null;
        JamlAttrHashParser.logicalAndExpression_return logicalAndExpression399 = null;

        JamlAttrHashParser.logicalAndExpression_return logicalAndExpression401 = null;


        CommonTree LOGICAL_OR400_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }
            // ../etc/JamlAttrHash.g:910:5: ( logicalAndExpression ( LOGICAL_OR logicalAndExpression )* )
            // ../etc/JamlAttrHash.g:910:9: logicalAndExpression ( LOGICAL_OR logicalAndExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_logicalAndExpression_in_logicalOrExpression11684);
            logicalAndExpression399=logicalAndExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, logicalAndExpression399.getTree());
            // ../etc/JamlAttrHash.g:910:30: ( LOGICAL_OR logicalAndExpression )*
            loop115:
            do {
                int alt115=2;
                int LA115_0 = input.LA(1);

                if ( (LA115_0==LOGICAL_OR) ) {
                    alt115=1;
                }


                switch (alt115) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:910:31: LOGICAL_OR logicalAndExpression
            	    {
            	    LOGICAL_OR400=(Token)match(input,LOGICAL_OR,FOLLOW_LOGICAL_OR_in_logicalOrExpression11687); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    LOGICAL_OR400_tree = (CommonTree)adaptor.create(LOGICAL_OR400);
            	    root_0 = (CommonTree)adaptor.becomeRoot(LOGICAL_OR400_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_logicalAndExpression_in_logicalOrExpression11690);
            	    logicalAndExpression401=logicalAndExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, logicalAndExpression401.getTree());

            	    }
            	    break;

            	default :
            	    break loop115;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("logicalOrExpression", 97);
            if ( state.backtracking>0 ) { memoize(input, 97, logicalOrExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "logicalOrExpression"

    public static class logicalAndExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "logicalAndExpression"
    // ../etc/JamlAttrHash.g:913:1: logicalAndExpression : inclusiveOrExpression ( LOGICAL_AND inclusiveOrExpression )* ;
    public final JamlAttrHashParser.logicalAndExpression_return logicalAndExpression() throws RecognitionException {
    traceIn("logicalAndExpression", 98);
        JamlAttrHashParser.logicalAndExpression_return retval = new JamlAttrHashParser.logicalAndExpression_return();
        retval.start = input.LT(1);
        int logicalAndExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LOGICAL_AND403=null;
        JamlAttrHashParser.inclusiveOrExpression_return inclusiveOrExpression402 = null;

        JamlAttrHashParser.inclusiveOrExpression_return inclusiveOrExpression404 = null;


        CommonTree LOGICAL_AND403_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }
            // ../etc/JamlAttrHash.g:914:5: ( inclusiveOrExpression ( LOGICAL_AND inclusiveOrExpression )* )
            // ../etc/JamlAttrHash.g:914:9: inclusiveOrExpression ( LOGICAL_AND inclusiveOrExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_inclusiveOrExpression_in_logicalAndExpression11711);
            inclusiveOrExpression402=inclusiveOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inclusiveOrExpression402.getTree());
            // ../etc/JamlAttrHash.g:914:31: ( LOGICAL_AND inclusiveOrExpression )*
            loop116:
            do {
                int alt116=2;
                int LA116_0 = input.LA(1);

                if ( (LA116_0==LOGICAL_AND) ) {
                    alt116=1;
                }


                switch (alt116) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:914:32: LOGICAL_AND inclusiveOrExpression
            	    {
            	    LOGICAL_AND403=(Token)match(input,LOGICAL_AND,FOLLOW_LOGICAL_AND_in_logicalAndExpression11714); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    LOGICAL_AND403_tree = (CommonTree)adaptor.create(LOGICAL_AND403);
            	    root_0 = (CommonTree)adaptor.becomeRoot(LOGICAL_AND403_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_inclusiveOrExpression_in_logicalAndExpression11717);
            	    inclusiveOrExpression404=inclusiveOrExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inclusiveOrExpression404.getTree());

            	    }
            	    break;

            	default :
            	    break loop116;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("logicalAndExpression", 98);
            if ( state.backtracking>0 ) { memoize(input, 98, logicalAndExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "logicalAndExpression"

    public static class inclusiveOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inclusiveOrExpression"
    // ../etc/JamlAttrHash.g:917:1: inclusiveOrExpression : exclusiveOrExpression ( OR exclusiveOrExpression )* ;
    public final JamlAttrHashParser.inclusiveOrExpression_return inclusiveOrExpression() throws RecognitionException {
    traceIn("inclusiveOrExpression", 99);
        JamlAttrHashParser.inclusiveOrExpression_return retval = new JamlAttrHashParser.inclusiveOrExpression_return();
        retval.start = input.LT(1);
        int inclusiveOrExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token OR406=null;
        JamlAttrHashParser.exclusiveOrExpression_return exclusiveOrExpression405 = null;

        JamlAttrHashParser.exclusiveOrExpression_return exclusiveOrExpression407 = null;


        CommonTree OR406_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }
            // ../etc/JamlAttrHash.g:918:5: ( exclusiveOrExpression ( OR exclusiveOrExpression )* )
            // ../etc/JamlAttrHash.g:918:9: exclusiveOrExpression ( OR exclusiveOrExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression11738);
            exclusiveOrExpression405=exclusiveOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, exclusiveOrExpression405.getTree());
            // ../etc/JamlAttrHash.g:918:31: ( OR exclusiveOrExpression )*
            loop117:
            do {
                int alt117=2;
                int LA117_0 = input.LA(1);

                if ( (LA117_0==OR) ) {
                    alt117=1;
                }


                switch (alt117) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:918:32: OR exclusiveOrExpression
            	    {
            	    OR406=(Token)match(input,OR,FOLLOW_OR_in_inclusiveOrExpression11741); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    OR406_tree = (CommonTree)adaptor.create(OR406);
            	    root_0 = (CommonTree)adaptor.becomeRoot(OR406_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression11744);
            	    exclusiveOrExpression407=exclusiveOrExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exclusiveOrExpression407.getTree());

            	    }
            	    break;

            	default :
            	    break loop117;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("inclusiveOrExpression", 99);
            if ( state.backtracking>0 ) { memoize(input, 99, inclusiveOrExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inclusiveOrExpression"

    public static class exclusiveOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exclusiveOrExpression"
    // ../etc/JamlAttrHash.g:921:1: exclusiveOrExpression : andExpression ( XOR andExpression )* ;
    public final JamlAttrHashParser.exclusiveOrExpression_return exclusiveOrExpression() throws RecognitionException {
    traceIn("exclusiveOrExpression", 100);
        JamlAttrHashParser.exclusiveOrExpression_return retval = new JamlAttrHashParser.exclusiveOrExpression_return();
        retval.start = input.LT(1);
        int exclusiveOrExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token XOR409=null;
        JamlAttrHashParser.andExpression_return andExpression408 = null;

        JamlAttrHashParser.andExpression_return andExpression410 = null;


        CommonTree XOR409_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }
            // ../etc/JamlAttrHash.g:922:5: ( andExpression ( XOR andExpression )* )
            // ../etc/JamlAttrHash.g:922:9: andExpression ( XOR andExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression11765);
            andExpression408=andExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, andExpression408.getTree());
            // ../etc/JamlAttrHash.g:922:23: ( XOR andExpression )*
            loop118:
            do {
                int alt118=2;
                int LA118_0 = input.LA(1);

                if ( (LA118_0==XOR) ) {
                    alt118=1;
                }


                switch (alt118) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:922:24: XOR andExpression
            	    {
            	    XOR409=(Token)match(input,XOR,FOLLOW_XOR_in_exclusiveOrExpression11768); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    XOR409_tree = (CommonTree)adaptor.create(XOR409);
            	    root_0 = (CommonTree)adaptor.becomeRoot(XOR409_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression11771);
            	    andExpression410=andExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, andExpression410.getTree());

            	    }
            	    break;

            	default :
            	    break loop118;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("exclusiveOrExpression", 100);
            if ( state.backtracking>0 ) { memoize(input, 100, exclusiveOrExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exclusiveOrExpression"

    public static class andExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "andExpression"
    // ../etc/JamlAttrHash.g:925:1: andExpression : equalityExpression ( AND equalityExpression )* ;
    public final JamlAttrHashParser.andExpression_return andExpression() throws RecognitionException {
    traceIn("andExpression", 101);
        JamlAttrHashParser.andExpression_return retval = new JamlAttrHashParser.andExpression_return();
        retval.start = input.LT(1);
        int andExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token AND412=null;
        JamlAttrHashParser.equalityExpression_return equalityExpression411 = null;

        JamlAttrHashParser.equalityExpression_return equalityExpression413 = null;


        CommonTree AND412_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }
            // ../etc/JamlAttrHash.g:926:5: ( equalityExpression ( AND equalityExpression )* )
            // ../etc/JamlAttrHash.g:926:9: equalityExpression ( AND equalityExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_equalityExpression_in_andExpression11792);
            equalityExpression411=equalityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, equalityExpression411.getTree());
            // ../etc/JamlAttrHash.g:926:28: ( AND equalityExpression )*
            loop119:
            do {
                int alt119=2;
                int LA119_0 = input.LA(1);

                if ( (LA119_0==AND) ) {
                    alt119=1;
                }


                switch (alt119) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:926:29: AND equalityExpression
            	    {
            	    AND412=(Token)match(input,AND,FOLLOW_AND_in_andExpression11795); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    AND412_tree = (CommonTree)adaptor.create(AND412);
            	    root_0 = (CommonTree)adaptor.becomeRoot(AND412_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_equalityExpression_in_andExpression11798);
            	    equalityExpression413=equalityExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, equalityExpression413.getTree());

            	    }
            	    break;

            	default :
            	    break loop119;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("andExpression", 101);
            if ( state.backtracking>0 ) { memoize(input, 101, andExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "andExpression"

    public static class equalityExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "equalityExpression"
    // ../etc/JamlAttrHash.g:929:1: equalityExpression : instanceOfExpression ( ( EQUAL | NOT_EQUAL ) instanceOfExpression )* ;
    public final JamlAttrHashParser.equalityExpression_return equalityExpression() throws RecognitionException {
    traceIn("equalityExpression", 102);
        JamlAttrHashParser.equalityExpression_return retval = new JamlAttrHashParser.equalityExpression_return();
        retval.start = input.LT(1);
        int equalityExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token EQUAL415=null;
        Token NOT_EQUAL416=null;
        JamlAttrHashParser.instanceOfExpression_return instanceOfExpression414 = null;

        JamlAttrHashParser.instanceOfExpression_return instanceOfExpression417 = null;


        CommonTree EQUAL415_tree=null;
        CommonTree NOT_EQUAL416_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }
            // ../etc/JamlAttrHash.g:930:5: ( instanceOfExpression ( ( EQUAL | NOT_EQUAL ) instanceOfExpression )* )
            // ../etc/JamlAttrHash.g:930:9: instanceOfExpression ( ( EQUAL | NOT_EQUAL ) instanceOfExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression11819);
            instanceOfExpression414=instanceOfExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, instanceOfExpression414.getTree());
            // ../etc/JamlAttrHash.g:931:9: ( ( EQUAL | NOT_EQUAL ) instanceOfExpression )*
            loop121:
            do {
                int alt121=2;
                int LA121_0 = input.LA(1);

                if ( (LA121_0==EQUAL||LA121_0==NOT_EQUAL) ) {
                    alt121=1;
                }


                switch (alt121) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:931:13: ( EQUAL | NOT_EQUAL ) instanceOfExpression
            	    {
            	    // ../etc/JamlAttrHash.g:931:13: ( EQUAL | NOT_EQUAL )
            	    int alt120=2;
            	    int LA120_0 = input.LA(1);

            	    if ( (LA120_0==EQUAL) ) {
            	        alt120=1;
            	    }
            	    else if ( (LA120_0==NOT_EQUAL) ) {
            	        alt120=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 120, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt120) {
            	        case 1 :
            	            // ../etc/JamlAttrHash.g:931:17: EQUAL
            	            {
            	            EQUAL415=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_equalityExpression11838); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            EQUAL415_tree = (CommonTree)adaptor.create(EQUAL415);
            	            root_0 = (CommonTree)adaptor.becomeRoot(EQUAL415_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // ../etc/JamlAttrHash.g:932:17: NOT_EQUAL
            	            {
            	            NOT_EQUAL416=(Token)match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_equalityExpression11857); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            NOT_EQUAL416_tree = (CommonTree)adaptor.create(NOT_EQUAL416);
            	            root_0 = (CommonTree)adaptor.becomeRoot(NOT_EQUAL416_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression11887);
            	    instanceOfExpression417=instanceOfExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, instanceOfExpression417.getTree());

            	    }
            	    break;

            	default :
            	    break loop121;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("equalityExpression", 102);
            if ( state.backtracking>0 ) { memoize(input, 102, equalityExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "equalityExpression"

    public static class instanceOfExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "instanceOfExpression"
    // ../etc/JamlAttrHash.g:938:1: instanceOfExpression : relationalExpression ( INSTANCEOF type )? ;
    public final JamlAttrHashParser.instanceOfExpression_return instanceOfExpression() throws RecognitionException {
    traceIn("instanceOfExpression", 103);
        JamlAttrHashParser.instanceOfExpression_return retval = new JamlAttrHashParser.instanceOfExpression_return();
        retval.start = input.LT(1);
        int instanceOfExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token INSTANCEOF419=null;
        JamlAttrHashParser.relationalExpression_return relationalExpression418 = null;

        JamlAttrHashParser.type_return type420 = null;


        CommonTree INSTANCEOF419_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }
            // ../etc/JamlAttrHash.g:939:5: ( relationalExpression ( INSTANCEOF type )? )
            // ../etc/JamlAttrHash.g:939:9: relationalExpression ( INSTANCEOF type )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_relationalExpression_in_instanceOfExpression11917);
            relationalExpression418=relationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, relationalExpression418.getTree());
            // ../etc/JamlAttrHash.g:939:30: ( INSTANCEOF type )?
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==INSTANCEOF) ) {
                alt122=1;
            }
            switch (alt122) {
                case 1 :
                    // ../etc/JamlAttrHash.g:939:31: INSTANCEOF type
                    {
                    INSTANCEOF419=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_instanceOfExpression11920); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF419_tree = (CommonTree)adaptor.create(INSTANCEOF419);
                    root_0 = (CommonTree)adaptor.becomeRoot(INSTANCEOF419_tree, root_0);
                    }
                    pushFollow(FOLLOW_type_in_instanceOfExpression11923);
                    type420=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type420.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("instanceOfExpression", 103);
            if ( state.backtracking>0 ) { memoize(input, 103, instanceOfExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "instanceOfExpression"

    public static class relationalExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relationalExpression"
    // ../etc/JamlAttrHash.g:942:1: relationalExpression : shiftExpression ( ( LESS_OR_EQUAL | GREATER_OR_EQUAL | LESS_THAN | GREATER_THAN ) shiftExpression )* ;
    public final JamlAttrHashParser.relationalExpression_return relationalExpression() throws RecognitionException {
    traceIn("relationalExpression", 104);
        JamlAttrHashParser.relationalExpression_return retval = new JamlAttrHashParser.relationalExpression_return();
        retval.start = input.LT(1);
        int relationalExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LESS_OR_EQUAL422=null;
        Token GREATER_OR_EQUAL423=null;
        Token LESS_THAN424=null;
        Token GREATER_THAN425=null;
        JamlAttrHashParser.shiftExpression_return shiftExpression421 = null;

        JamlAttrHashParser.shiftExpression_return shiftExpression426 = null;


        CommonTree LESS_OR_EQUAL422_tree=null;
        CommonTree GREATER_OR_EQUAL423_tree=null;
        CommonTree LESS_THAN424_tree=null;
        CommonTree GREATER_THAN425_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }
            // ../etc/JamlAttrHash.g:943:5: ( shiftExpression ( ( LESS_OR_EQUAL | GREATER_OR_EQUAL | LESS_THAN | GREATER_THAN ) shiftExpression )* )
            // ../etc/JamlAttrHash.g:943:9: shiftExpression ( ( LESS_OR_EQUAL | GREATER_OR_EQUAL | LESS_THAN | GREATER_THAN ) shiftExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_shiftExpression_in_relationalExpression11944);
            shiftExpression421=shiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, shiftExpression421.getTree());
            // ../etc/JamlAttrHash.g:944:9: ( ( LESS_OR_EQUAL | GREATER_OR_EQUAL | LESS_THAN | GREATER_THAN ) shiftExpression )*
            loop124:
            do {
                int alt124=2;
                int LA124_0 = input.LA(1);

                if ( ((LA124_0>=GREATER_OR_EQUAL && LA124_0<=GREATER_THAN)||(LA124_0>=LESS_OR_EQUAL && LA124_0<=LESS_THAN)) ) {
                    alt124=1;
                }


                switch (alt124) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:944:13: ( LESS_OR_EQUAL | GREATER_OR_EQUAL | LESS_THAN | GREATER_THAN ) shiftExpression
            	    {
            	    // ../etc/JamlAttrHash.g:944:13: ( LESS_OR_EQUAL | GREATER_OR_EQUAL | LESS_THAN | GREATER_THAN )
            	    int alt123=4;
            	    switch ( input.LA(1) ) {
            	    case LESS_OR_EQUAL:
            	        {
            	        alt123=1;
            	        }
            	        break;
            	    case GREATER_OR_EQUAL:
            	        {
            	        alt123=2;
            	        }
            	        break;
            	    case LESS_THAN:
            	        {
            	        alt123=3;
            	        }
            	        break;
            	    case GREATER_THAN:
            	        {
            	        alt123=4;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 123, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt123) {
            	        case 1 :
            	            // ../etc/JamlAttrHash.g:944:17: LESS_OR_EQUAL
            	            {
            	            LESS_OR_EQUAL422=(Token)match(input,LESS_OR_EQUAL,FOLLOW_LESS_OR_EQUAL_in_relationalExpression11963); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            LESS_OR_EQUAL422_tree = (CommonTree)adaptor.create(LESS_OR_EQUAL422);
            	            root_0 = (CommonTree)adaptor.becomeRoot(LESS_OR_EQUAL422_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // ../etc/JamlAttrHash.g:945:17: GREATER_OR_EQUAL
            	            {
            	            GREATER_OR_EQUAL423=(Token)match(input,GREATER_OR_EQUAL,FOLLOW_GREATER_OR_EQUAL_in_relationalExpression11982); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            GREATER_OR_EQUAL423_tree = (CommonTree)adaptor.create(GREATER_OR_EQUAL423);
            	            root_0 = (CommonTree)adaptor.becomeRoot(GREATER_OR_EQUAL423_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // ../etc/JamlAttrHash.g:946:17: LESS_THAN
            	            {
            	            LESS_THAN424=(Token)match(input,LESS_THAN,FOLLOW_LESS_THAN_in_relationalExpression12001); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            LESS_THAN424_tree = (CommonTree)adaptor.create(LESS_THAN424);
            	            root_0 = (CommonTree)adaptor.becomeRoot(LESS_THAN424_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 4 :
            	            // ../etc/JamlAttrHash.g:947:17: GREATER_THAN
            	            {
            	            GREATER_THAN425=(Token)match(input,GREATER_THAN,FOLLOW_GREATER_THAN_in_relationalExpression12020); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            GREATER_THAN425_tree = (CommonTree)adaptor.create(GREATER_THAN425);
            	            root_0 = (CommonTree)adaptor.becomeRoot(GREATER_THAN425_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_shiftExpression_in_relationalExpression12049);
            	    shiftExpression426=shiftExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, shiftExpression426.getTree());

            	    }
            	    break;

            	default :
            	    break loop124;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("relationalExpression", 104);
            if ( state.backtracking>0 ) { memoize(input, 104, relationalExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "relationalExpression"

    public static class shiftExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "shiftExpression"
    // ../etc/JamlAttrHash.g:953:1: shiftExpression : additiveExpression ( ( BIT_SHIFT_RIGHT | SHIFT_RIGHT | SHIFT_LEFT ) additiveExpression )* ;
    public final JamlAttrHashParser.shiftExpression_return shiftExpression() throws RecognitionException {
    traceIn("shiftExpression", 105);
        JamlAttrHashParser.shiftExpression_return retval = new JamlAttrHashParser.shiftExpression_return();
        retval.start = input.LT(1);
        int shiftExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token BIT_SHIFT_RIGHT428=null;
        Token SHIFT_RIGHT429=null;
        Token SHIFT_LEFT430=null;
        JamlAttrHashParser.additiveExpression_return additiveExpression427 = null;

        JamlAttrHashParser.additiveExpression_return additiveExpression431 = null;


        CommonTree BIT_SHIFT_RIGHT428_tree=null;
        CommonTree SHIFT_RIGHT429_tree=null;
        CommonTree SHIFT_LEFT430_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }
            // ../etc/JamlAttrHash.g:954:5: ( additiveExpression ( ( BIT_SHIFT_RIGHT | SHIFT_RIGHT | SHIFT_LEFT ) additiveExpression )* )
            // ../etc/JamlAttrHash.g:954:9: additiveExpression ( ( BIT_SHIFT_RIGHT | SHIFT_RIGHT | SHIFT_LEFT ) additiveExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_additiveExpression_in_shiftExpression12083);
            additiveExpression427=additiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, additiveExpression427.getTree());
            // ../etc/JamlAttrHash.g:955:9: ( ( BIT_SHIFT_RIGHT | SHIFT_RIGHT | SHIFT_LEFT ) additiveExpression )*
            loop126:
            do {
                int alt126=2;
                int LA126_0 = input.LA(1);

                if ( (LA126_0==BIT_SHIFT_RIGHT||LA126_0==SHIFT_LEFT||LA126_0==SHIFT_RIGHT) ) {
                    alt126=1;
                }


                switch (alt126) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:955:13: ( BIT_SHIFT_RIGHT | SHIFT_RIGHT | SHIFT_LEFT ) additiveExpression
            	    {
            	    // ../etc/JamlAttrHash.g:955:13: ( BIT_SHIFT_RIGHT | SHIFT_RIGHT | SHIFT_LEFT )
            	    int alt125=3;
            	    switch ( input.LA(1) ) {
            	    case BIT_SHIFT_RIGHT:
            	        {
            	        alt125=1;
            	        }
            	        break;
            	    case SHIFT_RIGHT:
            	        {
            	        alt125=2;
            	        }
            	        break;
            	    case SHIFT_LEFT:
            	        {
            	        alt125=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 125, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt125) {
            	        case 1 :
            	            // ../etc/JamlAttrHash.g:955:17: BIT_SHIFT_RIGHT
            	            {
            	            BIT_SHIFT_RIGHT428=(Token)match(input,BIT_SHIFT_RIGHT,FOLLOW_BIT_SHIFT_RIGHT_in_shiftExpression12101); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BIT_SHIFT_RIGHT428_tree = (CommonTree)adaptor.create(BIT_SHIFT_RIGHT428);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BIT_SHIFT_RIGHT428_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // ../etc/JamlAttrHash.g:956:17: SHIFT_RIGHT
            	            {
            	            SHIFT_RIGHT429=(Token)match(input,SHIFT_RIGHT,FOLLOW_SHIFT_RIGHT_in_shiftExpression12120); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            SHIFT_RIGHT429_tree = (CommonTree)adaptor.create(SHIFT_RIGHT429);
            	            root_0 = (CommonTree)adaptor.becomeRoot(SHIFT_RIGHT429_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // ../etc/JamlAttrHash.g:957:17: SHIFT_LEFT
            	            {
            	            SHIFT_LEFT430=(Token)match(input,SHIFT_LEFT,FOLLOW_SHIFT_LEFT_in_shiftExpression12139); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            SHIFT_LEFT430_tree = (CommonTree)adaptor.create(SHIFT_LEFT430);
            	            root_0 = (CommonTree)adaptor.becomeRoot(SHIFT_LEFT430_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_additiveExpression_in_shiftExpression12168);
            	    additiveExpression431=additiveExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, additiveExpression431.getTree());

            	    }
            	    break;

            	default :
            	    break loop126;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("shiftExpression", 105);
            if ( state.backtracking>0 ) { memoize(input, 105, shiftExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "shiftExpression"

    public static class additiveExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "additiveExpression"
    // ../etc/JamlAttrHash.g:963:1: additiveExpression : multiplicativeExpression ( ( PLUS | MINUS ) multiplicativeExpression )* ;
    public final JamlAttrHashParser.additiveExpression_return additiveExpression() throws RecognitionException {
    traceIn("additiveExpression", 106);
        JamlAttrHashParser.additiveExpression_return retval = new JamlAttrHashParser.additiveExpression_return();
        retval.start = input.LT(1);
        int additiveExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token PLUS433=null;
        Token MINUS434=null;
        JamlAttrHashParser.multiplicativeExpression_return multiplicativeExpression432 = null;

        JamlAttrHashParser.multiplicativeExpression_return multiplicativeExpression435 = null;


        CommonTree PLUS433_tree=null;
        CommonTree MINUS434_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }
            // ../etc/JamlAttrHash.g:964:5: ( multiplicativeExpression ( ( PLUS | MINUS ) multiplicativeExpression )* )
            // ../etc/JamlAttrHash.g:964:9: multiplicativeExpression ( ( PLUS | MINUS ) multiplicativeExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression12198);
            multiplicativeExpression432=multiplicativeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplicativeExpression432.getTree());
            // ../etc/JamlAttrHash.g:965:9: ( ( PLUS | MINUS ) multiplicativeExpression )*
            loop128:
            do {
                int alt128=2;
                int LA128_0 = input.LA(1);

                if ( (LA128_0==MINUS||LA128_0==PLUS) ) {
                    alt128=1;
                }


                switch (alt128) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:965:13: ( PLUS | MINUS ) multiplicativeExpression
            	    {
            	    // ../etc/JamlAttrHash.g:965:13: ( PLUS | MINUS )
            	    int alt127=2;
            	    int LA127_0 = input.LA(1);

            	    if ( (LA127_0==PLUS) ) {
            	        alt127=1;
            	    }
            	    else if ( (LA127_0==MINUS) ) {
            	        alt127=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 127, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt127) {
            	        case 1 :
            	            // ../etc/JamlAttrHash.g:965:17: PLUS
            	            {
            	            PLUS433=(Token)match(input,PLUS,FOLLOW_PLUS_in_additiveExpression12216); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUS433_tree = (CommonTree)adaptor.create(PLUS433);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUS433_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // ../etc/JamlAttrHash.g:966:17: MINUS
            	            {
            	            MINUS434=(Token)match(input,MINUS,FOLLOW_MINUS_in_additiveExpression12235); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUS434_tree = (CommonTree)adaptor.create(MINUS434);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUS434_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression12264);
            	    multiplicativeExpression435=multiplicativeExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplicativeExpression435.getTree());

            	    }
            	    break;

            	default :
            	    break loop128;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("additiveExpression", 106);
            if ( state.backtracking>0 ) { memoize(input, 106, additiveExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "additiveExpression"

    public static class multiplicativeExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiplicativeExpression"
    // ../etc/JamlAttrHash.g:972:1: multiplicativeExpression : unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )* ;
    public final JamlAttrHashParser.multiplicativeExpression_return multiplicativeExpression() throws RecognitionException {
    traceIn("multiplicativeExpression", 107);
        JamlAttrHashParser.multiplicativeExpression_return retval = new JamlAttrHashParser.multiplicativeExpression_return();
        retval.start = input.LT(1);
        int multiplicativeExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token STAR437=null;
        Token DIV438=null;
        Token MOD439=null;
        JamlAttrHashParser.unaryExpression_return unaryExpression436 = null;

        JamlAttrHashParser.unaryExpression_return unaryExpression440 = null;


        CommonTree STAR437_tree=null;
        CommonTree DIV438_tree=null;
        CommonTree MOD439_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }
            // ../etc/JamlAttrHash.g:973:5: ( unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )* )
            // ../etc/JamlAttrHash.g:973:9: unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression12294);
            unaryExpression436=unaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression436.getTree());
            // ../etc/JamlAttrHash.g:974:9: ( ( STAR | DIV | MOD ) unaryExpression )*
            loop130:
            do {
                int alt130=2;
                int LA130_0 = input.LA(1);

                if ( (LA130_0==DIV||LA130_0==MOD||LA130_0==STAR) ) {
                    alt130=1;
                }


                switch (alt130) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:974:13: ( STAR | DIV | MOD ) unaryExpression
            	    {
            	    // ../etc/JamlAttrHash.g:974:13: ( STAR | DIV | MOD )
            	    int alt129=3;
            	    switch ( input.LA(1) ) {
            	    case STAR:
            	        {
            	        alt129=1;
            	        }
            	        break;
            	    case DIV:
            	        {
            	        alt129=2;
            	        }
            	        break;
            	    case MOD:
            	        {
            	        alt129=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 129, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt129) {
            	        case 1 :
            	            // ../etc/JamlAttrHash.g:974:17: STAR
            	            {
            	            STAR437=(Token)match(input,STAR,FOLLOW_STAR_in_multiplicativeExpression12313); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            STAR437_tree = (CommonTree)adaptor.create(STAR437);
            	            root_0 = (CommonTree)adaptor.becomeRoot(STAR437_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // ../etc/JamlAttrHash.g:975:17: DIV
            	            {
            	            DIV438=(Token)match(input,DIV,FOLLOW_DIV_in_multiplicativeExpression12332); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DIV438_tree = (CommonTree)adaptor.create(DIV438);
            	            root_0 = (CommonTree)adaptor.becomeRoot(DIV438_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // ../etc/JamlAttrHash.g:976:17: MOD
            	            {
            	            MOD439=(Token)match(input,MOD,FOLLOW_MOD_in_multiplicativeExpression12351); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MOD439_tree = (CommonTree)adaptor.create(MOD439);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MOD439_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression12380);
            	    unaryExpression440=unaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression440.getTree());

            	    }
            	    break;

            	default :
            	    break loop130;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("multiplicativeExpression", 107);
            if ( state.backtracking>0 ) { memoize(input, 107, multiplicativeExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiplicativeExpression"

    public static class unaryExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpression"
    // ../etc/JamlAttrHash.g:982:1: unaryExpression : ( PLUS unaryExpression -> ^( UNARY_PLUS[$PLUS, \"UNARY_PLUS\"] unaryExpression ) | MINUS unaryExpression -> ^( UNARY_MINUS[$MINUS, \"UNARY_MINUS\"] unaryExpression ) | INC postfixedExpression -> ^( PRE_INC[$INC, \"PRE_INC\"] postfixedExpression ) | DEC postfixedExpression -> ^( PRE_DEC[$DEC, \"PRE_DEC\"] postfixedExpression ) | unaryExpressionNotPlusMinus );
    public final JamlAttrHashParser.unaryExpression_return unaryExpression() throws RecognitionException {
    traceIn("unaryExpression", 108);
        JamlAttrHashParser.unaryExpression_return retval = new JamlAttrHashParser.unaryExpression_return();
        retval.start = input.LT(1);
        int unaryExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token PLUS441=null;
        Token MINUS443=null;
        Token INC445=null;
        Token DEC447=null;
        JamlAttrHashParser.unaryExpression_return unaryExpression442 = null;

        JamlAttrHashParser.unaryExpression_return unaryExpression444 = null;

        JamlAttrHashParser.postfixedExpression_return postfixedExpression446 = null;

        JamlAttrHashParser.postfixedExpression_return postfixedExpression448 = null;

        JamlAttrHashParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus449 = null;


        CommonTree PLUS441_tree=null;
        CommonTree MINUS443_tree=null;
        CommonTree INC445_tree=null;
        CommonTree DEC447_tree=null;
        RewriteRuleTokenStream stream_DEC=new RewriteRuleTokenStream(adaptor,"token DEC");
        RewriteRuleTokenStream stream_INC=new RewriteRuleTokenStream(adaptor,"token INC");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_postfixedExpression=new RewriteRuleSubtreeStream(adaptor,"rule postfixedExpression");
        RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }
            // ../etc/JamlAttrHash.g:983:5: ( PLUS unaryExpression -> ^( UNARY_PLUS[$PLUS, \"UNARY_PLUS\"] unaryExpression ) | MINUS unaryExpression -> ^( UNARY_MINUS[$MINUS, \"UNARY_MINUS\"] unaryExpression ) | INC postfixedExpression -> ^( PRE_INC[$INC, \"PRE_INC\"] postfixedExpression ) | DEC postfixedExpression -> ^( PRE_DEC[$DEC, \"PRE_DEC\"] postfixedExpression ) | unaryExpressionNotPlusMinus )
            int alt131=5;
            switch ( input.LA(1) ) {
            case PLUS:
                {
                alt131=1;
                }
                break;
            case MINUS:
                {
                alt131=2;
                }
                break;
            case INC:
                {
                alt131=3;
                }
                break;
            case DEC:
                {
                alt131=4;
                }
                break;
            case LESS_THAN:
            case LOGICAL_NOT:
            case LPAREN:
            case NOT:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case SHORT:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
            case IDENT:
            case HEX_LITERAL:
            case OCTAL_LITERAL:
            case DECIMAL_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
                {
                alt131=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 131, 0, input);

                throw nvae;
            }

            switch (alt131) {
                case 1 :
                    // ../etc/JamlAttrHash.g:983:9: PLUS unaryExpression
                    {
                    PLUS441=(Token)match(input,PLUS,FOLLOW_PLUS_in_unaryExpression12414); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(PLUS441);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression12416);
                    unaryExpression442=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression442.getTree());


                    // AST REWRITE
                    // elements: unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 983:37: -> ^( UNARY_PLUS[$PLUS, \"UNARY_PLUS\"] unaryExpression )
                    {
                        // ../etc/JamlAttrHash.g:983:41: ^( UNARY_PLUS[$PLUS, \"UNARY_PLUS\"] unaryExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UNARY_PLUS, PLUS441, "UNARY_PLUS"), root_1);

                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:984:9: MINUS unaryExpression
                    {
                    MINUS443=(Token)match(input,MINUS,FOLLOW_MINUS_in_unaryExpression12443); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS443);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression12445);
                    unaryExpression444=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression444.getTree());


                    // AST REWRITE
                    // elements: unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 984:37: -> ^( UNARY_MINUS[$MINUS, \"UNARY_MINUS\"] unaryExpression )
                    {
                        // ../etc/JamlAttrHash.g:984:41: ^( UNARY_MINUS[$MINUS, \"UNARY_MINUS\"] unaryExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UNARY_MINUS, MINUS443, "UNARY_MINUS"), root_1);

                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // ../etc/JamlAttrHash.g:985:9: INC postfixedExpression
                    {
                    INC445=(Token)match(input,INC,FOLLOW_INC_in_unaryExpression12471); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INC.add(INC445);

                    pushFollow(FOLLOW_postfixedExpression_in_unaryExpression12473);
                    postfixedExpression446=postfixedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_postfixedExpression.add(postfixedExpression446.getTree());


                    // AST REWRITE
                    // elements: postfixedExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 985:37: -> ^( PRE_INC[$INC, \"PRE_INC\"] postfixedExpression )
                    {
                        // ../etc/JamlAttrHash.g:985:41: ^( PRE_INC[$INC, \"PRE_INC\"] postfixedExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PRE_INC, INC445, "PRE_INC"), root_1);

                        adaptor.addChild(root_1, stream_postfixedExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // ../etc/JamlAttrHash.g:986:9: DEC postfixedExpression
                    {
                    DEC447=(Token)match(input,DEC,FOLLOW_DEC_in_unaryExpression12497); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DEC.add(DEC447);

                    pushFollow(FOLLOW_postfixedExpression_in_unaryExpression12499);
                    postfixedExpression448=postfixedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_postfixedExpression.add(postfixedExpression448.getTree());


                    // AST REWRITE
                    // elements: postfixedExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 986:37: -> ^( PRE_DEC[$DEC, \"PRE_DEC\"] postfixedExpression )
                    {
                        // ../etc/JamlAttrHash.g:986:41: ^( PRE_DEC[$DEC, \"PRE_DEC\"] postfixedExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PRE_DEC, DEC447, "PRE_DEC"), root_1);

                        adaptor.addChild(root_1, stream_postfixedExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // ../etc/JamlAttrHash.g:987:9: unaryExpressionNotPlusMinus
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression12523);
                    unaryExpressionNotPlusMinus449=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpressionNotPlusMinus449.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("unaryExpression", 108);
            if ( state.backtracking>0 ) { memoize(input, 108, unaryExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unaryExpression"

    public static class unaryExpressionNotPlusMinus_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpressionNotPlusMinus"
    // ../etc/JamlAttrHash.g:990:1: unaryExpressionNotPlusMinus : ( NOT unaryExpression -> ^( NOT unaryExpression ) | LOGICAL_NOT unaryExpression -> ^( LOGICAL_NOT unaryExpression ) | LPAREN type RPAREN unaryExpression -> ^( CAST_EXPR[$LPAREN, \"CAST_EXPR\"] type unaryExpression ) | postfixedExpression );
    public final JamlAttrHashParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus() throws RecognitionException {
    traceIn("unaryExpressionNotPlusMinus", 109);
        JamlAttrHashParser.unaryExpressionNotPlusMinus_return retval = new JamlAttrHashParser.unaryExpressionNotPlusMinus_return();
        retval.start = input.LT(1);
        int unaryExpressionNotPlusMinus_StartIndex = input.index();
        CommonTree root_0 = null;

        Token NOT450=null;
        Token LOGICAL_NOT452=null;
        Token LPAREN454=null;
        Token RPAREN456=null;
        JamlAttrHashParser.unaryExpression_return unaryExpression451 = null;

        JamlAttrHashParser.unaryExpression_return unaryExpression453 = null;

        JamlAttrHashParser.type_return type455 = null;

        JamlAttrHashParser.unaryExpression_return unaryExpression457 = null;

        JamlAttrHashParser.postfixedExpression_return postfixedExpression458 = null;


        CommonTree NOT450_tree=null;
        CommonTree LOGICAL_NOT452_tree=null;
        CommonTree LPAREN454_tree=null;
        CommonTree RPAREN456_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LOGICAL_NOT=new RewriteRuleTokenStream(adaptor,"token LOGICAL_NOT");
        RewriteRuleTokenStream stream_NOT=new RewriteRuleTokenStream(adaptor,"token NOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }
            // ../etc/JamlAttrHash.g:991:5: ( NOT unaryExpression -> ^( NOT unaryExpression ) | LOGICAL_NOT unaryExpression -> ^( LOGICAL_NOT unaryExpression ) | LPAREN type RPAREN unaryExpression -> ^( CAST_EXPR[$LPAREN, \"CAST_EXPR\"] type unaryExpression ) | postfixedExpression )
            int alt132=4;
            alt132 = dfa132.predict(input);
            switch (alt132) {
                case 1 :
                    // ../etc/JamlAttrHash.g:991:9: NOT unaryExpression
                    {
                    NOT450=(Token)match(input,NOT,FOLLOW_NOT_in_unaryExpressionNotPlusMinus12542); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NOT.add(NOT450);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus12544);
                    unaryExpression451=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression451.getTree());


                    // AST REWRITE
                    // elements: NOT, unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 991:57: -> ^( NOT unaryExpression )
                    {
                        // ../etc/JamlAttrHash.g:991:61: ^( NOT unaryExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_NOT.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:992:9: LOGICAL_NOT unaryExpression
                    {
                    LOGICAL_NOT452=(Token)match(input,LOGICAL_NOT,FOLLOW_LOGICAL_NOT_in_unaryExpressionNotPlusMinus12591); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LOGICAL_NOT.add(LOGICAL_NOT452);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus12593);
                    unaryExpression453=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression453.getTree());


                    // AST REWRITE
                    // elements: unaryExpression, LOGICAL_NOT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 992:57: -> ^( LOGICAL_NOT unaryExpression )
                    {
                        // ../etc/JamlAttrHash.g:992:61: ^( LOGICAL_NOT unaryExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_LOGICAL_NOT.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // ../etc/JamlAttrHash.g:993:9: LPAREN type RPAREN unaryExpression
                    {
                    LPAREN454=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_unaryExpressionNotPlusMinus12632); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN454);

                    pushFollow(FOLLOW_type_in_unaryExpressionNotPlusMinus12634);
                    type455=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type455.getTree());
                    RPAREN456=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_unaryExpressionNotPlusMinus12636); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN456);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus12638);
                    unaryExpression457=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression457.getTree());


                    // AST REWRITE
                    // elements: type, unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 993:57: -> ^( CAST_EXPR[$LPAREN, \"CAST_EXPR\"] type unaryExpression )
                    {
                        // ../etc/JamlAttrHash.g:993:61: ^( CAST_EXPR[$LPAREN, \"CAST_EXPR\"] type unaryExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CAST_EXPR, LPAREN454, "CAST_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_type.nextTree());
                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // ../etc/JamlAttrHash.g:994:9: postfixedExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_postfixedExpression_in_unaryExpressionNotPlusMinus12673);
                    postfixedExpression458=postfixedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, postfixedExpression458.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("unaryExpressionNotPlusMinus", 109);
            if ( state.backtracking>0 ) { memoize(input, 109, unaryExpressionNotPlusMinus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unaryExpressionNotPlusMinus"

    public static class postfixedExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "postfixedExpression"
    // ../etc/JamlAttrHash.g:997:1: postfixedExpression : ( primaryExpression -> primaryExpression ) (outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) ) | LBRACK expression RBRACK -> ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression ) )* ( INC -> ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression) | DEC -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression) )? ;
    public final JamlAttrHashParser.postfixedExpression_return postfixedExpression() throws RecognitionException {
    traceIn("postfixedExpression", 110);
        JamlAttrHashParser.postfixedExpression_return retval = new JamlAttrHashParser.postfixedExpression_return();
        retval.start = input.LT(1);
        int postfixedExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token outerDot=null;
        Token Super=null;
        Token innerDot=null;
        Token IDENT461=null;
        Token THIS463=null;
        Token SUPER465=null;
        Token IDENT466=null;
        Token LBRACK469=null;
        Token RBRACK471=null;
        Token INC472=null;
        Token DEC473=null;
        JamlAttrHashParser.primaryExpression_return primaryExpression459 = null;

        JamlAttrHashParser.genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified460 = null;

        JamlAttrHashParser.arguments_return arguments462 = null;

        JamlAttrHashParser.arguments_return arguments464 = null;

        JamlAttrHashParser.arguments_return arguments467 = null;

        JamlAttrHashParser.innerNewExpression_return innerNewExpression468 = null;

        JamlAttrHashParser.expression_return expression470 = null;


        CommonTree outerDot_tree=null;
        CommonTree Super_tree=null;
        CommonTree innerDot_tree=null;
        CommonTree IDENT461_tree=null;
        CommonTree THIS463_tree=null;
        CommonTree SUPER465_tree=null;
        CommonTree IDENT466_tree=null;
        CommonTree LBRACK469_tree=null;
        CommonTree RBRACK471_tree=null;
        CommonTree INC472_tree=null;
        CommonTree DEC473_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_INC=new RewriteRuleTokenStream(adaptor,"token INC");
        RewriteRuleTokenStream stream_DEC=new RewriteRuleTokenStream(adaptor,"token DEC");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_SUPER=new RewriteRuleTokenStream(adaptor,"token SUPER");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_THIS=new RewriteRuleTokenStream(adaptor,"token THIS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_primaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule primaryExpression");
        RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
        RewriteRuleSubtreeStream stream_innerNewExpression=new RewriteRuleSubtreeStream(adaptor,"rule innerNewExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }
            // ../etc/JamlAttrHash.g:999:5: ( ( primaryExpression -> primaryExpression ) (outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) ) | LBRACK expression RBRACK -> ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression ) )* ( INC -> ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression) | DEC -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression) )? )
            // ../etc/JamlAttrHash.g:999:9: ( primaryExpression -> primaryExpression ) (outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) ) | LBRACK expression RBRACK -> ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression ) )* ( INC -> ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression) | DEC -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression) )?
            {
            // ../etc/JamlAttrHash.g:999:9: ( primaryExpression -> primaryExpression )
            // ../etc/JamlAttrHash.g:999:13: primaryExpression
            {
            pushFollow(FOLLOW_primaryExpression_in_postfixedExpression12709);
            primaryExpression459=primaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_primaryExpression.add(primaryExpression459.getTree());


            // AST REWRITE
            // elements: primaryExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 999:53: -> primaryExpression
            {
                adaptor.addChild(root_0, stream_primaryExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            // ../etc/JamlAttrHash.g:1002:9: (outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) ) | LBRACK expression RBRACK -> ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression ) )*
            loop137:
            do {
                int alt137=3;
                int LA137_0 = input.LA(1);

                if ( (LA137_0==DOT) ) {
                    alt137=1;
                }
                else if ( (LA137_0==LBRACK) ) {
                    alt137=2;
                }


                switch (alt137) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:1002:13: outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) )
            	    {
            	    outerDot=(Token)match(input,DOT,FOLLOW_DOT_in_postfixedExpression12771); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(outerDot);

            	    // ../etc/JamlAttrHash.g:1003:13: ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) )
            	    int alt136=5;
            	    switch ( input.LA(1) ) {
            	    case LESS_THAN:
            	    case IDENT:
            	        {
            	        alt136=1;
            	        }
            	        break;
            	    case THIS:
            	        {
            	        alt136=2;
            	        }
            	        break;
            	    case SUPER:
            	        {
            	        int LA136_3 = input.LA(2);

            	        if ( (LA136_3==DOT) ) {
            	            alt136=4;
            	        }
            	        else if ( (LA136_3==LPAREN) ) {
            	            alt136=3;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 136, 3, input);

            	            throw nvae;
            	        }
            	        }
            	        break;
            	    case NEW:
            	        {
            	        alt136=5;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 136, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt136) {
            	        case 1 :
            	            // ../etc/JamlAttrHash.g:1003:17: ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )?
            	            {
            	            // ../etc/JamlAttrHash.g:1003:17: ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) )
            	            // ../etc/JamlAttrHash.g:1003:21: ( genericTypeArgumentListSimplified )? IDENT
            	            {
            	            // ../etc/JamlAttrHash.g:1003:21: ( genericTypeArgumentListSimplified )?
            	            int alt133=2;
            	            int LA133_0 = input.LA(1);

            	            if ( (LA133_0==LESS_THAN) ) {
            	                alt133=1;
            	            }
            	            switch (alt133) {
            	                case 1 :
            	                    // ../etc/JamlAttrHash.g:0:0: genericTypeArgumentListSimplified
            	                    {
            	                    pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_postfixedExpression12821);
            	                    genericTypeArgumentListSimplified460=genericTypeArgumentListSimplified();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_genericTypeArgumentListSimplified.add(genericTypeArgumentListSimplified460.getTree());

            	                    }
            	                    break;

            	            }

            	            IDENT461=(Token)match(input,IDENT,FOLLOW_IDENT_in_postfixedExpression12903); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IDENT.add(IDENT461);



            	            // AST REWRITE
            	            // elements: DOT, postfixedExpression, IDENT
            	            // token labels: 
            	            // rule labels: retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {
            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (CommonTree)adaptor.nil();
            	            // 1005:53: -> ^( DOT $postfixedExpression IDENT )
            	            {
            	                // ../etc/JamlAttrHash.g:1005:57: ^( DOT $postfixedExpression IDENT )
            	                {
            	                CommonTree root_1 = (CommonTree)adaptor.nil();
            	                root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());
            	                adaptor.addChild(root_1, stream_IDENT.nextNode());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }

            	            retval.tree = root_0;}
            	            }

            	            // ../etc/JamlAttrHash.g:1007:17: ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )?
            	            int alt134=2;
            	            int LA134_0 = input.LA(1);

            	            if ( (LA134_0==LPAREN) ) {
            	                alt134=1;
            	            }
            	            switch (alt134) {
            	                case 1 :
            	                    // ../etc/JamlAttrHash.g:1007:21: arguments
            	                    {
            	                    pushFollow(FOLLOW_arguments_in_postfixedExpression12982);
            	                    arguments462=arguments();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_arguments.add(arguments462.getTree());


            	                    // AST REWRITE
            	                    // elements: postfixedExpression, genericTypeArgumentListSimplified, arguments
            	                    // token labels: 
            	                    // rule labels: retval
            	                    // token list labels: 
            	                    // rule list labels: 
            	                    // wildcard labels: 
            	                    if ( state.backtracking==0 ) {
            	                    retval.tree = root_0;
            	                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	                    root_0 = (CommonTree)adaptor.nil();
            	                    // 1007:53: -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments )
            	                    {
            	                        // ../etc/JamlAttrHash.g:1007:57: ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments )
            	                        {
            	                        CommonTree root_1 = (CommonTree)adaptor.nil();
            	                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_CALL, "METHOD_CALL"), root_1);

            	                        adaptor.addChild(root_1, stream_retval.nextTree());
            	                        // ../etc/JamlAttrHash.g:1007:92: ( genericTypeArgumentListSimplified )?
            	                        if ( stream_genericTypeArgumentListSimplified.hasNext() ) {
            	                            adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());

            	                        }
            	                        stream_genericTypeArgumentListSimplified.reset();
            	                        adaptor.addChild(root_1, stream_arguments.nextTree());

            	                        adaptor.addChild(root_0, root_1);
            	                        }

            	                    }

            	                    retval.tree = root_0;}
            	                    }
            	                    break;

            	            }


            	            }
            	            break;
            	        case 2 :
            	            // ../etc/JamlAttrHash.g:1009:17: THIS
            	            {
            	            THIS463=(Token)match(input,THIS,FOLLOW_THIS_in_postfixedExpression13056); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_THIS.add(THIS463);



            	            // AST REWRITE
            	            // elements: DOT, THIS, postfixedExpression
            	            // token labels: 
            	            // rule labels: retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {
            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (CommonTree)adaptor.nil();
            	            // 1009:53: -> ^( DOT $postfixedExpression THIS )
            	            {
            	                // ../etc/JamlAttrHash.g:1009:57: ^( DOT $postfixedExpression THIS )
            	                {
            	                CommonTree root_1 = (CommonTree)adaptor.nil();
            	                root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());
            	                adaptor.addChild(root_1, stream_THIS.nextNode());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }

            	            retval.tree = root_0;}
            	            }
            	            break;
            	        case 3 :
            	            // ../etc/JamlAttrHash.g:1010:17: Super= SUPER arguments
            	            {
            	            Super=(Token)match(input,SUPER,FOLLOW_SUPER_in_postfixedExpression13119); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_SUPER.add(Super);

            	            pushFollow(FOLLOW_arguments_in_postfixedExpression13121);
            	            arguments464=arguments();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_arguments.add(arguments464.getTree());


            	            // AST REWRITE
            	            // elements: postfixedExpression, arguments
            	            // token labels: 
            	            // rule labels: retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {
            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (CommonTree)adaptor.nil();
            	            // 1010:57: -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments )
            	            {
            	                // ../etc/JamlAttrHash.g:1010:61: ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments )
            	                {
            	                CommonTree root_1 = (CommonTree)adaptor.nil();
            	                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUPER_CONSTRUCTOR_CALL, Super, "SUPER_CONSTRUCTOR_CALL"), root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());
            	                adaptor.addChild(root_1, stream_arguments.nextTree());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }

            	            retval.tree = root_0;}
            	            }
            	            break;
            	        case 4 :
            	            // ../etc/JamlAttrHash.g:1011:17: ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )?
            	            {
            	            // ../etc/JamlAttrHash.g:1011:17: ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) )
            	            // ../etc/JamlAttrHash.g:1011:21: SUPER innerDot= DOT IDENT
            	            {
            	            SUPER465=(Token)match(input,SUPER,FOLLOW_SUPER_in_postfixedExpression13174); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_SUPER.add(SUPER465);

            	            innerDot=(Token)match(input,DOT,FOLLOW_DOT_in_postfixedExpression13178); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_DOT.add(innerDot);

            	            IDENT466=(Token)match(input,IDENT,FOLLOW_IDENT_in_postfixedExpression13180); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IDENT.add(IDENT466);



            	            // AST REWRITE
            	            // elements: SUPER, postfixedExpression, IDENT, outerDot, innerDot
            	            // token labels: outerDot, innerDot
            	            // rule labels: retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {
            	            retval.tree = root_0;
            	            RewriteRuleTokenStream stream_outerDot=new RewriteRuleTokenStream(adaptor,"token outerDot",outerDot);
            	            RewriteRuleTokenStream stream_innerDot=new RewriteRuleTokenStream(adaptor,"token innerDot",innerDot);
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (CommonTree)adaptor.nil();
            	            // 1011:53: -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT )
            	            {
            	                // ../etc/JamlAttrHash.g:1011:57: ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT )
            	                {
            	                CommonTree root_1 = (CommonTree)adaptor.nil();
            	                root_1 = (CommonTree)adaptor.becomeRoot(stream_innerDot.nextNode(), root_1);

            	                // ../etc/JamlAttrHash.g:1011:69: ^( $outerDot $postfixedExpression SUPER )
            	                {
            	                CommonTree root_2 = (CommonTree)adaptor.nil();
            	                root_2 = (CommonTree)adaptor.becomeRoot(stream_outerDot.nextNode(), root_2);

            	                adaptor.addChild(root_2, stream_retval.nextTree());
            	                adaptor.addChild(root_2, stream_SUPER.nextNode());

            	                adaptor.addChild(root_1, root_2);
            	                }
            	                adaptor.addChild(root_1, stream_IDENT.nextNode());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }

            	            retval.tree = root_0;}
            	            }

            	            // ../etc/JamlAttrHash.g:1013:17: ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )?
            	            int alt135=2;
            	            int LA135_0 = input.LA(1);

            	            if ( (LA135_0==LPAREN) ) {
            	                alt135=1;
            	            }
            	            switch (alt135) {
            	                case 1 :
            	                    // ../etc/JamlAttrHash.g:1013:21: arguments
            	                    {
            	                    pushFollow(FOLLOW_arguments_in_postfixedExpression13247);
            	                    arguments467=arguments();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_arguments.add(arguments467.getTree());


            	                    // AST REWRITE
            	                    // elements: arguments, postfixedExpression
            	                    // token labels: 
            	                    // rule labels: retval
            	                    // token list labels: 
            	                    // rule list labels: 
            	                    // wildcard labels: 
            	                    if ( state.backtracking==0 ) {
            	                    retval.tree = root_0;
            	                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	                    root_0 = (CommonTree)adaptor.nil();
            	                    // 1013:53: -> ^( METHOD_CALL $postfixedExpression arguments )
            	                    {
            	                        // ../etc/JamlAttrHash.g:1013:57: ^( METHOD_CALL $postfixedExpression arguments )
            	                        {
            	                        CommonTree root_1 = (CommonTree)adaptor.nil();
            	                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_CALL, "METHOD_CALL"), root_1);

            	                        adaptor.addChild(root_1, stream_retval.nextTree());
            	                        adaptor.addChild(root_1, stream_arguments.nextTree());

            	                        adaptor.addChild(root_0, root_1);
            	                        }

            	                    }

            	                    retval.tree = root_0;}
            	                    }
            	                    break;

            	            }


            	            }
            	            break;
            	        case 5 :
            	            // ../etc/JamlAttrHash.g:1015:17: innerNewExpression
            	            {
            	            pushFollow(FOLLOW_innerNewExpression_in_postfixedExpression13318);
            	            innerNewExpression468=innerNewExpression();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_innerNewExpression.add(innerNewExpression468.getTree());


            	            // AST REWRITE
            	            // elements: DOT, innerNewExpression, postfixedExpression
            	            // token labels: 
            	            // rule labels: retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {
            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (CommonTree)adaptor.nil();
            	            // 1015:53: -> ^( DOT $postfixedExpression innerNewExpression )
            	            {
            	                // ../etc/JamlAttrHash.g:1015:57: ^( DOT $postfixedExpression innerNewExpression )
            	                {
            	                CommonTree root_1 = (CommonTree)adaptor.nil();
            	                root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());
            	                adaptor.addChild(root_1, stream_innerNewExpression.nextTree());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }

            	            retval.tree = root_0;}
            	            }
            	            break;

            	    }


            	    }
            	    break;
            	case 2 :
            	    // ../etc/JamlAttrHash.g:1017:13: LBRACK expression RBRACK
            	    {
            	    LBRACK469=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_postfixedExpression13375); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK469);

            	    pushFollow(FOLLOW_expression_in_postfixedExpression13377);
            	    expression470=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression470.getTree());
            	    RBRACK471=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_postfixedExpression13379); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK471);



            	    // AST REWRITE
            	    // elements: expression, postfixedExpression
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (CommonTree)adaptor.nil();
            	    // 1017:53: -> ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression )
            	    {
            	        // ../etc/JamlAttrHash.g:1017:57: ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression )
            	        {
            	        CommonTree root_1 = (CommonTree)adaptor.nil();
            	        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_ELEMENT_ACCESS, "ARRAY_ELEMENT_ACCESS"), root_1);

            	        adaptor.addChild(root_1, stream_retval.nextTree());
            	        adaptor.addChild(root_1, stream_expression.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }

            	    retval.tree = root_0;}
            	    }
            	    break;

            	default :
            	    break loop137;
                }
            } while (true);

            // ../etc/JamlAttrHash.g:1020:9: ( INC -> ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression) | DEC -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression) )?
            int alt138=3;
            int LA138_0 = input.LA(1);

            if ( (LA138_0==INC) ) {
                alt138=1;
            }
            else if ( (LA138_0==DEC) ) {
                alt138=2;
            }
            switch (alt138) {
                case 1 :
                    // ../etc/JamlAttrHash.g:1020:13: INC
                    {
                    INC472=(Token)match(input,INC,FOLLOW_INC_in_postfixedExpression13440); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INC.add(INC472);



                    // AST REWRITE
                    // elements: postfixedExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1020:17: -> ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression)
                    {
                        // ../etc/JamlAttrHash.g:1020:20: ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(POST_INC, INC472, "POST_INC"), root_1);

                        adaptor.addChild(root_1, stream_retval.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:1021:13: DEC
                    {
                    DEC473=(Token)match(input,DEC,FOLLOW_DEC_in_postfixedExpression13464); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DEC.add(DEC473);



                    // AST REWRITE
                    // elements: postfixedExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1021:17: -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression)
                    {
                        // ../etc/JamlAttrHash.g:1021:20: ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(POST_DEC, DEC473, "POST_DEC"), root_1);

                        adaptor.addChild(root_1, stream_retval.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("postfixedExpression", 110);
            if ( state.backtracking>0 ) { memoize(input, 110, postfixedExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "postfixedExpression"

    public static class primaryExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primaryExpression"
    // ../etc/JamlAttrHash.g:1025:1: primaryExpression : ( parenthesizedExpression | literal | newExpression | qualifiedIdentExpression | genericTypeArgumentListSimplified ( SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) ) | IDENT arguments -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments ) | THIS arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) ) | ( THIS -> THIS ) ( arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments ) )? | SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] arguments ) | ( SUPER DOT IDENT ) ( arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) ) | ( primitiveType -> primitiveType ) ( arrayDeclarator -> ^( arrayDeclarator $primaryExpression) )* DOT CLASS -> ^( DOT $primaryExpression CLASS ) | VOID DOT CLASS -> ^( DOT VOID CLASS ) );
    public final JamlAttrHashParser.primaryExpression_return primaryExpression() throws RecognitionException {
    traceIn("primaryExpression", 111);
        JamlAttrHashParser.primaryExpression_return retval = new JamlAttrHashParser.primaryExpression_return();
        retval.start = input.LT(1);
        int primaryExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SUPER479=null;
        Token DOT481=null;
        Token IDENT482=null;
        Token IDENT484=null;
        Token THIS486=null;
        Token THIS488=null;
        Token SUPER490=null;
        Token SUPER492=null;
        Token DOT493=null;
        Token IDENT494=null;
        Token DOT498=null;
        Token CLASS499=null;
        Token VOID500=null;
        Token DOT501=null;
        Token CLASS502=null;
        JamlAttrHashParser.parenthesizedExpression_return parenthesizedExpression474 = null;

        JamlAttrHashParser.literal_return literal475 = null;

        JamlAttrHashParser.newExpression_return newExpression476 = null;

        JamlAttrHashParser.qualifiedIdentExpression_return qualifiedIdentExpression477 = null;

        JamlAttrHashParser.genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified478 = null;

        JamlAttrHashParser.arguments_return arguments480 = null;

        JamlAttrHashParser.arguments_return arguments483 = null;

        JamlAttrHashParser.arguments_return arguments485 = null;

        JamlAttrHashParser.arguments_return arguments487 = null;

        JamlAttrHashParser.arguments_return arguments489 = null;

        JamlAttrHashParser.arguments_return arguments491 = null;

        JamlAttrHashParser.arguments_return arguments495 = null;

        JamlAttrHashParser.primitiveType_return primitiveType496 = null;

        JamlAttrHashParser.arrayDeclarator_return arrayDeclarator497 = null;


        CommonTree SUPER479_tree=null;
        CommonTree DOT481_tree=null;
        CommonTree IDENT482_tree=null;
        CommonTree IDENT484_tree=null;
        CommonTree THIS486_tree=null;
        CommonTree THIS488_tree=null;
        CommonTree SUPER490_tree=null;
        CommonTree SUPER492_tree=null;
        CommonTree DOT493_tree=null;
        CommonTree IDENT494_tree=null;
        CommonTree DOT498_tree=null;
        CommonTree CLASS499_tree=null;
        CommonTree VOID500_tree=null;
        CommonTree DOT501_tree=null;
        CommonTree CLASS502_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
        RewriteRuleTokenStream stream_VOID=new RewriteRuleTokenStream(adaptor,"token VOID");
        RewriteRuleTokenStream stream_SUPER=new RewriteRuleTokenStream(adaptor,"token SUPER");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_THIS=new RewriteRuleTokenStream(adaptor,"token THIS");
        RewriteRuleSubtreeStream stream_arrayDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclarator");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
        RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }
            // ../etc/JamlAttrHash.g:1026:5: ( parenthesizedExpression | literal | newExpression | qualifiedIdentExpression | genericTypeArgumentListSimplified ( SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) ) | IDENT arguments -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments ) | THIS arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) ) | ( THIS -> THIS ) ( arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments ) )? | SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] arguments ) | ( SUPER DOT IDENT ) ( arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) ) | ( primitiveType -> primitiveType ) ( arrayDeclarator -> ^( arrayDeclarator $primaryExpression) )* DOT CLASS -> ^( DOT $primaryExpression CLASS ) | VOID DOT CLASS -> ^( DOT VOID CLASS ) )
            int alt144=10;
            alt144 = dfa144.predict(input);
            switch (alt144) {
                case 1 :
                    // ../etc/JamlAttrHash.g:1026:9: parenthesizedExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_parenthesizedExpression_in_primaryExpression13512);
                    parenthesizedExpression474=parenthesizedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parenthesizedExpression474.getTree());

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:1027:9: literal
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_literal_in_primaryExpression13522);
                    literal475=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal475.getTree());

                    }
                    break;
                case 3 :
                    // ../etc/JamlAttrHash.g:1028:9: newExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_newExpression_in_primaryExpression13532);
                    newExpression476=newExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, newExpression476.getTree());

                    }
                    break;
                case 4 :
                    // ../etc/JamlAttrHash.g:1029:9: qualifiedIdentExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_qualifiedIdentExpression_in_primaryExpression13542);
                    qualifiedIdentExpression477=qualifiedIdentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedIdentExpression477.getTree());

                    }
                    break;
                case 5 :
                    // ../etc/JamlAttrHash.g:1030:9: genericTypeArgumentListSimplified ( SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) ) | IDENT arguments -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments ) | THIS arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) )
                    {
                    pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_primaryExpression13552);
                    genericTypeArgumentListSimplified478=genericTypeArgumentListSimplified();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_genericTypeArgumentListSimplified.add(genericTypeArgumentListSimplified478.getTree());
                    // ../etc/JamlAttrHash.g:1031:9: ( SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) ) | IDENT arguments -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments ) | THIS arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) )
                    int alt140=3;
                    switch ( input.LA(1) ) {
                    case SUPER:
                        {
                        alt140=1;
                        }
                        break;
                    case IDENT:
                        {
                        alt140=2;
                        }
                        break;
                    case THIS:
                        {
                        alt140=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 140, 0, input);

                        throw nvae;
                    }

                    switch (alt140) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:1031:13: SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) )
                            {
                            SUPER479=(Token)match(input,SUPER,FOLLOW_SUPER_in_primaryExpression13567); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SUPER.add(SUPER479);

                            // ../etc/JamlAttrHash.g:1032:13: ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) )
                            int alt139=2;
                            int LA139_0 = input.LA(1);

                            if ( (LA139_0==LPAREN) ) {
                                alt139=1;
                            }
                            else if ( (LA139_0==DOT) ) {
                                alt139=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 139, 0, input);

                                throw nvae;
                            }
                            switch (alt139) {
                                case 1 :
                                    // ../etc/JamlAttrHash.g:1032:17: arguments
                                    {
                                    pushFollow(FOLLOW_arguments_in_primaryExpression13585);
                                    arguments480=arguments();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_arguments.add(arguments480.getTree());


                                    // AST REWRITE
                                    // elements: arguments, genericTypeArgumentListSimplified
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 1032:57: -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments )
                                    {
                                        // ../etc/JamlAttrHash.g:1032:61: ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUPER_CONSTRUCTOR_CALL, SUPER479, "SUPER_CONSTRUCTOR_CALL"), root_1);

                                        adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());
                                        adaptor.addChild(root_1, stream_arguments.nextTree());

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;
                                case 2 :
                                    // ../etc/JamlAttrHash.g:1033:17: DOT IDENT arguments
                                    {
                                    DOT481=(Token)match(input,DOT,FOLLOW_DOT_in_primaryExpression13645); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_DOT.add(DOT481);

                                    IDENT482=(Token)match(input,IDENT,FOLLOW_IDENT_in_primaryExpression13647); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT482);

                                    pushFollow(FOLLOW_arguments_in_primaryExpression13649);
                                    arguments483=arguments();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_arguments.add(arguments483.getTree());


                                    // AST REWRITE
                                    // elements: DOT, genericTypeArgumentListSimplified, arguments, IDENT, SUPER
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 1033:57: -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments )
                                    {
                                        // ../etc/JamlAttrHash.g:1033:61: ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_CALL, "METHOD_CALL"), root_1);

                                        // ../etc/JamlAttrHash.g:1033:75: ^( DOT SUPER IDENT )
                                        {
                                        CommonTree root_2 = (CommonTree)adaptor.nil();
                                        root_2 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_2);

                                        adaptor.addChild(root_2, stream_SUPER.nextNode());
                                        adaptor.addChild(root_2, stream_IDENT.nextNode());

                                        adaptor.addChild(root_1, root_2);
                                        }
                                        adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());
                                        adaptor.addChild(root_1, stream_arguments.nextTree());

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // ../etc/JamlAttrHash.g:1035:13: IDENT arguments
                            {
                            IDENT484=(Token)match(input,IDENT,FOLLOW_IDENT_in_primaryExpression13716); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(IDENT484);

                            pushFollow(FOLLOW_arguments_in_primaryExpression13718);
                            arguments485=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arguments.add(arguments485.getTree());


                            // AST REWRITE
                            // elements: genericTypeArgumentListSimplified, arguments, IDENT
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1035:57: -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments )
                            {
                                // ../etc/JamlAttrHash.g:1035:61: ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_CALL, "METHOD_CALL"), root_1);

                                adaptor.addChild(root_1, stream_IDENT.nextNode());
                                adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());
                                adaptor.addChild(root_1, stream_arguments.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            // ../etc/JamlAttrHash.g:1036:13: THIS arguments
                            {
                            THIS486=(Token)match(input,THIS,FOLLOW_THIS_in_primaryExpression13773); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THIS.add(THIS486);

                            pushFollow(FOLLOW_arguments_in_primaryExpression13775);
                            arguments487=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arguments.add(arguments487.getTree());


                            // AST REWRITE
                            // elements: arguments, genericTypeArgumentListSimplified
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1036:57: -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments )
                            {
                                // ../etc/JamlAttrHash.g:1036:61: ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(THIS_CONSTRUCTOR_CALL, THIS486, "THIS_CONSTRUCTOR_CALL"), root_1);

                                adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());
                                adaptor.addChild(root_1, stream_arguments.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 6 :
                    // ../etc/JamlAttrHash.g:1038:9: ( THIS -> THIS ) ( arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments ) )?
                    {
                    // ../etc/JamlAttrHash.g:1038:9: ( THIS -> THIS )
                    // ../etc/JamlAttrHash.g:1038:13: THIS
                    {
                    THIS488=(Token)match(input,THIS,FOLLOW_THIS_in_primaryExpression13840); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_THIS.add(THIS488);



                    // AST REWRITE
                    // elements: THIS
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1038:57: -> THIS
                    {
                        adaptor.addChild(root_0, stream_THIS.nextNode());

                    }

                    retval.tree = root_0;}
                    }

                    // ../etc/JamlAttrHash.g:1040:9: ( arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments ) )?
                    int alt141=2;
                    int LA141_0 = input.LA(1);

                    if ( (LA141_0==LPAREN) ) {
                        alt141=1;
                    }
                    switch (alt141) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:1040:13: arguments
                            {
                            pushFollow(FOLLOW_arguments_in_primaryExpression13908);
                            arguments489=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arguments.add(arguments489.getTree());


                            // AST REWRITE
                            // elements: arguments
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1040:57: -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments )
                            {
                                // ../etc/JamlAttrHash.g:1040:61: ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(THIS_CONSTRUCTOR_CALL, THIS488, "THIS_CONSTRUCTOR_CALL"), root_1);

                                adaptor.addChild(root_1, stream_arguments.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 7 :
                    // ../etc/JamlAttrHash.g:1042:9: SUPER arguments
                    {
                    SUPER490=(Token)match(input,SUPER,FOLLOW_SUPER_in_primaryExpression13973); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SUPER.add(SUPER490);

                    pushFollow(FOLLOW_arguments_in_primaryExpression13975);
                    arguments491=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arguments.add(arguments491.getTree());


                    // AST REWRITE
                    // elements: arguments
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1042:57: -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] arguments )
                    {
                        // ../etc/JamlAttrHash.g:1042:61: ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] arguments )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUPER_CONSTRUCTOR_CALL, SUPER490, "SUPER_CONSTRUCTOR_CALL"), root_1);

                        adaptor.addChild(root_1, stream_arguments.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 8 :
                    // ../etc/JamlAttrHash.g:1043:9: ( SUPER DOT IDENT ) ( arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) )
                    {
                    // ../etc/JamlAttrHash.g:1043:9: ( SUPER DOT IDENT )
                    // ../etc/JamlAttrHash.g:1043:13: SUPER DOT IDENT
                    {
                    SUPER492=(Token)match(input,SUPER,FOLLOW_SUPER_in_primaryExpression14031); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SUPER.add(SUPER492);

                    DOT493=(Token)match(input,DOT,FOLLOW_DOT_in_primaryExpression14033); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT493);

                    IDENT494=(Token)match(input,IDENT,FOLLOW_IDENT_in_primaryExpression14035); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT494);


                    }

                    // ../etc/JamlAttrHash.g:1045:9: ( arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) )
                    int alt142=2;
                    int LA142_0 = input.LA(1);

                    if ( (LA142_0==LPAREN) ) {
                        alt142=1;
                    }
                    else if ( (LA142_0==EOF||(LA142_0>=AND && LA142_0<=ASSIGN)||(LA142_0>=BIT_SHIFT_RIGHT && LA142_0<=DOT)||(LA142_0>=EQUAL && LA142_0<=LBRACK)||(LA142_0>=LESS_OR_EQUAL && LA142_0<=LOGICAL_AND)||LA142_0==LOGICAL_OR||(LA142_0>=MINUS && LA142_0<=MOD_ASSIGN)||(LA142_0>=NOT_EQUAL && LA142_0<=XOR_ASSIGN)||LA142_0==INSTANCEOF) ) {
                        alt142=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 142, 0, input);

                        throw nvae;
                    }
                    switch (alt142) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:1045:13: arguments
                            {
                            pushFollow(FOLLOW_arguments_in_primaryExpression14059);
                            arguments495=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arguments.add(arguments495.getTree());


                            // AST REWRITE
                            // elements: IDENT, arguments, SUPER, DOT
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1045:57: -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments )
                            {
                                // ../etc/JamlAttrHash.g:1045:61: ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_CALL, "METHOD_CALL"), root_1);

                                // ../etc/JamlAttrHash.g:1045:75: ^( DOT SUPER IDENT )
                                {
                                CommonTree root_2 = (CommonTree)adaptor.nil();
                                root_2 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_2);

                                adaptor.addChild(root_2, stream_SUPER.nextNode());
                                adaptor.addChild(root_2, stream_IDENT.nextNode());

                                adaptor.addChild(root_1, root_2);
                                }
                                adaptor.addChild(root_1, stream_arguments.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // ../etc/JamlAttrHash.g:1046:57: 
                            {

                            // AST REWRITE
                            // elements: SUPER, DOT, IDENT
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1046:57: -> ^( DOT SUPER IDENT )
                            {
                                // ../etc/JamlAttrHash.g:1046:61: ^( DOT SUPER IDENT )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_SUPER.nextNode());
                                adaptor.addChild(root_1, stream_IDENT.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 9 :
                    // ../etc/JamlAttrHash.g:1048:9: ( primitiveType -> primitiveType ) ( arrayDeclarator -> ^( arrayDeclarator $primaryExpression) )* DOT CLASS
                    {
                    // ../etc/JamlAttrHash.g:1048:9: ( primitiveType -> primitiveType )
                    // ../etc/JamlAttrHash.g:1048:13: primitiveType
                    {
                    pushFollow(FOLLOW_primitiveType_in_primaryExpression14201);
                    primitiveType496=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitiveType.add(primitiveType496.getTree());


                    // AST REWRITE
                    // elements: primitiveType
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1048:57: -> primitiveType
                    {
                        adaptor.addChild(root_0, stream_primitiveType.nextTree());

                    }

                    retval.tree = root_0;}
                    }

                    // ../etc/JamlAttrHash.g:1050:9: ( arrayDeclarator -> ^( arrayDeclarator $primaryExpression) )*
                    loop143:
                    do {
                        int alt143=2;
                        int LA143_0 = input.LA(1);

                        if ( (LA143_0==LBRACK) ) {
                            alt143=1;
                        }


                        switch (alt143) {
                    	case 1 :
                    	    // ../etc/JamlAttrHash.g:1050:13: arrayDeclarator
                    	    {
                    	    pushFollow(FOLLOW_arrayDeclarator_in_primaryExpression14260);
                    	    arrayDeclarator497=arrayDeclarator();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_arrayDeclarator.add(arrayDeclarator497.getTree());


                    	    // AST REWRITE
                    	    // elements: arrayDeclarator, primaryExpression
                    	    // token labels: 
                    	    // rule labels: retval
                    	    // token list labels: 
                    	    // rule list labels: 
                    	    // wildcard labels: 
                    	    if ( state.backtracking==0 ) {
                    	    retval.tree = root_0;
                    	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    	    root_0 = (CommonTree)adaptor.nil();
                    	    // 1050:57: -> ^( arrayDeclarator $primaryExpression)
                    	    {
                    	        // ../etc/JamlAttrHash.g:1050:61: ^( arrayDeclarator $primaryExpression)
                    	        {
                    	        CommonTree root_1 = (CommonTree)adaptor.nil();
                    	        root_1 = (CommonTree)adaptor.becomeRoot(stream_arrayDeclarator.nextNode(), root_1);

                    	        adaptor.addChild(root_1, stream_retval.nextTree());

                    	        adaptor.addChild(root_0, root_1);
                    	        }

                    	    }

                    	    retval.tree = root_0;}
                    	    }
                    	    break;

                    	default :
                    	    break loop143;
                        }
                    } while (true);

                    DOT498=(Token)match(input,DOT,FOLLOW_DOT_in_primaryExpression14323); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT498);

                    CLASS499=(Token)match(input,CLASS,FOLLOW_CLASS_in_primaryExpression14325); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLASS.add(CLASS499);



                    // AST REWRITE
                    // elements: CLASS, primaryExpression, DOT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1052:57: -> ^( DOT $primaryExpression CLASS )
                    {
                        // ../etc/JamlAttrHash.g:1052:61: ^( DOT $primaryExpression CLASS )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_retval.nextTree());
                        adaptor.addChild(root_1, stream_CLASS.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 10 :
                    // ../etc/JamlAttrHash.g:1053:9: VOID DOT CLASS
                    {
                    VOID500=(Token)match(input,VOID,FOLLOW_VOID_in_primaryExpression14385); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VOID.add(VOID500);

                    DOT501=(Token)match(input,DOT,FOLLOW_DOT_in_primaryExpression14387); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT501);

                    CLASS502=(Token)match(input,CLASS,FOLLOW_CLASS_in_primaryExpression14389); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLASS.add(CLASS502);



                    // AST REWRITE
                    // elements: VOID, CLASS, DOT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1053:57: -> ^( DOT VOID CLASS )
                    {
                        // ../etc/JamlAttrHash.g:1053:61: ^( DOT VOID CLASS )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_VOID.nextNode());
                        adaptor.addChild(root_1, stream_CLASS.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("primaryExpression", 111);
            if ( state.backtracking>0 ) { memoize(input, 111, primaryExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "primaryExpression"

    public static class qualifiedIdentExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedIdentExpression"
    // ../etc/JamlAttrHash.g:1056:1: qualifiedIdentExpression : ( qualifiedIdentifier -> qualifiedIdentifier ) ( ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) ) | arguments -> ^( METHOD_CALL qualifiedIdentifier arguments ) | outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) ) )? ;
    public final JamlAttrHashParser.qualifiedIdentExpression_return qualifiedIdentExpression() throws RecognitionException {
    traceIn("qualifiedIdentExpression", 112);
        JamlAttrHashParser.qualifiedIdentExpression_return retval = new JamlAttrHashParser.qualifiedIdentExpression_return();
        retval.start = input.LT(1);
        int qualifiedIdentExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token outerDot=null;
        Token Super=null;
        Token innerDot=null;
        Token DOT505=null;
        Token CLASS506=null;
        Token CLASS508=null;
        Token SUPER511=null;
        Token IDENT512=null;
        Token IDENT514=null;
        Token THIS516=null;
        JamlAttrHashParser.qualifiedIdentifier_return qualifiedIdentifier503 = null;

        JamlAttrHashParser.arrayDeclarator_return arrayDeclarator504 = null;

        JamlAttrHashParser.arguments_return arguments507 = null;

        JamlAttrHashParser.genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified509 = null;

        JamlAttrHashParser.arguments_return arguments510 = null;

        JamlAttrHashParser.arguments_return arguments513 = null;

        JamlAttrHashParser.arguments_return arguments515 = null;

        JamlAttrHashParser.arguments_return arguments517 = null;

        JamlAttrHashParser.innerNewExpression_return innerNewExpression518 = null;


        CommonTree outerDot_tree=null;
        CommonTree Super_tree=null;
        CommonTree innerDot_tree=null;
        CommonTree DOT505_tree=null;
        CommonTree CLASS506_tree=null;
        CommonTree CLASS508_tree=null;
        CommonTree SUPER511_tree=null;
        CommonTree IDENT512_tree=null;
        CommonTree IDENT514_tree=null;
        CommonTree THIS516_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
        RewriteRuleTokenStream stream_SUPER=new RewriteRuleTokenStream(adaptor,"token SUPER");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_THIS=new RewriteRuleTokenStream(adaptor,"token THIS");
        RewriteRuleSubtreeStream stream_arrayDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclarator");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_qualifiedIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedIdentifier");
        RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
        RewriteRuleSubtreeStream stream_innerNewExpression=new RewriteRuleSubtreeStream(adaptor,"rule innerNewExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }
            // ../etc/JamlAttrHash.g:1058:5: ( ( qualifiedIdentifier -> qualifiedIdentifier ) ( ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) ) | arguments -> ^( METHOD_CALL qualifiedIdentifier arguments ) | outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) ) )? )
            // ../etc/JamlAttrHash.g:1058:9: ( qualifiedIdentifier -> qualifiedIdentifier ) ( ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) ) | arguments -> ^( METHOD_CALL qualifiedIdentifier arguments ) | outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) ) )?
            {
            // ../etc/JamlAttrHash.g:1058:9: ( qualifiedIdentifier -> qualifiedIdentifier )
            // ../etc/JamlAttrHash.g:1058:13: qualifiedIdentifier
            {
            pushFollow(FOLLOW_qualifiedIdentifier_in_qualifiedIdentExpression14469);
            qualifiedIdentifier503=qualifiedIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifiedIdentifier.add(qualifiedIdentifier503.getTree());


            // AST REWRITE
            // elements: qualifiedIdentifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1058:61: -> qualifiedIdentifier
            {
                adaptor.addChild(root_0, stream_qualifiedIdentifier.nextTree());

            }

            retval.tree = root_0;}
            }

            // ../etc/JamlAttrHash.g:1061:9: ( ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) ) | arguments -> ^( METHOD_CALL qualifiedIdentifier arguments ) | outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) ) )?
            int alt148=4;
            alt148 = dfa148.predict(input);
            switch (alt148) {
                case 1 :
                    // ../etc/JamlAttrHash.g:1061:13: ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) )
                    {
                    // ../etc/JamlAttrHash.g:1061:13: ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+
                    int cnt145=0;
                    loop145:
                    do {
                        int alt145=2;
                        int LA145_0 = input.LA(1);

                        if ( (LA145_0==LBRACK) ) {
                            alt145=1;
                        }


                        switch (alt145) {
                    	case 1 :
                    	    // ../etc/JamlAttrHash.g:1061:17: arrayDeclarator
                    	    {
                    	    pushFollow(FOLLOW_arrayDeclarator_in_qualifiedIdentExpression14539);
                    	    arrayDeclarator504=arrayDeclarator();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_arrayDeclarator.add(arrayDeclarator504.getTree());


                    	    // AST REWRITE
                    	    // elements: arrayDeclarator, qualifiedIdentExpression
                    	    // token labels: 
                    	    // rule labels: retval
                    	    // token list labels: 
                    	    // rule list labels: 
                    	    // wildcard labels: 
                    	    if ( state.backtracking==0 ) {
                    	    retval.tree = root_0;
                    	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    	    root_0 = (CommonTree)adaptor.nil();
                    	    // 1061:57: -> ^( arrayDeclarator $qualifiedIdentExpression)
                    	    {
                    	        // ../etc/JamlAttrHash.g:1061:61: ^( arrayDeclarator $qualifiedIdentExpression)
                    	        {
                    	        CommonTree root_1 = (CommonTree)adaptor.nil();
                    	        root_1 = (CommonTree)adaptor.becomeRoot(stream_arrayDeclarator.nextNode(), root_1);

                    	        adaptor.addChild(root_1, stream_retval.nextTree());

                    	        adaptor.addChild(root_0, root_1);
                    	        }

                    	    }

                    	    retval.tree = root_0;}
                    	    }
                    	    break;

                    	default :
                    	    if ( cnt145 >= 1 ) break loop145;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(145, input);
                                throw eee;
                        }
                        cnt145++;
                    } while (true);

                    // ../etc/JamlAttrHash.g:1063:13: ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) )
                    // ../etc/JamlAttrHash.g:1063:17: DOT CLASS
                    {
                    DOT505=(Token)match(input,DOT,FOLLOW_DOT_in_qualifiedIdentExpression14607); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT505);

                    CLASS506=(Token)match(input,CLASS,FOLLOW_CLASS_in_qualifiedIdentExpression14609); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLASS.add(CLASS506);



                    // AST REWRITE
                    // elements: qualifiedIdentExpression, DOT, CLASS
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1063:57: -> ^( DOT $qualifiedIdentExpression CLASS )
                    {
                        // ../etc/JamlAttrHash.g:1063:61: ^( DOT $qualifiedIdentExpression CLASS )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_retval.nextTree());
                        adaptor.addChild(root_1, stream_CLASS.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:1065:13: arguments
                    {
                    pushFollow(FOLLOW_arguments_in_qualifiedIdentExpression14679);
                    arguments507=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arguments.add(arguments507.getTree());


                    // AST REWRITE
                    // elements: qualifiedIdentifier, arguments
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1065:57: -> ^( METHOD_CALL qualifiedIdentifier arguments )
                    {
                        // ../etc/JamlAttrHash.g:1065:61: ^( METHOD_CALL qualifiedIdentifier arguments )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_CALL, "METHOD_CALL"), root_1);

                        adaptor.addChild(root_1, stream_qualifiedIdentifier.nextTree());
                        adaptor.addChild(root_1, stream_arguments.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // ../etc/JamlAttrHash.g:1066:13: outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) )
                    {
                    outerDot=(Token)match(input,DOT,FOLLOW_DOT_in_qualifiedIdentExpression14740); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(outerDot);

                    // ../etc/JamlAttrHash.g:1067:13: ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) )
                    int alt147=5;
                    switch ( input.LA(1) ) {
                    case CLASS:
                        {
                        alt147=1;
                        }
                        break;
                    case LESS_THAN:
                        {
                        alt147=2;
                        }
                        break;
                    case THIS:
                        {
                        alt147=3;
                        }
                        break;
                    case SUPER:
                        {
                        alt147=4;
                        }
                        break;
                    case NEW:
                        {
                        alt147=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 147, 0, input);

                        throw nvae;
                    }

                    switch (alt147) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:1067:17: CLASS
                            {
                            CLASS508=(Token)match(input,CLASS,FOLLOW_CLASS_in_qualifiedIdentExpression14758); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_CLASS.add(CLASS508);



                            // AST REWRITE
                            // elements: CLASS, DOT, qualifiedIdentifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1067:57: -> ^( DOT qualifiedIdentifier CLASS )
                            {
                                // ../etc/JamlAttrHash.g:1067:61: ^( DOT qualifiedIdentifier CLASS )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_qualifiedIdentifier.nextTree());
                                adaptor.addChild(root_1, stream_CLASS.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // ../etc/JamlAttrHash.g:1068:17: genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) )
                            {
                            pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_qualifiedIdentExpression14821);
                            genericTypeArgumentListSimplified509=genericTypeArgumentListSimplified();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_genericTypeArgumentListSimplified.add(genericTypeArgumentListSimplified509.getTree());
                            // ../etc/JamlAttrHash.g:1069:17: (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) )
                            int alt146=3;
                            int LA146_0 = input.LA(1);

                            if ( (LA146_0==SUPER) ) {
                                int LA146_1 = input.LA(2);

                                if ( (LA146_1==DOT) ) {
                                    alt146=2;
                                }
                                else if ( (LA146_1==LPAREN) ) {
                                    alt146=1;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 146, 1, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA146_0==IDENT) ) {
                                alt146=3;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 146, 0, input);

                                throw nvae;
                            }
                            switch (alt146) {
                                case 1 :
                                    // ../etc/JamlAttrHash.g:1069:21: Super= SUPER arguments
                                    {
                                    Super=(Token)match(input,SUPER,FOLLOW_SUPER_in_qualifiedIdentExpression14846); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_SUPER.add(Super);

                                    pushFollow(FOLLOW_arguments_in_qualifiedIdentExpression14848);
                                    arguments510=arguments();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_arguments.add(arguments510.getTree());


                                    // AST REWRITE
                                    // elements: arguments, genericTypeArgumentListSimplified, qualifiedIdentifier
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 1069:57: -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments )
                                    {
                                        // ../etc/JamlAttrHash.g:1069:61: ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUPER_CONSTRUCTOR_CALL, Super, "SUPER_CONSTRUCTOR_CALL"), root_1);

                                        adaptor.addChild(root_1, stream_qualifiedIdentifier.nextTree());
                                        adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());
                                        adaptor.addChild(root_1, stream_arguments.nextTree());

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;
                                case 2 :
                                    // ../etc/JamlAttrHash.g:1070:21: SUPER innerDot= DOT IDENT arguments
                                    {
                                    SUPER511=(Token)match(input,SUPER,FOLLOW_SUPER_in_qualifiedIdentExpression14898); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_SUPER.add(SUPER511);

                                    innerDot=(Token)match(input,DOT,FOLLOW_DOT_in_qualifiedIdentExpression14902); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_DOT.add(innerDot);

                                    IDENT512=(Token)match(input,IDENT,FOLLOW_IDENT_in_qualifiedIdentExpression14904); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT512);

                                    pushFollow(FOLLOW_arguments_in_qualifiedIdentExpression14906);
                                    arguments513=arguments();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_arguments.add(arguments513.getTree());


                                    // AST REWRITE
                                    // elements: genericTypeArgumentListSimplified, outerDot, innerDot, SUPER, IDENT, qualifiedIdentifier, arguments
                                    // token labels: outerDot, innerDot
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleTokenStream stream_outerDot=new RewriteRuleTokenStream(adaptor,"token outerDot",outerDot);
                                    RewriteRuleTokenStream stream_innerDot=new RewriteRuleTokenStream(adaptor,"token innerDot",innerDot);
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 1070:57: -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments )
                                    {
                                        // ../etc/JamlAttrHash.g:1070:61: ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_CALL, "METHOD_CALL"), root_1);

                                        // ../etc/JamlAttrHash.g:1070:75: ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT )
                                        {
                                        CommonTree root_2 = (CommonTree)adaptor.nil();
                                        root_2 = (CommonTree)adaptor.becomeRoot(stream_innerDot.nextNode(), root_2);

                                        // ../etc/JamlAttrHash.g:1070:87: ^( $outerDot qualifiedIdentifier SUPER )
                                        {
                                        CommonTree root_3 = (CommonTree)adaptor.nil();
                                        root_3 = (CommonTree)adaptor.becomeRoot(stream_outerDot.nextNode(), root_3);

                                        adaptor.addChild(root_3, stream_qualifiedIdentifier.nextTree());
                                        adaptor.addChild(root_3, stream_SUPER.nextNode());

                                        adaptor.addChild(root_2, root_3);
                                        }
                                        adaptor.addChild(root_2, stream_IDENT.nextNode());

                                        adaptor.addChild(root_1, root_2);
                                        }
                                        adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());
                                        adaptor.addChild(root_1, stream_arguments.nextTree());

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;
                                case 3 :
                                    // ../etc/JamlAttrHash.g:1071:21: IDENT arguments
                                    {
                                    IDENT514=(Token)match(input,IDENT,FOLLOW_IDENT_in_qualifiedIdentExpression14956); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT514);

                                    pushFollow(FOLLOW_arguments_in_qualifiedIdentExpression14958);
                                    arguments515=arguments();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_arguments.add(arguments515.getTree());


                                    // AST REWRITE
                                    // elements: qualifiedIdentifier, IDENT, arguments, DOT, genericTypeArgumentListSimplified
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 1071:57: -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments )
                                    {
                                        // ../etc/JamlAttrHash.g:1071:61: ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_CALL, "METHOD_CALL"), root_1);

                                        // ../etc/JamlAttrHash.g:1071:75: ^( DOT qualifiedIdentifier IDENT )
                                        {
                                        CommonTree root_2 = (CommonTree)adaptor.nil();
                                        root_2 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_2);

                                        adaptor.addChild(root_2, stream_qualifiedIdentifier.nextTree());
                                        adaptor.addChild(root_2, stream_IDENT.nextNode());

                                        adaptor.addChild(root_1, root_2);
                                        }
                                        adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());
                                        adaptor.addChild(root_1, stream_arguments.nextTree());

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;

                            }


                            }
                            break;
                        case 3 :
                            // ../etc/JamlAttrHash.g:1073:17: THIS
                            {
                            THIS516=(Token)match(input,THIS,FOLLOW_THIS_in_qualifiedIdentExpression15033); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THIS.add(THIS516);



                            // AST REWRITE
                            // elements: THIS, DOT, qualifiedIdentifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1073:57: -> ^( DOT qualifiedIdentifier THIS )
                            {
                                // ../etc/JamlAttrHash.g:1073:61: ^( DOT qualifiedIdentifier THIS )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_qualifiedIdentifier.nextTree());
                                adaptor.addChild(root_1, stream_THIS.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            // ../etc/JamlAttrHash.g:1074:17: Super= SUPER arguments
                            {
                            Super=(Token)match(input,SUPER,FOLLOW_SUPER_in_qualifiedIdentExpression15099); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SUPER.add(Super);

                            pushFollow(FOLLOW_arguments_in_qualifiedIdentExpression15101);
                            arguments517=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arguments.add(arguments517.getTree());


                            // AST REWRITE
                            // elements: arguments, qualifiedIdentifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1074:57: -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments )
                            {
                                // ../etc/JamlAttrHash.g:1074:61: ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUPER_CONSTRUCTOR_CALL, Super, "SUPER_CONSTRUCTOR_CALL"), root_1);

                                adaptor.addChild(root_1, stream_qualifiedIdentifier.nextTree());
                                adaptor.addChild(root_1, stream_arguments.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 5 :
                            // ../etc/JamlAttrHash.g:1075:17: innerNewExpression
                            {
                            pushFollow(FOLLOW_innerNewExpression_in_qualifiedIdentExpression15149);
                            innerNewExpression518=innerNewExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_innerNewExpression.add(innerNewExpression518.getTree());


                            // AST REWRITE
                            // elements: DOT, qualifiedIdentifier, innerNewExpression
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1075:57: -> ^( DOT qualifiedIdentifier innerNewExpression )
                            {
                                // ../etc/JamlAttrHash.g:1075:61: ^( DOT qualifiedIdentifier innerNewExpression )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_qualifiedIdentifier.nextTree());
                                adaptor.addChild(root_1, stream_innerNewExpression.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("qualifiedIdentExpression", 112);
            if ( state.backtracking>0 ) { memoize(input, 112, qualifiedIdentExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedIdentExpression"

    public static class newExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "newExpression"
    // ../etc/JamlAttrHash.g:1080:1: newExpression : NEW ( primitiveType newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction ) | ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) ) ) ;
    public final JamlAttrHashParser.newExpression_return newExpression() throws RecognitionException {
    traceIn("newExpression", 113);
        JamlAttrHashParser.newExpression_return retval = new JamlAttrHashParser.newExpression_return();
        retval.start = input.LT(1);
        int newExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token NEW519=null;
        JamlAttrHashParser.primitiveType_return primitiveType520 = null;

        JamlAttrHashParser.newArrayConstruction_return newArrayConstruction521 = null;

        JamlAttrHashParser.genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified522 = null;

        JamlAttrHashParser.qualifiedTypeIdentSimplified_return qualifiedTypeIdentSimplified523 = null;

        JamlAttrHashParser.newArrayConstruction_return newArrayConstruction524 = null;

        JamlAttrHashParser.arguments_return arguments525 = null;

        JamlAttrHashParser.classBody_return classBody526 = null;


        CommonTree NEW519_tree=null;
        RewriteRuleTokenStream stream_NEW=new RewriteRuleTokenStream(adaptor,"token NEW");
        RewriteRuleSubtreeStream stream_newArrayConstruction=new RewriteRuleSubtreeStream(adaptor,"rule newArrayConstruction");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_qualifiedTypeIdentSimplified=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedTypeIdentSimplified");
        RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
        RewriteRuleSubtreeStream stream_classBody=new RewriteRuleSubtreeStream(adaptor,"rule classBody");
        RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }
            // ../etc/JamlAttrHash.g:1081:5: ( NEW ( primitiveType newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction ) | ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) ) ) )
            // ../etc/JamlAttrHash.g:1081:9: NEW ( primitiveType newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction ) | ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) ) )
            {
            NEW519=(Token)match(input,NEW,FOLLOW_NEW_in_newExpression15225); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NEW.add(NEW519);

            // ../etc/JamlAttrHash.g:1082:9: ( primitiveType newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction ) | ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) ) )
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==BOOLEAN||LA152_0==BYTE||LA152_0==CHAR||LA152_0==DOUBLE||LA152_0==FLOAT||(LA152_0>=INT && LA152_0<=LONG)||LA152_0==SHORT) ) {
                alt152=1;
            }
            else if ( (LA152_0==LESS_THAN||LA152_0==IDENT) ) {
                alt152=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 152, 0, input);

                throw nvae;
            }
            switch (alt152) {
                case 1 :
                    // ../etc/JamlAttrHash.g:1082:13: primitiveType newArrayConstruction
                    {
                    pushFollow(FOLLOW_primitiveType_in_newExpression15241);
                    primitiveType520=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitiveType.add(primitiveType520.getTree());
                    pushFollow(FOLLOW_newArrayConstruction_in_newExpression15243);
                    newArrayConstruction521=newArrayConstruction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_newArrayConstruction.add(newArrayConstruction521.getTree());


                    // AST REWRITE
                    // elements: newArrayConstruction, primitiveType
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1083:13: -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction )
                    {
                        // ../etc/JamlAttrHash.g:1083:17: ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STATIC_ARRAY_CREATOR, NEW519, "STATIC_ARRAY_CREATOR"), root_1);

                        adaptor.addChild(root_1, stream_primitiveType.nextTree());
                        adaptor.addChild(root_1, stream_newArrayConstruction.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:1084:13: ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) )
                    {
                    // ../etc/JamlAttrHash.g:1084:13: ( genericTypeArgumentListSimplified )?
                    int alt149=2;
                    int LA149_0 = input.LA(1);

                    if ( (LA149_0==LESS_THAN) ) {
                        alt149=1;
                    }
                    switch (alt149) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:0:0: genericTypeArgumentListSimplified
                            {
                            pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_newExpression15287);
                            genericTypeArgumentListSimplified522=genericTypeArgumentListSimplified();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_genericTypeArgumentListSimplified.add(genericTypeArgumentListSimplified522.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_qualifiedTypeIdentSimplified_in_newExpression15290);
                    qualifiedTypeIdentSimplified523=qualifiedTypeIdentSimplified();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualifiedTypeIdentSimplified.add(qualifiedTypeIdentSimplified523.getTree());
                    // ../etc/JamlAttrHash.g:1085:13: ( newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) )
                    int alt151=2;
                    int LA151_0 = input.LA(1);

                    if ( (LA151_0==LBRACK) ) {
                        alt151=1;
                    }
                    else if ( (LA151_0==LPAREN) ) {
                        alt151=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 151, 0, input);

                        throw nvae;
                    }
                    switch (alt151) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:1085:17: newArrayConstruction
                            {
                            pushFollow(FOLLOW_newArrayConstruction_in_newExpression15308);
                            newArrayConstruction524=newArrayConstruction();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_newArrayConstruction.add(newArrayConstruction524.getTree());


                            // AST REWRITE
                            // elements: genericTypeArgumentListSimplified, qualifiedTypeIdentSimplified, newArrayConstruction
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1086:17: -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction )
                            {
                                // ../etc/JamlAttrHash.g:1086:21: ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STATIC_ARRAY_CREATOR, NEW519, "STATIC_ARRAY_CREATOR"), root_1);

                                // ../etc/JamlAttrHash.g:1086:74: ( genericTypeArgumentListSimplified )?
                                if ( stream_genericTypeArgumentListSimplified.hasNext() ) {
                                    adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());

                                }
                                stream_genericTypeArgumentListSimplified.reset();
                                adaptor.addChild(root_1, stream_qualifiedTypeIdentSimplified.nextTree());
                                adaptor.addChild(root_1, stream_newArrayConstruction.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // ../etc/JamlAttrHash.g:1087:17: arguments ( classBody )?
                            {
                            pushFollow(FOLLOW_arguments_in_newExpression15373);
                            arguments525=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arguments.add(arguments525.getTree());
                            // ../etc/JamlAttrHash.g:1087:27: ( classBody )?
                            int alt150=2;
                            int LA150_0 = input.LA(1);

                            if ( (LA150_0==LCURLY) ) {
                                alt150=1;
                            }
                            switch (alt150) {
                                case 1 :
                                    // ../etc/JamlAttrHash.g:0:0: classBody
                                    {
                                    pushFollow(FOLLOW_classBody_in_newExpression15375);
                                    classBody526=classBody();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_classBody.add(classBody526.getTree());

                                    }
                                    break;

                            }



                            // AST REWRITE
                            // elements: qualifiedTypeIdentSimplified, arguments, classBody, genericTypeArgumentListSimplified
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1088:17: -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? )
                            {
                                // ../etc/JamlAttrHash.g:1088:21: ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_CONSTRUCTOR_CALL, NEW519, "STATIC_ARRAY_CREATOR"), root_1);

                                // ../etc/JamlAttrHash.g:1088:76: ( genericTypeArgumentListSimplified )?
                                if ( stream_genericTypeArgumentListSimplified.hasNext() ) {
                                    adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());

                                }
                                stream_genericTypeArgumentListSimplified.reset();
                                adaptor.addChild(root_1, stream_qualifiedTypeIdentSimplified.nextTree());
                                adaptor.addChild(root_1, stream_arguments.nextTree());
                                // ../etc/JamlAttrHash.g:1088:150: ( classBody )?
                                if ( stream_classBody.hasNext() ) {
                                    adaptor.addChild(root_1, stream_classBody.nextTree());

                                }
                                stream_classBody.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("newExpression", 113);
            if ( state.backtracking>0 ) { memoize(input, 113, newExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "newExpression"

    public static class innerNewExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "innerNewExpression"
    // ../etc/JamlAttrHash.g:1093:1: innerNewExpression : NEW ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? ) ;
    public final JamlAttrHashParser.innerNewExpression_return innerNewExpression() throws RecognitionException {
    traceIn("innerNewExpression", 114);
        JamlAttrHashParser.innerNewExpression_return retval = new JamlAttrHashParser.innerNewExpression_return();
        retval.start = input.LT(1);
        int innerNewExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token NEW527=null;
        Token IDENT529=null;
        JamlAttrHashParser.genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified528 = null;

        JamlAttrHashParser.arguments_return arguments530 = null;

        JamlAttrHashParser.classBody_return classBody531 = null;


        CommonTree NEW527_tree=null;
        CommonTree IDENT529_tree=null;
        RewriteRuleTokenStream stream_NEW=new RewriteRuleTokenStream(adaptor,"token NEW");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_classBody=new RewriteRuleSubtreeStream(adaptor,"rule classBody");
        RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }
            // ../etc/JamlAttrHash.g:1094:5: ( NEW ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? ) )
            // ../etc/JamlAttrHash.g:1094:9: NEW ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )?
            {
            NEW527=(Token)match(input,NEW,FOLLOW_NEW_in_innerNewExpression15474); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NEW.add(NEW527);

            // ../etc/JamlAttrHash.g:1094:13: ( genericTypeArgumentListSimplified )?
            int alt153=2;
            int LA153_0 = input.LA(1);

            if ( (LA153_0==LESS_THAN) ) {
                alt153=1;
            }
            switch (alt153) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: genericTypeArgumentListSimplified
                    {
                    pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_innerNewExpression15476);
                    genericTypeArgumentListSimplified528=genericTypeArgumentListSimplified();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_genericTypeArgumentListSimplified.add(genericTypeArgumentListSimplified528.getTree());

                    }
                    break;

            }

            IDENT529=(Token)match(input,IDENT,FOLLOW_IDENT_in_innerNewExpression15479); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT529);

            pushFollow(FOLLOW_arguments_in_innerNewExpression15481);
            arguments530=arguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_arguments.add(arguments530.getTree());
            // ../etc/JamlAttrHash.g:1094:64: ( classBody )?
            int alt154=2;
            int LA154_0 = input.LA(1);

            if ( (LA154_0==LCURLY) ) {
                alt154=1;
            }
            switch (alt154) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: classBody
                    {
                    pushFollow(FOLLOW_classBody_in_innerNewExpression15483);
                    classBody531=classBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classBody.add(classBody531.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: arguments, classBody, genericTypeArgumentListSimplified, IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1095:9: -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? )
            {
                // ../etc/JamlAttrHash.g:1095:13: ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_CONSTRUCTOR_CALL, NEW527, "STATIC_ARRAY_CREATOR"), root_1);

                // ../etc/JamlAttrHash.g:1095:68: ( genericTypeArgumentListSimplified )?
                if ( stream_genericTypeArgumentListSimplified.hasNext() ) {
                    adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());

                }
                stream_genericTypeArgumentListSimplified.reset();
                adaptor.addChild(root_1, stream_IDENT.nextNode());
                adaptor.addChild(root_1, stream_arguments.nextTree());
                // ../etc/JamlAttrHash.g:1095:119: ( classBody )?
                if ( stream_classBody.hasNext() ) {
                    adaptor.addChild(root_1, stream_classBody.nextTree());

                }
                stream_classBody.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("innerNewExpression", 114);
            if ( state.backtracking>0 ) { memoize(input, 114, innerNewExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "innerNewExpression"

    public static class newArrayConstruction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "newArrayConstruction"
    // ../etc/JamlAttrHash.g:1098:1: newArrayConstruction : ( arrayDeclaratorList arrayInitializer | LBRACK expression RBRACK ( LBRACK expression RBRACK )* ( arrayDeclaratorList )? );
    public final JamlAttrHashParser.newArrayConstruction_return newArrayConstruction() throws RecognitionException {
    traceIn("newArrayConstruction", 115);
        JamlAttrHashParser.newArrayConstruction_return retval = new JamlAttrHashParser.newArrayConstruction_return();
        retval.start = input.LT(1);
        int newArrayConstruction_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LBRACK534=null;
        Token RBRACK536=null;
        Token LBRACK537=null;
        Token RBRACK539=null;
        JamlAttrHashParser.arrayDeclaratorList_return arrayDeclaratorList532 = null;

        JamlAttrHashParser.arrayInitializer_return arrayInitializer533 = null;

        JamlAttrHashParser.expression_return expression535 = null;

        JamlAttrHashParser.expression_return expression538 = null;

        JamlAttrHashParser.arrayDeclaratorList_return arrayDeclaratorList540 = null;


        CommonTree LBRACK534_tree=null;
        CommonTree RBRACK536_tree=null;
        CommonTree LBRACK537_tree=null;
        CommonTree RBRACK539_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }
            // ../etc/JamlAttrHash.g:1099:5: ( arrayDeclaratorList arrayInitializer | LBRACK expression RBRACK ( LBRACK expression RBRACK )* ( arrayDeclaratorList )? )
            int alt157=2;
            int LA157_0 = input.LA(1);

            if ( (LA157_0==LBRACK) ) {
                int LA157_1 = input.LA(2);

                if ( (LA157_1==RBRACK) ) {
                    alt157=1;
                }
                else if ( (LA157_1==DEC||LA157_1==INC||LA157_1==LESS_THAN||LA157_1==LOGICAL_NOT||(LA157_1>=LPAREN && LA157_1<=MINUS)||LA157_1==NOT||LA157_1==PLUS||LA157_1==BOOLEAN||LA157_1==BYTE||LA157_1==CHAR||LA157_1==DOUBLE||LA157_1==FALSE||LA157_1==FLOAT||(LA157_1>=INT && LA157_1<=LONG)||(LA157_1>=NEW && LA157_1<=NULL)||LA157_1==SHORT||LA157_1==SUPER||LA157_1==THIS||LA157_1==TRUE||LA157_1==VOID||(LA157_1>=IDENT && LA157_1<=STRING_LITERAL)) ) {
                    alt157=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 157, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 157, 0, input);

                throw nvae;
            }
            switch (alt157) {
                case 1 :
                    // ../etc/JamlAttrHash.g:1099:9: arrayDeclaratorList arrayInitializer
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_arrayDeclaratorList_in_newArrayConstruction15529);
                    arrayDeclaratorList532=arrayDeclaratorList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayDeclaratorList532.getTree());
                    pushFollow(FOLLOW_arrayInitializer_in_newArrayConstruction15531);
                    arrayInitializer533=arrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayInitializer533.getTree());

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:1100:9: LBRACK expression RBRACK ( LBRACK expression RBRACK )* ( arrayDeclaratorList )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LBRACK534=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_newArrayConstruction15541); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_newArrayConstruction15544);
                    expression535=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression535.getTree());
                    RBRACK536=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_newArrayConstruction15546); if (state.failed) return retval;
                    // ../etc/JamlAttrHash.g:1100:36: ( LBRACK expression RBRACK )*
                    loop155:
                    do {
                        int alt155=2;
                        alt155 = dfa155.predict(input);
                        switch (alt155) {
                    	case 1 :
                    	    // ../etc/JamlAttrHash.g:1100:37: LBRACK expression RBRACK
                    	    {
                    	    LBRACK537=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_newArrayConstruction15550); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_newArrayConstruction15553);
                    	    expression538=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression538.getTree());
                    	    RBRACK539=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_newArrayConstruction15555); if (state.failed) return retval;

                    	    }
                    	    break;

                    	default :
                    	    break loop155;
                        }
                    } while (true);

                    // ../etc/JamlAttrHash.g:1100:66: ( arrayDeclaratorList )?
                    int alt156=2;
                    int LA156_0 = input.LA(1);

                    if ( (LA156_0==LBRACK) ) {
                        int LA156_1 = input.LA(2);

                        if ( (LA156_1==RBRACK) ) {
                            alt156=1;
                        }
                    }
                    switch (alt156) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:0:0: arrayDeclaratorList
                            {
                            pushFollow(FOLLOW_arrayDeclaratorList_in_newArrayConstruction15560);
                            arrayDeclaratorList540=arrayDeclaratorList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayDeclaratorList540.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("newArrayConstruction", 115);
            if ( state.backtracking>0 ) { memoize(input, 115, newArrayConstruction_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "newArrayConstruction"

    public static class arguments_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arguments"
    // ../etc/JamlAttrHash.g:1103:1: arguments : LPAREN ( expressionList )? RPAREN -> ^( ARGUMENT_LIST[$LPAREN, \"ARGUMENT_LIST\"] ( expressionList )? ) ;
    public final JamlAttrHashParser.arguments_return arguments() throws RecognitionException {
    traceIn("arguments", 116);
        JamlAttrHashParser.arguments_return retval = new JamlAttrHashParser.arguments_return();
        retval.start = input.LT(1);
        int arguments_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LPAREN541=null;
        Token RPAREN543=null;
        JamlAttrHashParser.expressionList_return expressionList542 = null;


        CommonTree LPAREN541_tree=null;
        CommonTree RPAREN543_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }
            // ../etc/JamlAttrHash.g:1104:5: ( LPAREN ( expressionList )? RPAREN -> ^( ARGUMENT_LIST[$LPAREN, \"ARGUMENT_LIST\"] ( expressionList )? ) )
            // ../etc/JamlAttrHash.g:1104:9: LPAREN ( expressionList )? RPAREN
            {
            LPAREN541=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_arguments15580); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN541);

            // ../etc/JamlAttrHash.g:1104:16: ( expressionList )?
            int alt158=2;
            int LA158_0 = input.LA(1);

            if ( (LA158_0==DEC||LA158_0==INC||LA158_0==LESS_THAN||LA158_0==LOGICAL_NOT||(LA158_0>=LPAREN && LA158_0<=MINUS)||LA158_0==NOT||LA158_0==PLUS||LA158_0==BOOLEAN||LA158_0==BYTE||LA158_0==CHAR||LA158_0==DOUBLE||LA158_0==FALSE||LA158_0==FLOAT||(LA158_0>=INT && LA158_0<=LONG)||(LA158_0>=NEW && LA158_0<=NULL)||LA158_0==SHORT||LA158_0==SUPER||LA158_0==THIS||LA158_0==TRUE||LA158_0==VOID||(LA158_0>=IDENT && LA158_0<=STRING_LITERAL)) ) {
                alt158=1;
            }
            switch (alt158) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: expressionList
                    {
                    pushFollow(FOLLOW_expressionList_in_arguments15582);
                    expressionList542=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionList.add(expressionList542.getTree());

                    }
                    break;

            }

            RPAREN543=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_arguments15585); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN543);



            // AST REWRITE
            // elements: expressionList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1105:9: -> ^( ARGUMENT_LIST[$LPAREN, \"ARGUMENT_LIST\"] ( expressionList )? )
            {
                // ../etc/JamlAttrHash.g:1105:13: ^( ARGUMENT_LIST[$LPAREN, \"ARGUMENT_LIST\"] ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARGUMENT_LIST, LPAREN541, "ARGUMENT_LIST"), root_1);

                // ../etc/JamlAttrHash.g:1105:55: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("arguments", 116);
            if ( state.backtracking>0 ) { memoize(input, 116, arguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arguments"

    // $ANTLR start synpred5_JamlAttrHash
    public final void synpred5_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred5_JamlAttrHash_fragment", 121);
        try {
            // ../etc/JamlAttrHash.g:297:1: ( literal ',' | literal EOF )
            int alt160=2;
            switch ( input.LA(1) ) {
            case HEX_LITERAL:
            case OCTAL_LITERAL:
            case DECIMAL_LITERAL:
                {
                int LA160_1 = input.LA(2);

                if ( (LA160_1==COMMA) ) {
                    alt160=1;
                }
                else if ( (LA160_1==EOF) ) {
                    alt160=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 160, 1, input);

                    throw nvae;
                }
                }
                break;
            case FLOATING_POINT_LITERAL:
                {
                int LA160_2 = input.LA(2);

                if ( (LA160_2==EOF) ) {
                    alt160=2;
                }
                else if ( (LA160_2==COMMA) ) {
                    alt160=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 160, 2, input);

                    throw nvae;
                }
                }
                break;
            case CHARACTER_LITERAL:
                {
                int LA160_3 = input.LA(2);

                if ( (LA160_3==EOF) ) {
                    alt160=2;
                }
                else if ( (LA160_3==COMMA) ) {
                    alt160=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 160, 3, input);

                    throw nvae;
                }
                }
                break;
            case STRING_LITERAL:
                {
                int LA160_4 = input.LA(2);

                if ( (LA160_4==COMMA) ) {
                    alt160=1;
                }
                else if ( (LA160_4==EOF) ) {
                    alt160=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 160, 4, input);

                    throw nvae;
                }
                }
                break;
            case FALSE:
            case NULL:
            case TRUE:
                {
                int LA160_5 = input.LA(2);

                if ( (LA160_5==EOF) ) {
                    alt160=2;
                }
                else if ( (LA160_5==COMMA) ) {
                    alt160=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 160, 5, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 160, 0, input);

                throw nvae;
            }

            switch (alt160) {
                case 1 :
                    // ../etc/JamlAttrHash.g:297:2: literal ','
                    {
                    pushFollow(FOLLOW_literal_in_synpred5_JamlAttrHash4621);
                    literal();

                    state._fsp--;
                    if (state.failed) return ;
                    match(input,COMMA,FOLLOW_COMMA_in_synpred5_JamlAttrHash4623); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:297:16: literal EOF
                    {
                    pushFollow(FOLLOW_literal_in_synpred5_JamlAttrHash4627);
                    literal();

                    state._fsp--;
                    if (state.failed) return ;
                    match(input,EOF,FOLLOW_EOF_in_synpred5_JamlAttrHash4629); if (state.failed) return ;

                    }
                    break;

            }
        }
        finally {
            traceOut("synpred5_JamlAttrHash_fragment", 121);
        }}
    // $ANTLR end synpred5_JamlAttrHash

    // $ANTLR start synpred77_JamlAttrHash
    public final void synpred77_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred77_JamlAttrHash_fragment", 193);
        try {
            // ../etc/JamlAttrHash.g:426:9: ( GREATER_THAN )
            // ../etc/JamlAttrHash.g:426:9: GREATER_THAN
            {
            match(input,GREATER_THAN,FOLLOW_GREATER_THAN_in_synpred77_JamlAttrHash5968); if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred77_JamlAttrHash_fragment", 193);
        }}
    // $ANTLR end synpred77_JamlAttrHash

    // $ANTLR start synpred78_JamlAttrHash
    public final void synpred78_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred78_JamlAttrHash_fragment", 194);
        try {
            // ../etc/JamlAttrHash.g:427:9: ( SHIFT_RIGHT )
            // ../etc/JamlAttrHash.g:427:9: SHIFT_RIGHT
            {
            match(input,SHIFT_RIGHT,FOLLOW_SHIFT_RIGHT_in_synpred78_JamlAttrHash5978); if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred78_JamlAttrHash_fragment", 194);
        }}
    // $ANTLR end synpred78_JamlAttrHash

    // $ANTLR start synpred79_JamlAttrHash
    public final void synpred79_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred79_JamlAttrHash_fragment", 195);
        try {
            // ../etc/JamlAttrHash.g:428:9: ( BIT_SHIFT_RIGHT )
            // ../etc/JamlAttrHash.g:428:9: BIT_SHIFT_RIGHT
            {
            match(input,BIT_SHIFT_RIGHT,FOLLOW_BIT_SHIFT_RIGHT_in_synpred79_JamlAttrHash5988); if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred79_JamlAttrHash_fragment", 195);
        }}
    // $ANTLR end synpred79_JamlAttrHash

    // $ANTLR start synpred80_JamlAttrHash
    public final void synpred80_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred80_JamlAttrHash_fragment", 196);
        try {
            // ../etc/JamlAttrHash.g:433:15: ( bound )
            // ../etc/JamlAttrHash.g:433:15: bound
            {
            pushFollow(FOLLOW_bound_in_synpred80_JamlAttrHash6018);
            bound();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred80_JamlAttrHash_fragment", 196);
        }}
    // $ANTLR end synpred80_JamlAttrHash

    // $ANTLR start synpred95_JamlAttrHash
    public final void synpred95_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred95_JamlAttrHash_fragment", 211);
        try {
            // ../etc/JamlAttrHash.g:490:9: ( STATIC block )
            // ../etc/JamlAttrHash.g:490:9: STATIC block
            {
            match(input,STATIC,FOLLOW_STATIC_in_synpred95_JamlAttrHash6550); if (state.failed) return ;
            pushFollow(FOLLOW_block_in_synpred95_JamlAttrHash6552);
            block();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred95_JamlAttrHash_fragment", 211);
        }}
    // $ANTLR end synpred95_JamlAttrHash

    // $ANTLR start synpred105_JamlAttrHash
    public final void synpred105_JamlAttrHash_fragment() throws RecognitionException {   
        Token ident=null;

        traceIn("synpred105_JamlAttrHash_fragment", 221);
        try {
            // ../etc/JamlAttrHash.g:492:13: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) | ident= IDENT formalParameterList ( throwsClause )? block ) )
            // ../etc/JamlAttrHash.g:492:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) | ident= IDENT formalParameterList ( throwsClause )? block )
            {
            // ../etc/JamlAttrHash.g:492:13: ( genericTypeParameterList )?
            int alt166=2;
            int LA166_0 = input.LA(1);

            if ( (LA166_0==LESS_THAN) ) {
                alt166=1;
            }
            switch (alt166) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: genericTypeParameterList
                    {
                    pushFollow(FOLLOW_genericTypeParameterList_in_synpred105_JamlAttrHash6589);
                    genericTypeParameterList();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            // ../etc/JamlAttrHash.g:493:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) | ident= IDENT formalParameterList ( throwsClause )? block )
            int alt173=3;
            switch ( input.LA(1) ) {
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
                {
                alt173=1;
                }
                break;
            case IDENT:
                {
                int LA173_2 = input.LA(2);

                if ( (LA173_2==LPAREN) ) {
                    alt173=3;
                }
                else if ( (LA173_2==DOT||LA173_2==LBRACK||LA173_2==LESS_THAN||LA173_2==IDENT) ) {
                    alt173=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 173, 2, input);

                    throw nvae;
                }
                }
                break;
            case VOID:
                {
                alt173=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 173, 0, input);

                throw nvae;
            }

            switch (alt173) {
                case 1 :
                    // ../etc/JamlAttrHash.g:493:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI )
                    {
                    pushFollow(FOLLOW_type_in_synpred105_JamlAttrHash6608);
                    type();

                    state._fsp--;
                    if (state.failed) return ;
                    match(input,IDENT,FOLLOW_IDENT_in_synpred105_JamlAttrHash6610); if (state.failed) return ;
                    pushFollow(FOLLOW_formalParameterList_in_synpred105_JamlAttrHash6612);
                    formalParameterList();

                    state._fsp--;
                    if (state.failed) return ;
                    // ../etc/JamlAttrHash.g:493:48: ( arrayDeclaratorList )?
                    int alt167=2;
                    int LA167_0 = input.LA(1);

                    if ( (LA167_0==LBRACK) ) {
                        alt167=1;
                    }
                    switch (alt167) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:0:0: arrayDeclaratorList
                            {
                            pushFollow(FOLLOW_arrayDeclaratorList_in_synpred105_JamlAttrHash6614);
                            arrayDeclaratorList();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }

                    // ../etc/JamlAttrHash.g:493:69: ( throwsClause )?
                    int alt168=2;
                    int LA168_0 = input.LA(1);

                    if ( (LA168_0==THROWS) ) {
                        alt168=1;
                    }
                    switch (alt168) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:0:0: throwsClause
                            {
                            pushFollow(FOLLOW_throwsClause_in_synpred105_JamlAttrHash6617);
                            throwsClause();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }

                    // ../etc/JamlAttrHash.g:493:83: ( block | SEMI )
                    int alt169=2;
                    int LA169_0 = input.LA(1);

                    if ( (LA169_0==LCURLY) ) {
                        alt169=1;
                    }
                    else if ( (LA169_0==SEMI) ) {
                        alt169=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 169, 0, input);

                        throw nvae;
                    }
                    switch (alt169) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:493:84: block
                            {
                            pushFollow(FOLLOW_block_in_synpred105_JamlAttrHash6621);
                            block();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;
                        case 2 :
                            // ../etc/JamlAttrHash.g:493:92: SEMI
                            {
                            match(input,SEMI,FOLLOW_SEMI_in_synpred105_JamlAttrHash6625); if (state.failed) return ;

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:495:17: VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI )
                    {
                    match(input,VOID,FOLLOW_VOID_in_synpred105_JamlAttrHash6687); if (state.failed) return ;
                    match(input,IDENT,FOLLOW_IDENT_in_synpred105_JamlAttrHash6689); if (state.failed) return ;
                    pushFollow(FOLLOW_formalParameterList_in_synpred105_JamlAttrHash6691);
                    formalParameterList();

                    state._fsp--;
                    if (state.failed) return ;
                    // ../etc/JamlAttrHash.g:495:48: ( throwsClause )?
                    int alt170=2;
                    int LA170_0 = input.LA(1);

                    if ( (LA170_0==THROWS) ) {
                        alt170=1;
                    }
                    switch (alt170) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:0:0: throwsClause
                            {
                            pushFollow(FOLLOW_throwsClause_in_synpred105_JamlAttrHash6693);
                            throwsClause();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }

                    // ../etc/JamlAttrHash.g:495:62: ( block | SEMI )
                    int alt171=2;
                    int LA171_0 = input.LA(1);

                    if ( (LA171_0==LCURLY) ) {
                        alt171=1;
                    }
                    else if ( (LA171_0==SEMI) ) {
                        alt171=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 171, 0, input);

                        throw nvae;
                    }
                    switch (alt171) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:495:63: block
                            {
                            pushFollow(FOLLOW_block_in_synpred105_JamlAttrHash6697);
                            block();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;
                        case 2 :
                            // ../etc/JamlAttrHash.g:495:71: SEMI
                            {
                            match(input,SEMI,FOLLOW_SEMI_in_synpred105_JamlAttrHash6701); if (state.failed) return ;

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // ../etc/JamlAttrHash.g:497:17: ident= IDENT formalParameterList ( throwsClause )? block
                    {
                    ident=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred105_JamlAttrHash6760); if (state.failed) return ;
                    pushFollow(FOLLOW_formalParameterList_in_synpred105_JamlAttrHash6762);
                    formalParameterList();

                    state._fsp--;
                    if (state.failed) return ;
                    // ../etc/JamlAttrHash.g:497:49: ( throwsClause )?
                    int alt172=2;
                    int LA172_0 = input.LA(1);

                    if ( (LA172_0==THROWS) ) {
                        alt172=1;
                    }
                    switch (alt172) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:0:0: throwsClause
                            {
                            pushFollow(FOLLOW_throwsClause_in_synpred105_JamlAttrHash6764);
                            throwsClause();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_block_in_synpred105_JamlAttrHash6767);
                    block();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        finally {
            traceOut("synpred105_JamlAttrHash_fragment", 221);
        }}
    // $ANTLR end synpred105_JamlAttrHash

    // $ANTLR start synpred106_JamlAttrHash
    public final void synpred106_JamlAttrHash_fragment() throws RecognitionException {   
        Token ident=null;

        traceIn("synpred106_JamlAttrHash_fragment", 222);
        try {
            // ../etc/JamlAttrHash.g:491:9: ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) | ident= IDENT formalParameterList ( throwsClause )? block ) | type classFieldDeclaratorList SEMI ) )
            // ../etc/JamlAttrHash.g:491:9: modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) | ident= IDENT formalParameterList ( throwsClause )? block ) | type classFieldDeclaratorList SEMI )
            {
            pushFollow(FOLLOW_modifierList_in_synpred106_JamlAttrHash6575);
            modifierList();

            state._fsp--;
            if (state.failed) return ;
            // ../etc/JamlAttrHash.g:492:9: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) | ident= IDENT formalParameterList ( throwsClause )? block ) | type classFieldDeclaratorList SEMI )
            int alt182=2;
            switch ( input.LA(1) ) {
            case LESS_THAN:
            case VOID:
                {
                alt182=1;
                }
                break;
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
                {
                int LA182_2 = input.LA(2);

                if ( (synpred105_JamlAttrHash()) ) {
                    alt182=1;
                }
                else if ( (true) ) {
                    alt182=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 182, 2, input);

                    throw nvae;
                }
                }
                break;
            case IDENT:
                {
                int LA182_3 = input.LA(2);

                if ( (synpred105_JamlAttrHash()) ) {
                    alt182=1;
                }
                else if ( (true) ) {
                    alt182=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 182, 3, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 182, 0, input);

                throw nvae;
            }

            switch (alt182) {
                case 1 :
                    // ../etc/JamlAttrHash.g:492:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) | ident= IDENT formalParameterList ( throwsClause )? block )
                    {
                    // ../etc/JamlAttrHash.g:492:13: ( genericTypeParameterList )?
                    int alt174=2;
                    int LA174_0 = input.LA(1);

                    if ( (LA174_0==LESS_THAN) ) {
                        alt174=1;
                    }
                    switch (alt174) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:0:0: genericTypeParameterList
                            {
                            pushFollow(FOLLOW_genericTypeParameterList_in_synpred106_JamlAttrHash6589);
                            genericTypeParameterList();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }

                    // ../etc/JamlAttrHash.g:493:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) | ident= IDENT formalParameterList ( throwsClause )? block )
                    int alt181=3;
                    switch ( input.LA(1) ) {
                    case BOOLEAN:
                    case BYTE:
                    case CHAR:
                    case DOUBLE:
                    case FLOAT:
                    case INT:
                    case LONG:
                    case SHORT:
                        {
                        alt181=1;
                        }
                        break;
                    case IDENT:
                        {
                        int LA181_2 = input.LA(2);

                        if ( (LA181_2==LPAREN) ) {
                            alt181=3;
                        }
                        else if ( (LA181_2==DOT||LA181_2==LBRACK||LA181_2==LESS_THAN||LA181_2==IDENT) ) {
                            alt181=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return ;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 181, 2, input);

                            throw nvae;
                        }
                        }
                        break;
                    case VOID:
                        {
                        alt181=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 181, 0, input);

                        throw nvae;
                    }

                    switch (alt181) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:493:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI )
                            {
                            pushFollow(FOLLOW_type_in_synpred106_JamlAttrHash6608);
                            type();

                            state._fsp--;
                            if (state.failed) return ;
                            match(input,IDENT,FOLLOW_IDENT_in_synpred106_JamlAttrHash6610); if (state.failed) return ;
                            pushFollow(FOLLOW_formalParameterList_in_synpred106_JamlAttrHash6612);
                            formalParameterList();

                            state._fsp--;
                            if (state.failed) return ;
                            // ../etc/JamlAttrHash.g:493:48: ( arrayDeclaratorList )?
                            int alt175=2;
                            int LA175_0 = input.LA(1);

                            if ( (LA175_0==LBRACK) ) {
                                alt175=1;
                            }
                            switch (alt175) {
                                case 1 :
                                    // ../etc/JamlAttrHash.g:0:0: arrayDeclaratorList
                                    {
                                    pushFollow(FOLLOW_arrayDeclaratorList_in_synpred106_JamlAttrHash6614);
                                    arrayDeclaratorList();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }

                            // ../etc/JamlAttrHash.g:493:69: ( throwsClause )?
                            int alt176=2;
                            int LA176_0 = input.LA(1);

                            if ( (LA176_0==THROWS) ) {
                                alt176=1;
                            }
                            switch (alt176) {
                                case 1 :
                                    // ../etc/JamlAttrHash.g:0:0: throwsClause
                                    {
                                    pushFollow(FOLLOW_throwsClause_in_synpred106_JamlAttrHash6617);
                                    throwsClause();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }

                            // ../etc/JamlAttrHash.g:493:83: ( block | SEMI )
                            int alt177=2;
                            int LA177_0 = input.LA(1);

                            if ( (LA177_0==LCURLY) ) {
                                alt177=1;
                            }
                            else if ( (LA177_0==SEMI) ) {
                                alt177=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return ;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 177, 0, input);

                                throw nvae;
                            }
                            switch (alt177) {
                                case 1 :
                                    // ../etc/JamlAttrHash.g:493:84: block
                                    {
                                    pushFollow(FOLLOW_block_in_synpred106_JamlAttrHash6621);
                                    block();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;
                                case 2 :
                                    // ../etc/JamlAttrHash.g:493:92: SEMI
                                    {
                                    match(input,SEMI,FOLLOW_SEMI_in_synpred106_JamlAttrHash6625); if (state.failed) return ;

                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // ../etc/JamlAttrHash.g:495:17: VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI )
                            {
                            match(input,VOID,FOLLOW_VOID_in_synpred106_JamlAttrHash6687); if (state.failed) return ;
                            match(input,IDENT,FOLLOW_IDENT_in_synpred106_JamlAttrHash6689); if (state.failed) return ;
                            pushFollow(FOLLOW_formalParameterList_in_synpred106_JamlAttrHash6691);
                            formalParameterList();

                            state._fsp--;
                            if (state.failed) return ;
                            // ../etc/JamlAttrHash.g:495:48: ( throwsClause )?
                            int alt178=2;
                            int LA178_0 = input.LA(1);

                            if ( (LA178_0==THROWS) ) {
                                alt178=1;
                            }
                            switch (alt178) {
                                case 1 :
                                    // ../etc/JamlAttrHash.g:0:0: throwsClause
                                    {
                                    pushFollow(FOLLOW_throwsClause_in_synpred106_JamlAttrHash6693);
                                    throwsClause();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }

                            // ../etc/JamlAttrHash.g:495:62: ( block | SEMI )
                            int alt179=2;
                            int LA179_0 = input.LA(1);

                            if ( (LA179_0==LCURLY) ) {
                                alt179=1;
                            }
                            else if ( (LA179_0==SEMI) ) {
                                alt179=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return ;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 179, 0, input);

                                throw nvae;
                            }
                            switch (alt179) {
                                case 1 :
                                    // ../etc/JamlAttrHash.g:495:63: block
                                    {
                                    pushFollow(FOLLOW_block_in_synpred106_JamlAttrHash6697);
                                    block();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;
                                case 2 :
                                    // ../etc/JamlAttrHash.g:495:71: SEMI
                                    {
                                    match(input,SEMI,FOLLOW_SEMI_in_synpred106_JamlAttrHash6701); if (state.failed) return ;

                                    }
                                    break;

                            }


                            }
                            break;
                        case 3 :
                            // ../etc/JamlAttrHash.g:497:17: ident= IDENT formalParameterList ( throwsClause )? block
                            {
                            ident=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred106_JamlAttrHash6760); if (state.failed) return ;
                            pushFollow(FOLLOW_formalParameterList_in_synpred106_JamlAttrHash6762);
                            formalParameterList();

                            state._fsp--;
                            if (state.failed) return ;
                            // ../etc/JamlAttrHash.g:497:49: ( throwsClause )?
                            int alt180=2;
                            int LA180_0 = input.LA(1);

                            if ( (LA180_0==THROWS) ) {
                                alt180=1;
                            }
                            switch (alt180) {
                                case 1 :
                                    // ../etc/JamlAttrHash.g:0:0: throwsClause
                                    {
                                    pushFollow(FOLLOW_throwsClause_in_synpred106_JamlAttrHash6764);
                                    throwsClause();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_block_in_synpred106_JamlAttrHash6767);
                            block();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:500:13: type classFieldDeclaratorList SEMI
                    {
                    pushFollow(FOLLOW_type_in_synpred106_JamlAttrHash6831);
                    type();

                    state._fsp--;
                    if (state.failed) return ;
                    pushFollow(FOLLOW_classFieldDeclaratorList_in_synpred106_JamlAttrHash6833);
                    classFieldDeclaratorList();

                    state._fsp--;
                    if (state.failed) return ;
                    match(input,SEMI,FOLLOW_SEMI_in_synpred106_JamlAttrHash6835); if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        finally {
            traceOut("synpred106_JamlAttrHash_fragment", 222);
        }}
    // $ANTLR end synpred106_JamlAttrHash

    // $ANTLR start synpred107_JamlAttrHash
    public final void synpred107_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred107_JamlAttrHash_fragment", 223);
        try {
            // ../etc/JamlAttrHash.g:503:9: ( typeDeclaration )
            // ../etc/JamlAttrHash.g:503:9: typeDeclaration
            {
            pushFollow(FOLLOW_typeDeclaration_in_synpred107_JamlAttrHash6880);
            typeDeclaration();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred107_JamlAttrHash_fragment", 223);
        }}
    // $ANTLR end synpred107_JamlAttrHash

    // $ANTLR start synpred113_JamlAttrHash
    public final void synpred113_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred113_JamlAttrHash_fragment", 229);
        try {
            // ../etc/JamlAttrHash.g:509:13: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI ) )
            // ../etc/JamlAttrHash.g:509:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI )
            {
            // ../etc/JamlAttrHash.g:509:13: ( genericTypeParameterList )?
            int alt185=2;
            int LA185_0 = input.LA(1);

            if ( (LA185_0==LESS_THAN) ) {
                alt185=1;
            }
            switch (alt185) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: genericTypeParameterList
                    {
                    pushFollow(FOLLOW_genericTypeParameterList_in_synpred113_JamlAttrHash6936);
                    genericTypeParameterList();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            // ../etc/JamlAttrHash.g:510:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI )
            int alt189=2;
            int LA189_0 = input.LA(1);

            if ( (LA189_0==BOOLEAN||LA189_0==BYTE||LA189_0==CHAR||LA189_0==DOUBLE||LA189_0==FLOAT||(LA189_0>=INT && LA189_0<=LONG)||LA189_0==SHORT||LA189_0==IDENT) ) {
                alt189=1;
            }
            else if ( (LA189_0==VOID) ) {
                alt189=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 189, 0, input);

                throw nvae;
            }
            switch (alt189) {
                case 1 :
                    // ../etc/JamlAttrHash.g:510:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI
                    {
                    pushFollow(FOLLOW_type_in_synpred113_JamlAttrHash6955);
                    type();

                    state._fsp--;
                    if (state.failed) return ;
                    match(input,IDENT,FOLLOW_IDENT_in_synpred113_JamlAttrHash6957); if (state.failed) return ;
                    pushFollow(FOLLOW_formalParameterList_in_synpred113_JamlAttrHash6959);
                    formalParameterList();

                    state._fsp--;
                    if (state.failed) return ;
                    // ../etc/JamlAttrHash.g:510:48: ( arrayDeclaratorList )?
                    int alt186=2;
                    int LA186_0 = input.LA(1);

                    if ( (LA186_0==LBRACK) ) {
                        alt186=1;
                    }
                    switch (alt186) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:0:0: arrayDeclaratorList
                            {
                            pushFollow(FOLLOW_arrayDeclaratorList_in_synpred113_JamlAttrHash6961);
                            arrayDeclaratorList();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }

                    // ../etc/JamlAttrHash.g:510:69: ( throwsClause )?
                    int alt187=2;
                    int LA187_0 = input.LA(1);

                    if ( (LA187_0==THROWS) ) {
                        alt187=1;
                    }
                    switch (alt187) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:0:0: throwsClause
                            {
                            pushFollow(FOLLOW_throwsClause_in_synpred113_JamlAttrHash6964);
                            throwsClause();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }

                    match(input,SEMI,FOLLOW_SEMI_in_synpred113_JamlAttrHash6967); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:512:17: VOID IDENT formalParameterList ( throwsClause )? SEMI
                    {
                    match(input,VOID,FOLLOW_VOID_in_synpred113_JamlAttrHash7025); if (state.failed) return ;
                    match(input,IDENT,FOLLOW_IDENT_in_synpred113_JamlAttrHash7027); if (state.failed) return ;
                    pushFollow(FOLLOW_formalParameterList_in_synpred113_JamlAttrHash7029);
                    formalParameterList();

                    state._fsp--;
                    if (state.failed) return ;
                    // ../etc/JamlAttrHash.g:512:48: ( throwsClause )?
                    int alt188=2;
                    int LA188_0 = input.LA(1);

                    if ( (LA188_0==THROWS) ) {
                        alt188=1;
                    }
                    switch (alt188) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:0:0: throwsClause
                            {
                            pushFollow(FOLLOW_throwsClause_in_synpred113_JamlAttrHash7031);
                            throwsClause();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }

                    match(input,SEMI,FOLLOW_SEMI_in_synpred113_JamlAttrHash7034); if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        finally {
            traceOut("synpred113_JamlAttrHash_fragment", 229);
        }}
    // $ANTLR end synpred113_JamlAttrHash

    // $ANTLR start synpred114_JamlAttrHash
    public final void synpred114_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred114_JamlAttrHash_fragment", 230);
        try {
            // ../etc/JamlAttrHash.g:508:9: ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI ) | type interfaceFieldDeclaratorList SEMI ) )
            // ../etc/JamlAttrHash.g:508:9: modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI ) | type interfaceFieldDeclaratorList SEMI )
            {
            pushFollow(FOLLOW_modifierList_in_synpred114_JamlAttrHash6922);
            modifierList();

            state._fsp--;
            if (state.failed) return ;
            // ../etc/JamlAttrHash.g:509:9: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI ) | type interfaceFieldDeclaratorList SEMI )
            int alt195=2;
            switch ( input.LA(1) ) {
            case LESS_THAN:
            case VOID:
                {
                alt195=1;
                }
                break;
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
                {
                int LA195_2 = input.LA(2);

                if ( (synpred113_JamlAttrHash()) ) {
                    alt195=1;
                }
                else if ( (true) ) {
                    alt195=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 195, 2, input);

                    throw nvae;
                }
                }
                break;
            case IDENT:
                {
                int LA195_3 = input.LA(2);

                if ( (synpred113_JamlAttrHash()) ) {
                    alt195=1;
                }
                else if ( (true) ) {
                    alt195=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 195, 3, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 195, 0, input);

                throw nvae;
            }

            switch (alt195) {
                case 1 :
                    // ../etc/JamlAttrHash.g:509:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI )
                    {
                    // ../etc/JamlAttrHash.g:509:13: ( genericTypeParameterList )?
                    int alt190=2;
                    int LA190_0 = input.LA(1);

                    if ( (LA190_0==LESS_THAN) ) {
                        alt190=1;
                    }
                    switch (alt190) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:0:0: genericTypeParameterList
                            {
                            pushFollow(FOLLOW_genericTypeParameterList_in_synpred114_JamlAttrHash6936);
                            genericTypeParameterList();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }

                    // ../etc/JamlAttrHash.g:510:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI )
                    int alt194=2;
                    int LA194_0 = input.LA(1);

                    if ( (LA194_0==BOOLEAN||LA194_0==BYTE||LA194_0==CHAR||LA194_0==DOUBLE||LA194_0==FLOAT||(LA194_0>=INT && LA194_0<=LONG)||LA194_0==SHORT||LA194_0==IDENT) ) {
                        alt194=1;
                    }
                    else if ( (LA194_0==VOID) ) {
                        alt194=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 194, 0, input);

                        throw nvae;
                    }
                    switch (alt194) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:510:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI
                            {
                            pushFollow(FOLLOW_type_in_synpred114_JamlAttrHash6955);
                            type();

                            state._fsp--;
                            if (state.failed) return ;
                            match(input,IDENT,FOLLOW_IDENT_in_synpred114_JamlAttrHash6957); if (state.failed) return ;
                            pushFollow(FOLLOW_formalParameterList_in_synpred114_JamlAttrHash6959);
                            formalParameterList();

                            state._fsp--;
                            if (state.failed) return ;
                            // ../etc/JamlAttrHash.g:510:48: ( arrayDeclaratorList )?
                            int alt191=2;
                            int LA191_0 = input.LA(1);

                            if ( (LA191_0==LBRACK) ) {
                                alt191=1;
                            }
                            switch (alt191) {
                                case 1 :
                                    // ../etc/JamlAttrHash.g:0:0: arrayDeclaratorList
                                    {
                                    pushFollow(FOLLOW_arrayDeclaratorList_in_synpred114_JamlAttrHash6961);
                                    arrayDeclaratorList();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }

                            // ../etc/JamlAttrHash.g:510:69: ( throwsClause )?
                            int alt192=2;
                            int LA192_0 = input.LA(1);

                            if ( (LA192_0==THROWS) ) {
                                alt192=1;
                            }
                            switch (alt192) {
                                case 1 :
                                    // ../etc/JamlAttrHash.g:0:0: throwsClause
                                    {
                                    pushFollow(FOLLOW_throwsClause_in_synpred114_JamlAttrHash6964);
                                    throwsClause();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }

                            match(input,SEMI,FOLLOW_SEMI_in_synpred114_JamlAttrHash6967); if (state.failed) return ;

                            }
                            break;
                        case 2 :
                            // ../etc/JamlAttrHash.g:512:17: VOID IDENT formalParameterList ( throwsClause )? SEMI
                            {
                            match(input,VOID,FOLLOW_VOID_in_synpred114_JamlAttrHash7025); if (state.failed) return ;
                            match(input,IDENT,FOLLOW_IDENT_in_synpred114_JamlAttrHash7027); if (state.failed) return ;
                            pushFollow(FOLLOW_formalParameterList_in_synpred114_JamlAttrHash7029);
                            formalParameterList();

                            state._fsp--;
                            if (state.failed) return ;
                            // ../etc/JamlAttrHash.g:512:48: ( throwsClause )?
                            int alt193=2;
                            int LA193_0 = input.LA(1);

                            if ( (LA193_0==THROWS) ) {
                                alt193=1;
                            }
                            switch (alt193) {
                                case 1 :
                                    // ../etc/JamlAttrHash.g:0:0: throwsClause
                                    {
                                    pushFollow(FOLLOW_throwsClause_in_synpred114_JamlAttrHash7031);
                                    throwsClause();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }

                            match(input,SEMI,FOLLOW_SEMI_in_synpred114_JamlAttrHash7034); if (state.failed) return ;

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:515:13: type interfaceFieldDeclaratorList SEMI
                    {
                    pushFollow(FOLLOW_type_in_synpred114_JamlAttrHash7097);
                    type();

                    state._fsp--;
                    if (state.failed) return ;
                    pushFollow(FOLLOW_interfaceFieldDeclaratorList_in_synpred114_JamlAttrHash7099);
                    interfaceFieldDeclaratorList();

                    state._fsp--;
                    if (state.failed) return ;
                    match(input,SEMI,FOLLOW_SEMI_in_synpred114_JamlAttrHash7101); if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        finally {
            traceOut("synpred114_JamlAttrHash_fragment", 230);
        }}
    // $ANTLR end synpred114_JamlAttrHash

    // $ANTLR start synpred115_JamlAttrHash
    public final void synpred115_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred115_JamlAttrHash_fragment", 231);
        try {
            // ../etc/JamlAttrHash.g:518:9: ( typeDeclaration )
            // ../etc/JamlAttrHash.g:518:9: typeDeclaration
            {
            pushFollow(FOLLOW_typeDeclaration_in_synpred115_JamlAttrHash7146);
            typeDeclaration();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred115_JamlAttrHash_fragment", 231);
        }}
    // $ANTLR end synpred115_JamlAttrHash

    // $ANTLR start synpred121_JamlAttrHash
    public final void synpred121_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred121_JamlAttrHash_fragment", 237);
        try {
            // ../etc/JamlAttrHash.g:557:9: ( arrayDeclarator )
            // ../etc/JamlAttrHash.g:557:9: arrayDeclarator
            {
            pushFollow(FOLLOW_arrayDeclarator_in_synpred121_JamlAttrHash7448);
            arrayDeclarator();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred121_JamlAttrHash_fragment", 237);
        }}
    // $ANTLR end synpred121_JamlAttrHash

    // $ANTLR start synpred139_JamlAttrHash
    public final void synpred139_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred139_JamlAttrHash_fragment", 255);
        try {
            // ../etc/JamlAttrHash.g:606:23: ( arrayDeclaratorList )
            // ../etc/JamlAttrHash.g:606:23: arrayDeclaratorList
            {
            pushFollow(FOLLOW_arrayDeclaratorList_in_synpred139_JamlAttrHash7849);
            arrayDeclaratorList();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred139_JamlAttrHash_fragment", 255);
        }}
    // $ANTLR end synpred139_JamlAttrHash

    // $ANTLR start synpred140_JamlAttrHash
    public final void synpred140_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred140_JamlAttrHash_fragment", 256);
        try {
            // ../etc/JamlAttrHash.g:611:28: ( arrayDeclaratorList )
            // ../etc/JamlAttrHash.g:611:28: arrayDeclaratorList
            {
            pushFollow(FOLLOW_arrayDeclaratorList_in_synpred140_JamlAttrHash7898);
            arrayDeclaratorList();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred140_JamlAttrHash_fragment", 256);
        }}
    // $ANTLR end synpred140_JamlAttrHash

    // $ANTLR start synpred142_JamlAttrHash
    public final void synpred142_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred142_JamlAttrHash_fragment", 258);
        try {
            // ../etc/JamlAttrHash.g:621:20: ( DOT typeIdent )
            // ../etc/JamlAttrHash.g:621:20: DOT typeIdent
            {
            match(input,DOT,FOLLOW_DOT_in_synpred142_JamlAttrHash7983); if (state.failed) return ;
            pushFollow(FOLLOW_typeIdent_in_synpred142_JamlAttrHash7985);
            typeIdent();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred142_JamlAttrHash_fragment", 258);
        }}
    // $ANTLR end synpred142_JamlAttrHash

    // $ANTLR start synpred153_JamlAttrHash
    public final void synpred153_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred153_JamlAttrHash_fragment", 269);
        try {
            // ../etc/JamlAttrHash.g:650:40: ( COMMA genericTypeArgument )
            // ../etc/JamlAttrHash.g:650:40: COMMA genericTypeArgument
            {
            match(input,COMMA,FOLLOW_COMMA_in_synpred153_JamlAttrHash8210); if (state.failed) return ;
            pushFollow(FOLLOW_genericTypeArgument_in_synpred153_JamlAttrHash8212);
            genericTypeArgument();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred153_JamlAttrHash_fragment", 269);
        }}
    // $ANTLR end synpred153_JamlAttrHash

    // $ANTLR start synpred155_JamlAttrHash
    public final void synpred155_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred155_JamlAttrHash_fragment", 271);
        try {
            // ../etc/JamlAttrHash.g:656:18: ( genericWildcardBoundType )
            // ../etc/JamlAttrHash.g:656:18: genericWildcardBoundType
            {
            pushFollow(FOLLOW_genericWildcardBoundType_in_synpred155_JamlAttrHash8266);
            genericWildcardBoundType();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred155_JamlAttrHash_fragment", 271);
        }}
    // $ANTLR end synpred155_JamlAttrHash

    // $ANTLR start synpred160_JamlAttrHash
    public final void synpred160_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred160_JamlAttrHash_fragment", 276);
        try {
            // ../etc/JamlAttrHash.g:681:42: ( COMMA formalParameterStandardDecl )
            // ../etc/JamlAttrHash.g:681:42: COMMA formalParameterStandardDecl
            {
            match(input,COMMA,FOLLOW_COMMA_in_synpred160_JamlAttrHash8484); if (state.failed) return ;
            pushFollow(FOLLOW_formalParameterStandardDecl_in_synpred160_JamlAttrHash8486);
            formalParameterStandardDecl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred160_JamlAttrHash_fragment", 276);
        }}
    // $ANTLR end synpred160_JamlAttrHash

    // $ANTLR start synpred162_JamlAttrHash
    public final void synpred162_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred162_JamlAttrHash_fragment", 278);
        try {
            // ../etc/JamlAttrHash.g:681:13: ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? )
            // ../etc/JamlAttrHash.g:681:13: formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )?
            {
            pushFollow(FOLLOW_formalParameterStandardDecl_in_synpred162_JamlAttrHash8481);
            formalParameterStandardDecl();

            state._fsp--;
            if (state.failed) return ;
            // ../etc/JamlAttrHash.g:681:41: ( COMMA formalParameterStandardDecl )*
            loop198:
            do {
                int alt198=2;
                int LA198_0 = input.LA(1);

                if ( (LA198_0==COMMA) ) {
                    int LA198_1 = input.LA(2);

                    if ( (synpred160_JamlAttrHash()) ) {
                        alt198=1;
                    }


                }


                switch (alt198) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:681:42: COMMA formalParameterStandardDecl
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_synpred162_JamlAttrHash8484); if (state.failed) return ;
            	    pushFollow(FOLLOW_formalParameterStandardDecl_in_synpred162_JamlAttrHash8486);
            	    formalParameterStandardDecl();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop198;
                }
            } while (true);

            // ../etc/JamlAttrHash.g:681:78: ( COMMA formalParameterVarArgDecl )?
            int alt199=2;
            int LA199_0 = input.LA(1);

            if ( (LA199_0==COMMA) ) {
                alt199=1;
            }
            switch (alt199) {
                case 1 :
                    // ../etc/JamlAttrHash.g:681:79: COMMA formalParameterVarArgDecl
                    {
                    match(input,COMMA,FOLLOW_COMMA_in_synpred162_JamlAttrHash8491); if (state.failed) return ;
                    pushFollow(FOLLOW_formalParameterVarArgDecl_in_synpred162_JamlAttrHash8493);
                    formalParameterVarArgDecl();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        finally {
            traceOut("synpred162_JamlAttrHash_fragment", 278);
        }}
    // $ANTLR end synpred162_JamlAttrHash

    // $ANTLR start synpred163_JamlAttrHash
    public final void synpred163_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred163_JamlAttrHash_fragment", 279);
        try {
            // ../etc/JamlAttrHash.g:684:13: ( formalParameterVarArgDecl )
            // ../etc/JamlAttrHash.g:684:13: formalParameterVarArgDecl
            {
            pushFollow(FOLLOW_formalParameterVarArgDecl_in_synpred163_JamlAttrHash8550);
            formalParameterVarArgDecl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred163_JamlAttrHash_fragment", 279);
        }}
    // $ANTLR end synpred163_JamlAttrHash

    // $ANTLR start synpred164_JamlAttrHash
    public final void synpred164_JamlAttrHash_fragment() throws RecognitionException {   
        Token ident=null;

        traceIn("synpred164_JamlAttrHash_fragment", 280);
        try {
            // ../etc/JamlAttrHash.g:705:13: ( DOT ident= IDENT )
            // ../etc/JamlAttrHash.g:705:13: DOT ident= IDENT
            {
            match(input,DOT,FOLLOW_DOT_in_synpred164_JamlAttrHash8795); if (state.failed) return ;
            ident=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred164_JamlAttrHash8799); if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred164_JamlAttrHash_fragment", 280);
        }}
    // $ANTLR end synpred164_JamlAttrHash

    // $ANTLR start synpred165_JamlAttrHash
    public final void synpred165_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred165_JamlAttrHash_fragment", 281);
        try {
            // ../etc/JamlAttrHash.g:712:9: ( annotation )
            // ../etc/JamlAttrHash.g:712:9: annotation
            {
            pushFollow(FOLLOW_annotation_in_synpred165_JamlAttrHash8852);
            annotation();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred165_JamlAttrHash_fragment", 281);
        }}
    // $ANTLR end synpred165_JamlAttrHash

    // $ANTLR start synpred177_JamlAttrHash
    public final void synpred177_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred177_JamlAttrHash_fragment", 293);
        try {
            // ../etc/JamlAttrHash.g:763:9: ( modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI | classFieldDeclaratorList SEMI ) )
            // ../etc/JamlAttrHash.g:763:9: modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI | classFieldDeclaratorList SEMI )
            {
            pushFollow(FOLLOW_modifierList_in_synpred177_JamlAttrHash9306);
            modifierList();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_type_in_synpred177_JamlAttrHash9308);
            type();

            state._fsp--;
            if (state.failed) return ;
            // ../etc/JamlAttrHash.g:764:9: ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI | classFieldDeclaratorList SEMI )
            int alt204=2;
            int LA204_0 = input.LA(1);

            if ( (LA204_0==IDENT) ) {
                int LA204_1 = input.LA(2);

                if ( (LA204_1==LPAREN) ) {
                    alt204=1;
                }
                else if ( (LA204_1==ASSIGN||LA204_1==COMMA||LA204_1==LBRACK||LA204_1==SEMI) ) {
                    alt204=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 204, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 204, 0, input);

                throw nvae;
            }
            switch (alt204) {
                case 1 :
                    // ../etc/JamlAttrHash.g:764:13: IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI
                    {
                    match(input,IDENT,FOLLOW_IDENT_in_synpred177_JamlAttrHash9322); if (state.failed) return ;
                    match(input,LPAREN,FOLLOW_LPAREN_in_synpred177_JamlAttrHash9324); if (state.failed) return ;
                    match(input,RPAREN,FOLLOW_RPAREN_in_synpred177_JamlAttrHash9326); if (state.failed) return ;
                    // ../etc/JamlAttrHash.g:764:33: ( annotationDefaultValue )?
                    int alt203=2;
                    int LA203_0 = input.LA(1);

                    if ( (LA203_0==DEFAULT) ) {
                        alt203=1;
                    }
                    switch (alt203) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:0:0: annotationDefaultValue
                            {
                            pushFollow(FOLLOW_annotationDefaultValue_in_synpred177_JamlAttrHash9328);
                            annotationDefaultValue();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }

                    match(input,SEMI,FOLLOW_SEMI_in_synpred177_JamlAttrHash9331); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:766:13: classFieldDeclaratorList SEMI
                    {
                    pushFollow(FOLLOW_classFieldDeclaratorList_in_synpred177_JamlAttrHash9373);
                    classFieldDeclaratorList();

                    state._fsp--;
                    if (state.failed) return ;
                    match(input,SEMI,FOLLOW_SEMI_in_synpred177_JamlAttrHash9375); if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        finally {
            traceOut("synpred177_JamlAttrHash_fragment", 293);
        }}
    // $ANTLR end synpred177_JamlAttrHash

    // $ANTLR start synpred179_JamlAttrHash
    public final void synpred179_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred179_JamlAttrHash_fragment", 295);
        try {
            // ../etc/JamlAttrHash.g:784:9: ( localVariableDeclaration SEMI )
            // ../etc/JamlAttrHash.g:784:9: localVariableDeclaration SEMI
            {
            pushFollow(FOLLOW_localVariableDeclaration_in_synpred179_JamlAttrHash9510);
            localVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,SEMI,FOLLOW_SEMI_in_synpred179_JamlAttrHash9512); if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred179_JamlAttrHash_fragment", 295);
        }}
    // $ANTLR end synpred179_JamlAttrHash

    // $ANTLR start synpred180_JamlAttrHash
    public final void synpred180_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred180_JamlAttrHash_fragment", 296);
        try {
            // ../etc/JamlAttrHash.g:785:9: ( typeDeclaration )
            // ../etc/JamlAttrHash.g:785:9: typeDeclaration
            {
            pushFollow(FOLLOW_typeDeclaration_in_synpred180_JamlAttrHash9523);
            typeDeclaration();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred180_JamlAttrHash_fragment", 296);
        }}
    // $ANTLR end synpred180_JamlAttrHash

    // $ANTLR start synpred184_JamlAttrHash
    public final void synpred184_JamlAttrHash_fragment() throws RecognitionException {   
        JamlAttrHashParser.statement_return elseStat = null;


        traceIn("synpred184_JamlAttrHash_fragment", 300);
        try {
            // ../etc/JamlAttrHash.g:802:13: ( ELSE elseStat= statement )
            // ../etc/JamlAttrHash.g:802:13: ELSE elseStat= statement
            {
            match(input,ELSE,FOLLOW_ELSE_in_synpred184_JamlAttrHash9821); if (state.failed) return ;
            pushFollow(FOLLOW_statement_in_synpred184_JamlAttrHash9825);
            elseStat=statement();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred184_JamlAttrHash_fragment", 300);
        }}
    // $ANTLR end synpred184_JamlAttrHash

    // $ANTLR start synpred186_JamlAttrHash
    public final void synpred186_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred186_JamlAttrHash_fragment", 302);
        try {
            // ../etc/JamlAttrHash.g:806:13: ( forInit SEMI forCondition SEMI forUpdater RPAREN statement )
            // ../etc/JamlAttrHash.g:806:13: forInit SEMI forCondition SEMI forUpdater RPAREN statement
            {
            pushFollow(FOLLOW_forInit_in_synpred186_JamlAttrHash10008);
            forInit();

            state._fsp--;
            if (state.failed) return ;
            match(input,SEMI,FOLLOW_SEMI_in_synpred186_JamlAttrHash10010); if (state.failed) return ;
            pushFollow(FOLLOW_forCondition_in_synpred186_JamlAttrHash10012);
            forCondition();

            state._fsp--;
            if (state.failed) return ;
            match(input,SEMI,FOLLOW_SEMI_in_synpred186_JamlAttrHash10014); if (state.failed) return ;
            pushFollow(FOLLOW_forUpdater_in_synpred186_JamlAttrHash10016);
            forUpdater();

            state._fsp--;
            if (state.failed) return ;
            match(input,RPAREN,FOLLOW_RPAREN_in_synpred186_JamlAttrHash10018); if (state.failed) return ;
            pushFollow(FOLLOW_statement_in_synpred186_JamlAttrHash10020);
            statement();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred186_JamlAttrHash_fragment", 302);
        }}
    // $ANTLR end synpred186_JamlAttrHash

    // $ANTLR start synpred206_JamlAttrHash
    public final void synpred206_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred206_JamlAttrHash_fragment", 322);
        try {
            // ../etc/JamlAttrHash.g:844:9: ( switchCaseLabel )
            // ../etc/JamlAttrHash.g:844:9: switchCaseLabel
            {
            pushFollow(FOLLOW_switchCaseLabel_in_synpred206_JamlAttrHash10987);
            switchCaseLabel();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred206_JamlAttrHash_fragment", 322);
        }}
    // $ANTLR end synpred206_JamlAttrHash

    // $ANTLR start synpred209_JamlAttrHash
    public final void synpred209_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred209_JamlAttrHash_fragment", 325);
        try {
            // ../etc/JamlAttrHash.g:856:9: ( localVariableDeclaration )
            // ../etc/JamlAttrHash.g:856:9: localVariableDeclaration
            {
            pushFollow(FOLLOW_localVariableDeclaration_in_synpred209_JamlAttrHash11077);
            localVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred209_JamlAttrHash_fragment", 325);
        }}
    // $ANTLR end synpred209_JamlAttrHash

    // $ANTLR start synpred210_JamlAttrHash
    public final void synpred210_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred210_JamlAttrHash_fragment", 326);
        try {
            // ../etc/JamlAttrHash.g:857:9: ( expressionList )
            // ../etc/JamlAttrHash.g:857:9: expressionList
            {
            pushFollow(FOLLOW_expressionList_in_synpred210_JamlAttrHash11099);
            expressionList();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred210_JamlAttrHash_fragment", 326);
        }}
    // $ANTLR end synpred210_JamlAttrHash

    // $ANTLR start synpred253_JamlAttrHash
    public final void synpred253_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred253_JamlAttrHash_fragment", 369);
        try {
            // ../etc/JamlAttrHash.g:993:9: ( LPAREN type RPAREN unaryExpression )
            // ../etc/JamlAttrHash.g:993:9: LPAREN type RPAREN unaryExpression
            {
            match(input,LPAREN,FOLLOW_LPAREN_in_synpred253_JamlAttrHash12632); if (state.failed) return ;
            pushFollow(FOLLOW_type_in_synpred253_JamlAttrHash12634);
            type();

            state._fsp--;
            if (state.failed) return ;
            match(input,RPAREN,FOLLOW_RPAREN_in_synpred253_JamlAttrHash12636); if (state.failed) return ;
            pushFollow(FOLLOW_unaryExpression_in_synpred253_JamlAttrHash12638);
            unaryExpression();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred253_JamlAttrHash_fragment", 369);
        }}
    // $ANTLR end synpred253_JamlAttrHash

    // $ANTLR start synpred281_JamlAttrHash
    public final void synpred281_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred281_JamlAttrHash_fragment", 397);
        try {
            // ../etc/JamlAttrHash.g:1061:13: ( ( arrayDeclarator )+ ( DOT CLASS ) )
            // ../etc/JamlAttrHash.g:1061:13: ( arrayDeclarator )+ ( DOT CLASS )
            {
            // ../etc/JamlAttrHash.g:1061:13: ( arrayDeclarator )+
            int cnt227=0;
            loop227:
            do {
                int alt227=2;
                int LA227_0 = input.LA(1);

                if ( (LA227_0==LBRACK) ) {
                    alt227=1;
                }


                switch (alt227) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:1061:17: arrayDeclarator
            	    {
            	    pushFollow(FOLLOW_arrayDeclarator_in_synpred281_JamlAttrHash14539);
            	    arrayDeclarator();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    if ( cnt227 >= 1 ) break loop227;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(227, input);
                        throw eee;
                }
                cnt227++;
            } while (true);

            // ../etc/JamlAttrHash.g:1063:13: ( DOT CLASS )
            // ../etc/JamlAttrHash.g:1063:17: DOT CLASS
            {
            match(input,DOT,FOLLOW_DOT_in_synpred281_JamlAttrHash14607); if (state.failed) return ;
            match(input,CLASS,FOLLOW_CLASS_in_synpred281_JamlAttrHash14609); if (state.failed) return ;

            }


            }

        }
        finally {
            traceOut("synpred281_JamlAttrHash_fragment", 397);
        }}
    // $ANTLR end synpred281_JamlAttrHash

    // $ANTLR start synpred289_JamlAttrHash
    public final void synpred289_JamlAttrHash_fragment() throws RecognitionException {   
        Token outerDot=null;
        Token Super=null;
        Token innerDot=null;

        traceIn("synpred289_JamlAttrHash_fragment", 405);
        try {
            // ../etc/JamlAttrHash.g:1066:13: (outerDot= DOT ( CLASS | genericTypeArgumentListSimplified (Super= SUPER arguments | SUPER innerDot= DOT IDENT arguments | IDENT arguments ) | THIS | Super= SUPER arguments | innerNewExpression ) )
            // ../etc/JamlAttrHash.g:1066:13: outerDot= DOT ( CLASS | genericTypeArgumentListSimplified (Super= SUPER arguments | SUPER innerDot= DOT IDENT arguments | IDENT arguments ) | THIS | Super= SUPER arguments | innerNewExpression )
            {
            outerDot=(Token)match(input,DOT,FOLLOW_DOT_in_synpred289_JamlAttrHash14740); if (state.failed) return ;
            // ../etc/JamlAttrHash.g:1067:13: ( CLASS | genericTypeArgumentListSimplified (Super= SUPER arguments | SUPER innerDot= DOT IDENT arguments | IDENT arguments ) | THIS | Super= SUPER arguments | innerNewExpression )
            int alt230=5;
            switch ( input.LA(1) ) {
            case CLASS:
                {
                alt230=1;
                }
                break;
            case LESS_THAN:
                {
                alt230=2;
                }
                break;
            case THIS:
                {
                alt230=3;
                }
                break;
            case SUPER:
                {
                alt230=4;
                }
                break;
            case NEW:
                {
                alt230=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 230, 0, input);

                throw nvae;
            }

            switch (alt230) {
                case 1 :
                    // ../etc/JamlAttrHash.g:1067:17: CLASS
                    {
                    match(input,CLASS,FOLLOW_CLASS_in_synpred289_JamlAttrHash14758); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:1068:17: genericTypeArgumentListSimplified (Super= SUPER arguments | SUPER innerDot= DOT IDENT arguments | IDENT arguments )
                    {
                    pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_synpred289_JamlAttrHash14821);
                    genericTypeArgumentListSimplified();

                    state._fsp--;
                    if (state.failed) return ;
                    // ../etc/JamlAttrHash.g:1069:17: (Super= SUPER arguments | SUPER innerDot= DOT IDENT arguments | IDENT arguments )
                    int alt229=3;
                    int LA229_0 = input.LA(1);

                    if ( (LA229_0==SUPER) ) {
                        int LA229_1 = input.LA(2);

                        if ( (LA229_1==DOT) ) {
                            alt229=2;
                        }
                        else if ( (LA229_1==LPAREN) ) {
                            alt229=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return ;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 229, 1, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA229_0==IDENT) ) {
                        alt229=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 229, 0, input);

                        throw nvae;
                    }
                    switch (alt229) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:1069:21: Super= SUPER arguments
                            {
                            Super=(Token)match(input,SUPER,FOLLOW_SUPER_in_synpred289_JamlAttrHash14846); if (state.failed) return ;
                            pushFollow(FOLLOW_arguments_in_synpred289_JamlAttrHash14848);
                            arguments();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;
                        case 2 :
                            // ../etc/JamlAttrHash.g:1070:21: SUPER innerDot= DOT IDENT arguments
                            {
                            match(input,SUPER,FOLLOW_SUPER_in_synpred289_JamlAttrHash14898); if (state.failed) return ;
                            innerDot=(Token)match(input,DOT,FOLLOW_DOT_in_synpred289_JamlAttrHash14902); if (state.failed) return ;
                            match(input,IDENT,FOLLOW_IDENT_in_synpred289_JamlAttrHash14904); if (state.failed) return ;
                            pushFollow(FOLLOW_arguments_in_synpred289_JamlAttrHash14906);
                            arguments();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;
                        case 3 :
                            // ../etc/JamlAttrHash.g:1071:21: IDENT arguments
                            {
                            match(input,IDENT,FOLLOW_IDENT_in_synpred289_JamlAttrHash14956); if (state.failed) return ;
                            pushFollow(FOLLOW_arguments_in_synpred289_JamlAttrHash14958);
                            arguments();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // ../etc/JamlAttrHash.g:1073:17: THIS
                    {
                    match(input,THIS,FOLLOW_THIS_in_synpred289_JamlAttrHash15033); if (state.failed) return ;

                    }
                    break;
                case 4 :
                    // ../etc/JamlAttrHash.g:1074:17: Super= SUPER arguments
                    {
                    Super=(Token)match(input,SUPER,FOLLOW_SUPER_in_synpred289_JamlAttrHash15099); if (state.failed) return ;
                    pushFollow(FOLLOW_arguments_in_synpred289_JamlAttrHash15101);
                    arguments();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 5 :
                    // ../etc/JamlAttrHash.g:1075:17: innerNewExpression
                    {
                    pushFollow(FOLLOW_innerNewExpression_in_synpred289_JamlAttrHash15149);
                    innerNewExpression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        finally {
            traceOut("synpred289_JamlAttrHash_fragment", 405);
        }}
    // $ANTLR end synpred289_JamlAttrHash

    // $ANTLR start synpred297_JamlAttrHash
    public final void synpred297_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred297_JamlAttrHash_fragment", 413);
        try {
            // ../etc/JamlAttrHash.g:1100:37: ( LBRACK expression RBRACK )
            // ../etc/JamlAttrHash.g:1100:37: LBRACK expression RBRACK
            {
            match(input,LBRACK,FOLLOW_LBRACK_in_synpred297_JamlAttrHash15550); if (state.failed) return ;
            pushFollow(FOLLOW_expression_in_synpred297_JamlAttrHash15553);
            expression();

            state._fsp--;
            if (state.failed) return ;
            match(input,RBRACK,FOLLOW_RBRACK_in_synpred297_JamlAttrHash15555); if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred297_JamlAttrHash_fragment", 413);
        }}
    // $ANTLR end synpred297_JamlAttrHash

    // Delegated rules

    public final boolean synpred79_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred79_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred142_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred142_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred164_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred164_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred289_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred289_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred253_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred253_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred113_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred113_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred77_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred77_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred139_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred139_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred177_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred177_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred186_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred186_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred95_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred95_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred281_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred281_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred165_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred165_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred184_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred184_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred121_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred121_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred206_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred206_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred160_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred160_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred155_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred155_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred162_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred162_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred140_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred140_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred114_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred114_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred106_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred106_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred209_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred209_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred78_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred78_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred153_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred153_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred115_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred115_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred107_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred107_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred180_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred180_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred80_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred80_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred179_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred179_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred297_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred297_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred163_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred163_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred105_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred105_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred210_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred210_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA41 dfa41 = new DFA41(this);
    protected DFA48 dfa48 = new DFA48(this);
    protected DFA91 dfa91 = new DFA91(this);
    protected DFA93 dfa93 = new DFA93(this);
    protected DFA102 dfa102 = new DFA102(this);
    protected DFA96 dfa96 = new DFA96(this);
    protected DFA108 dfa108 = new DFA108(this);
    protected DFA132 dfa132 = new DFA132(this);
    protected DFA144 dfa144 = new DFA144(this);
    protected DFA148 dfa148 = new DFA148(this);
    protected DFA155 dfa155 = new DFA155(this);
    static final String DFA41_eotS =
        "\27\uffff";
    static final String DFA41_eofS =
        "\27\uffff";
    static final String DFA41_minS =
        "\1\7\1\uffff\14\0\11\uffff";
    static final String DFA41_maxS =
        "\1\u00a4\1\uffff\14\0\11\uffff";
    static final String DFA41_acceptS =
        "\1\uffff\1\1\14\uffff\1\3\3\uffff\1\4\2\uffff\1\5\1\2";
    static final String DFA41_specialS =
        "\2\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\11"+
        "\uffff}>";
    static final String[] DFA41_transitionS = {
            "\1\15\17\uffff\1\1\1\uffff\1\16\22\uffff\1\25\10\uffff\1\6\1"+
            "\uffff\1\16\1\uffff\1\16\2\uffff\1\16\1\22\3\uffff\1\16\1\uffff"+
            "\1\22\2\uffff\1\14\1\uffff\1\16\4\uffff\1\22\1\uffff\2\16\1"+
            "\7\3\uffff\1\5\1\4\1\3\1\uffff\1\16\1\2\1\13\2\uffff\1\10\3"+
            "\uffff\1\11\2\uffff\1\16\1\12\75\uffff\1\16",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA41_eot = DFA.unpackEncodedString(DFA41_eotS);
    static final short[] DFA41_eof = DFA.unpackEncodedString(DFA41_eofS);
    static final char[] DFA41_min = DFA.unpackEncodedStringToUnsignedChars(DFA41_minS);
    static final char[] DFA41_max = DFA.unpackEncodedStringToUnsignedChars(DFA41_maxS);
    static final short[] DFA41_accept = DFA.unpackEncodedString(DFA41_acceptS);
    static final short[] DFA41_special = DFA.unpackEncodedString(DFA41_specialS);
    static final short[][] DFA41_transition;

    static {
        int numStates = DFA41_transitionS.length;
        DFA41_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA41_transition[i] = DFA.unpackEncodedString(DFA41_transitionS[i]);
        }
    }

    class DFA41 extends DFA {

        public DFA41(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 41;
            this.eot = DFA41_eot;
            this.eof = DFA41_eof;
            this.min = DFA41_min;
            this.max = DFA41_max;
            this.accept = DFA41_accept;
            this.special = DFA41_special;
            this.transition = DFA41_transition;
        }
        public String getDescription() {
            return "488:1: classScopeDeclarations : ( block -> ^( CLASS_INSTANCE_INITIALIZER block ) | STATIC block -> ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block ) | modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration | SEMI );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA41_2 = input.LA(1);

                         
                        int index41_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_JamlAttrHash()) ) {s = 22;}

                        else if ( (synpred106_JamlAttrHash()) ) {s = 14;}

                        else if ( (synpred107_JamlAttrHash()) ) {s = 18;}

                         
                        input.seek(index41_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA41_3 = input.LA(1);

                         
                        int index41_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_JamlAttrHash()) ) {s = 14;}

                        else if ( (synpred107_JamlAttrHash()) ) {s = 18;}

                         
                        input.seek(index41_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA41_4 = input.LA(1);

                         
                        int index41_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_JamlAttrHash()) ) {s = 14;}

                        else if ( (synpred107_JamlAttrHash()) ) {s = 18;}

                         
                        input.seek(index41_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA41_5 = input.LA(1);

                         
                        int index41_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_JamlAttrHash()) ) {s = 14;}

                        else if ( (synpred107_JamlAttrHash()) ) {s = 18;}

                         
                        input.seek(index41_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA41_6 = input.LA(1);

                         
                        int index41_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_JamlAttrHash()) ) {s = 14;}

                        else if ( (synpred107_JamlAttrHash()) ) {s = 18;}

                         
                        input.seek(index41_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA41_7 = input.LA(1);

                         
                        int index41_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_JamlAttrHash()) ) {s = 14;}

                        else if ( (synpred107_JamlAttrHash()) ) {s = 18;}

                         
                        input.seek(index41_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA41_8 = input.LA(1);

                         
                        int index41_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_JamlAttrHash()) ) {s = 14;}

                        else if ( (synpred107_JamlAttrHash()) ) {s = 18;}

                         
                        input.seek(index41_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA41_9 = input.LA(1);

                         
                        int index41_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_JamlAttrHash()) ) {s = 14;}

                        else if ( (synpred107_JamlAttrHash()) ) {s = 18;}

                         
                        input.seek(index41_9);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA41_10 = input.LA(1);

                         
                        int index41_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_JamlAttrHash()) ) {s = 14;}

                        else if ( (synpred107_JamlAttrHash()) ) {s = 18;}

                         
                        input.seek(index41_10);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA41_11 = input.LA(1);

                         
                        int index41_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_JamlAttrHash()) ) {s = 14;}

                        else if ( (synpred107_JamlAttrHash()) ) {s = 18;}

                         
                        input.seek(index41_11);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA41_12 = input.LA(1);

                         
                        int index41_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_JamlAttrHash()) ) {s = 14;}

                        else if ( (synpred107_JamlAttrHash()) ) {s = 18;}

                         
                        input.seek(index41_12);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA41_13 = input.LA(1);

                         
                        int index41_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_JamlAttrHash()) ) {s = 14;}

                        else if ( (synpred107_JamlAttrHash()) ) {s = 18;}

                         
                        input.seek(index41_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 41, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA48_eotS =
        "\25\uffff";
    static final String DFA48_eofS =
        "\25\uffff";
    static final String DFA48_minS =
        "\1\7\14\0\10\uffff";
    static final String DFA48_maxS =
        "\1\u00a4\14\0\10\uffff";
    static final String DFA48_acceptS =
        "\15\uffff\1\1\3\uffff\1\2\2\uffff\1\3";
    static final String DFA48_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\10"+
        "\uffff}>";
    static final String[] DFA48_transitionS = {
            "\1\14\21\uffff\1\15\22\uffff\1\24\10\uffff\1\5\1\uffff\1\15"+
            "\1\uffff\1\15\2\uffff\1\15\1\21\3\uffff\1\15\1\uffff\1\21\2"+
            "\uffff\1\13\1\uffff\1\15\4\uffff\1\21\1\uffff\2\15\1\6\3\uffff"+
            "\1\3\1\2\1\1\1\uffff\1\15\1\4\1\12\2\uffff\1\7\3\uffff\1\10"+
            "\2\uffff\1\15\1\11\75\uffff\1\15",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA48_eot = DFA.unpackEncodedString(DFA48_eotS);
    static final short[] DFA48_eof = DFA.unpackEncodedString(DFA48_eofS);
    static final char[] DFA48_min = DFA.unpackEncodedStringToUnsignedChars(DFA48_minS);
    static final char[] DFA48_max = DFA.unpackEncodedStringToUnsignedChars(DFA48_maxS);
    static final short[] DFA48_accept = DFA.unpackEncodedString(DFA48_acceptS);
    static final short[] DFA48_special = DFA.unpackEncodedString(DFA48_specialS);
    static final short[][] DFA48_transition;

    static {
        int numStates = DFA48_transitionS.length;
        DFA48_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA48_transition[i] = DFA.unpackEncodedString(DFA48_transitionS[i]);
        }
    }

    class DFA48 extends DFA {

        public DFA48(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 48;
            this.eot = DFA48_eot;
            this.eof = DFA48_eof;
            this.min = DFA48_min;
            this.max = DFA48_max;
            this.accept = DFA48_accept;
            this.special = DFA48_special;
            this.transition = DFA48_transition;
        }
        public String getDescription() {
            return "507:1: interfaceScopeDeclarations : ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) ) | typeDeclaration | SEMI );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA48_1 = input.LA(1);

                         
                        int index48_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_JamlAttrHash()) ) {s = 13;}

                        else if ( (synpred115_JamlAttrHash()) ) {s = 17;}

                         
                        input.seek(index48_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA48_2 = input.LA(1);

                         
                        int index48_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_JamlAttrHash()) ) {s = 13;}

                        else if ( (synpred115_JamlAttrHash()) ) {s = 17;}

                         
                        input.seek(index48_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA48_3 = input.LA(1);

                         
                        int index48_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_JamlAttrHash()) ) {s = 13;}

                        else if ( (synpred115_JamlAttrHash()) ) {s = 17;}

                         
                        input.seek(index48_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA48_4 = input.LA(1);

                         
                        int index48_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_JamlAttrHash()) ) {s = 13;}

                        else if ( (synpred115_JamlAttrHash()) ) {s = 17;}

                         
                        input.seek(index48_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA48_5 = input.LA(1);

                         
                        int index48_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_JamlAttrHash()) ) {s = 13;}

                        else if ( (synpred115_JamlAttrHash()) ) {s = 17;}

                         
                        input.seek(index48_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA48_6 = input.LA(1);

                         
                        int index48_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_JamlAttrHash()) ) {s = 13;}

                        else if ( (synpred115_JamlAttrHash()) ) {s = 17;}

                         
                        input.seek(index48_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA48_7 = input.LA(1);

                         
                        int index48_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_JamlAttrHash()) ) {s = 13;}

                        else if ( (synpred115_JamlAttrHash()) ) {s = 17;}

                         
                        input.seek(index48_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA48_8 = input.LA(1);

                         
                        int index48_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_JamlAttrHash()) ) {s = 13;}

                        else if ( (synpred115_JamlAttrHash()) ) {s = 17;}

                         
                        input.seek(index48_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA48_9 = input.LA(1);

                         
                        int index48_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_JamlAttrHash()) ) {s = 13;}

                        else if ( (synpred115_JamlAttrHash()) ) {s = 17;}

                         
                        input.seek(index48_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA48_10 = input.LA(1);

                         
                        int index48_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_JamlAttrHash()) ) {s = 13;}

                        else if ( (synpred115_JamlAttrHash()) ) {s = 17;}

                         
                        input.seek(index48_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA48_11 = input.LA(1);

                         
                        int index48_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_JamlAttrHash()) ) {s = 13;}

                        else if ( (synpred115_JamlAttrHash()) ) {s = 17;}

                         
                        input.seek(index48_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA48_12 = input.LA(1);

                         
                        int index48_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_JamlAttrHash()) ) {s = 13;}

                        else if ( (synpred115_JamlAttrHash()) ) {s = 17;}

                         
                        input.seek(index48_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 48, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA91_eotS =
        "\22\uffff";
    static final String DFA91_eofS =
        "\22\uffff";
    static final String DFA91_minS =
        "\1\7\14\0\5\uffff";
    static final String DFA91_maxS =
        "\1\u00a4\14\0\5\uffff";
    static final String DFA91_acceptS =
        "\15\uffff\1\1\1\uffff\1\2\2\uffff";
    static final String DFA91_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\5\uffff}>";
    static final String[] DFA91_transitionS = {
            "\1\14\55\uffff\1\5\1\uffff\1\15\1\uffff\1\15\2\uffff\1\15\1"+
            "\17\3\uffff\1\15\1\uffff\1\17\2\uffff\1\13\1\uffff\1\15\4\uffff"+
            "\1\17\1\uffff\2\15\1\6\3\uffff\1\3\1\2\1\1\1\uffff\1\15\1\4"+
            "\1\12\2\uffff\1\7\3\uffff\1\10\3\uffff\1\11\75\uffff\1\15",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA91_eot = DFA.unpackEncodedString(DFA91_eotS);
    static final short[] DFA91_eof = DFA.unpackEncodedString(DFA91_eofS);
    static final char[] DFA91_min = DFA.unpackEncodedStringToUnsignedChars(DFA91_minS);
    static final char[] DFA91_max = DFA.unpackEncodedStringToUnsignedChars(DFA91_maxS);
    static final short[] DFA91_accept = DFA.unpackEncodedString(DFA91_acceptS);
    static final short[] DFA91_special = DFA.unpackEncodedString(DFA91_specialS);
    static final short[][] DFA91_transition;

    static {
        int numStates = DFA91_transitionS.length;
        DFA91_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA91_transition[i] = DFA.unpackEncodedString(DFA91_transitionS[i]);
        }
    }

    class DFA91 extends DFA {

        public DFA91(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 91;
            this.eot = DFA91_eot;
            this.eof = DFA91_eof;
            this.min = DFA91_min;
            this.max = DFA91_max;
            this.accept = DFA91_accept;
            this.special = DFA91_special;
            this.transition = DFA91_transition;
        }
        public String getDescription() {
            return "762:1: annotationScopeDeclarations : ( modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA91_1 = input.LA(1);

                         
                        int index91_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JamlAttrHash()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index91_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA91_2 = input.LA(1);

                         
                        int index91_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JamlAttrHash()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index91_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA91_3 = input.LA(1);

                         
                        int index91_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JamlAttrHash()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index91_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA91_4 = input.LA(1);

                         
                        int index91_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JamlAttrHash()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index91_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA91_5 = input.LA(1);

                         
                        int index91_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JamlAttrHash()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index91_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA91_6 = input.LA(1);

                         
                        int index91_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JamlAttrHash()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index91_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA91_7 = input.LA(1);

                         
                        int index91_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JamlAttrHash()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index91_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA91_8 = input.LA(1);

                         
                        int index91_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JamlAttrHash()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index91_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA91_9 = input.LA(1);

                         
                        int index91_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JamlAttrHash()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index91_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA91_10 = input.LA(1);

                         
                        int index91_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JamlAttrHash()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index91_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA91_11 = input.LA(1);

                         
                        int index91_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JamlAttrHash()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index91_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA91_12 = input.LA(1);

                         
                        int index91_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JamlAttrHash()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index91_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 91, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA93_eotS =
        "\61\uffff";
    static final String DFA93_eofS =
        "\61\uffff";
    static final String DFA93_minS =
        "\1\7\4\0\6\uffff\1\0\45\uffff";
    static final String DFA93_maxS =
        "\1\u00aa\4\0\6\uffff\1\0\45\uffff";
    static final String DFA93_acceptS =
        "\5\uffff\1\2\14\uffff\1\3\35\uffff\1\1";
    static final String DFA93_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\6\uffff\1\4\45\uffff}>";
    static final String[] DFA93_transitionS = {
            "\1\2\4\uffff\1\22\10\uffff\1\22\1\uffff\1\22\1\uffff\1\22\1"+
            "\uffff\1\22\1\uffff\2\22\3\uffff\1\22\3\uffff\1\22\5\uffff\1"+
            "\22\10\uffff\1\5\1\22\1\3\1\22\1\3\2\uffff\1\3\1\5\1\22\1\uffff"+
            "\1\22\1\3\1\uffff\1\5\1\uffff\1\22\1\1\1\uffff\1\3\2\22\2\uffff"+
            "\1\5\1\uffff\2\3\1\5\2\22\1\uffff\3\5\1\22\1\3\2\5\2\22\1\13"+
            "\2\22\1\uffff\1\5\3\22\1\5\1\22\74\uffff\1\4\6\22",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA93_eot = DFA.unpackEncodedString(DFA93_eotS);
    static final short[] DFA93_eof = DFA.unpackEncodedString(DFA93_eofS);
    static final char[] DFA93_min = DFA.unpackEncodedStringToUnsignedChars(DFA93_minS);
    static final char[] DFA93_max = DFA.unpackEncodedStringToUnsignedChars(DFA93_maxS);
    static final short[] DFA93_accept = DFA.unpackEncodedString(DFA93_acceptS);
    static final short[] DFA93_special = DFA.unpackEncodedString(DFA93_specialS);
    static final short[][] DFA93_transition;

    static {
        int numStates = DFA93_transitionS.length;
        DFA93_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA93_transition[i] = DFA.unpackEncodedString(DFA93_transitionS[i]);
        }
    }

    class DFA93 extends DFA {

        public DFA93(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 93;
            this.eot = DFA93_eot;
            this.eof = DFA93_eof;
            this.min = DFA93_min;
            this.max = DFA93_max;
            this.accept = DFA93_accept;
            this.special = DFA93_special;
            this.transition = DFA93_transition;
        }
        public String getDescription() {
            return "783:1: blockStatement : ( localVariableDeclaration SEMI | typeDeclaration | statement );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA93_1 = input.LA(1);

                         
                        int index93_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JamlAttrHash()) ) {s = 48;}

                        else if ( (synpred180_JamlAttrHash()) ) {s = 5;}

                         
                        input.seek(index93_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA93_2 = input.LA(1);

                         
                        int index93_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JamlAttrHash()) ) {s = 48;}

                        else if ( (synpred180_JamlAttrHash()) ) {s = 5;}

                         
                        input.seek(index93_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA93_3 = input.LA(1);

                         
                        int index93_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JamlAttrHash()) ) {s = 48;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index93_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA93_4 = input.LA(1);

                         
                        int index93_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JamlAttrHash()) ) {s = 48;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index93_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA93_11 = input.LA(1);

                         
                        int index93_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_JamlAttrHash()) ) {s = 5;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index93_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 93, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA102_eotS =
        "\22\uffff";
    static final String DFA102_eofS =
        "\22\uffff";
    static final String DFA102_minS =
        "\1\14\15\uffff\1\4\3\uffff";
    static final String DFA102_maxS =
        "\1\u00aa\15\uffff\1\114\3\uffff";
    static final String DFA102_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15\1\uffff\1\17\1\20\1\16";
    static final String DFA102_specialS =
        "\22\uffff}>";
    static final String[] DFA102_transitionS = {
            "\1\17\10\uffff\1\17\1\uffff\1\1\1\uffff\1\17\1\uffff\1\17\1"+
            "\uffff\2\17\3\uffff\1\17\3\uffff\1\17\5\uffff\1\20\11\uffff"+
            "\1\2\1\17\1\14\1\17\2\uffff\1\17\1\uffff\1\15\1\uffff\1\6\1"+
            "\17\3\uffff\1\17\2\uffff\1\17\1\4\1\3\4\uffff\2\17\1\uffff\2"+
            "\17\4\uffff\1\12\1\17\2\uffff\1\17\1\10\1\11\1\17\1\13\2\uffff"+
            "\1\17\1\7\1\17\1\uffff\1\5\74\uffff\1\16\6\17",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\3\17\1\uffff\2\17\1\21\1\uffff\4\17\2\uffff\5\17\1\uffff\3"+
            "\17\1\uffff\6\17\1\uffff\6\17\3\uffff\11\17\27\uffff\1\17",
            "",
            "",
            ""
    };

    static final short[] DFA102_eot = DFA.unpackEncodedString(DFA102_eotS);
    static final short[] DFA102_eof = DFA.unpackEncodedString(DFA102_eofS);
    static final char[] DFA102_min = DFA.unpackEncodedStringToUnsignedChars(DFA102_minS);
    static final char[] DFA102_max = DFA.unpackEncodedStringToUnsignedChars(DFA102_maxS);
    static final short[] DFA102_accept = DFA.unpackEncodedString(DFA102_acceptS);
    static final short[] DFA102_special = DFA.unpackEncodedString(DFA102_specialS);
    static final short[][] DFA102_transition;

    static {
        int numStates = DFA102_transitionS.length;
        DFA102_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA102_transition[i] = DFA.unpackEncodedString(DFA102_transitionS[i]);
        }
    }

    class DFA102 extends DFA {

        public DFA102(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 102;
            this.eot = DFA102_eot;
            this.eof = DFA102_eof;
            this.min = DFA102_min;
            this.max = DFA102_max;
            this.accept = DFA102_accept;
            this.special = DFA102_special;
            this.transition = DFA102_transition;
        }
        public String getDescription() {
            return "795:1: statement : ( block | ASSERT expr1= expression ( COLON expr2= expression SEMI -> ^( ASSERT $expr1 $expr2) | SEMI -> ^( ASSERT $expr1) ) | IF parenthesizedExpression ifStat= statement ( ELSE elseStat= statement -> ^( IF parenthesizedExpression $ifStat $elseStat) | -> ^( IF parenthesizedExpression $ifStat) ) | FOR LPAREN ( forInit SEMI forCondition SEMI forUpdater RPAREN statement -> ^( FOR forInit forCondition forUpdater statement ) | localModifierList type IDENT COLON expression RPAREN statement -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement ) ) | WHILE parenthesizedExpression statement -> ^( WHILE parenthesizedExpression statement ) | DO statement WHILE parenthesizedExpression SEMI -> ^( DO statement parenthesizedExpression ) | TRY block ( catches ( finallyClause )? | finallyClause ) -> ^( TRY block ( catches )? ( finallyClause )? ) | SWITCH parenthesizedExpression LCURLY switchBlockLabels RCURLY -> ^( SWITCH parenthesizedExpression switchBlockLabels ) | SYNCHRONIZED parenthesizedExpression block -> ^( SYNCHRONIZED parenthesizedExpression block ) | RETURN ( expression )? SEMI -> ^( RETURN ( expression )? ) | THROW expression SEMI -> ^( THROW expression ) | BREAK ( IDENT )? SEMI -> ^( BREAK ( IDENT )? ) | CONTINUE ( IDENT )? SEMI -> ^( CONTINUE ( IDENT )? ) | IDENT COLON statement -> ^( LABELED_STATEMENT IDENT statement ) | expression SEMI | SEMI );";
        }
    }
    static final String DFA96_eotS =
        "\30\uffff";
    static final String DFA96_eofS =
        "\30\uffff";
    static final String DFA96_minS =
        "\1\7\4\0\23\uffff";
    static final String DFA96_maxS =
        "\1\u00aa\4\0\23\uffff";
    static final String DFA96_acceptS =
        "\5\uffff\1\1\21\uffff\1\2";
    static final String DFA96_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\23\uffff}>";
    static final String[] DFA96_transitionS = {
            "\1\2\4\uffff\1\5\10\uffff\1\5\3\uffff\1\5\1\uffff\1\5\1\uffff"+
            "\2\5\3\uffff\1\5\3\uffff\1\5\5\uffff\1\5\12\uffff\1\3\1\uffff"+
            "\1\3\2\uffff\1\3\4\uffff\1\3\3\uffff\1\5\1\1\1\uffff\1\3\6\uffff"+
            "\2\3\1\uffff\2\5\5\uffff\1\3\2\uffff\1\5\2\uffff\1\5\3\uffff"+
            "\1\5\1\uffff\1\5\76\uffff\1\4\6\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA96_eot = DFA.unpackEncodedString(DFA96_eotS);
    static final short[] DFA96_eof = DFA.unpackEncodedString(DFA96_eofS);
    static final char[] DFA96_min = DFA.unpackEncodedStringToUnsignedChars(DFA96_minS);
    static final char[] DFA96_max = DFA.unpackEncodedStringToUnsignedChars(DFA96_maxS);
    static final short[] DFA96_accept = DFA.unpackEncodedString(DFA96_acceptS);
    static final short[] DFA96_special = DFA.unpackEncodedString(DFA96_specialS);
    static final short[][] DFA96_transition;

    static {
        int numStates = DFA96_transitionS.length;
        DFA96_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA96_transition[i] = DFA.unpackEncodedString(DFA96_transitionS[i]);
        }
    }

    class DFA96 extends DFA {

        public DFA96(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 96;
            this.eot = DFA96_eot;
            this.eof = DFA96_eof;
            this.min = DFA96_min;
            this.max = DFA96_max;
            this.accept = DFA96_accept;
            this.special = DFA96_special;
            this.transition = DFA96_transition;
        }
        public String getDescription() {
            return "806:9: ( forInit SEMI forCondition SEMI forUpdater RPAREN statement -> ^( FOR forInit forCondition forUpdater statement ) | localModifierList type IDENT COLON expression RPAREN statement -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA96_1 = input.LA(1);

                         
                        int index96_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred186_JamlAttrHash()) ) {s = 5;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index96_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA96_2 = input.LA(1);

                         
                        int index96_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred186_JamlAttrHash()) ) {s = 5;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index96_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA96_3 = input.LA(1);

                         
                        int index96_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred186_JamlAttrHash()) ) {s = 5;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index96_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA96_4 = input.LA(1);

                         
                        int index96_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred186_JamlAttrHash()) ) {s = 5;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index96_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 96, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA108_eotS =
        "\27\uffff";
    static final String DFA108_eofS =
        "\27\uffff";
    static final String DFA108_minS =
        "\1\7\2\uffff\2\0\22\uffff";
    static final String DFA108_maxS =
        "\1\u00aa\2\uffff\2\0\22\uffff";
    static final String DFA108_acceptS =
        "\1\uffff\1\1\3\uffff\1\2\20\uffff\1\3";
    static final String DFA108_specialS =
        "\3\uffff\1\0\1\1\22\uffff}>";
    static final String[] DFA108_transitionS = {
            "\1\1\4\uffff\1\5\10\uffff\1\5\3\uffff\1\5\1\uffff\1\5\1\uffff"+
            "\2\5\3\uffff\1\5\3\uffff\1\5\5\uffff\1\26\12\uffff\1\3\1\uffff"+
            "\1\3\2\uffff\1\3\4\uffff\1\3\3\uffff\1\5\1\1\1\uffff\1\3\6\uffff"+
            "\2\3\1\uffff\2\5\5\uffff\1\3\2\uffff\1\5\2\uffff\1\5\3\uffff"+
            "\1\5\1\uffff\1\5\76\uffff\1\4\6\5",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA108_eot = DFA.unpackEncodedString(DFA108_eotS);
    static final short[] DFA108_eof = DFA.unpackEncodedString(DFA108_eofS);
    static final char[] DFA108_min = DFA.unpackEncodedStringToUnsignedChars(DFA108_minS);
    static final char[] DFA108_max = DFA.unpackEncodedStringToUnsignedChars(DFA108_maxS);
    static final short[] DFA108_accept = DFA.unpackEncodedString(DFA108_acceptS);
    static final short[] DFA108_special = DFA.unpackEncodedString(DFA108_specialS);
    static final short[][] DFA108_transition;

    static {
        int numStates = DFA108_transitionS.length;
        DFA108_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA108_transition[i] = DFA.unpackEncodedString(DFA108_transitionS[i]);
        }
    }

    class DFA108 extends DFA {

        public DFA108(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 108;
            this.eot = DFA108_eot;
            this.eof = DFA108_eof;
            this.min = DFA108_min;
            this.max = DFA108_max;
            this.accept = DFA108_accept;
            this.special = DFA108_special;
            this.transition = DFA108_transition;
        }
        public String getDescription() {
            return "855:1: forInit : ( localVariableDeclaration -> ^( FOR_INIT localVariableDeclaration ) | expressionList -> ^( FOR_INIT expressionList ) | -> ^( FOR_INIT ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA108_3 = input.LA(1);

                         
                        int index108_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred209_JamlAttrHash()) ) {s = 1;}

                        else if ( (synpred210_JamlAttrHash()) ) {s = 5;}

                         
                        input.seek(index108_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA108_4 = input.LA(1);

                         
                        int index108_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred209_JamlAttrHash()) ) {s = 1;}

                        else if ( (synpred210_JamlAttrHash()) ) {s = 5;}

                         
                        input.seek(index108_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 108, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA132_eotS =
        "\21\uffff";
    static final String DFA132_eofS =
        "\21\uffff";
    static final String DFA132_minS =
        "\1\31\2\uffff\1\0\15\uffff";
    static final String DFA132_maxS =
        "\1\u00aa\2\uffff\1\0\15\uffff";
    static final String DFA132_acceptS =
        "\1\uffff\1\1\1\2\1\uffff\1\4\13\uffff\1\3";
    static final String DFA132_specialS =
        "\3\uffff\1\0\15\uffff}>";
    static final String[] DFA132_transitionS = {
            "\1\4\1\uffff\1\2\1\uffff\1\3\4\uffff\1\1\24\uffff\1\4\1\uffff"+
            "\1\4\2\uffff\1\4\4\uffff\1\4\3\uffff\1\4\2\uffff\1\4\6\uffff"+
            "\2\4\1\uffff\2\4\5\uffff\1\4\2\uffff\1\4\2\uffff\1\4\3\uffff"+
            "\1\4\1\uffff\1\4\76\uffff\7\4",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA132_eot = DFA.unpackEncodedString(DFA132_eotS);
    static final short[] DFA132_eof = DFA.unpackEncodedString(DFA132_eofS);
    static final char[] DFA132_min = DFA.unpackEncodedStringToUnsignedChars(DFA132_minS);
    static final char[] DFA132_max = DFA.unpackEncodedStringToUnsignedChars(DFA132_maxS);
    static final short[] DFA132_accept = DFA.unpackEncodedString(DFA132_acceptS);
    static final short[] DFA132_special = DFA.unpackEncodedString(DFA132_specialS);
    static final short[][] DFA132_transition;

    static {
        int numStates = DFA132_transitionS.length;
        DFA132_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA132_transition[i] = DFA.unpackEncodedString(DFA132_transitionS[i]);
        }
    }

    class DFA132 extends DFA {

        public DFA132(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 132;
            this.eot = DFA132_eot;
            this.eof = DFA132_eof;
            this.min = DFA132_min;
            this.max = DFA132_max;
            this.accept = DFA132_accept;
            this.special = DFA132_special;
            this.transition = DFA132_transition;
        }
        public String getDescription() {
            return "990:1: unaryExpressionNotPlusMinus : ( NOT unaryExpression -> ^( NOT unaryExpression ) | LOGICAL_NOT unaryExpression -> ^( LOGICAL_NOT unaryExpression ) | LPAREN type RPAREN unaryExpression -> ^( CAST_EXPR[$LPAREN, \"CAST_EXPR\"] type unaryExpression ) | postfixedExpression );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA132_3 = input.LA(1);

                         
                        int index132_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_JamlAttrHash()) ) {s = 16;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index132_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 132, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA144_eotS =
        "\14\uffff";
    static final String DFA144_eofS =
        "\14\uffff";
    static final String DFA144_minS =
        "\1\31\6\uffff\1\17\4\uffff";
    static final String DFA144_maxS =
        "\1\u00aa\6\uffff\1\35\4\uffff";
    static final String DFA144_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\uffff\1\11\1\12\1\10\1\7";
    static final String DFA144_specialS =
        "\14\uffff}>";
    static final String[] DFA144_transitionS = {
            "\1\5\3\uffff\1\1\31\uffff\1\10\1\uffff\1\10\2\uffff\1\10\4\uffff"+
            "\1\10\3\uffff\1\2\2\uffff\1\10\6\uffff\2\10\1\uffff\1\3\1\2"+
            "\5\uffff\1\10\2\uffff\1\7\2\uffff\1\6\3\uffff\1\2\1\uffff\1"+
            "\11\76\uffff\1\4\6\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\12\15\uffff\1\13",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA144_eot = DFA.unpackEncodedString(DFA144_eotS);
    static final short[] DFA144_eof = DFA.unpackEncodedString(DFA144_eofS);
    static final char[] DFA144_min = DFA.unpackEncodedStringToUnsignedChars(DFA144_minS);
    static final char[] DFA144_max = DFA.unpackEncodedStringToUnsignedChars(DFA144_maxS);
    static final short[] DFA144_accept = DFA.unpackEncodedString(DFA144_acceptS);
    static final short[] DFA144_special = DFA.unpackEncodedString(DFA144_specialS);
    static final short[][] DFA144_transition;

    static {
        int numStates = DFA144_transitionS.length;
        DFA144_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA144_transition[i] = DFA.unpackEncodedString(DFA144_transitionS[i]);
        }
    }

    class DFA144 extends DFA {

        public DFA144(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 144;
            this.eot = DFA144_eot;
            this.eof = DFA144_eof;
            this.min = DFA144_min;
            this.max = DFA144_max;
            this.accept = DFA144_accept;
            this.special = DFA144_special;
            this.transition = DFA144_transition;
        }
        public String getDescription() {
            return "1025:1: primaryExpression : ( parenthesizedExpression | literal | newExpression | qualifiedIdentExpression | genericTypeArgumentListSimplified ( SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) ) | IDENT arguments -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments ) | THIS arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) ) | ( THIS -> THIS ) ( arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments ) )? | SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] arguments ) | ( SUPER DOT IDENT ) ( arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) ) | ( primitiveType -> primitiveType ) ( arrayDeclarator -> ^( arrayDeclarator $primaryExpression) )* DOT CLASS -> ^( DOT $primaryExpression CLASS ) | VOID DOT CLASS -> ^( DOT VOID CLASS ) );";
        }
    }
    static final String DFA148_eotS =
        "\60\uffff";
    static final String DFA148_eofS =
        "\1\4\57\uffff";
    static final String DFA148_minS =
        "\1\4\1\0\1\uffff\1\0\54\uffff";
    static final String DFA148_maxS =
        "\1\114\1\0\1\uffff\1\0\54\uffff";
    static final String DFA148_acceptS =
        "\2\uffff\1\2\1\uffff\1\4\51\uffff\1\1\1\3";
    static final String DFA148_specialS =
        "\1\uffff\1\0\1\uffff\1\1\54\uffff}>";
    static final String[] DFA148_transitionS = {
            "\3\4\1\uffff\7\4\1\3\2\uffff\4\4\1\1\1\uffff\3\4\1\uffff\1\4"+
            "\1\2\4\4\1\uffff\22\4\27\uffff\1\4",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA148_eot = DFA.unpackEncodedString(DFA148_eotS);
    static final short[] DFA148_eof = DFA.unpackEncodedString(DFA148_eofS);
    static final char[] DFA148_min = DFA.unpackEncodedStringToUnsignedChars(DFA148_minS);
    static final char[] DFA148_max = DFA.unpackEncodedStringToUnsignedChars(DFA148_maxS);
    static final short[] DFA148_accept = DFA.unpackEncodedString(DFA148_acceptS);
    static final short[] DFA148_special = DFA.unpackEncodedString(DFA148_specialS);
    static final short[][] DFA148_transition;

    static {
        int numStates = DFA148_transitionS.length;
        DFA148_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA148_transition[i] = DFA.unpackEncodedString(DFA148_transitionS[i]);
        }
    }

    class DFA148 extends DFA {

        public DFA148(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 148;
            this.eot = DFA148_eot;
            this.eof = DFA148_eof;
            this.min = DFA148_min;
            this.max = DFA148_max;
            this.accept = DFA148_accept;
            this.special = DFA148_special;
            this.transition = DFA148_transition;
        }
        public String getDescription() {
            return "1061:9: ( ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) ) | arguments -> ^( METHOD_CALL qualifiedIdentifier arguments ) | outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA148_1 = input.LA(1);

                         
                        int index148_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_JamlAttrHash()) ) {s = 46;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index148_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA148_3 = input.LA(1);

                         
                        int index148_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_JamlAttrHash()) ) {s = 47;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index148_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 148, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA155_eotS =
        "\56\uffff";
    static final String DFA155_eofS =
        "\1\2\55\uffff";
    static final String DFA155_minS =
        "\1\4\1\0\54\uffff";
    static final String DFA155_maxS =
        "\1\114\1\0\54\uffff";
    static final String DFA155_acceptS =
        "\2\uffff\1\2\52\uffff\1\1";
    static final String DFA155_specialS =
        "\1\uffff\1\0\54\uffff}>";
    static final String[] DFA155_transitionS = {
            "\3\2\1\uffff\10\2\2\uffff\4\2\1\1\1\uffff\3\2\1\uffff\1\2\1"+
            "\uffff\4\2\1\uffff\22\2\27\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA155_eot = DFA.unpackEncodedString(DFA155_eotS);
    static final short[] DFA155_eof = DFA.unpackEncodedString(DFA155_eofS);
    static final char[] DFA155_min = DFA.unpackEncodedStringToUnsignedChars(DFA155_minS);
    static final char[] DFA155_max = DFA.unpackEncodedStringToUnsignedChars(DFA155_maxS);
    static final short[] DFA155_accept = DFA.unpackEncodedString(DFA155_acceptS);
    static final short[] DFA155_special = DFA.unpackEncodedString(DFA155_specialS);
    static final short[][] DFA155_transition;

    static {
        int numStates = DFA155_transitionS.length;
        DFA155_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA155_transition[i] = DFA.unpackEncodedString(DFA155_transitionS[i]);
        }
    }

    class DFA155 extends DFA {

        public DFA155(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 155;
            this.eot = DFA155_eot;
            this.eof = DFA155_eof;
            this.min = DFA155_min;
            this.max = DFA155_max;
            this.accept = DFA155_accept;
            this.special = DFA155_special;
            this.transition = DFA155_transition;
        }
        public String getDescription() {
            return "()* loopback of 1100:36: ( LBRACK expression RBRACK )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA155_1 = input.LA(1);

                         
                        int index155_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_JamlAttrHash()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index155_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 155, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_attrMapping_in_attrMappings4526 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_attrMappings4537 = new BitSet(new long[]{0x0000000000000400L,0x0000000800080020L,0x000007E000000000L});
    public static final BitSet FOLLOW_attrMapping_in_attrMappings4541 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_attribute_in_attrMapping4561 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_ASSIGN_in_attrMapping4568 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_GREATER_THAN_in_attrMapping4570 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_attributeValue_in_attrMapping4575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_attribute4589 = new BitSet(new long[]{0xFFE0000000000000L,0x000000FFFFFFFFFFL,0x0000001000000000L});
    public static final BitSet FOLLOW_keyword_in_attribute4592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_attribute4598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_attribute4605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_attributeValue4634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_attributeValue4641 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_literal4662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLOATING_POINT_LITERAL_in_literal4678 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARACTER_LITERAL_in_literal4688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_literal4698 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_literal4708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_keyword0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compilationUnit_in_javaSource5355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationList_in_compilationUnit5391 = new BitSet(new long[]{0x2020100000000082L,0x000000444CF26048L});
    public static final BitSet FOLLOW_packageDeclaration_in_compilationUnit5402 = new BitSet(new long[]{0x2020100000000082L,0x000000444CE26048L});
    public static final BitSet FOLLOW_importDeclaration_in_compilationUnit5414 = new BitSet(new long[]{0x2020100000000082L,0x000000444CE26048L});
    public static final BitSet FOLLOW_typeDecls_in_compilationUnit5426 = new BitSet(new long[]{0x2020100000000082L,0x000000444CE22048L});
    public static final BitSet FOLLOW_typeDeclaration_in_typeDecls5446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_typeDecls5456 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PACKAGE_in_packageDeclaration5476 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_qualifiedIdentifier_in_packageDeclaration5479 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_packageDeclaration5481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_importDeclaration5507 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_STATIC_in_importDeclaration5510 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_qualifiedIdentifier_in_importDeclaration5513 = new BitSet(new long[]{0x0000100000010000L});
    public static final BitSet FOLLOW_DOTSTAR_in_importDeclaration5515 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_importDeclaration5518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifierList_in_typeDeclaration5542 = new BitSet(new long[]{0x2020000000000080L,0x000000444CE22048L});
    public static final BitSet FOLLOW_classTypeDeclaration_in_typeDeclaration5557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceTypeDeclaration_in_typeDeclaration5572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumTypeDeclaration_in_typeDeclaration5587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeDeclaration_in_typeDeclaration5602 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CLASS_in_classTypeDeclaration5637 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_classTypeDeclaration5639 = new BitSet(new long[]{0x0000000002800000L,0x0000000000000810L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_classTypeDeclaration5641 = new BitSet(new long[]{0x0000000002800000L,0x0000000000000810L});
    public static final BitSet FOLLOW_classExtendsClause_in_classTypeDeclaration5644 = new BitSet(new long[]{0x0000000002800000L,0x0000000000000810L});
    public static final BitSet FOLLOW_implementsClause_in_classTypeDeclaration5647 = new BitSet(new long[]{0x0000000002800000L,0x0000000000000810L});
    public static final BitSet FOLLOW_classBody_in_classTypeDeclaration5650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTENDS_in_classExtendsClause5703 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_classExtendsClause5705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTENDS_in_interfaceExtendsClause5749 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_typeList_in_interfaceExtendsClause5751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPLEMENTS_in_implementsClause5795 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_typeList_in_implementsClause5797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_THAN_in_genericTypeParameterList5842 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeParameter_in_genericTypeParameterList5844 = new BitSet(new long[]{0x0000800000100900L});
    public static final BitSet FOLLOW_COMMA_in_genericTypeParameterList5847 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeParameter_in_genericTypeParameterList5849 = new BitSet(new long[]{0x0000800000100900L});
    public static final BitSet FOLLOW_genericTypeListClosing_in_genericTypeParameterList5853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATER_THAN_in_genericTypeListClosing5968 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHIFT_RIGHT_in_genericTypeListClosing5978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BIT_SHIFT_RIGHT_in_genericTypeListClosing5988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_genericTypeParameter6016 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_bound_in_genericTypeParameter6018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTENDS_in_bound6064 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_bound6066 = new BitSet(new long[]{0x0000000000000012L});
    public static final BitSet FOLLOW_AND_in_bound6069 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_bound6071 = new BitSet(new long[]{0x0000000000000012L});
    public static final BitSet FOLLOW_ENUM_in_enumTypeDeclaration6112 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_enumTypeDeclaration6114 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000800L});
    public static final BitSet FOLLOW_implementsClause_in_enumTypeDeclaration6116 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000800L});
    public static final BitSet FOLLOW_enumBody_in_enumTypeDeclaration6119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_enumBody6166 = new BitSet(new long[]{0x0020000000000080L,0x000000444CE20040L,0x0000001000000000L});
    public static final BitSet FOLLOW_enumScopeDeclarations_in_enumBody6168 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_RCURLY_in_enumBody6170 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumConstants_in_enumScopeDeclarations6207 = new BitSet(new long[]{0x0000100000000802L});
    public static final BitSet FOLLOW_COMMA_in_enumScopeDeclarations6210 = new BitSet(new long[]{0x0000100000000002L});
    public static final BitSet FOLLOW_enumClassScopeDeclarations_in_enumScopeDeclarations6215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_enumClassScopeDeclarations6235 = new BitSet(new long[]{0x32A0100002800082L,0x000000644EE3A14AL,0x0000001000000000L});
    public static final BitSet FOLLOW_classScopeDeclarations_in_enumClassScopeDeclarations6237 = new BitSet(new long[]{0x32A0100002800082L,0x000000644EE3A14AL,0x0000001000000000L});
    public static final BitSet FOLLOW_enumConstant_in_enumConstants6276 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_enumConstants6279 = new BitSet(new long[]{0x0020000000000080L,0x000000444CE20040L,0x0000001000000000L});
    public static final BitSet FOLLOW_enumConstant_in_enumConstants6282 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_annotationList_in_enumConstant6307 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_enumConstant6309 = new BitSet(new long[]{0x0000000022800002L,0x0000000000000810L});
    public static final BitSet FOLLOW_arguments_in_enumConstant6312 = new BitSet(new long[]{0x0000000002800002L,0x0000000000000810L});
    public static final BitSet FOLLOW_classBody_in_enumConstant6315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERFACE_in_interfaceTypeDeclaration6340 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_interfaceTypeDeclaration6342 = new BitSet(new long[]{0x0000000002800000L,0x0000000000000010L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_interfaceTypeDeclaration6344 = new BitSet(new long[]{0x0000000002800000L,0x0000000000000010L});
    public static final BitSet FOLLOW_interfaceExtendsClause_in_interfaceTypeDeclaration6347 = new BitSet(new long[]{0x0000000002800000L,0x0000000000000010L});
    public static final BitSet FOLLOW_interfaceBody_in_interfaceTypeDeclaration6350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeList6400 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_typeList6403 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_typeList6406 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_LCURLY_in_classBody6431 = new BitSet(new long[]{0x32A0140002800080L,0x000000644EE3A14AL,0x0000001000000000L});
    public static final BitSet FOLLOW_classScopeDeclarations_in_classBody6433 = new BitSet(new long[]{0x32A0140002800080L,0x000000644EE3A14AL,0x0000001000000000L});
    public static final BitSet FOLLOW_RCURLY_in_classBody6436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_interfaceBody6478 = new BitSet(new long[]{0x32A0140002000080L,0x000000644EE3A14AL,0x0000001000000000L});
    public static final BitSet FOLLOW_interfaceScopeDeclarations_in_interfaceBody6480 = new BitSet(new long[]{0x32A0140002000080L,0x000000644EE3A14AL,0x0000001000000000L});
    public static final BitSet FOLLOW_RCURLY_in_interfaceBody6483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_classScopeDeclarations6521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_in_classScopeDeclarations6550 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_block_in_classScopeDeclarations6552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifierList_in_classScopeDeclarations6575 = new BitSet(new long[]{0x1280000002000000L,0x0000002002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_classScopeDeclarations6589 = new BitSet(new long[]{0x1280000000000000L,0x0000002002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_classScopeDeclarations6608 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_classScopeDeclarations6610 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_classScopeDeclarations6612 = new BitSet(new long[]{0x0000100000C00000L,0x0000000200000000L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_classScopeDeclarations6614 = new BitSet(new long[]{0x0000100000800000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_classScopeDeclarations6617 = new BitSet(new long[]{0x0000100000800000L});
    public static final BitSet FOLLOW_block_in_classScopeDeclarations6621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_classScopeDeclarations6625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_classScopeDeclarations6687 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_classScopeDeclarations6689 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_classScopeDeclarations6691 = new BitSet(new long[]{0x0000100000800000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_classScopeDeclarations6693 = new BitSet(new long[]{0x0000100000800000L});
    public static final BitSet FOLLOW_block_in_classScopeDeclarations6697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_classScopeDeclarations6701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_classScopeDeclarations6760 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_classScopeDeclarations6762 = new BitSet(new long[]{0x0000000000800000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_classScopeDeclarations6764 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_block_in_classScopeDeclarations6767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_classScopeDeclarations6831 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_classFieldDeclaratorList_in_classScopeDeclarations6833 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_classScopeDeclarations6835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_classScopeDeclarations6880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_classScopeDeclarations6890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifierList_in_interfaceScopeDeclarations6922 = new BitSet(new long[]{0x1280000002000000L,0x0000002002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_interfaceScopeDeclarations6936 = new BitSet(new long[]{0x1280000000000000L,0x0000002002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_interfaceScopeDeclarations6955 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_interfaceScopeDeclarations6957 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_interfaceScopeDeclarations6959 = new BitSet(new long[]{0x0000100000400000L,0x0000000200000000L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_interfaceScopeDeclarations6961 = new BitSet(new long[]{0x0000100000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_interfaceScopeDeclarations6964 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_interfaceScopeDeclarations6967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_interfaceScopeDeclarations7025 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_interfaceScopeDeclarations7027 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_interfaceScopeDeclarations7029 = new BitSet(new long[]{0x0000100000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_interfaceScopeDeclarations7031 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_interfaceScopeDeclarations7034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_interfaceScopeDeclarations7097 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_interfaceFieldDeclaratorList_in_interfaceScopeDeclarations7099 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_interfaceScopeDeclarations7101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_interfaceScopeDeclarations7146 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_interfaceScopeDeclarations7156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classFieldDeclarator_in_classFieldDeclaratorList7176 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_classFieldDeclaratorList7179 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_classFieldDeclarator_in_classFieldDeclaratorList7181 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_classFieldDeclarator7220 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_ASSIGN_in_classFieldDeclarator7223 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_variableInitializer_in_classFieldDeclarator7225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceFieldDeclarator_in_interfaceFieldDeclaratorList7270 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_interfaceFieldDeclaratorList7273 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_interfaceFieldDeclarator_in_interfaceFieldDeclaratorList7275 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_interfaceFieldDeclarator7314 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_ASSIGN_in_interfaceFieldDeclarator7316 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_variableInitializer_in_interfaceFieldDeclarator7318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_variableDeclaratorId7360 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_variableDeclaratorId7363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayInitializer_in_variableInitializer7383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_variableInitializer7393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_arrayDeclarator7412 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_RBRACK_in_arrayDeclarator7414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayDeclarator_in_arrayDeclaratorList7448 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_LCURLY_in_arrayInitializer7493 = new BitSet(new long[]{0x128004446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_variableInitializer_in_arrayInitializer7496 = new BitSet(new long[]{0x0000040000000800L});
    public static final BitSet FOLLOW_COMMA_in_arrayInitializer7499 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_variableInitializer_in_arrayInitializer7501 = new BitSet(new long[]{0x0000040000000800L});
    public static final BitSet FOLLOW_COMMA_in_arrayInitializer7505 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_RCURLY_in_arrayInitializer7510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THROWS_in_throwsClause7548 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_qualifiedIdentList_in_throwsClause7550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_modifierList7587 = new BitSet(new long[]{0x0020000000000082L,0x000000444CE20040L});
    public static final BitSet FOLLOW_PUBLIC_in_modifier7628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROTECTED_in_modifier7638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIVATE_in_modifier7648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_in_modifier7658 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ABSTRACT_in_modifier7668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NATIVE_in_modifier7678 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SYNCHRONIZED_in_modifier7688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRANSIENT_in_modifier7698 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOLATILE_in_modifier7708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRICTFP_in_modifier7718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localModifier_in_modifier7728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localModifier_in_localModifierList7747 = new BitSet(new long[]{0x0020000000000082L,0x000000444CE20040L});
    public static final BitSet FOLLOW_FINAL_in_localModifier7788 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_localModifier7798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simpleType_in_type7817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_objectType_in_type7827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitiveType_in_simpleType7847 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_simpleType7849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedTypeIdent_in_objectType7896 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_objectType7898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedTypeIdentSimplified_in_objectTypeSimplified7938 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_objectTypeSimplified7940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeIdent_in_qualifiedTypeIdent7980 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_DOT_in_qualifiedTypeIdent7983 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_typeIdent_in_qualifiedTypeIdent7985 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_typeIdentSimplified_in_qualifiedTypeIdentSimplified8025 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_DOT_in_qualifiedTypeIdentSimplified8028 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_typeIdentSimplified_in_qualifiedTypeIdentSimplified8030 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_IDENT_in_typeIdent8070 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_genericTypeArgumentList_in_typeIdent8073 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_typeIdentSimplified8093 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_genericTypeArgumentListSimplified_in_typeIdentSimplified8096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_primitiveType0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_THAN_in_genericTypeArgumentList8205 = new BitSet(new long[]{0x1280010000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeArgument_in_genericTypeArgumentList8207 = new BitSet(new long[]{0x0000800000100900L});
    public static final BitSet FOLLOW_COMMA_in_genericTypeArgumentList8210 = new BitSet(new long[]{0x1280010000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeArgument_in_genericTypeArgumentList8212 = new BitSet(new long[]{0x0000800000100900L});
    public static final BitSet FOLLOW_genericTypeListClosing_in_genericTypeArgumentList8216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_genericTypeArgument8254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_genericTypeArgument8264 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000010L});
    public static final BitSet FOLLOW_genericWildcardBoundType_in_genericTypeArgument8266 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_genericWildcardBoundType8308 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_genericWildcardBoundType8317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_THAN_in_genericTypeArgumentListSimplified8336 = new BitSet(new long[]{0x1280010000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeArgumentSimplified_in_genericTypeArgumentListSimplified8338 = new BitSet(new long[]{0x0000800000100900L});
    public static final BitSet FOLLOW_COMMA_in_genericTypeArgumentListSimplified8341 = new BitSet(new long[]{0x1280010000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeArgumentSimplified_in_genericTypeArgumentListSimplified8343 = new BitSet(new long[]{0x0000800000100900L});
    public static final BitSet FOLLOW_genericTypeListClosing_in_genericTypeArgumentListSimplified8347 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_genericTypeArgumentSimplified8389 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_genericTypeArgumentSimplified8399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedIdentifier_in_qualifiedIdentList8422 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_qualifiedIdentList8425 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_qualifiedIdentifier_in_qualifiedIdentList8428 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_LPAREN_in_formalParameterList8453 = new BitSet(new long[]{0x12A0080000000080L,0x000000444EE38142L,0x0000001000000000L});
    public static final BitSet FOLLOW_formalParameterStandardDecl_in_formalParameterList8481 = new BitSet(new long[]{0x0000080000000800L});
    public static final BitSet FOLLOW_COMMA_in_formalParameterList8484 = new BitSet(new long[]{0x12A0000000000080L,0x000000444EE38142L,0x0000001000000000L});
    public static final BitSet FOLLOW_formalParameterStandardDecl_in_formalParameterList8486 = new BitSet(new long[]{0x0000080000000800L});
    public static final BitSet FOLLOW_COMMA_in_formalParameterList8491 = new BitSet(new long[]{0x12A0000000000080L,0x000000444EE38142L,0x0000001000000000L});
    public static final BitSet FOLLOW_formalParameterVarArgDecl_in_formalParameterList8493 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_formalParameterVarArgDecl_in_formalParameterList8550 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_formalParameterList8627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localModifierList_in_formalParameterStandardDecl8650 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_formalParameterStandardDecl8652 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameterStandardDecl8654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localModifierList_in_formalParameterVarArgDecl8698 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_formalParameterVarArgDecl8700 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_ELLIPSIS_in_formalParameterVarArgDecl8702 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameterVarArgDecl8704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_qualifiedIdentifier8752 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_DOT_in_qualifiedIdentifier8795 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_qualifiedIdentifier8799 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_annotation_in_annotationList8852 = new BitSet(new long[]{0x0020000000000082L,0x000000444CE20040L});
    public static final BitSet FOLLOW_AT_in_annotation8890 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_qualifiedIdentifier_in_annotation8893 = new BitSet(new long[]{0x0000000020000002L});
    public static final BitSet FOLLOW_annotationInit_in_annotation8895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_annotationInit8919 = new BitSet(new long[]{0x12A000446AA01480L,0x0000006CDEEF8162L,0x000007F000000000L});
    public static final BitSet FOLLOW_annotationInitializers_in_annotationInit8921 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationInit8923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationInitializer_in_annotationInitializers8960 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_annotationInitializers8963 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_annotationInitializer_in_annotationInitializers8965 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_annotationElementValue_in_annotationInitializers8995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_annotationInitializer9036 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_ASSIGN_in_annotationInitializer9039 = new BitSet(new long[]{0x12A000446AA01480L,0x0000006CDEEF8162L,0x000007F000000000L});
    public static final BitSet FOLLOW_annotationElementValue_in_annotationInitializer9042 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationElementValueExpression_in_annotationElementValue9065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_annotationElementValue9075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationElementValueArrayInitializer_in_annotationElementValue9085 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_annotationElementValueExpression9108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_annotationElementValueArrayInitializer9148 = new BitSet(new long[]{0x12A004446AA01C80L,0x0000006CDEEF8162L,0x000007F000000000L});
    public static final BitSet FOLLOW_annotationElementValue_in_annotationElementValueArrayInitializer9151 = new BitSet(new long[]{0x0000040000000800L});
    public static final BitSet FOLLOW_COMMA_in_annotationElementValueArrayInitializer9154 = new BitSet(new long[]{0x12A000446AA01480L,0x0000006CDEEF8162L,0x000007F000000000L});
    public static final BitSet FOLLOW_annotationElementValue_in_annotationElementValueArrayInitializer9156 = new BitSet(new long[]{0x0000040000000800L});
    public static final BitSet FOLLOW_COMMA_in_annotationElementValueArrayInitializer9163 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_RCURLY_in_annotationElementValueArrayInitializer9167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_annotationTypeDeclaration9210 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_INTERFACE_in_annotationTypeDeclaration9212 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_annotationTypeDeclaration9214 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_annotationBody_in_annotationTypeDeclaration9216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_annotationBody9259 = new BitSet(new long[]{0x32A0040000000080L,0x000000444EE3A14AL,0x0000001000000000L});
    public static final BitSet FOLLOW_annotationScopeDeclarations_in_annotationBody9261 = new BitSet(new long[]{0x32A0040000000080L,0x000000444EE3A14AL,0x0000001000000000L});
    public static final BitSet FOLLOW_RCURLY_in_annotationBody9264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifierList_in_annotationScopeDeclarations9306 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_annotationScopeDeclarations9308 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_annotationScopeDeclarations9322 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_LPAREN_in_annotationScopeDeclarations9324 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationScopeDeclarations9326 = new BitSet(new long[]{0x8000100000000000L});
    public static final BitSet FOLLOW_annotationDefaultValue_in_annotationScopeDeclarations9328 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_annotationScopeDeclarations9331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classFieldDeclaratorList_in_annotationScopeDeclarations9373 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_annotationScopeDeclarations9375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_annotationScopeDeclarations9420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_annotationDefaultValue9443 = new BitSet(new long[]{0x12A000446AA01480L,0x0000006CDEEF8162L,0x000007F000000000L});
    public static final BitSet FOLLOW_annotationElementValue_in_annotationDefaultValue9446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_block9467 = new BitSet(new long[]{0x73E014446AA01480L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_blockStatement_in_block9469 = new BitSet(new long[]{0x73E014446AA01480L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_RCURLY_in_block9472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_blockStatement9510 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_blockStatement9512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_blockStatement9523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_blockStatement9533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localModifierList_in_localVariableDeclaration9556 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_localVariableDeclaration9558 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_classFieldDeclaratorList_in_localVariableDeclaration9560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_statement9613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSERT_in_statement9623 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_statement9627 = new BitSet(new long[]{0x0000100000000400L});
    public static final BitSet FOLLOW_COLON_in_statement9642 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_statement9646 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement9648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_statement9711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_statement9800 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_parenthesizedExpression_in_statement9802 = new BitSet(new long[]{0x73E010446AA01480L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_statement_in_statement9806 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_ELSE_in_statement9821 = new BitSet(new long[]{0x73E010446AA01480L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_statement_in_statement9825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_statement9991 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_LPAREN_in_statement9993 = new BitSet(new long[]{0x12A010446A201480L,0x0000006CDEEF8162L,0x000007F000000000L});
    public static final BitSet FOLLOW_forInit_in_statement10008 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement10010 = new BitSet(new long[]{0x128010446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_forCondition_in_statement10012 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement10014 = new BitSet(new long[]{0x128008446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_forUpdater_in_statement10016 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_statement10018 = new BitSet(new long[]{0x73E010446AA01480L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_statement_in_statement10020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localModifierList_in_statement10055 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_statement10057 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_statement10059 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_statement10061 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_statement10063 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_statement10065 = new BitSet(new long[]{0x73E010446AA01480L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_statement_in_statement10067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_statement10182 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_parenthesizedExpression_in_statement10184 = new BitSet(new long[]{0x73E010446AA01480L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_statement_in_statement10186 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DO_in_statement10235 = new BitSet(new long[]{0x73E010446AA01480L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_statement_in_statement10237 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_WHILE_in_statement10239 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_parenthesizedExpression_in_statement10241 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement10243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRY_in_statement10284 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_block_in_statement10286 = new BitSet(new long[]{0x0800000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_catches_in_statement10289 = new BitSet(new long[]{0x0800000000000002L,0x0000000000000080L});
    public static final BitSet FOLLOW_finallyClause_in_statement10291 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_finallyClause_in_statement10296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SWITCH_in_statement10339 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_parenthesizedExpression_in_statement10341 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_LCURLY_in_statement10343 = new BitSet(new long[]{0x8400000000000000L});
    public static final BitSet FOLLOW_switchBlockLabels_in_statement10345 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_RCURLY_in_statement10347 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SYNCHRONIZED_in_statement10373 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_parenthesizedExpression_in_statement10375 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_block_in_statement10377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETURN_in_statement10423 = new BitSet(new long[]{0x128010446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_statement10425 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement10428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THROW_in_statement10492 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_statement10494 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement10496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BREAK_in_statement10561 = new BitSet(new long[]{0x0000100000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_statement10563 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement10566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONTINUE_in_statement10636 = new BitSet(new long[]{0x0000100000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_statement10638 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement10641 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_statement10708 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_statement10710 = new BitSet(new long[]{0x73E010446AA01480L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_statement_in_statement10712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_statement10779 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement10781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_statement10792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catchClause_in_catches10831 = new BitSet(new long[]{0x0800000000000002L});
    public static final BitSet FOLLOW_CATCH_in_catchClause10873 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_LPAREN_in_catchClause10876 = new BitSet(new long[]{0x12A0000000000080L,0x000000444EE38142L,0x0000001000000000L});
    public static final BitSet FOLLOW_formalParameterStandardDecl_in_catchClause10879 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_catchClause10881 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_block_in_catchClause10884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FINALLY_in_finallyClause10903 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_block_in_finallyClause10905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchCaseLabels_in_switchBlockLabels10937 = new BitSet(new long[]{0x8400000000000000L});
    public static final BitSet FOLLOW_switchDefaultLabel_in_switchBlockLabels10939 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_switchCaseLabels_in_switchBlockLabels10942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchCaseLabel_in_switchCaseLabels10987 = new BitSet(new long[]{0x0400000000000002L});
    public static final BitSet FOLLOW_CASE_in_switchCaseLabel11015 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_switchCaseLabel11018 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_switchCaseLabel11020 = new BitSet(new long[]{0x73E010446AA01482L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_blockStatement_in_switchCaseLabel11023 = new BitSet(new long[]{0x73E010446AA01482L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_DEFAULT_in_switchDefaultLabel11047 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_switchDefaultLabel11050 = new BitSet(new long[]{0x73E010446AA01482L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_blockStatement_in_switchDefaultLabel11053 = new BitSet(new long[]{0x73E010446AA01482L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_forInit11077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_forInit11099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_forCondition11187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_forUpdater11229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_parenthesizedExpression11269 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_parenthesizedExpression11271 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_parenthesizedExpression11273 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionList11314 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_expressionList11317 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_expressionList11320 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_assignmentExpression_in_expression11341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_assignmentExpression11377 = new BitSet(new long[]{0x001540A280004262L});
    public static final BitSet FOLLOW_ASSIGN_in_assignmentExpression11396 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_PLUS_ASSIGN_in_assignmentExpression11415 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_MINUS_ASSIGN_in_assignmentExpression11434 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_STAR_ASSIGN_in_assignmentExpression11453 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_DIV_ASSIGN_in_assignmentExpression11472 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_AND_ASSIGN_in_assignmentExpression11491 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_OR_ASSIGN_in_assignmentExpression11510 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_XOR_ASSIGN_in_assignmentExpression11529 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_MOD_ASSIGN_in_assignmentExpression11548 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_SHIFT_LEFT_ASSIGN_in_assignmentExpression11567 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_SHIFT_RIGHT_ASSIGN_in_assignmentExpression11586 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_BIT_SHIFT_RIGHT_ASSIGN_in_assignmentExpression11605 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_assignmentExpression_in_assignmentExpression11627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_logicalOrExpression_in_conditionalExpression11652 = new BitSet(new long[]{0x0000010000000002L});
    public static final BitSet FOLLOW_QUESTION_in_conditionalExpression11655 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_assignmentExpression_in_conditionalExpression11658 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_conditionalExpression11660 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_conditionalExpression_in_conditionalExpression11663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_logicalAndExpression_in_logicalOrExpression11684 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_LOGICAL_OR_in_logicalOrExpression11687 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_logicalAndExpression_in_logicalOrExpression11690 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_inclusiveOrExpression_in_logicalAndExpression11711 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_LOGICAL_AND_in_logicalAndExpression11714 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_inclusiveOrExpression_in_logicalAndExpression11717 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression11738 = new BitSet(new long[]{0x0000001000000002L});
    public static final BitSet FOLLOW_OR_in_inclusiveOrExpression11741 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression11744 = new BitSet(new long[]{0x0000001000000002L});
    public static final BitSet FOLLOW_andExpression_in_exclusiveOrExpression11765 = new BitSet(new long[]{0x0008000000000002L});
    public static final BitSet FOLLOW_XOR_in_exclusiveOrExpression11768 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_andExpression_in_exclusiveOrExpression11771 = new BitSet(new long[]{0x0008000000000002L});
    public static final BitSet FOLLOW_equalityExpression_in_andExpression11792 = new BitSet(new long[]{0x0000000000000012L});
    public static final BitSet FOLLOW_AND_in_andExpression11795 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_equalityExpression_in_andExpression11798 = new BitSet(new long[]{0x0000000000000012L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression11819 = new BitSet(new long[]{0x0000000800040002L});
    public static final BitSet FOLLOW_EQUAL_in_equalityExpression11838 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_NOT_EQUAL_in_equalityExpression11857 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression11887 = new BitSet(new long[]{0x0000000800040002L});
    public static final BitSet FOLLOW_relationalExpression_in_instanceOfExpression11917 = new BitSet(new long[]{0x0000000000000002L,0x0000000000001000L});
    public static final BitSet FOLLOW_INSTANCEOF_in_instanceOfExpression11920 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_instanceOfExpression11923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression11944 = new BitSet(new long[]{0x0000000003180002L});
    public static final BitSet FOLLOW_LESS_OR_EQUAL_in_relationalExpression11963 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_GREATER_OR_EQUAL_in_relationalExpression11982 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_LESS_THAN_in_relationalExpression12001 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_GREATER_THAN_in_relationalExpression12020 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression12049 = new BitSet(new long[]{0x0000000003180002L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression12083 = new BitSet(new long[]{0x0000A00000000102L});
    public static final BitSet FOLLOW_BIT_SHIFT_RIGHT_in_shiftExpression12101 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_SHIFT_RIGHT_in_shiftExpression12120 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_SHIFT_LEFT_in_shiftExpression12139 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression12168 = new BitSet(new long[]{0x0000A00000000102L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression12198 = new BitSet(new long[]{0x0000004040000002L});
    public static final BitSet FOLLOW_PLUS_in_additiveExpression12216 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_MINUS_in_additiveExpression12235 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression12264 = new BitSet(new long[]{0x0000004040000002L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression12294 = new BitSet(new long[]{0x0002000100002002L});
    public static final BitSet FOLLOW_STAR_in_multiplicativeExpression12313 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_DIV_in_multiplicativeExpression12332 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_MOD_in_multiplicativeExpression12351 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression12380 = new BitSet(new long[]{0x0002000100002002L});
    public static final BitSet FOLLOW_PLUS_in_unaryExpression12414 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression12416 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_unaryExpression12443 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression12445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INC_in_unaryExpression12471 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_postfixedExpression_in_unaryExpression12473 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEC_in_unaryExpression12497 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_postfixedExpression_in_unaryExpression12499 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression12523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_unaryExpressionNotPlusMinus12542 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus12544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOGICAL_NOT_in_unaryExpressionNotPlusMinus12591 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus12593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_unaryExpressionNotPlusMinus12632 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_unaryExpressionNotPlusMinus12634 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_unaryExpressionNotPlusMinus12636 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus12638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_postfixedExpression_in_unaryExpressionNotPlusMinus12673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primaryExpression_in_postfixedExpression12709 = new BitSet(new long[]{0x0000000000609002L});
    public static final BitSet FOLLOW_DOT_in_postfixedExpression12771 = new BitSet(new long[]{0x0000000002000000L,0x0000000090040000L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeArgumentListSimplified_in_postfixedExpression12821 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_postfixedExpression12903 = new BitSet(new long[]{0x0000000020609002L});
    public static final BitSet FOLLOW_arguments_in_postfixedExpression12982 = new BitSet(new long[]{0x0000000000609002L});
    public static final BitSet FOLLOW_THIS_in_postfixedExpression13056 = new BitSet(new long[]{0x0000000000609002L});
    public static final BitSet FOLLOW_SUPER_in_postfixedExpression13119 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_postfixedExpression13121 = new BitSet(new long[]{0x0000000000609002L});
    public static final BitSet FOLLOW_SUPER_in_postfixedExpression13174 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_DOT_in_postfixedExpression13178 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_postfixedExpression13180 = new BitSet(new long[]{0x0000000020609002L});
    public static final BitSet FOLLOW_arguments_in_postfixedExpression13247 = new BitSet(new long[]{0x0000000000609002L});
    public static final BitSet FOLLOW_innerNewExpression_in_postfixedExpression13318 = new BitSet(new long[]{0x0000000000609002L});
    public static final BitSet FOLLOW_LBRACK_in_postfixedExpression13375 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_postfixedExpression13377 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_RBRACK_in_postfixedExpression13379 = new BitSet(new long[]{0x0000000000609002L});
    public static final BitSet FOLLOW_INC_in_postfixedExpression13440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEC_in_postfixedExpression13464 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parenthesizedExpression_in_primaryExpression13512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_primaryExpression13522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_newExpression_in_primaryExpression13532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedIdentExpression_in_primaryExpression13542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericTypeArgumentListSimplified_in_primaryExpression13552 = new BitSet(new long[]{0x0000000000000000L,0x0000000090000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_SUPER_in_primaryExpression13567 = new BitSet(new long[]{0x0000000020008000L});
    public static final BitSet FOLLOW_arguments_in_primaryExpression13585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_primaryExpression13645 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_primaryExpression13647 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_primaryExpression13649 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_primaryExpression13716 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_primaryExpression13718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THIS_in_primaryExpression13773 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_primaryExpression13775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THIS_in_primaryExpression13840 = new BitSet(new long[]{0x0000000020000002L});
    public static final BitSet FOLLOW_arguments_in_primaryExpression13908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUPER_in_primaryExpression13973 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_primaryExpression13975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUPER_in_primaryExpression14031 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_DOT_in_primaryExpression14033 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_primaryExpression14035 = new BitSet(new long[]{0x0000000020000002L});
    public static final BitSet FOLLOW_arguments_in_primaryExpression14059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitiveType_in_primaryExpression14201 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_arrayDeclarator_in_primaryExpression14260 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_DOT_in_primaryExpression14323 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_CLASS_in_primaryExpression14325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_primaryExpression14385 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_DOT_in_primaryExpression14387 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_CLASS_in_primaryExpression14389 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedIdentifier_in_qualifiedIdentExpression14469 = new BitSet(new long[]{0x0000000020408002L});
    public static final BitSet FOLLOW_arrayDeclarator_in_qualifiedIdentExpression14539 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_DOT_in_qualifiedIdentExpression14607 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_CLASS_in_qualifiedIdentExpression14609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_qualifiedIdentExpression14679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_qualifiedIdentExpression14740 = new BitSet(new long[]{0x2000000002000000L,0x0000000090040000L,0x0000001000000000L});
    public static final BitSet FOLLOW_CLASS_in_qualifiedIdentExpression14758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericTypeArgumentListSimplified_in_qualifiedIdentExpression14821 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_SUPER_in_qualifiedIdentExpression14846 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_qualifiedIdentExpression14848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUPER_in_qualifiedIdentExpression14898 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_DOT_in_qualifiedIdentExpression14902 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_qualifiedIdentExpression14904 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_qualifiedIdentExpression14906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_qualifiedIdentExpression14956 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_qualifiedIdentExpression14958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THIS_in_qualifiedIdentExpression15033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUPER_in_qualifiedIdentExpression15099 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_qualifiedIdentExpression15101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_innerNewExpression_in_qualifiedIdentExpression15149 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_newExpression15225 = new BitSet(new long[]{0x1280000002000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_primitiveType_in_newExpression15241 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_newArrayConstruction_in_newExpression15243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericTypeArgumentListSimplified_in_newExpression15287 = new BitSet(new long[]{0x1280000002000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_qualifiedTypeIdentSimplified_in_newExpression15290 = new BitSet(new long[]{0x0000000020400000L});
    public static final BitSet FOLLOW_newArrayConstruction_in_newExpression15308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_newExpression15373 = new BitSet(new long[]{0x0000000002800002L,0x0000000000000810L});
    public static final BitSet FOLLOW_classBody_in_newExpression15375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_innerNewExpression15474 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeArgumentListSimplified_in_innerNewExpression15476 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_innerNewExpression15479 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_innerNewExpression15481 = new BitSet(new long[]{0x0000000002800002L,0x0000000000000810L});
    public static final BitSet FOLLOW_classBody_in_innerNewExpression15483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_newArrayConstruction15529 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_arrayInitializer_in_newArrayConstruction15531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_newArrayConstruction15541 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_newArrayConstruction15544 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_RBRACK_in_newArrayConstruction15546 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_LBRACK_in_newArrayConstruction15550 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_newArrayConstruction15553 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_RBRACK_in_newArrayConstruction15555 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_newArrayConstruction15560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_arguments15580 = new BitSet(new long[]{0x128008446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expressionList_in_arguments15582 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_arguments15585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_synpred5_JamlAttrHash4621 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_synpred5_JamlAttrHash4623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_synpred5_JamlAttrHash4627 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_synpred5_JamlAttrHash4629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATER_THAN_in_synpred77_JamlAttrHash5968 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHIFT_RIGHT_in_synpred78_JamlAttrHash5978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BIT_SHIFT_RIGHT_in_synpred79_JamlAttrHash5988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bound_in_synpred80_JamlAttrHash6018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_in_synpred95_JamlAttrHash6550 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_block_in_synpred95_JamlAttrHash6552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_synpred105_JamlAttrHash6589 = new BitSet(new long[]{0x1280000000000000L,0x0000002002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_synpred105_JamlAttrHash6608 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred105_JamlAttrHash6610 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred105_JamlAttrHash6612 = new BitSet(new long[]{0x0000100000C00000L,0x0000000200000000L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_synpred105_JamlAttrHash6614 = new BitSet(new long[]{0x0000100000800000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred105_JamlAttrHash6617 = new BitSet(new long[]{0x0000100000800000L});
    public static final BitSet FOLLOW_block_in_synpred105_JamlAttrHash6621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_synpred105_JamlAttrHash6625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_synpred105_JamlAttrHash6687 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred105_JamlAttrHash6689 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred105_JamlAttrHash6691 = new BitSet(new long[]{0x0000100000800000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred105_JamlAttrHash6693 = new BitSet(new long[]{0x0000100000800000L});
    public static final BitSet FOLLOW_block_in_synpred105_JamlAttrHash6697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_synpred105_JamlAttrHash6701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred105_JamlAttrHash6760 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred105_JamlAttrHash6762 = new BitSet(new long[]{0x0000000000800000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred105_JamlAttrHash6764 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_block_in_synpred105_JamlAttrHash6767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifierList_in_synpred106_JamlAttrHash6575 = new BitSet(new long[]{0x1280000002000000L,0x0000002002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_synpred106_JamlAttrHash6589 = new BitSet(new long[]{0x1280000000000000L,0x0000002002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_synpred106_JamlAttrHash6608 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred106_JamlAttrHash6610 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred106_JamlAttrHash6612 = new BitSet(new long[]{0x0000100000C00000L,0x0000000200000000L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_synpred106_JamlAttrHash6614 = new BitSet(new long[]{0x0000100000800000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred106_JamlAttrHash6617 = new BitSet(new long[]{0x0000100000800000L});
    public static final BitSet FOLLOW_block_in_synpred106_JamlAttrHash6621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_synpred106_JamlAttrHash6625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_synpred106_JamlAttrHash6687 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred106_JamlAttrHash6689 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred106_JamlAttrHash6691 = new BitSet(new long[]{0x0000100000800000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred106_JamlAttrHash6693 = new BitSet(new long[]{0x0000100000800000L});
    public static final BitSet FOLLOW_block_in_synpred106_JamlAttrHash6697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_synpred106_JamlAttrHash6701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred106_JamlAttrHash6760 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred106_JamlAttrHash6762 = new BitSet(new long[]{0x0000000000800000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred106_JamlAttrHash6764 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_block_in_synpred106_JamlAttrHash6767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_synpred106_JamlAttrHash6831 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_classFieldDeclaratorList_in_synpred106_JamlAttrHash6833 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred106_JamlAttrHash6835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_synpred107_JamlAttrHash6880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_synpred113_JamlAttrHash6936 = new BitSet(new long[]{0x1280000000000000L,0x0000002002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_synpred113_JamlAttrHash6955 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred113_JamlAttrHash6957 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred113_JamlAttrHash6959 = new BitSet(new long[]{0x0000100000400000L,0x0000000200000000L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_synpred113_JamlAttrHash6961 = new BitSet(new long[]{0x0000100000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred113_JamlAttrHash6964 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred113_JamlAttrHash6967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_synpred113_JamlAttrHash7025 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred113_JamlAttrHash7027 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred113_JamlAttrHash7029 = new BitSet(new long[]{0x0000100000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred113_JamlAttrHash7031 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred113_JamlAttrHash7034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifierList_in_synpred114_JamlAttrHash6922 = new BitSet(new long[]{0x1280000002000000L,0x0000002002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_synpred114_JamlAttrHash6936 = new BitSet(new long[]{0x1280000000000000L,0x0000002002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_synpred114_JamlAttrHash6955 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred114_JamlAttrHash6957 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred114_JamlAttrHash6959 = new BitSet(new long[]{0x0000100000400000L,0x0000000200000000L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_synpred114_JamlAttrHash6961 = new BitSet(new long[]{0x0000100000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred114_JamlAttrHash6964 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred114_JamlAttrHash6967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_synpred114_JamlAttrHash7025 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred114_JamlAttrHash7027 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred114_JamlAttrHash7029 = new BitSet(new long[]{0x0000100000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred114_JamlAttrHash7031 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred114_JamlAttrHash7034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_synpred114_JamlAttrHash7097 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_interfaceFieldDeclaratorList_in_synpred114_JamlAttrHash7099 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred114_JamlAttrHash7101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_synpred115_JamlAttrHash7146 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayDeclarator_in_synpred121_JamlAttrHash7448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_synpred139_JamlAttrHash7849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_synpred140_JamlAttrHash7898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred142_JamlAttrHash7983 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_typeIdent_in_synpred142_JamlAttrHash7985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred153_JamlAttrHash8210 = new BitSet(new long[]{0x1280010000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeArgument_in_synpred153_JamlAttrHash8212 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericWildcardBoundType_in_synpred155_JamlAttrHash8266 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred160_JamlAttrHash8484 = new BitSet(new long[]{0x12A0000000000080L,0x000000444EE38142L,0x0000001000000000L});
    public static final BitSet FOLLOW_formalParameterStandardDecl_in_synpred160_JamlAttrHash8486 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameterStandardDecl_in_synpred162_JamlAttrHash8481 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_synpred162_JamlAttrHash8484 = new BitSet(new long[]{0x12A0000000000080L,0x000000444EE38142L,0x0000001000000000L});
    public static final BitSet FOLLOW_formalParameterStandardDecl_in_synpred162_JamlAttrHash8486 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_synpred162_JamlAttrHash8491 = new BitSet(new long[]{0x12A0000000000080L,0x000000444EE38142L,0x0000001000000000L});
    public static final BitSet FOLLOW_formalParameterVarArgDecl_in_synpred162_JamlAttrHash8493 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameterVarArgDecl_in_synpred163_JamlAttrHash8550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred164_JamlAttrHash8795 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred164_JamlAttrHash8799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_synpred165_JamlAttrHash8852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifierList_in_synpred177_JamlAttrHash9306 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_synpred177_JamlAttrHash9308 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred177_JamlAttrHash9322 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred177_JamlAttrHash9324 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred177_JamlAttrHash9326 = new BitSet(new long[]{0x8000100000000000L});
    public static final BitSet FOLLOW_annotationDefaultValue_in_synpred177_JamlAttrHash9328 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred177_JamlAttrHash9331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classFieldDeclaratorList_in_synpred177_JamlAttrHash9373 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred177_JamlAttrHash9375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_synpred179_JamlAttrHash9510 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred179_JamlAttrHash9512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_synpred180_JamlAttrHash9523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_in_synpred184_JamlAttrHash9821 = new BitSet(new long[]{0x73E010446AA01480L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_statement_in_synpred184_JamlAttrHash9825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forInit_in_synpred186_JamlAttrHash10008 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred186_JamlAttrHash10010 = new BitSet(new long[]{0x128010446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_forCondition_in_synpred186_JamlAttrHash10012 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred186_JamlAttrHash10014 = new BitSet(new long[]{0x128008446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_forUpdater_in_synpred186_JamlAttrHash10016 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred186_JamlAttrHash10018 = new BitSet(new long[]{0x73E010446AA01480L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_statement_in_synpred186_JamlAttrHash10020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchCaseLabel_in_synpred206_JamlAttrHash10987 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_synpred209_JamlAttrHash11077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_synpred210_JamlAttrHash11099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred253_JamlAttrHash12632 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_synpred253_JamlAttrHash12634 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred253_JamlAttrHash12636 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_synpred253_JamlAttrHash12638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayDeclarator_in_synpred281_JamlAttrHash14539 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_DOT_in_synpred281_JamlAttrHash14607 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_CLASS_in_synpred281_JamlAttrHash14609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred289_JamlAttrHash14740 = new BitSet(new long[]{0x2000000002000000L,0x0000000090040000L,0x0000001000000000L});
    public static final BitSet FOLLOW_CLASS_in_synpred289_JamlAttrHash14758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericTypeArgumentListSimplified_in_synpred289_JamlAttrHash14821 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_SUPER_in_synpred289_JamlAttrHash14846 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_synpred289_JamlAttrHash14848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUPER_in_synpred289_JamlAttrHash14898 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_DOT_in_synpred289_JamlAttrHash14902 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred289_JamlAttrHash14904 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_synpred289_JamlAttrHash14906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred289_JamlAttrHash14956 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_synpred289_JamlAttrHash14958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THIS_in_synpred289_JamlAttrHash15033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUPER_in_synpred289_JamlAttrHash15099 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_synpred289_JamlAttrHash15101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_innerNewExpression_in_synpred289_JamlAttrHash15149 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_synpred297_JamlAttrHash15550 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_synpred297_JamlAttrHash15553 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_RBRACK_in_synpred297_JamlAttrHash15555 = new BitSet(new long[]{0x0000000000000002L});

}
// $ANTLR 3.2 Sep 23, 2009 12:02:23 ../etc/JamlAttrHash.g 2010-02-26 19:39:36

package com.cadrlife.jaml;
import java.util.LinkedHashMap;
import java.util.Map;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class JamlAttrHashParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "AND", "AND_ASSIGN", "ASSIGN", "AT", "BIT_SHIFT_RIGHT", "BIT_SHIFT_RIGHT_ASSIGN", "COLON", "COMMA", "DEC", "DIV", "DIV_ASSIGN", "DOT", "DOTSTAR", "ELLIPSIS", "EQUAL", "GREATER_OR_EQUAL", "GREATER_THAN", "INC", "LBRACK", "LCURLY", "LESS_OR_EQUAL", "LESS_THAN", "LOGICAL_AND", "LOGICAL_NOT", "LOGICAL_OR", "LPAREN", "MINUS", "MINUS_ASSIGN", "MOD", "MOD_ASSIGN", "NOT", "NOT_EQUAL", "OR", "OR_ASSIGN", "PLUS", "PLUS_ASSIGN", "QUESTION", "RBRACK", "RCURLY", "RPAREN", "SEMI", "SHIFT_LEFT", "SHIFT_LEFT_ASSIGN", "SHIFT_RIGHT", "SHIFT_RIGHT_ASSIGN", "STAR", "STAR_ASSIGN", "XOR", "XOR_ASSIGN", "ABSTRACT", "ASSERT", "BOOLEAN", "BREAK", "BYTE", "CASE", "CATCH", "CHAR", "CLASS", "CONTINUE", "DEFAULT", "DO", "DOUBLE", "ELSE", "ENUM", "EXTENDS", "FALSE", "FINAL", "FINALLY", "FLOAT", "FOR", "IF", "IMPLEMENTS", "INSTANCEOF", "INTERFACE", "IMPORT", "INT", "LONG", "NATIVE", "NEW", "NULL", "PACKAGE", "PRIVATE", "PROTECTED", "PUBLIC", "RETURN", "SHORT", "STATIC", "STRICTFP", "SUPER", "SWITCH", "SYNCHRONIZED", "THIS", "THROW", "THROWS", "TRANSIENT", "TRUE", "TRY", "VOID", "VOLATILE", "WHILE", "ANNOTATION_INIT_ARRAY_ELEMENT", "ANNOTATION_INIT_BLOCK", "ANNOTATION_INIT_DEFAULT_KEY", "ANNOTATION_INIT_KEY_LIST", "ANNOTATION_LIST", "ANNOTATION_METHOD_DECL", "ANNOTATION_SCOPE", "ANNOTATION_TOP_LEVEL_SCOPE", "ARGUMENT_LIST", "ARRAY_DECLARATOR", "ARRAY_DECLARATOR_LIST", "ARRAY_ELEMENT_ACCESS", "ARRAY_INITIALIZER", "BLOCK_SCOPE", "CAST_EXPR", "CATCH_CLAUSE_LIST", "CLASS_CONSTRUCTOR_CALL", "CLASS_INSTANCE_INITIALIZER", "CLASS_STATIC_INITIALIZER", "CLASS_TOP_LEVEL_SCOPE", "CONSTRUCTOR_DECL", "ENUM_TOP_LEVEL_SCOPE", "EXPR", "EXTENDS_BOUND_LIST", "EXTENDS_CLAUSE", "FOR_CONDITION", "FOR_EACH", "FOR_INIT", "FOR_UPDATE", "FORMAL_PARAM_LIST", "FORMAL_PARAM_STD_DECL", "FORMAL_PARAM_VARARG_DECL", "FUNCTION_METHOD_DECL", "GENERIC_TYPE_ARG_LIST", "GENERIC_TYPE_PARAM_LIST", "INTERFACE_TOP_LEVEL_SCOPE", "IMPLEMENTS_CLAUSE", "LABELED_STATEMENT", "LOCAL_MODIFIER_LIST", "JAVA_SOURCE", "METHOD_CALL", "MODIFIER_LIST", "PARENTESIZED_EXPR", "POST_DEC", "POST_INC", "PRE_DEC", "PRE_INC", "QUALIFIED_TYPE_IDENT", "STATIC_ARRAY_CREATOR", "SUPER_CONSTRUCTOR_CALL", "SWITCH_BLOCK_LABEL_LIST", "THIS_CONSTRUCTOR_CALL", "THROWS_CLAUSE", "TYPE", "UNARY_MINUS", "UNARY_PLUS", "VAR_DECLARATION", "VAR_DECLARATOR", "VAR_DECLARATOR_LIST", "VOID_METHOD_DECL", "IDENT", "HEX_LITERAL", "OCTAL_LITERAL", "DECIMAL_LITERAL", "FLOATING_POINT_LITERAL", "CHARACTER_LITERAL", "STRING_LITERAL", "HEX_DIGIT", "INTEGER_TYPE_SUFFIX", "EXPONENT", "FLOAT_TYPE_SUFFIX", "ESCAPE_SEQUENCE", "UNICODE_ESCAPE", "OCTAL_ESCAPE", "JAVA_ID_START", "JAVA_ID_PART", "WS", "COMMENT", "LINE_COMMENT"
    };
    public static final int PACKAGE=84;
    public static final int EXPONENT=173;
    public static final int STAR=49;
    public static final int WHILE=103;
    public static final int MOD=32;
    public static final int MOD_ASSIGN=33;
    public static final int CASE=58;
    public static final int CHAR=60;
    public static final int NEW=82;
    public static final int DO=64;
    public static final int GENERIC_TYPE_PARAM_LIST=138;
    public static final int CLASS_INSTANCE_INITIALIZER=121;
    public static final int ARRAY_ELEMENT_ACCESS=115;
    public static final int FOR_CONDITION=129;
    public static final int NOT=34;
    public static final int VAR_DECLARATION=160;
    public static final int ANNOTATION_METHOD_DECL=109;
    public static final int EOF=-1;
    public static final int DIV_ASSIGN=14;
    public static final int LOGICAL_AND=26;
    public static final int BREAK=56;
    public static final int UNARY_PLUS=159;
    public static final int BIT_SHIFT_RIGHT_ASSIGN=9;
    public static final int TYPE=157;
    public static final int RPAREN=43;
    public static final int INC=21;
    public static final int FINAL=70;
    public static final int IMPORT=78;
    public static final int STRING_LITERAL=170;
    public static final int FOR_UPDATE=132;
    public static final int FLOATING_POINT_LITERAL=168;
    public static final int CAST_EXPR=118;
    public static final int NOT_EQUAL=35;
    public static final int VOID_METHOD_DECL=163;
    public static final int THIS=95;
    public static final int RETURN=88;
    public static final int DOUBLE=65;
    public static final int ENUM_TOP_LEVEL_SCOPE=125;
    public static final int VOID=101;
    public static final int SUPER=92;
    public static final int COMMENT=181;
    public static final int ANNOTATION_INIT_KEY_LIST=107;
    public static final int JAVA_ID_START=178;
    public static final int FLOAT_TYPE_SUFFIX=174;
    public static final int PRE_DEC=149;
    public static final int RBRACK=41;
    public static final int IMPLEMENTS_CLAUSE=140;
    public static final int SWITCH_BLOCK_LABEL_LIST=154;
    public static final int LINE_COMMENT=182;
    public static final int PRIVATE=85;
    public static final int STATIC=90;
    public static final int BLOCK_SCOPE=117;
    public static final int ANNOTATION_INIT_DEFAULT_KEY=106;
    public static final int SWITCH=93;
    public static final int NULL=83;
    public static final int VAR_DECLARATOR=161;
    public static final int MINUS_ASSIGN=31;
    public static final int ELSE=66;
    public static final int STRICTFP=91;
    public static final int CHARACTER_LITERAL=169;
    public static final int PRE_INC=150;
    public static final int ANNOTATION_LIST=108;
    public static final int ELLIPSIS=17;
    public static final int NATIVE=81;
    public static final int OCTAL_ESCAPE=177;
    public static final int UNARY_MINUS=158;
    public static final int THROWS=97;
    public static final int LCURLY=23;
    public static final int INT=79;
    public static final int FORMAL_PARAM_VARARG_DECL=135;
    public static final int METHOD_CALL=144;
    public static final int ASSERT=54;
    public static final int TRY=100;
    public static final int INTERFACE_TOP_LEVEL_SCOPE=139;
    public static final int SHIFT_LEFT=45;
    public static final int WS=180;
    public static final int SHIFT_RIGHT=47;
    public static final int FORMAL_PARAM_STD_DECL=134;
    public static final int LOCAL_MODIFIER_LIST=142;
    public static final int OR=36;
    public static final int LESS_THAN=25;
    public static final int SHIFT_RIGHT_ASSIGN=48;
    public static final int EXTENDS_BOUND_LIST=127;
    public static final int JAVA_SOURCE=143;
    public static final int CATCH=59;
    public static final int FALSE=69;
    public static final int INTEGER_TYPE_SUFFIX=172;
    public static final int DECIMAL_LITERAL=167;
    public static final int THROW=96;
    public static final int FOR_INIT=131;
    public static final int DEC=12;
    public static final int PROTECTED=86;
    public static final int CLASS=61;
    public static final int LBRACK=22;
    public static final int BIT_SHIFT_RIGHT=8;
    public static final int THROWS_CLAUSE=156;
    public static final int GREATER_OR_EQUAL=19;
    public static final int FOR=73;
    public static final int THIS_CONSTRUCTOR_CALL=155;
    public static final int LOGICAL_NOT=27;
    public static final int FLOAT=72;
    public static final int ABSTRACT=53;
    public static final int AND=4;
    public static final int POST_DEC=147;
    public static final int AND_ASSIGN=5;
    public static final int STATIC_ARRAY_CREATOR=152;
    public static final int MODIFIER_LIST=145;
    public static final int ANNOTATION_SCOPE=110;
    public static final int LPAREN=29;
    public static final int IF=74;
    public static final int AT=7;
    public static final int ESCAPE_SEQUENCE=175;
    public static final int CONSTRUCTOR_DECL=124;
    public static final int LABELED_STATEMENT=141;
    public static final int UNICODE_ESCAPE=176;
    public static final int EXPR=126;
    public static final int SYNCHRONIZED=94;
    public static final int BOOLEAN=55;
    public static final int CLASS_TOP_LEVEL_SCOPE=123;
    public static final int IMPLEMENTS=75;
    public static final int CONTINUE=62;
    public static final int COMMA=11;
    public static final int TRANSIENT=98;
    public static final int EQUAL=18;
    public static final int XOR_ASSIGN=52;
    public static final int LOGICAL_OR=28;
    public static final int IDENT=164;
    public static final int QUALIFIED_TYPE_IDENT=151;
    public static final int ARGUMENT_LIST=112;
    public static final int PLUS=38;
    public static final int HEX_LITERAL=165;
    public static final int ANNOTATION_INIT_BLOCK=105;
    public static final int DOT=15;
    public static final int SHIFT_LEFT_ASSIGN=46;
    public static final int FORMAL_PARAM_LIST=133;
    public static final int GENERIC_TYPE_ARG_LIST=137;
    public static final int ANNOTATION_TOP_LEVEL_SCOPE=111;
    public static final int DOTSTAR=16;
    public static final int BYTE=57;
    public static final int XOR=51;
    public static final int JAVA_ID_PART=179;
    public static final int GREATER_THAN=20;
    public static final int VOLATILE=102;
    public static final int PARENTESIZED_EXPR=146;
    public static final int CLASS_STATIC_INITIALIZER=122;
    public static final int ARRAY_DECLARATOR_LIST=114;
    public static final int LESS_OR_EQUAL=24;
    public static final int DEFAULT=63;
    public static final int OCTAL_LITERAL=166;
    public static final int HEX_DIGIT=171;
    public static final int SHORT=89;
    public static final int INSTANCEOF=76;
    public static final int MINUS=30;
    public static final int EXTENDS_CLAUSE=128;
    public static final int TRUE=99;
    public static final int SEMI=44;
    public static final int STAR_ASSIGN=50;
    public static final int VAR_DECLARATOR_LIST=162;
    public static final int ARRAY_DECLARATOR=113;
    public static final int COLON=10;
    public static final int OR_ASSIGN=37;
    public static final int ENUM=67;
    public static final int QUESTION=40;
    public static final int FINALLY=71;
    public static final int RCURLY=42;
    public static final int PLUS_ASSIGN=39;
    public static final int ASSIGN=6;
    public static final int ANNOTATION_INIT_ARRAY_ELEMENT=104;
    public static final int FUNCTION_METHOD_DECL=136;
    public static final int INTERFACE=77;
    public static final int POST_INC=148;
    public static final int DIV=13;
    public static final int CLASS_CONSTRUCTOR_CALL=120;
    public static final int LONG=80;
    public static final int FOR_EACH=130;
    public static final int EXTENDS=68;
    public static final int PUBLIC=87;
    public static final int ARRAY_INITIALIZER=116;
    public static final int CATCH_CLAUSE_LIST=119;
    public static final int SUPER_CONSTRUCTOR_CALL=153;

    // delegates
    // delegators


        public JamlAttrHashParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public JamlAttrHashParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
            this.state.ruleMemo = new HashMap[361+1];
             
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return JamlAttrHashParser.tokenNames; }
    public String getGrammarFileName() { return "../etc/JamlAttrHash.g"; }


        
        private boolean mMessageCollectionEnabled = false;
        private boolean mHasErrors = false;
        private List<String> mMessages;

        /**
         *  Switches error message collection on or of.
         *
         *  The standard destination for parser error messages is <code>System.err</code>.
         *  However, if <code>true</code> gets passed to this method this default
         *  behaviour will be switched off and all error messages will be collected
         *  instead of written to anywhere.
         *
         *  The default value is <code>false</code>.
         *
         *  @param pNewState  <code>true</code> if error messages should be collected.
         */
        public void enableErrorMessageCollection(boolean pNewState) {
            mMessageCollectionEnabled = pNewState;
            if (mMessages == null && mMessageCollectionEnabled) {
                mMessages = new ArrayList<String>();
            }
        }
        
        /**
         *  Collects an error message or passes the error message to <code>
         *  super.emitErrorMessage(...)</code>.
         *
         *  The actual behaviour depends on whether collecting error messages
         *  has been enabled or not.
         *
         *  @param pMessage  The error message.
         */
         @Override
        public void emitErrorMessage(String pMessage) {
            if (mMessageCollectionEnabled) {
                mMessages.add(pMessage);
            } else {
                super.emitErrorMessage(pMessage);
            }
        }
        
        /**
         *  Returns collected error messages.
         *
         *  @return  A list holding collected error messages or <code>null</code> if
         *           collecting error messages hasn't been enabled. Of course, this
         *           list may be empty if no error message has been emited.
         */
        public List<String> getMessages() {
            return mMessages;
        }
        
        /**
         *  Tells if parsing a Java source has caused any error messages.
         *
         *  @return  <code>true</code> if parsing a Java source has caused at least one error message.
         */
        public boolean hasErrors() {
            return mHasErrors;
        }


    public static class attrMappings_return extends ParserRuleReturnScope {
        public Map<String,String> attrMap;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attrMappings"
    // ../etc/JamlAttrHash.g:279:1: attrMappings returns [Map<String,String> attrMap] : (am= attrMapping ( ',' am= attrMapping )* ) ;
    public final JamlAttrHashParser.attrMappings_return attrMappings() throws RecognitionException {
    traceIn("attrMappings", 1);
        JamlAttrHashParser.attrMappings_return retval = new JamlAttrHashParser.attrMappings_return();
        retval.start = input.LT(1);
        int attrMappings_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal1=null;
        JamlAttrHashParser.attrMapping_return am = null;


        CommonTree char_literal1_tree=null;

        retval.attrMap = new LinkedHashMap<String,String>();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }
            // ../etc/JamlAttrHash.g:280:57: ( (am= attrMapping ( ',' am= attrMapping )* ) )
            // ../etc/JamlAttrHash.g:282:3: (am= attrMapping ( ',' am= attrMapping )* )
            {
            root_0 = (CommonTree)adaptor.nil();

            // ../etc/JamlAttrHash.g:282:3: (am= attrMapping ( ',' am= attrMapping )* )
            // ../etc/JamlAttrHash.g:282:5: am= attrMapping ( ',' am= attrMapping )*
            {
            pushFollow(FOLLOW_attrMapping_in_attrMappings4526);
            am=attrMapping();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, am.getTree());
            if ( state.backtracking==0 ) {
              retval.attrMap.put((am!=null?am.attr:null),(am!=null?am.value:null));
            }
            // ../etc/JamlAttrHash.g:283:5: ( ',' am= attrMapping )*
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==COMMA) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:283:6: ',' am= attrMapping
            	    {
            	    char_literal1=(Token)match(input,COMMA,FOLLOW_COMMA_in_attrMappings4537); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal1_tree = (CommonTree)adaptor.create(char_literal1);
            	    adaptor.addChild(root_0, char_literal1_tree);
            	    }
            	    pushFollow(FOLLOW_attrMapping_in_attrMappings4541);
            	    am=attrMapping();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, am.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.attrMap.put((am!=null?am.attr:null),(am!=null?am.value:null));
            	    }

            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("attrMappings", 1);
            if ( state.backtracking>0 ) { memoize(input, 1, attrMappings_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attrMappings"

    public static class attrMapping_return extends ParserRuleReturnScope {
        public String attr;
        public String value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attrMapping"
    // ../etc/JamlAttrHash.g:285:1: attrMapping returns [String attr, String value] : attribute '=' '>' attributeValue ;
    public final JamlAttrHashParser.attrMapping_return attrMapping() throws RecognitionException {
    traceIn("attrMapping", 2);
        JamlAttrHashParser.attrMapping_return retval = new JamlAttrHashParser.attrMapping_return();
        retval.start = input.LT(1);
        int attrMapping_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal3=null;
        Token char_literal4=null;
        JamlAttrHashParser.attribute_return attribute2 = null;

        JamlAttrHashParser.attributeValue_return attributeValue5 = null;


        CommonTree char_literal3_tree=null;
        CommonTree char_literal4_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }
            // ../etc/JamlAttrHash.g:285:48: ( attribute '=' '>' attributeValue )
            // ../etc/JamlAttrHash.g:286:3: attribute '=' '>' attributeValue
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_attribute_in_attrMapping4561);
            attribute2=attribute();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute2.getTree());
            if ( state.backtracking==0 ) {
              retval.attr =(attribute2!=null?attribute2.value:null);
            }
            char_literal3=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_attrMapping4568); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal3_tree = (CommonTree)adaptor.create(char_literal3);
            adaptor.addChild(root_0, char_literal3_tree);
            }
            char_literal4=(Token)match(input,GREATER_THAN,FOLLOW_GREATER_THAN_in_attrMapping4570); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal4_tree = (CommonTree)adaptor.create(char_literal4);
            adaptor.addChild(root_0, char_literal4_tree);
            }
            pushFollow(FOLLOW_attributeValue_in_attrMapping4575);
            attributeValue5=attributeValue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, attributeValue5.getTree());
            if ( state.backtracking==0 ) {
              retval.value =(attributeValue5!=null?attributeValue5.value:null);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("attrMapping", 2);
            if ( state.backtracking>0 ) { memoize(input, 2, attrMapping_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attrMapping"

    public static class attribute_return extends ParserRuleReturnScope {
        public String value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute"
    // ../etc/JamlAttrHash.g:290:1: attribute returns [String value] : ( ':' IDENT | literal );
    public final JamlAttrHashParser.attribute_return attribute() throws RecognitionException {
    traceIn("attribute", 3);
        JamlAttrHashParser.attribute_return retval = new JamlAttrHashParser.attribute_return();
        retval.start = input.LT(1);
        int attribute_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal6=null;
        Token IDENT7=null;
        JamlAttrHashParser.literal_return literal8 = null;


        CommonTree char_literal6_tree=null;
        CommonTree IDENT7_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }
            // ../etc/JamlAttrHash.g:290:33: ( ':' IDENT | literal )
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==COLON) ) {
                alt2=1;
            }
            else if ( (LA2_0==FALSE||LA2_0==NULL||LA2_0==TRUE||(LA2_0>=HEX_LITERAL && LA2_0<=STRING_LITERAL)) ) {
                alt2=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 2, 0, input);

                throw nvae;
            }
            switch (alt2) {
                case 1 :
                    // ../etc/JamlAttrHash.g:291:1: ':' IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal6=(Token)match(input,COLON,FOLLOW_COLON_in_attribute4589); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal6_tree = (CommonTree)adaptor.create(char_literal6);
                    adaptor.addChild(root_0, char_literal6_tree);
                    }
                    IDENT7=(Token)match(input,IDENT,FOLLOW_IDENT_in_attribute4591); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENT7_tree = (CommonTree)adaptor.create(IDENT7);
                    adaptor.addChild(root_0, IDENT7_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = (IDENT7!=null?IDENT7.getText():null);
                    }

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:291:37: literal
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_literal_in_attribute4597);
                    literal8=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal8.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value =(literal8!=null?literal8.value:null);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("attribute", 3);
            if ( state.backtracking>0 ) { memoize(input, 3, attribute_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute"

    public static class attributeValue_return extends ParserRuleReturnScope {
        public String value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attributeValue"
    // ../etc/JamlAttrHash.g:293:1: attributeValue returns [String value] : literal ;
    public final JamlAttrHashParser.attributeValue_return attributeValue() throws RecognitionException {
    traceIn("attributeValue", 4);
        JamlAttrHashParser.attributeValue_return retval = new JamlAttrHashParser.attributeValue_return();
        retval.start = input.LT(1);
        int attributeValue_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.literal_return literal9 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }
            // ../etc/JamlAttrHash.g:293:38: ( literal )
            // ../etc/JamlAttrHash.g:294:1: literal
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_literal_in_attributeValue4611);
            literal9=literal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, literal9.getTree());
            if ( state.backtracking==0 ) {
              retval.value =(literal9!=null?literal9.value:null);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("attributeValue", 4);
            if ( state.backtracking>0 ) { memoize(input, 4, attributeValue_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attributeValue"

    public static class literal_return extends ParserRuleReturnScope {
        public String value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "literal"
    // ../etc/JamlAttrHash.g:296:1: literal returns [String value] : (lit= ( HEX_LITERAL | OCTAL_LITERAL | DECIMAL_LITERAL ) | lit= FLOATING_POINT_LITERAL | lit= CHARACTER_LITERAL | lit= STRING_LITERAL | lit= ( TRUE | FALSE | NULL ) );
    public final JamlAttrHashParser.literal_return literal() throws RecognitionException {
    traceIn("literal", 5);
        JamlAttrHashParser.literal_return retval = new JamlAttrHashParser.literal_return();
        retval.start = input.LT(1);
        int literal_StartIndex = input.index();
        CommonTree root_0 = null;

        Token lit=null;

        CommonTree lit_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }
            // ../etc/JamlAttrHash.g:296:32: (lit= ( HEX_LITERAL | OCTAL_LITERAL | DECIMAL_LITERAL ) | lit= FLOATING_POINT_LITERAL | lit= CHARACTER_LITERAL | lit= STRING_LITERAL | lit= ( TRUE | FALSE | NULL ) )
            int alt3=5;
            switch ( input.LA(1) ) {
            case HEX_LITERAL:
            case OCTAL_LITERAL:
            case DECIMAL_LITERAL:
                {
                alt3=1;
                }
                break;
            case FLOATING_POINT_LITERAL:
                {
                alt3=2;
                }
                break;
            case CHARACTER_LITERAL:
                {
                alt3=3;
                }
                break;
            case STRING_LITERAL:
                {
                alt3=4;
                }
                break;
            case FALSE:
            case NULL:
            case TRUE:
                {
                alt3=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 3, 0, input);

                throw nvae;
            }

            switch (alt3) {
                case 1 :
                    // ../etc/JamlAttrHash.g:297:3: lit= ( HEX_LITERAL | OCTAL_LITERAL | DECIMAL_LITERAL )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    lit=(Token)input.LT(1);
                    if ( (input.LA(1)>=HEX_LITERAL && input.LA(1)<=DECIMAL_LITERAL) ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(lit));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }

                    if ( state.backtracking==0 ) {
                      retval.value = Util.parseIntegerLiteral((lit!=null?lit.getText():null));
                    }

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:298:3: lit= FLOATING_POINT_LITERAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    lit=(Token)match(input,FLOATING_POINT_LITERAL,FOLLOW_FLOATING_POINT_LITERAL_in_literal4646); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    lit_tree = (CommonTree)adaptor.create(lit);
                    adaptor.addChild(root_0, lit_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = Util.parseFloatLiteral((lit!=null?lit.getText():null));
                    }

                    }
                    break;
                case 3 :
                    // ../etc/JamlAttrHash.g:299:3: lit= CHARACTER_LITERAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    lit=(Token)match(input,CHARACTER_LITERAL,FOLLOW_CHARACTER_LITERAL_in_literal4656); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    lit_tree = (CommonTree)adaptor.create(lit);
                    adaptor.addChild(root_0, lit_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = Util.parseCharLiteral((lit!=null?lit.getText():null));
                    }

                    }
                    break;
                case 4 :
                    // ../etc/JamlAttrHash.g:300:3: lit= STRING_LITERAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    lit=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_literal4666); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    lit_tree = (CommonTree)adaptor.create(lit);
                    adaptor.addChild(root_0, lit_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = Util.parseStringLiteral((lit!=null?lit.getText():null));
                    }

                    }
                    break;
                case 5 :
                    // ../etc/JamlAttrHash.g:301:3: lit= ( TRUE | FALSE | NULL )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    lit=(Token)input.LT(1);
                    if ( input.LA(1)==FALSE||input.LA(1)==NULL||input.LA(1)==TRUE ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(lit));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }

                    if ( state.backtracking==0 ) {
                      retval.value = (lit!=null?lit.getText():null);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("literal", 5);
            if ( state.backtracking>0 ) { memoize(input, 5, literal_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "literal"

    public static class javaSource_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "javaSource"
    // ../etc/JamlAttrHash.g:304:1: javaSource : compilationUnit -> ^( JAVA_SOURCE compilationUnit ) ;
    public final JamlAttrHashParser.javaSource_return javaSource() throws RecognitionException {
    traceIn("javaSource", 6);
        JamlAttrHashParser.javaSource_return retval = new JamlAttrHashParser.javaSource_return();
        retval.start = input.LT(1);
        int javaSource_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.compilationUnit_return compilationUnit10 = null;


        RewriteRuleSubtreeStream stream_compilationUnit=new RewriteRuleSubtreeStream(adaptor,"rule compilationUnit");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }
            // ../etc/JamlAttrHash.g:305:5: ( compilationUnit -> ^( JAVA_SOURCE compilationUnit ) )
            // ../etc/JamlAttrHash.g:305:9: compilationUnit
            {
            pushFollow(FOLLOW_compilationUnit_in_javaSource4701);
            compilationUnit10=compilationUnit();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_compilationUnit.add(compilationUnit10.getTree());


            // AST REWRITE
            // elements: compilationUnit
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 306:9: -> ^( JAVA_SOURCE compilationUnit )
            {
                // ../etc/JamlAttrHash.g:306:13: ^( JAVA_SOURCE compilationUnit )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(JAVA_SOURCE, "JAVA_SOURCE"), root_1);

                adaptor.addChild(root_1, stream_compilationUnit.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("javaSource", 6);
            if ( state.backtracking>0 ) { memoize(input, 6, javaSource_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "javaSource"

    public static class compilationUnit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compilationUnit"
    // ../etc/JamlAttrHash.g:309:1: compilationUnit : annotationList ( packageDeclaration )? ( importDeclaration )* ( typeDecls )* ;
    public final JamlAttrHashParser.compilationUnit_return compilationUnit() throws RecognitionException {
    traceIn("compilationUnit", 7);
        JamlAttrHashParser.compilationUnit_return retval = new JamlAttrHashParser.compilationUnit_return();
        retval.start = input.LT(1);
        int compilationUnit_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.annotationList_return annotationList11 = null;

        JamlAttrHashParser.packageDeclaration_return packageDeclaration12 = null;

        JamlAttrHashParser.importDeclaration_return importDeclaration13 = null;

        JamlAttrHashParser.typeDecls_return typeDecls14 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }
            // ../etc/JamlAttrHash.g:310:5: ( annotationList ( packageDeclaration )? ( importDeclaration )* ( typeDecls )* )
            // ../etc/JamlAttrHash.g:310:9: annotationList ( packageDeclaration )? ( importDeclaration )* ( typeDecls )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_annotationList_in_compilationUnit4737);
            annotationList11=annotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationList11.getTree());
            // ../etc/JamlAttrHash.g:311:9: ( packageDeclaration )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==PACKAGE) ) {
                alt4=1;
            }
            switch (alt4) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: packageDeclaration
                    {
                    pushFollow(FOLLOW_packageDeclaration_in_compilationUnit4748);
                    packageDeclaration12=packageDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, packageDeclaration12.getTree());

                    }
                    break;

            }

            // ../etc/JamlAttrHash.g:312:9: ( importDeclaration )*
            loop5:
            do {
                int alt5=2;
                int LA5_0 = input.LA(1);

                if ( (LA5_0==IMPORT) ) {
                    alt5=1;
                }


                switch (alt5) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:0:0: importDeclaration
            	    {
            	    pushFollow(FOLLOW_importDeclaration_in_compilationUnit4760);
            	    importDeclaration13=importDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, importDeclaration13.getTree());

            	    }
            	    break;

            	default :
            	    break loop5;
                }
            } while (true);

            // ../etc/JamlAttrHash.g:313:9: ( typeDecls )*
            loop6:
            do {
                int alt6=2;
                int LA6_0 = input.LA(1);

                if ( (LA6_0==AT||LA6_0==LESS_THAN||LA6_0==SEMI||LA6_0==ABSTRACT||LA6_0==BOOLEAN||LA6_0==BYTE||(LA6_0>=CHAR && LA6_0<=CLASS)||LA6_0==DOUBLE||LA6_0==ENUM||LA6_0==FINAL||LA6_0==FLOAT||LA6_0==INTERFACE||(LA6_0>=INT && LA6_0<=NATIVE)||(LA6_0>=PRIVATE && LA6_0<=PUBLIC)||(LA6_0>=SHORT && LA6_0<=STRICTFP)||LA6_0==SYNCHRONIZED||LA6_0==TRANSIENT||(LA6_0>=VOID && LA6_0<=VOLATILE)||LA6_0==IDENT) ) {
                    alt6=1;
                }


                switch (alt6) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:0:0: typeDecls
            	    {
            	    pushFollow(FOLLOW_typeDecls_in_compilationUnit4772);
            	    typeDecls14=typeDecls();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDecls14.getTree());

            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("compilationUnit", 7);
            if ( state.backtracking>0 ) { memoize(input, 7, compilationUnit_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "compilationUnit"

    public static class typeDecls_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeDecls"
    // ../etc/JamlAttrHash.g:316:1: typeDecls : ( typeDeclaration | SEMI );
    public final JamlAttrHashParser.typeDecls_return typeDecls() throws RecognitionException {
    traceIn("typeDecls", 8);
        JamlAttrHashParser.typeDecls_return retval = new JamlAttrHashParser.typeDecls_return();
        retval.start = input.LT(1);
        int typeDecls_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SEMI16=null;
        JamlAttrHashParser.typeDeclaration_return typeDeclaration15 = null;


        CommonTree SEMI16_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }
            // ../etc/JamlAttrHash.g:317:5: ( typeDeclaration | SEMI )
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==AT||LA7_0==LESS_THAN||LA7_0==ABSTRACT||LA7_0==BOOLEAN||LA7_0==BYTE||(LA7_0>=CHAR && LA7_0<=CLASS)||LA7_0==DOUBLE||LA7_0==ENUM||LA7_0==FINAL||LA7_0==FLOAT||LA7_0==INTERFACE||(LA7_0>=INT && LA7_0<=NATIVE)||(LA7_0>=PRIVATE && LA7_0<=PUBLIC)||(LA7_0>=SHORT && LA7_0<=STRICTFP)||LA7_0==SYNCHRONIZED||LA7_0==TRANSIENT||(LA7_0>=VOID && LA7_0<=VOLATILE)||LA7_0==IDENT) ) {
                alt7=1;
            }
            else if ( (LA7_0==SEMI) ) {
                alt7=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 7, 0, input);

                throw nvae;
            }
            switch (alt7) {
                case 1 :
                    // ../etc/JamlAttrHash.g:317:9: typeDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_typeDeclaration_in_typeDecls4792);
                    typeDeclaration15=typeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDeclaration15.getTree());

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:318:9: SEMI
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SEMI16=(Token)match(input,SEMI,FOLLOW_SEMI_in_typeDecls4802); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("typeDecls", 8);
            if ( state.backtracking>0 ) { memoize(input, 8, typeDecls_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeDecls"

    public static class packageDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "packageDeclaration"
    // ../etc/JamlAttrHash.g:321:1: packageDeclaration : PACKAGE qualifiedIdentifier SEMI ;
    public final JamlAttrHashParser.packageDeclaration_return packageDeclaration() throws RecognitionException {
    traceIn("packageDeclaration", 9);
        JamlAttrHashParser.packageDeclaration_return retval = new JamlAttrHashParser.packageDeclaration_return();
        retval.start = input.LT(1);
        int packageDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token PACKAGE17=null;
        Token SEMI19=null;
        JamlAttrHashParser.qualifiedIdentifier_return qualifiedIdentifier18 = null;


        CommonTree PACKAGE17_tree=null;
        CommonTree SEMI19_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }
            // ../etc/JamlAttrHash.g:322:5: ( PACKAGE qualifiedIdentifier SEMI )
            // ../etc/JamlAttrHash.g:322:9: PACKAGE qualifiedIdentifier SEMI
            {
            root_0 = (CommonTree)adaptor.nil();

            PACKAGE17=(Token)match(input,PACKAGE,FOLLOW_PACKAGE_in_packageDeclaration4822); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PACKAGE17_tree = (CommonTree)adaptor.create(PACKAGE17);
            root_0 = (CommonTree)adaptor.becomeRoot(PACKAGE17_tree, root_0);
            }
            pushFollow(FOLLOW_qualifiedIdentifier_in_packageDeclaration4825);
            qualifiedIdentifier18=qualifiedIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedIdentifier18.getTree());
            SEMI19=(Token)match(input,SEMI,FOLLOW_SEMI_in_packageDeclaration4827); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("packageDeclaration", 9);
            if ( state.backtracking>0 ) { memoize(input, 9, packageDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "packageDeclaration"

    public static class importDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "importDeclaration"
    // ../etc/JamlAttrHash.g:325:1: importDeclaration : IMPORT ( STATIC )? qualifiedIdentifier ( DOTSTAR )? SEMI ;
    public final JamlAttrHashParser.importDeclaration_return importDeclaration() throws RecognitionException {
    traceIn("importDeclaration", 10);
        JamlAttrHashParser.importDeclaration_return retval = new JamlAttrHashParser.importDeclaration_return();
        retval.start = input.LT(1);
        int importDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IMPORT20=null;
        Token STATIC21=null;
        Token DOTSTAR23=null;
        Token SEMI24=null;
        JamlAttrHashParser.qualifiedIdentifier_return qualifiedIdentifier22 = null;


        CommonTree IMPORT20_tree=null;
        CommonTree STATIC21_tree=null;
        CommonTree DOTSTAR23_tree=null;
        CommonTree SEMI24_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }
            // ../etc/JamlAttrHash.g:326:5: ( IMPORT ( STATIC )? qualifiedIdentifier ( DOTSTAR )? SEMI )
            // ../etc/JamlAttrHash.g:326:9: IMPORT ( STATIC )? qualifiedIdentifier ( DOTSTAR )? SEMI
            {
            root_0 = (CommonTree)adaptor.nil();

            IMPORT20=(Token)match(input,IMPORT,FOLLOW_IMPORT_in_importDeclaration4853); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IMPORT20_tree = (CommonTree)adaptor.create(IMPORT20);
            root_0 = (CommonTree)adaptor.becomeRoot(IMPORT20_tree, root_0);
            }
            // ../etc/JamlAttrHash.g:326:17: ( STATIC )?
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==STATIC) ) {
                alt8=1;
            }
            switch (alt8) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: STATIC
                    {
                    STATIC21=(Token)match(input,STATIC,FOLLOW_STATIC_in_importDeclaration4856); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STATIC21_tree = (CommonTree)adaptor.create(STATIC21);
                    adaptor.addChild(root_0, STATIC21_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_qualifiedIdentifier_in_importDeclaration4859);
            qualifiedIdentifier22=qualifiedIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedIdentifier22.getTree());
            // ../etc/JamlAttrHash.g:326:45: ( DOTSTAR )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==DOTSTAR) ) {
                alt9=1;
            }
            switch (alt9) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: DOTSTAR
                    {
                    DOTSTAR23=(Token)match(input,DOTSTAR,FOLLOW_DOTSTAR_in_importDeclaration4861); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOTSTAR23_tree = (CommonTree)adaptor.create(DOTSTAR23);
                    adaptor.addChild(root_0, DOTSTAR23_tree);
                    }

                    }
                    break;

            }

            SEMI24=(Token)match(input,SEMI,FOLLOW_SEMI_in_importDeclaration4864); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("importDeclaration", 10);
            if ( state.backtracking>0 ) { memoize(input, 10, importDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "importDeclaration"

    public static class typeDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeDeclaration"
    // ../etc/JamlAttrHash.g:329:1: typeDeclaration : modifierList ( classTypeDeclaration[$modifierList.tree] | interfaceTypeDeclaration[$modifierList.tree] | enumTypeDeclaration[$modifierList.tree] | annotationTypeDeclaration[$modifierList.tree] ) ;
    public final JamlAttrHashParser.typeDeclaration_return typeDeclaration() throws RecognitionException {
    traceIn("typeDeclaration", 11);
        JamlAttrHashParser.typeDeclaration_return retval = new JamlAttrHashParser.typeDeclaration_return();
        retval.start = input.LT(1);
        int typeDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.modifierList_return modifierList25 = null;

        JamlAttrHashParser.classTypeDeclaration_return classTypeDeclaration26 = null;

        JamlAttrHashParser.interfaceTypeDeclaration_return interfaceTypeDeclaration27 = null;

        JamlAttrHashParser.enumTypeDeclaration_return enumTypeDeclaration28 = null;

        JamlAttrHashParser.annotationTypeDeclaration_return annotationTypeDeclaration29 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }
            // ../etc/JamlAttrHash.g:330:5: ( modifierList ( classTypeDeclaration[$modifierList.tree] | interfaceTypeDeclaration[$modifierList.tree] | enumTypeDeclaration[$modifierList.tree] | annotationTypeDeclaration[$modifierList.tree] ) )
            // ../etc/JamlAttrHash.g:330:9: modifierList ( classTypeDeclaration[$modifierList.tree] | interfaceTypeDeclaration[$modifierList.tree] | enumTypeDeclaration[$modifierList.tree] | annotationTypeDeclaration[$modifierList.tree] )
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_modifierList_in_typeDeclaration4888);
            modifierList25=modifierList();

            state._fsp--;
            if (state.failed) return retval;
            // ../etc/JamlAttrHash.g:331:9: ( classTypeDeclaration[$modifierList.tree] | interfaceTypeDeclaration[$modifierList.tree] | enumTypeDeclaration[$modifierList.tree] | annotationTypeDeclaration[$modifierList.tree] )
            int alt10=4;
            switch ( input.LA(1) ) {
            case CLASS:
                {
                alt10=1;
                }
                break;
            case INTERFACE:
                {
                alt10=2;
                }
                break;
            case ENUM:
                {
                alt10=3;
                }
                break;
            case AT:
                {
                alt10=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                throw nvae;
            }

            switch (alt10) {
                case 1 :
                    // ../etc/JamlAttrHash.g:331:13: classTypeDeclaration[$modifierList.tree]
                    {
                    pushFollow(FOLLOW_classTypeDeclaration_in_typeDeclaration4903);
                    classTypeDeclaration26=classTypeDeclaration((modifierList25!=null?((CommonTree)modifierList25.tree):null));

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classTypeDeclaration26.getTree());

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:332:13: interfaceTypeDeclaration[$modifierList.tree]
                    {
                    pushFollow(FOLLOW_interfaceTypeDeclaration_in_typeDeclaration4918);
                    interfaceTypeDeclaration27=interfaceTypeDeclaration((modifierList25!=null?((CommonTree)modifierList25.tree):null));

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceTypeDeclaration27.getTree());

                    }
                    break;
                case 3 :
                    // ../etc/JamlAttrHash.g:333:13: enumTypeDeclaration[$modifierList.tree]
                    {
                    pushFollow(FOLLOW_enumTypeDeclaration_in_typeDeclaration4933);
                    enumTypeDeclaration28=enumTypeDeclaration((modifierList25!=null?((CommonTree)modifierList25.tree):null));

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumTypeDeclaration28.getTree());

                    }
                    break;
                case 4 :
                    // ../etc/JamlAttrHash.g:334:13: annotationTypeDeclaration[$modifierList.tree]
                    {
                    pushFollow(FOLLOW_annotationTypeDeclaration_in_typeDeclaration4948);
                    annotationTypeDeclaration29=annotationTypeDeclaration((modifierList25!=null?((CommonTree)modifierList25.tree):null));

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeDeclaration29.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("typeDeclaration", 11);
            if ( state.backtracking>0 ) { memoize(input, 11, typeDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeDeclaration"

    public static class classTypeDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classTypeDeclaration"
    // ../etc/JamlAttrHash.g:338:1: classTypeDeclaration[CommonTree modifiers] : CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody -> ^( CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody ) ;
    public final JamlAttrHashParser.classTypeDeclaration_return classTypeDeclaration(CommonTree modifiers) throws RecognitionException {
    traceIn("classTypeDeclaration", 12);
        JamlAttrHashParser.classTypeDeclaration_return retval = new JamlAttrHashParser.classTypeDeclaration_return();
        retval.start = input.LT(1);
        int classTypeDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token CLASS30=null;
        Token IDENT31=null;
        JamlAttrHashParser.genericTypeParameterList_return genericTypeParameterList32 = null;

        JamlAttrHashParser.classExtendsClause_return classExtendsClause33 = null;

        JamlAttrHashParser.implementsClause_return implementsClause34 = null;

        JamlAttrHashParser.classBody_return classBody35 = null;


        CommonTree CLASS30_tree=null;
        CommonTree IDENT31_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
        RewriteRuleSubtreeStream stream_genericTypeParameterList=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeParameterList");
        RewriteRuleSubtreeStream stream_classExtendsClause=new RewriteRuleSubtreeStream(adaptor,"rule classExtendsClause");
        RewriteRuleSubtreeStream stream_implementsClause=new RewriteRuleSubtreeStream(adaptor,"rule implementsClause");
        RewriteRuleSubtreeStream stream_classBody=new RewriteRuleSubtreeStream(adaptor,"rule classBody");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }
            // ../etc/JamlAttrHash.g:339:5: ( CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody -> ^( CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody ) )
            // ../etc/JamlAttrHash.g:339:9: CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody
            {
            CLASS30=(Token)match(input,CLASS,FOLLOW_CLASS_in_classTypeDeclaration4983); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLASS.add(CLASS30);

            IDENT31=(Token)match(input,IDENT,FOLLOW_IDENT_in_classTypeDeclaration4985); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT31);

            // ../etc/JamlAttrHash.g:339:21: ( genericTypeParameterList )?
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==LESS_THAN) ) {
                alt11=1;
            }
            switch (alt11) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: genericTypeParameterList
                    {
                    pushFollow(FOLLOW_genericTypeParameterList_in_classTypeDeclaration4987);
                    genericTypeParameterList32=genericTypeParameterList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_genericTypeParameterList.add(genericTypeParameterList32.getTree());

                    }
                    break;

            }

            // ../etc/JamlAttrHash.g:339:47: ( classExtendsClause )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==EXTENDS) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: classExtendsClause
                    {
                    pushFollow(FOLLOW_classExtendsClause_in_classTypeDeclaration4990);
                    classExtendsClause33=classExtendsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classExtendsClause.add(classExtendsClause33.getTree());

                    }
                    break;

            }

            // ../etc/JamlAttrHash.g:339:67: ( implementsClause )?
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==IMPLEMENTS) ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: implementsClause
                    {
                    pushFollow(FOLLOW_implementsClause_in_classTypeDeclaration4993);
                    implementsClause34=implementsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_implementsClause.add(implementsClause34.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_classBody_in_classTypeDeclaration4996);
            classBody35=classBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classBody.add(classBody35.getTree());


            // AST REWRITE
            // elements: genericTypeParameterList, classBody, classExtendsClause, CLASS, implementsClause, IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 340:9: -> ^( CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody )
            {
                // ../etc/JamlAttrHash.g:340:13: ^( CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_CLASS.nextNode(), root_1);

                adaptor.addChild(root_1, modifiers);
                adaptor.addChild(root_1, stream_IDENT.nextNode());
                // ../etc/JamlAttrHash.g:340:40: ( genericTypeParameterList )?
                if ( stream_genericTypeParameterList.hasNext() ) {
                    adaptor.addChild(root_1, stream_genericTypeParameterList.nextTree());

                }
                stream_genericTypeParameterList.reset();
                // ../etc/JamlAttrHash.g:340:66: ( classExtendsClause )?
                if ( stream_classExtendsClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_classExtendsClause.nextTree());

                }
                stream_classExtendsClause.reset();
                // ../etc/JamlAttrHash.g:340:86: ( implementsClause )?
                if ( stream_implementsClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_implementsClause.nextTree());

                }
                stream_implementsClause.reset();
                adaptor.addChild(root_1, stream_classBody.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("classTypeDeclaration", 12);
            if ( state.backtracking>0 ) { memoize(input, 12, classTypeDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classTypeDeclaration"

    public static class classExtendsClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classExtendsClause"
    // ../etc/JamlAttrHash.g:343:1: classExtendsClause : EXTENDS type -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] type ) ;
    public final JamlAttrHashParser.classExtendsClause_return classExtendsClause() throws RecognitionException {
    traceIn("classExtendsClause", 13);
        JamlAttrHashParser.classExtendsClause_return retval = new JamlAttrHashParser.classExtendsClause_return();
        retval.start = input.LT(1);
        int classExtendsClause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token EXTENDS36=null;
        JamlAttrHashParser.type_return type37 = null;


        CommonTree EXTENDS36_tree=null;
        RewriteRuleTokenStream stream_EXTENDS=new RewriteRuleTokenStream(adaptor,"token EXTENDS");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }
            // ../etc/JamlAttrHash.g:344:5: ( EXTENDS type -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] type ) )
            // ../etc/JamlAttrHash.g:344:9: EXTENDS type
            {
            EXTENDS36=(Token)match(input,EXTENDS,FOLLOW_EXTENDS_in_classExtendsClause5049); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXTENDS.add(EXTENDS36);

            pushFollow(FOLLOW_type_in_classExtendsClause5051);
            type37=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type37.getTree());


            // AST REWRITE
            // elements: type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 345:9: -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] type )
            {
                // ../etc/JamlAttrHash.g:345:13: ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] type )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXTENDS_CLAUSE, EXTENDS36, "EXTENDS_CLAUSE"), root_1);

                adaptor.addChild(root_1, stream_type.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("classExtendsClause", 13);
            if ( state.backtracking>0 ) { memoize(input, 13, classExtendsClause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classExtendsClause"

    public static class interfaceExtendsClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceExtendsClause"
    // ../etc/JamlAttrHash.g:348:1: interfaceExtendsClause : EXTENDS typeList -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] typeList ) ;
    public final JamlAttrHashParser.interfaceExtendsClause_return interfaceExtendsClause() throws RecognitionException {
    traceIn("interfaceExtendsClause", 14);
        JamlAttrHashParser.interfaceExtendsClause_return retval = new JamlAttrHashParser.interfaceExtendsClause_return();
        retval.start = input.LT(1);
        int interfaceExtendsClause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token EXTENDS38=null;
        JamlAttrHashParser.typeList_return typeList39 = null;


        CommonTree EXTENDS38_tree=null;
        RewriteRuleTokenStream stream_EXTENDS=new RewriteRuleTokenStream(adaptor,"token EXTENDS");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }
            // ../etc/JamlAttrHash.g:349:5: ( EXTENDS typeList -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] typeList ) )
            // ../etc/JamlAttrHash.g:349:9: EXTENDS typeList
            {
            EXTENDS38=(Token)match(input,EXTENDS,FOLLOW_EXTENDS_in_interfaceExtendsClause5095); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXTENDS.add(EXTENDS38);

            pushFollow(FOLLOW_typeList_in_interfaceExtendsClause5097);
            typeList39=typeList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeList.add(typeList39.getTree());


            // AST REWRITE
            // elements: typeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 350:9: -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] typeList )
            {
                // ../etc/JamlAttrHash.g:350:13: ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] typeList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXTENDS_CLAUSE, EXTENDS38, "EXTENDS_CLAUSE"), root_1);

                adaptor.addChild(root_1, stream_typeList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("interfaceExtendsClause", 14);
            if ( state.backtracking>0 ) { memoize(input, 14, interfaceExtendsClause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceExtendsClause"

    public static class implementsClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "implementsClause"
    // ../etc/JamlAttrHash.g:353:1: implementsClause : IMPLEMENTS typeList -> ^( IMPLEMENTS_CLAUSE[$IMPLEMENTS, \"IMPLEMENTS_CLAUSE\"] typeList ) ;
    public final JamlAttrHashParser.implementsClause_return implementsClause() throws RecognitionException {
    traceIn("implementsClause", 15);
        JamlAttrHashParser.implementsClause_return retval = new JamlAttrHashParser.implementsClause_return();
        retval.start = input.LT(1);
        int implementsClause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IMPLEMENTS40=null;
        JamlAttrHashParser.typeList_return typeList41 = null;


        CommonTree IMPLEMENTS40_tree=null;
        RewriteRuleTokenStream stream_IMPLEMENTS=new RewriteRuleTokenStream(adaptor,"token IMPLEMENTS");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }
            // ../etc/JamlAttrHash.g:354:5: ( IMPLEMENTS typeList -> ^( IMPLEMENTS_CLAUSE[$IMPLEMENTS, \"IMPLEMENTS_CLAUSE\"] typeList ) )
            // ../etc/JamlAttrHash.g:354:9: IMPLEMENTS typeList
            {
            IMPLEMENTS40=(Token)match(input,IMPLEMENTS,FOLLOW_IMPLEMENTS_in_implementsClause5141); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IMPLEMENTS.add(IMPLEMENTS40);

            pushFollow(FOLLOW_typeList_in_implementsClause5143);
            typeList41=typeList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeList.add(typeList41.getTree());


            // AST REWRITE
            // elements: typeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 355:9: -> ^( IMPLEMENTS_CLAUSE[$IMPLEMENTS, \"IMPLEMENTS_CLAUSE\"] typeList )
            {
                // ../etc/JamlAttrHash.g:355:13: ^( IMPLEMENTS_CLAUSE[$IMPLEMENTS, \"IMPLEMENTS_CLAUSE\"] typeList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IMPLEMENTS_CLAUSE, IMPLEMENTS40, "IMPLEMENTS_CLAUSE"), root_1);

                adaptor.addChild(root_1, stream_typeList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("implementsClause", 15);
            if ( state.backtracking>0 ) { memoize(input, 15, implementsClause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "implementsClause"

    public static class genericTypeParameterList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericTypeParameterList"
    // ../etc/JamlAttrHash.g:358:1: genericTypeParameterList : LESS_THAN genericTypeParameter ( COMMA genericTypeParameter )* genericTypeListClosing -> ^( GENERIC_TYPE_PARAM_LIST[$LESS_THAN, \"GENERIC_TYPE_PARAM_LIST\"] ( genericTypeParameter )+ ) ;
    public final JamlAttrHashParser.genericTypeParameterList_return genericTypeParameterList() throws RecognitionException {
    traceIn("genericTypeParameterList", 16);
        JamlAttrHashParser.genericTypeParameterList_return retval = new JamlAttrHashParser.genericTypeParameterList_return();
        retval.start = input.LT(1);
        int genericTypeParameterList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LESS_THAN42=null;
        Token COMMA44=null;
        JamlAttrHashParser.genericTypeParameter_return genericTypeParameter43 = null;

        JamlAttrHashParser.genericTypeParameter_return genericTypeParameter45 = null;

        JamlAttrHashParser.genericTypeListClosing_return genericTypeListClosing46 = null;


        CommonTree LESS_THAN42_tree=null;
        CommonTree COMMA44_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LESS_THAN=new RewriteRuleTokenStream(adaptor,"token LESS_THAN");
        RewriteRuleSubtreeStream stream_genericTypeParameter=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeParameter");
        RewriteRuleSubtreeStream stream_genericTypeListClosing=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeListClosing");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }
            // ../etc/JamlAttrHash.g:359:5: ( LESS_THAN genericTypeParameter ( COMMA genericTypeParameter )* genericTypeListClosing -> ^( GENERIC_TYPE_PARAM_LIST[$LESS_THAN, \"GENERIC_TYPE_PARAM_LIST\"] ( genericTypeParameter )+ ) )
            // ../etc/JamlAttrHash.g:359:9: LESS_THAN genericTypeParameter ( COMMA genericTypeParameter )* genericTypeListClosing
            {
            LESS_THAN42=(Token)match(input,LESS_THAN,FOLLOW_LESS_THAN_in_genericTypeParameterList5188); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LESS_THAN.add(LESS_THAN42);

            pushFollow(FOLLOW_genericTypeParameter_in_genericTypeParameterList5190);
            genericTypeParameter43=genericTypeParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_genericTypeParameter.add(genericTypeParameter43.getTree());
            // ../etc/JamlAttrHash.g:359:40: ( COMMA genericTypeParameter )*
            loop14:
            do {
                int alt14=2;
                int LA14_0 = input.LA(1);

                if ( (LA14_0==COMMA) ) {
                    alt14=1;
                }


                switch (alt14) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:359:41: COMMA genericTypeParameter
            	    {
            	    COMMA44=(Token)match(input,COMMA,FOLLOW_COMMA_in_genericTypeParameterList5193); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA44);

            	    pushFollow(FOLLOW_genericTypeParameter_in_genericTypeParameterList5195);
            	    genericTypeParameter45=genericTypeParameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_genericTypeParameter.add(genericTypeParameter45.getTree());

            	    }
            	    break;

            	default :
            	    break loop14;
                }
            } while (true);

            pushFollow(FOLLOW_genericTypeListClosing_in_genericTypeParameterList5199);
            genericTypeListClosing46=genericTypeListClosing();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_genericTypeListClosing.add(genericTypeListClosing46.getTree());


            // AST REWRITE
            // elements: genericTypeParameter
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 360:9: -> ^( GENERIC_TYPE_PARAM_LIST[$LESS_THAN, \"GENERIC_TYPE_PARAM_LIST\"] ( genericTypeParameter )+ )
            {
                // ../etc/JamlAttrHash.g:360:13: ^( GENERIC_TYPE_PARAM_LIST[$LESS_THAN, \"GENERIC_TYPE_PARAM_LIST\"] ( genericTypeParameter )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GENERIC_TYPE_PARAM_LIST, LESS_THAN42, "GENERIC_TYPE_PARAM_LIST"), root_1);

                if ( !(stream_genericTypeParameter.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_genericTypeParameter.hasNext() ) {
                    adaptor.addChild(root_1, stream_genericTypeParameter.nextTree());

                }
                stream_genericTypeParameter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("genericTypeParameterList", 16);
            if ( state.backtracking>0 ) { memoize(input, 16, genericTypeParameterList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "genericTypeParameterList"

    public static class genericTypeListClosing_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericTypeListClosing"
    // ../etc/JamlAttrHash.g:363:1: genericTypeListClosing : ( GREATER_THAN | SHIFT_RIGHT | BIT_SHIFT_RIGHT | );
    public final JamlAttrHashParser.genericTypeListClosing_return genericTypeListClosing() throws RecognitionException {
    traceIn("genericTypeListClosing", 17);
        JamlAttrHashParser.genericTypeListClosing_return retval = new JamlAttrHashParser.genericTypeListClosing_return();
        retval.start = input.LT(1);
        int genericTypeListClosing_StartIndex = input.index();
        CommonTree root_0 = null;

        Token GREATER_THAN47=null;
        Token SHIFT_RIGHT48=null;
        Token BIT_SHIFT_RIGHT49=null;

        CommonTree GREATER_THAN47_tree=null;
        CommonTree SHIFT_RIGHT48_tree=null;
        CommonTree BIT_SHIFT_RIGHT49_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }
            // ../etc/JamlAttrHash.g:367:5: ( GREATER_THAN | SHIFT_RIGHT | BIT_SHIFT_RIGHT | )
            int alt15=4;
            switch ( input.LA(1) ) {
            case GREATER_THAN:
                {
                int LA15_1 = input.LA(2);

                if ( (synpred24_JamlAttrHash()) ) {
                    alt15=1;
                }
                else if ( (true) ) {
                    alt15=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 15, 1, input);

                    throw nvae;
                }
                }
                break;
            case SHIFT_RIGHT:
                {
                int LA15_2 = input.LA(2);

                if ( (synpred25_JamlAttrHash()) ) {
                    alt15=2;
                }
                else if ( (true) ) {
                    alt15=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 15, 2, input);

                    throw nvae;
                }
                }
                break;
            case BIT_SHIFT_RIGHT:
                {
                int LA15_3 = input.LA(2);

                if ( (synpred26_JamlAttrHash()) ) {
                    alt15=3;
                }
                else if ( (true) ) {
                    alt15=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 15, 3, input);

                    throw nvae;
                }
                }
                break;
            case EOF:
            case AND:
            case AND_ASSIGN:
            case ASSIGN:
            case BIT_SHIFT_RIGHT_ASSIGN:
            case COLON:
            case COMMA:
            case DIV_ASSIGN:
            case DOT:
            case ELLIPSIS:
            case EQUAL:
            case LBRACK:
            case LCURLY:
            case LOGICAL_AND:
            case LOGICAL_OR:
            case LPAREN:
            case MINUS_ASSIGN:
            case MOD_ASSIGN:
            case NOT_EQUAL:
            case OR:
            case OR_ASSIGN:
            case PLUS_ASSIGN:
            case QUESTION:
            case RBRACK:
            case RCURLY:
            case RPAREN:
            case SEMI:
            case SHIFT_LEFT_ASSIGN:
            case SHIFT_RIGHT_ASSIGN:
            case STAR_ASSIGN:
            case XOR:
            case XOR_ASSIGN:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case EXTENDS:
            case FLOAT:
            case IMPLEMENTS:
            case INT:
            case LONG:
            case SHORT:
            case SUPER:
            case THIS:
            case VOID:
            case IDENT:
                {
                alt15=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 15, 0, input);

                throw nvae;
            }

            switch (alt15) {
                case 1 :
                    // ../etc/JamlAttrHash.g:367:9: GREATER_THAN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    GREATER_THAN47=(Token)match(input,GREATER_THAN,FOLLOW_GREATER_THAN_in_genericTypeListClosing5314); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GREATER_THAN47_tree = (CommonTree)adaptor.create(GREATER_THAN47);
                    adaptor.addChild(root_0, GREATER_THAN47_tree);
                    }

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:368:9: SHIFT_RIGHT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SHIFT_RIGHT48=(Token)match(input,SHIFT_RIGHT,FOLLOW_SHIFT_RIGHT_in_genericTypeListClosing5324); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SHIFT_RIGHT48_tree = (CommonTree)adaptor.create(SHIFT_RIGHT48);
                    adaptor.addChild(root_0, SHIFT_RIGHT48_tree);
                    }

                    }
                    break;
                case 3 :
                    // ../etc/JamlAttrHash.g:369:9: BIT_SHIFT_RIGHT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    BIT_SHIFT_RIGHT49=(Token)match(input,BIT_SHIFT_RIGHT,FOLLOW_BIT_SHIFT_RIGHT_in_genericTypeListClosing5334); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BIT_SHIFT_RIGHT49_tree = (CommonTree)adaptor.create(BIT_SHIFT_RIGHT49);
                    adaptor.addChild(root_0, BIT_SHIFT_RIGHT49_tree);
                    }

                    }
                    break;
                case 4 :
                    // ../etc/JamlAttrHash.g:371:5: 
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("genericTypeListClosing", 17);
            if ( state.backtracking>0 ) { memoize(input, 17, genericTypeListClosing_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "genericTypeListClosing"

    public static class genericTypeParameter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericTypeParameter"
    // ../etc/JamlAttrHash.g:373:1: genericTypeParameter : IDENT ( bound )? -> ^( IDENT ( bound )? ) ;
    public final JamlAttrHashParser.genericTypeParameter_return genericTypeParameter() throws RecognitionException {
    traceIn("genericTypeParameter", 18);
        JamlAttrHashParser.genericTypeParameter_return retval = new JamlAttrHashParser.genericTypeParameter_return();
        retval.start = input.LT(1);
        int genericTypeParameter_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT50=null;
        JamlAttrHashParser.bound_return bound51 = null;


        CommonTree IDENT50_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_bound=new RewriteRuleSubtreeStream(adaptor,"rule bound");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }
            // ../etc/JamlAttrHash.g:374:5: ( IDENT ( bound )? -> ^( IDENT ( bound )? ) )
            // ../etc/JamlAttrHash.g:374:9: IDENT ( bound )?
            {
            IDENT50=(Token)match(input,IDENT,FOLLOW_IDENT_in_genericTypeParameter5362); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT50);

            // ../etc/JamlAttrHash.g:374:15: ( bound )?
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==EXTENDS) ) {
                int LA16_1 = input.LA(2);

                if ( (LA16_1==BOOLEAN||LA16_1==BYTE||LA16_1==CHAR||LA16_1==DOUBLE||LA16_1==FLOAT||(LA16_1>=INT && LA16_1<=LONG)||LA16_1==SHORT) ) {
                    int LA16_3 = input.LA(3);

                    if ( (synpred27_JamlAttrHash()) ) {
                        alt16=1;
                    }
                }
                else if ( (LA16_1==IDENT) ) {
                    int LA16_4 = input.LA(3);

                    if ( (synpred27_JamlAttrHash()) ) {
                        alt16=1;
                    }
                }
            }
            switch (alt16) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: bound
                    {
                    pushFollow(FOLLOW_bound_in_genericTypeParameter5364);
                    bound51=bound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bound.add(bound51.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: IDENT, bound
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 375:9: -> ^( IDENT ( bound )? )
            {
                // ../etc/JamlAttrHash.g:375:13: ^( IDENT ( bound )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_IDENT.nextNode(), root_1);

                // ../etc/JamlAttrHash.g:375:21: ( bound )?
                if ( stream_bound.hasNext() ) {
                    adaptor.addChild(root_1, stream_bound.nextTree());

                }
                stream_bound.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("genericTypeParameter", 18);
            if ( state.backtracking>0 ) { memoize(input, 18, genericTypeParameter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "genericTypeParameter"

    public static class bound_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bound"
    // ../etc/JamlAttrHash.g:378:1: bound : EXTENDS type ( AND type )* -> ^( EXTENDS_BOUND_LIST[$EXTENDS, \"EXTENDS_BOUND_LIST\"] ( type )+ ) ;
    public final JamlAttrHashParser.bound_return bound() throws RecognitionException {
    traceIn("bound", 19);
        JamlAttrHashParser.bound_return retval = new JamlAttrHashParser.bound_return();
        retval.start = input.LT(1);
        int bound_StartIndex = input.index();
        CommonTree root_0 = null;

        Token EXTENDS52=null;
        Token AND54=null;
        JamlAttrHashParser.type_return type53 = null;

        JamlAttrHashParser.type_return type55 = null;


        CommonTree EXTENDS52_tree=null;
        CommonTree AND54_tree=null;
        RewriteRuleTokenStream stream_AND=new RewriteRuleTokenStream(adaptor,"token AND");
        RewriteRuleTokenStream stream_EXTENDS=new RewriteRuleTokenStream(adaptor,"token EXTENDS");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }
            // ../etc/JamlAttrHash.g:379:5: ( EXTENDS type ( AND type )* -> ^( EXTENDS_BOUND_LIST[$EXTENDS, \"EXTENDS_BOUND_LIST\"] ( type )+ ) )
            // ../etc/JamlAttrHash.g:379:9: EXTENDS type ( AND type )*
            {
            EXTENDS52=(Token)match(input,EXTENDS,FOLLOW_EXTENDS_in_bound5410); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXTENDS.add(EXTENDS52);

            pushFollow(FOLLOW_type_in_bound5412);
            type53=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type53.getTree());
            // ../etc/JamlAttrHash.g:379:22: ( AND type )*
            loop17:
            do {
                int alt17=2;
                int LA17_0 = input.LA(1);

                if ( (LA17_0==AND) ) {
                    alt17=1;
                }


                switch (alt17) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:379:23: AND type
            	    {
            	    AND54=(Token)match(input,AND,FOLLOW_AND_in_bound5415); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND.add(AND54);

            	    pushFollow(FOLLOW_type_in_bound5417);
            	    type55=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_type.add(type55.getTree());

            	    }
            	    break;

            	default :
            	    break loop17;
                }
            } while (true);



            // AST REWRITE
            // elements: type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 380:9: -> ^( EXTENDS_BOUND_LIST[$EXTENDS, \"EXTENDS_BOUND_LIST\"] ( type )+ )
            {
                // ../etc/JamlAttrHash.g:380:13: ^( EXTENDS_BOUND_LIST[$EXTENDS, \"EXTENDS_BOUND_LIST\"] ( type )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXTENDS_BOUND_LIST, EXTENDS52, "EXTENDS_BOUND_LIST"), root_1);

                if ( !(stream_type.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_type.hasNext() ) {
                    adaptor.addChild(root_1, stream_type.nextTree());

                }
                stream_type.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("bound", 19);
            if ( state.backtracking>0 ) { memoize(input, 19, bound_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bound"

    public static class enumTypeDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumTypeDeclaration"
    // ../etc/JamlAttrHash.g:383:1: enumTypeDeclaration[CommonTree modifiers] : ENUM IDENT ( implementsClause )? enumBody -> ^( ENUM IDENT ( implementsClause )? enumBody ) ;
    public final JamlAttrHashParser.enumTypeDeclaration_return enumTypeDeclaration(CommonTree modifiers) throws RecognitionException {
    traceIn("enumTypeDeclaration", 20);
        JamlAttrHashParser.enumTypeDeclaration_return retval = new JamlAttrHashParser.enumTypeDeclaration_return();
        retval.start = input.LT(1);
        int enumTypeDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ENUM56=null;
        Token IDENT57=null;
        JamlAttrHashParser.implementsClause_return implementsClause58 = null;

        JamlAttrHashParser.enumBody_return enumBody59 = null;


        CommonTree ENUM56_tree=null;
        CommonTree IDENT57_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_ENUM=new RewriteRuleTokenStream(adaptor,"token ENUM");
        RewriteRuleSubtreeStream stream_implementsClause=new RewriteRuleSubtreeStream(adaptor,"rule implementsClause");
        RewriteRuleSubtreeStream stream_enumBody=new RewriteRuleSubtreeStream(adaptor,"rule enumBody");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }
            // ../etc/JamlAttrHash.g:384:5: ( ENUM IDENT ( implementsClause )? enumBody -> ^( ENUM IDENT ( implementsClause )? enumBody ) )
            // ../etc/JamlAttrHash.g:384:9: ENUM IDENT ( implementsClause )? enumBody
            {
            ENUM56=(Token)match(input,ENUM,FOLLOW_ENUM_in_enumTypeDeclaration5458); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ENUM.add(ENUM56);

            IDENT57=(Token)match(input,IDENT,FOLLOW_IDENT_in_enumTypeDeclaration5460); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT57);

            // ../etc/JamlAttrHash.g:384:20: ( implementsClause )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==IMPLEMENTS) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: implementsClause
                    {
                    pushFollow(FOLLOW_implementsClause_in_enumTypeDeclaration5462);
                    implementsClause58=implementsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_implementsClause.add(implementsClause58.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_enumBody_in_enumTypeDeclaration5465);
            enumBody59=enumBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_enumBody.add(enumBody59.getTree());


            // AST REWRITE
            // elements: enumBody, ENUM, implementsClause, IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 385:9: -> ^( ENUM IDENT ( implementsClause )? enumBody )
            {
                // ../etc/JamlAttrHash.g:385:13: ^( ENUM IDENT ( implementsClause )? enumBody )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_ENUM.nextNode(), root_1);

                adaptor.addChild(root_1, modifiers);
                adaptor.addChild(root_1, stream_IDENT.nextNode());
                // ../etc/JamlAttrHash.g:385:39: ( implementsClause )?
                if ( stream_implementsClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_implementsClause.nextTree());

                }
                stream_implementsClause.reset();
                adaptor.addChild(root_1, stream_enumBody.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("enumTypeDeclaration", 20);
            if ( state.backtracking>0 ) { memoize(input, 20, enumTypeDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumTypeDeclaration"

    public static class enumBody_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumBody"
    // ../etc/JamlAttrHash.g:388:1: enumBody : LCURLY enumScopeDeclarations RCURLY -> ^( ENUM_TOP_LEVEL_SCOPE[$LCURLY, \"ENUM_TOP_LEVEL_SCOPE\"] enumScopeDeclarations ) ;
    public final JamlAttrHashParser.enumBody_return enumBody() throws RecognitionException {
    traceIn("enumBody", 21);
        JamlAttrHashParser.enumBody_return retval = new JamlAttrHashParser.enumBody_return();
        retval.start = input.LT(1);
        int enumBody_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LCURLY60=null;
        Token RCURLY62=null;
        JamlAttrHashParser.enumScopeDeclarations_return enumScopeDeclarations61 = null;


        CommonTree LCURLY60_tree=null;
        CommonTree RCURLY62_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_enumScopeDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule enumScopeDeclarations");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }
            // ../etc/JamlAttrHash.g:389:5: ( LCURLY enumScopeDeclarations RCURLY -> ^( ENUM_TOP_LEVEL_SCOPE[$LCURLY, \"ENUM_TOP_LEVEL_SCOPE\"] enumScopeDeclarations ) )
            // ../etc/JamlAttrHash.g:389:9: LCURLY enumScopeDeclarations RCURLY
            {
            LCURLY60=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_enumBody5512); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY60);

            pushFollow(FOLLOW_enumScopeDeclarations_in_enumBody5514);
            enumScopeDeclarations61=enumScopeDeclarations();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_enumScopeDeclarations.add(enumScopeDeclarations61.getTree());
            RCURLY62=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_enumBody5516); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY62);



            // AST REWRITE
            // elements: enumScopeDeclarations
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 390:9: -> ^( ENUM_TOP_LEVEL_SCOPE[$LCURLY, \"ENUM_TOP_LEVEL_SCOPE\"] enumScopeDeclarations )
            {
                // ../etc/JamlAttrHash.g:390:13: ^( ENUM_TOP_LEVEL_SCOPE[$LCURLY, \"ENUM_TOP_LEVEL_SCOPE\"] enumScopeDeclarations )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ENUM_TOP_LEVEL_SCOPE, LCURLY60, "ENUM_TOP_LEVEL_SCOPE"), root_1);

                adaptor.addChild(root_1, stream_enumScopeDeclarations.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("enumBody", 21);
            if ( state.backtracking>0 ) { memoize(input, 21, enumBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumBody"

    public static class enumScopeDeclarations_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumScopeDeclarations"
    // ../etc/JamlAttrHash.g:393:1: enumScopeDeclarations : enumConstants ( COMMA )? ( enumClassScopeDeclarations )? ;
    public final JamlAttrHashParser.enumScopeDeclarations_return enumScopeDeclarations() throws RecognitionException {
    traceIn("enumScopeDeclarations", 22);
        JamlAttrHashParser.enumScopeDeclarations_return retval = new JamlAttrHashParser.enumScopeDeclarations_return();
        retval.start = input.LT(1);
        int enumScopeDeclarations_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA64=null;
        JamlAttrHashParser.enumConstants_return enumConstants63 = null;

        JamlAttrHashParser.enumClassScopeDeclarations_return enumClassScopeDeclarations65 = null;


        CommonTree COMMA64_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }
            // ../etc/JamlAttrHash.g:394:5: ( enumConstants ( COMMA )? ( enumClassScopeDeclarations )? )
            // ../etc/JamlAttrHash.g:394:9: enumConstants ( COMMA )? ( enumClassScopeDeclarations )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_enumConstants_in_enumScopeDeclarations5553);
            enumConstants63=enumConstants();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, enumConstants63.getTree());
            // ../etc/JamlAttrHash.g:394:23: ( COMMA )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==COMMA) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // ../etc/JamlAttrHash.g:394:24: COMMA
                    {
                    COMMA64=(Token)match(input,COMMA,FOLLOW_COMMA_in_enumScopeDeclarations5556); if (state.failed) return retval;

                    }
                    break;

            }

            // ../etc/JamlAttrHash.g:394:33: ( enumClassScopeDeclarations )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==SEMI) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: enumClassScopeDeclarations
                    {
                    pushFollow(FOLLOW_enumClassScopeDeclarations_in_enumScopeDeclarations5561);
                    enumClassScopeDeclarations65=enumClassScopeDeclarations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumClassScopeDeclarations65.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("enumScopeDeclarations", 22);
            if ( state.backtracking>0 ) { memoize(input, 22, enumScopeDeclarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumScopeDeclarations"

    public static class enumClassScopeDeclarations_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumClassScopeDeclarations"
    // ../etc/JamlAttrHash.g:397:1: enumClassScopeDeclarations : SEMI ( classScopeDeclarations )* -> ^( CLASS_TOP_LEVEL_SCOPE[$SEMI, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* ) ;
    public final JamlAttrHashParser.enumClassScopeDeclarations_return enumClassScopeDeclarations() throws RecognitionException {
    traceIn("enumClassScopeDeclarations", 23);
        JamlAttrHashParser.enumClassScopeDeclarations_return retval = new JamlAttrHashParser.enumClassScopeDeclarations_return();
        retval.start = input.LT(1);
        int enumClassScopeDeclarations_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SEMI66=null;
        JamlAttrHashParser.classScopeDeclarations_return classScopeDeclarations67 = null;


        CommonTree SEMI66_tree=null;
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleSubtreeStream stream_classScopeDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule classScopeDeclarations");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }
            // ../etc/JamlAttrHash.g:398:5: ( SEMI ( classScopeDeclarations )* -> ^( CLASS_TOP_LEVEL_SCOPE[$SEMI, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* ) )
            // ../etc/JamlAttrHash.g:398:9: SEMI ( classScopeDeclarations )*
            {
            SEMI66=(Token)match(input,SEMI,FOLLOW_SEMI_in_enumClassScopeDeclarations5581); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(SEMI66);

            // ../etc/JamlAttrHash.g:398:14: ( classScopeDeclarations )*
            loop21:
            do {
                int alt21=2;
                int LA21_0 = input.LA(1);

                if ( (LA21_0==AT||LA21_0==LCURLY||LA21_0==LESS_THAN||LA21_0==SEMI||LA21_0==ABSTRACT||LA21_0==BOOLEAN||LA21_0==BYTE||(LA21_0>=CHAR && LA21_0<=CLASS)||LA21_0==DOUBLE||LA21_0==ENUM||LA21_0==FINAL||LA21_0==FLOAT||LA21_0==INTERFACE||(LA21_0>=INT && LA21_0<=NATIVE)||(LA21_0>=PRIVATE && LA21_0<=PUBLIC)||(LA21_0>=SHORT && LA21_0<=STRICTFP)||LA21_0==SYNCHRONIZED||LA21_0==TRANSIENT||(LA21_0>=VOID && LA21_0<=VOLATILE)||LA21_0==IDENT) ) {
                    alt21=1;
                }


                switch (alt21) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:0:0: classScopeDeclarations
            	    {
            	    pushFollow(FOLLOW_classScopeDeclarations_in_enumClassScopeDeclarations5583);
            	    classScopeDeclarations67=classScopeDeclarations();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_classScopeDeclarations.add(classScopeDeclarations67.getTree());

            	    }
            	    break;

            	default :
            	    break loop21;
                }
            } while (true);



            // AST REWRITE
            // elements: classScopeDeclarations
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 399:9: -> ^( CLASS_TOP_LEVEL_SCOPE[$SEMI, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* )
            {
                // ../etc/JamlAttrHash.g:399:13: ^( CLASS_TOP_LEVEL_SCOPE[$SEMI, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_TOP_LEVEL_SCOPE, SEMI66, "CLASS_TOP_LEVEL_SCOPE"), root_1);

                // ../etc/JamlAttrHash.g:399:69: ( classScopeDeclarations )*
                while ( stream_classScopeDeclarations.hasNext() ) {
                    adaptor.addChild(root_1, stream_classScopeDeclarations.nextTree());

                }
                stream_classScopeDeclarations.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("enumClassScopeDeclarations", 23);
            if ( state.backtracking>0 ) { memoize(input, 23, enumClassScopeDeclarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumClassScopeDeclarations"

    public static class enumConstants_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumConstants"
    // ../etc/JamlAttrHash.g:402:1: enumConstants : enumConstant ( COMMA enumConstant )* ;
    public final JamlAttrHashParser.enumConstants_return enumConstants() throws RecognitionException {
    traceIn("enumConstants", 24);
        JamlAttrHashParser.enumConstants_return retval = new JamlAttrHashParser.enumConstants_return();
        retval.start = input.LT(1);
        int enumConstants_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA69=null;
        JamlAttrHashParser.enumConstant_return enumConstant68 = null;

        JamlAttrHashParser.enumConstant_return enumConstant70 = null;


        CommonTree COMMA69_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }
            // ../etc/JamlAttrHash.g:403:5: ( enumConstant ( COMMA enumConstant )* )
            // ../etc/JamlAttrHash.g:403:9: enumConstant ( COMMA enumConstant )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_enumConstant_in_enumConstants5622);
            enumConstant68=enumConstant();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, enumConstant68.getTree());
            // ../etc/JamlAttrHash.g:403:22: ( COMMA enumConstant )*
            loop22:
            do {
                int alt22=2;
                int LA22_0 = input.LA(1);

                if ( (LA22_0==COMMA) ) {
                    int LA22_1 = input.LA(2);

                    if ( (LA22_1==AT||LA22_1==IDENT) ) {
                        alt22=1;
                    }


                }


                switch (alt22) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:403:23: COMMA enumConstant
            	    {
            	    COMMA69=(Token)match(input,COMMA,FOLLOW_COMMA_in_enumConstants5625); if (state.failed) return retval;
            	    pushFollow(FOLLOW_enumConstant_in_enumConstants5628);
            	    enumConstant70=enumConstant();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumConstant70.getTree());

            	    }
            	    break;

            	default :
            	    break loop22;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("enumConstants", 24);
            if ( state.backtracking>0 ) { memoize(input, 24, enumConstants_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumConstants"

    public static class enumConstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumConstant"
    // ../etc/JamlAttrHash.g:406:1: enumConstant : annotationList IDENT ( arguments )? ( classBody )? ;
    public final JamlAttrHashParser.enumConstant_return enumConstant() throws RecognitionException {
    traceIn("enumConstant", 25);
        JamlAttrHashParser.enumConstant_return retval = new JamlAttrHashParser.enumConstant_return();
        retval.start = input.LT(1);
        int enumConstant_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT72=null;
        JamlAttrHashParser.annotationList_return annotationList71 = null;

        JamlAttrHashParser.arguments_return arguments73 = null;

        JamlAttrHashParser.classBody_return classBody74 = null;


        CommonTree IDENT72_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }
            // ../etc/JamlAttrHash.g:407:5: ( annotationList IDENT ( arguments )? ( classBody )? )
            // ../etc/JamlAttrHash.g:407:9: annotationList IDENT ( arguments )? ( classBody )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_annotationList_in_enumConstant5653);
            annotationList71=annotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationList71.getTree());
            IDENT72=(Token)match(input,IDENT,FOLLOW_IDENT_in_enumConstant5655); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT72_tree = (CommonTree)adaptor.create(IDENT72);
            root_0 = (CommonTree)adaptor.becomeRoot(IDENT72_tree, root_0);
            }
            // ../etc/JamlAttrHash.g:407:31: ( arguments )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==LPAREN) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: arguments
                    {
                    pushFollow(FOLLOW_arguments_in_enumConstant5658);
                    arguments73=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments73.getTree());

                    }
                    break;

            }

            // ../etc/JamlAttrHash.g:407:42: ( classBody )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==LCURLY) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: classBody
                    {
                    pushFollow(FOLLOW_classBody_in_enumConstant5661);
                    classBody74=classBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classBody74.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("enumConstant", 25);
            if ( state.backtracking>0 ) { memoize(input, 25, enumConstant_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumConstant"

    public static class interfaceTypeDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceTypeDeclaration"
    // ../etc/JamlAttrHash.g:410:1: interfaceTypeDeclaration[CommonTree modifiers] : INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody -> ^( INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody ) ;
    public final JamlAttrHashParser.interfaceTypeDeclaration_return interfaceTypeDeclaration(CommonTree modifiers) throws RecognitionException {
    traceIn("interfaceTypeDeclaration", 26);
        JamlAttrHashParser.interfaceTypeDeclaration_return retval = new JamlAttrHashParser.interfaceTypeDeclaration_return();
        retval.start = input.LT(1);
        int interfaceTypeDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token INTERFACE75=null;
        Token IDENT76=null;
        JamlAttrHashParser.genericTypeParameterList_return genericTypeParameterList77 = null;

        JamlAttrHashParser.interfaceExtendsClause_return interfaceExtendsClause78 = null;

        JamlAttrHashParser.interfaceBody_return interfaceBody79 = null;


        CommonTree INTERFACE75_tree=null;
        CommonTree IDENT76_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_INTERFACE=new RewriteRuleTokenStream(adaptor,"token INTERFACE");
        RewriteRuleSubtreeStream stream_genericTypeParameterList=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeParameterList");
        RewriteRuleSubtreeStream stream_interfaceBody=new RewriteRuleSubtreeStream(adaptor,"rule interfaceBody");
        RewriteRuleSubtreeStream stream_interfaceExtendsClause=new RewriteRuleSubtreeStream(adaptor,"rule interfaceExtendsClause");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }
            // ../etc/JamlAttrHash.g:411:5: ( INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody -> ^( INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody ) )
            // ../etc/JamlAttrHash.g:411:9: INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody
            {
            INTERFACE75=(Token)match(input,INTERFACE,FOLLOW_INTERFACE_in_interfaceTypeDeclaration5686); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTERFACE.add(INTERFACE75);

            IDENT76=(Token)match(input,IDENT,FOLLOW_IDENT_in_interfaceTypeDeclaration5688); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT76);

            // ../etc/JamlAttrHash.g:411:25: ( genericTypeParameterList )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==LESS_THAN) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: genericTypeParameterList
                    {
                    pushFollow(FOLLOW_genericTypeParameterList_in_interfaceTypeDeclaration5690);
                    genericTypeParameterList77=genericTypeParameterList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_genericTypeParameterList.add(genericTypeParameterList77.getTree());

                    }
                    break;

            }

            // ../etc/JamlAttrHash.g:411:51: ( interfaceExtendsClause )?
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==EXTENDS) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: interfaceExtendsClause
                    {
                    pushFollow(FOLLOW_interfaceExtendsClause_in_interfaceTypeDeclaration5693);
                    interfaceExtendsClause78=interfaceExtendsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_interfaceExtendsClause.add(interfaceExtendsClause78.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_interfaceBody_in_interfaceTypeDeclaration5696);
            interfaceBody79=interfaceBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_interfaceBody.add(interfaceBody79.getTree());


            // AST REWRITE
            // elements: interfaceExtendsClause, INTERFACE, IDENT, genericTypeParameterList, interfaceBody
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 412:9: -> ^( INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody )
            {
                // ../etc/JamlAttrHash.g:412:13: ^( INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_INTERFACE.nextNode(), root_1);

                adaptor.addChild(root_1, modifiers);
                adaptor.addChild(root_1, stream_IDENT.nextNode());
                // ../etc/JamlAttrHash.g:412:44: ( genericTypeParameterList )?
                if ( stream_genericTypeParameterList.hasNext() ) {
                    adaptor.addChild(root_1, stream_genericTypeParameterList.nextTree());

                }
                stream_genericTypeParameterList.reset();
                // ../etc/JamlAttrHash.g:412:70: ( interfaceExtendsClause )?
                if ( stream_interfaceExtendsClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_interfaceExtendsClause.nextTree());

                }
                stream_interfaceExtendsClause.reset();
                adaptor.addChild(root_1, stream_interfaceBody.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("interfaceTypeDeclaration", 26);
            if ( state.backtracking>0 ) { memoize(input, 26, interfaceTypeDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceTypeDeclaration"

    public static class typeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeList"
    // ../etc/JamlAttrHash.g:415:1: typeList : type ( COMMA type )* ;
    public final JamlAttrHashParser.typeList_return typeList() throws RecognitionException {
    traceIn("typeList", 27);
        JamlAttrHashParser.typeList_return retval = new JamlAttrHashParser.typeList_return();
        retval.start = input.LT(1);
        int typeList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA81=null;
        JamlAttrHashParser.type_return type80 = null;

        JamlAttrHashParser.type_return type82 = null;


        CommonTree COMMA81_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }
            // ../etc/JamlAttrHash.g:416:5: ( type ( COMMA type )* )
            // ../etc/JamlAttrHash.g:416:9: type ( COMMA type )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_type_in_typeList5746);
            type80=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type80.getTree());
            // ../etc/JamlAttrHash.g:416:14: ( COMMA type )*
            loop27:
            do {
                int alt27=2;
                int LA27_0 = input.LA(1);

                if ( (LA27_0==COMMA) ) {
                    alt27=1;
                }


                switch (alt27) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:416:15: COMMA type
            	    {
            	    COMMA81=(Token)match(input,COMMA,FOLLOW_COMMA_in_typeList5749); if (state.failed) return retval;
            	    pushFollow(FOLLOW_type_in_typeList5752);
            	    type82=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, type82.getTree());

            	    }
            	    break;

            	default :
            	    break loop27;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("typeList", 27);
            if ( state.backtracking>0 ) { memoize(input, 27, typeList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeList"

    public static class classBody_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classBody"
    // ../etc/JamlAttrHash.g:419:1: classBody : LCURLY ( classScopeDeclarations )* RCURLY -> ^( CLASS_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* ) ;
    public final JamlAttrHashParser.classBody_return classBody() throws RecognitionException {
    traceIn("classBody", 28);
        JamlAttrHashParser.classBody_return retval = new JamlAttrHashParser.classBody_return();
        retval.start = input.LT(1);
        int classBody_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LCURLY83=null;
        Token RCURLY85=null;
        JamlAttrHashParser.classScopeDeclarations_return classScopeDeclarations84 = null;


        CommonTree LCURLY83_tree=null;
        CommonTree RCURLY85_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_classScopeDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule classScopeDeclarations");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }
            // ../etc/JamlAttrHash.g:420:5: ( LCURLY ( classScopeDeclarations )* RCURLY -> ^( CLASS_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* ) )
            // ../etc/JamlAttrHash.g:420:9: LCURLY ( classScopeDeclarations )* RCURLY
            {
            LCURLY83=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_classBody5777); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY83);

            // ../etc/JamlAttrHash.g:420:16: ( classScopeDeclarations )*
            loop28:
            do {
                int alt28=2;
                int LA28_0 = input.LA(1);

                if ( (LA28_0==AT||LA28_0==LCURLY||LA28_0==LESS_THAN||LA28_0==SEMI||LA28_0==ABSTRACT||LA28_0==BOOLEAN||LA28_0==BYTE||(LA28_0>=CHAR && LA28_0<=CLASS)||LA28_0==DOUBLE||LA28_0==ENUM||LA28_0==FINAL||LA28_0==FLOAT||LA28_0==INTERFACE||(LA28_0>=INT && LA28_0<=NATIVE)||(LA28_0>=PRIVATE && LA28_0<=PUBLIC)||(LA28_0>=SHORT && LA28_0<=STRICTFP)||LA28_0==SYNCHRONIZED||LA28_0==TRANSIENT||(LA28_0>=VOID && LA28_0<=VOLATILE)||LA28_0==IDENT) ) {
                    alt28=1;
                }


                switch (alt28) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:0:0: classScopeDeclarations
            	    {
            	    pushFollow(FOLLOW_classScopeDeclarations_in_classBody5779);
            	    classScopeDeclarations84=classScopeDeclarations();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_classScopeDeclarations.add(classScopeDeclarations84.getTree());

            	    }
            	    break;

            	default :
            	    break loop28;
                }
            } while (true);

            RCURLY85=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_classBody5782); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY85);



            // AST REWRITE
            // elements: classScopeDeclarations
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 421:9: -> ^( CLASS_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* )
            {
                // ../etc/JamlAttrHash.g:421:13: ^( CLASS_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_TOP_LEVEL_SCOPE, LCURLY83, "CLASS_TOP_LEVEL_SCOPE"), root_1);

                // ../etc/JamlAttrHash.g:421:71: ( classScopeDeclarations )*
                while ( stream_classScopeDeclarations.hasNext() ) {
                    adaptor.addChild(root_1, stream_classScopeDeclarations.nextTree());

                }
                stream_classScopeDeclarations.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("classBody", 28);
            if ( state.backtracking>0 ) { memoize(input, 28, classBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classBody"

    public static class interfaceBody_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceBody"
    // ../etc/JamlAttrHash.g:424:1: interfaceBody : LCURLY ( interfaceScopeDeclarations )* RCURLY -> ^( INTERFACE_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( interfaceScopeDeclarations )* ) ;
    public final JamlAttrHashParser.interfaceBody_return interfaceBody() throws RecognitionException {
    traceIn("interfaceBody", 29);
        JamlAttrHashParser.interfaceBody_return retval = new JamlAttrHashParser.interfaceBody_return();
        retval.start = input.LT(1);
        int interfaceBody_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LCURLY86=null;
        Token RCURLY88=null;
        JamlAttrHashParser.interfaceScopeDeclarations_return interfaceScopeDeclarations87 = null;


        CommonTree LCURLY86_tree=null;
        CommonTree RCURLY88_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_interfaceScopeDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule interfaceScopeDeclarations");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }
            // ../etc/JamlAttrHash.g:425:5: ( LCURLY ( interfaceScopeDeclarations )* RCURLY -> ^( INTERFACE_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( interfaceScopeDeclarations )* ) )
            // ../etc/JamlAttrHash.g:425:9: LCURLY ( interfaceScopeDeclarations )* RCURLY
            {
            LCURLY86=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_interfaceBody5824); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY86);

            // ../etc/JamlAttrHash.g:425:16: ( interfaceScopeDeclarations )*
            loop29:
            do {
                int alt29=2;
                int LA29_0 = input.LA(1);

                if ( (LA29_0==AT||LA29_0==LESS_THAN||LA29_0==SEMI||LA29_0==ABSTRACT||LA29_0==BOOLEAN||LA29_0==BYTE||(LA29_0>=CHAR && LA29_0<=CLASS)||LA29_0==DOUBLE||LA29_0==ENUM||LA29_0==FINAL||LA29_0==FLOAT||LA29_0==INTERFACE||(LA29_0>=INT && LA29_0<=NATIVE)||(LA29_0>=PRIVATE && LA29_0<=PUBLIC)||(LA29_0>=SHORT && LA29_0<=STRICTFP)||LA29_0==SYNCHRONIZED||LA29_0==TRANSIENT||(LA29_0>=VOID && LA29_0<=VOLATILE)||LA29_0==IDENT) ) {
                    alt29=1;
                }


                switch (alt29) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:0:0: interfaceScopeDeclarations
            	    {
            	    pushFollow(FOLLOW_interfaceScopeDeclarations_in_interfaceBody5826);
            	    interfaceScopeDeclarations87=interfaceScopeDeclarations();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_interfaceScopeDeclarations.add(interfaceScopeDeclarations87.getTree());

            	    }
            	    break;

            	default :
            	    break loop29;
                }
            } while (true);

            RCURLY88=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_interfaceBody5829); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY88);



            // AST REWRITE
            // elements: interfaceScopeDeclarations
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 426:9: -> ^( INTERFACE_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( interfaceScopeDeclarations )* )
            {
                // ../etc/JamlAttrHash.g:426:13: ^( INTERFACE_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( interfaceScopeDeclarations )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INTERFACE_TOP_LEVEL_SCOPE, LCURLY86, "CLASS_TOP_LEVEL_SCOPE"), root_1);

                // ../etc/JamlAttrHash.g:426:75: ( interfaceScopeDeclarations )*
                while ( stream_interfaceScopeDeclarations.hasNext() ) {
                    adaptor.addChild(root_1, stream_interfaceScopeDeclarations.nextTree());

                }
                stream_interfaceScopeDeclarations.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("interfaceBody", 29);
            if ( state.backtracking>0 ) { memoize(input, 29, interfaceBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceBody"

    public static class classScopeDeclarations_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classScopeDeclarations"
    // ../etc/JamlAttrHash.g:429:1: classScopeDeclarations : ( block -> ^( CLASS_INSTANCE_INITIALIZER block ) | STATIC block -> ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block ) | modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration | SEMI );
    public final JamlAttrHashParser.classScopeDeclarations_return classScopeDeclarations() throws RecognitionException {
    traceIn("classScopeDeclarations", 30);
        JamlAttrHashParser.classScopeDeclarations_return retval = new JamlAttrHashParser.classScopeDeclarations_return();
        retval.start = input.LT(1);
        int classScopeDeclarations_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ident=null;
        Token STATIC90=null;
        Token IDENT95=null;
        Token SEMI100=null;
        Token VOID101=null;
        Token IDENT102=null;
        Token SEMI106=null;
        Token SEMI112=null;
        Token SEMI114=null;
        JamlAttrHashParser.block_return block89 = null;

        JamlAttrHashParser.block_return block91 = null;

        JamlAttrHashParser.modifierList_return modifierList92 = null;

        JamlAttrHashParser.genericTypeParameterList_return genericTypeParameterList93 = null;

        JamlAttrHashParser.type_return type94 = null;

        JamlAttrHashParser.formalParameterList_return formalParameterList96 = null;

        JamlAttrHashParser.arrayDeclaratorList_return arrayDeclaratorList97 = null;

        JamlAttrHashParser.throwsClause_return throwsClause98 = null;

        JamlAttrHashParser.block_return block99 = null;

        JamlAttrHashParser.formalParameterList_return formalParameterList103 = null;

        JamlAttrHashParser.throwsClause_return throwsClause104 = null;

        JamlAttrHashParser.block_return block105 = null;

        JamlAttrHashParser.formalParameterList_return formalParameterList107 = null;

        JamlAttrHashParser.throwsClause_return throwsClause108 = null;

        JamlAttrHashParser.block_return block109 = null;

        JamlAttrHashParser.type_return type110 = null;

        JamlAttrHashParser.classFieldDeclaratorList_return classFieldDeclaratorList111 = null;

        JamlAttrHashParser.typeDeclaration_return typeDeclaration113 = null;


        CommonTree ident_tree=null;
        CommonTree STATIC90_tree=null;
        CommonTree IDENT95_tree=null;
        CommonTree SEMI100_tree=null;
        CommonTree VOID101_tree=null;
        CommonTree IDENT102_tree=null;
        CommonTree SEMI106_tree=null;
        CommonTree SEMI112_tree=null;
        CommonTree SEMI114_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_VOID=new RewriteRuleTokenStream(adaptor,"token VOID");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_STATIC=new RewriteRuleTokenStream(adaptor,"token STATIC");
        RewriteRuleSubtreeStream stream_arrayDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclaratorList");
        RewriteRuleSubtreeStream stream_throwsClause=new RewriteRuleSubtreeStream(adaptor,"rule throwsClause");
        RewriteRuleSubtreeStream stream_modifierList=new RewriteRuleSubtreeStream(adaptor,"rule modifierList");
        RewriteRuleSubtreeStream stream_genericTypeParameterList=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeParameterList");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_classFieldDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule classFieldDeclaratorList");
        RewriteRuleSubtreeStream stream_formalParameterList=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }
            // ../etc/JamlAttrHash.g:430:5: ( block -> ^( CLASS_INSTANCE_INITIALIZER block ) | STATIC block -> ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block ) | modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration | SEMI )
            int alt39=5;
            alt39 = dfa39.predict(input);
            switch (alt39) {
                case 1 :
                    // ../etc/JamlAttrHash.g:430:9: block
                    {
                    pushFollow(FOLLOW_block_in_classScopeDeclarations5867);
                    block89=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block89.getTree());


                    // AST REWRITE
                    // elements: block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 430:25: -> ^( CLASS_INSTANCE_INITIALIZER block )
                    {
                        // ../etc/JamlAttrHash.g:430:29: ^( CLASS_INSTANCE_INITIALIZER block )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_INSTANCE_INITIALIZER, "CLASS_INSTANCE_INITIALIZER"), root_1);

                        adaptor.addChild(root_1, stream_block.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:431:9: STATIC block
                    {
                    STATIC90=(Token)match(input,STATIC,FOLLOW_STATIC_in_classScopeDeclarations5896); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STATIC.add(STATIC90);

                    pushFollow(FOLLOW_block_in_classScopeDeclarations5898);
                    block91=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block91.getTree());


                    // AST REWRITE
                    // elements: block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 431:25: -> ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block )
                    {
                        // ../etc/JamlAttrHash.g:431:29: ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_STATIC_INITIALIZER, STATIC90, "CLASS_STATIC_INITIALIZER"), root_1);

                        adaptor.addChild(root_1, stream_block.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // ../etc/JamlAttrHash.g:432:9: modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) )
                    {
                    pushFollow(FOLLOW_modifierList_in_classScopeDeclarations5921);
                    modifierList92=modifierList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_modifierList.add(modifierList92.getTree());
                    // ../etc/JamlAttrHash.g:433:9: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) )
                    int alt38=2;
                    switch ( input.LA(1) ) {
                    case LESS_THAN:
                    case VOID:
                        {
                        alt38=1;
                        }
                        break;
                    case BOOLEAN:
                    case BYTE:
                    case CHAR:
                    case DOUBLE:
                    case FLOAT:
                    case INT:
                    case LONG:
                    case SHORT:
                        {
                        int LA38_2 = input.LA(2);

                        if ( (synpred52_JamlAttrHash()) ) {
                            alt38=1;
                        }
                        else if ( (true) ) {
                            alt38=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 38, 2, input);

                            throw nvae;
                        }
                        }
                        break;
                    case IDENT:
                        {
                        int LA38_3 = input.LA(2);

                        if ( (synpred52_JamlAttrHash()) ) {
                            alt38=1;
                        }
                        else if ( (true) ) {
                            alt38=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 38, 3, input);

                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 38, 0, input);

                        throw nvae;
                    }

                    switch (alt38) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:433:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) )
                            {
                            // ../etc/JamlAttrHash.g:433:13: ( genericTypeParameterList )?
                            int alt30=2;
                            int LA30_0 = input.LA(1);

                            if ( (LA30_0==LESS_THAN) ) {
                                alt30=1;
                            }
                            switch (alt30) {
                                case 1 :
                                    // ../etc/JamlAttrHash.g:0:0: genericTypeParameterList
                                    {
                                    pushFollow(FOLLOW_genericTypeParameterList_in_classScopeDeclarations5935);
                                    genericTypeParameterList93=genericTypeParameterList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_genericTypeParameterList.add(genericTypeParameterList93.getTree());

                                    }
                                    break;

                            }

                            // ../etc/JamlAttrHash.g:434:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) )
                            int alt37=3;
                            switch ( input.LA(1) ) {
                            case BOOLEAN:
                            case BYTE:
                            case CHAR:
                            case DOUBLE:
                            case FLOAT:
                            case INT:
                            case LONG:
                            case SHORT:
                                {
                                alt37=1;
                                }
                                break;
                            case IDENT:
                                {
                                int LA37_2 = input.LA(2);

                                if ( (LA37_2==DOT||LA37_2==LBRACK||LA37_2==LESS_THAN||LA37_2==IDENT) ) {
                                    alt37=1;
                                }
                                else if ( (LA37_2==LPAREN) ) {
                                    alt37=3;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 37, 2, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case VOID:
                                {
                                alt37=2;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 37, 0, input);

                                throw nvae;
                            }

                            switch (alt37) {
                                case 1 :
                                    // ../etc/JamlAttrHash.g:434:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI )
                                    {
                                    pushFollow(FOLLOW_type_in_classScopeDeclarations5954);
                                    type94=type();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_type.add(type94.getTree());
                                    IDENT95=(Token)match(input,IDENT,FOLLOW_IDENT_in_classScopeDeclarations5956); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT95);

                                    pushFollow(FOLLOW_formalParameterList_in_classScopeDeclarations5958);
                                    formalParameterList96=formalParameterList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_formalParameterList.add(formalParameterList96.getTree());
                                    // ../etc/JamlAttrHash.g:434:48: ( arrayDeclaratorList )?
                                    int alt31=2;
                                    int LA31_0 = input.LA(1);

                                    if ( (LA31_0==LBRACK) ) {
                                        alt31=1;
                                    }
                                    switch (alt31) {
                                        case 1 :
                                            // ../etc/JamlAttrHash.g:0:0: arrayDeclaratorList
                                            {
                                            pushFollow(FOLLOW_arrayDeclaratorList_in_classScopeDeclarations5960);
                                            arrayDeclaratorList97=arrayDeclaratorList();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) stream_arrayDeclaratorList.add(arrayDeclaratorList97.getTree());

                                            }
                                            break;

                                    }

                                    // ../etc/JamlAttrHash.g:434:69: ( throwsClause )?
                                    int alt32=2;
                                    int LA32_0 = input.LA(1);

                                    if ( (LA32_0==THROWS) ) {
                                        alt32=1;
                                    }
                                    switch (alt32) {
                                        case 1 :
                                            // ../etc/JamlAttrHash.g:0:0: throwsClause
                                            {
                                            pushFollow(FOLLOW_throwsClause_in_classScopeDeclarations5963);
                                            throwsClause98=throwsClause();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) stream_throwsClause.add(throwsClause98.getTree());

                                            }
                                            break;

                                    }

                                    // ../etc/JamlAttrHash.g:434:83: ( block | SEMI )
                                    int alt33=2;
                                    int LA33_0 = input.LA(1);

                                    if ( (LA33_0==LCURLY) ) {
                                        alt33=1;
                                    }
                                    else if ( (LA33_0==SEMI) ) {
                                        alt33=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 33, 0, input);

                                        throw nvae;
                                    }
                                    switch (alt33) {
                                        case 1 :
                                            // ../etc/JamlAttrHash.g:434:84: block
                                            {
                                            pushFollow(FOLLOW_block_in_classScopeDeclarations5967);
                                            block99=block();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) stream_block.add(block99.getTree());

                                            }
                                            break;
                                        case 2 :
                                            // ../etc/JamlAttrHash.g:434:92: SEMI
                                            {
                                            SEMI100=(Token)match(input,SEMI,FOLLOW_SEMI_in_classScopeDeclarations5971); if (state.failed) return retval; 
                                            if ( state.backtracking==0 ) stream_SEMI.add(SEMI100);


                                            }
                                            break;

                                    }



                                    // AST REWRITE
                                    // elements: genericTypeParameterList, formalParameterList, IDENT, throwsClause, type, block, arrayDeclaratorList, modifierList
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 435:17: -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? )
                                    {
                                        // ../etc/JamlAttrHash.g:435:21: ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FUNCTION_METHOD_DECL, "FUNCTION_METHOD_DECL"), root_1);

                                        adaptor.addChild(root_1, stream_modifierList.nextTree());
                                        // ../etc/JamlAttrHash.g:435:57: ( genericTypeParameterList )?
                                        if ( stream_genericTypeParameterList.hasNext() ) {
                                            adaptor.addChild(root_1, stream_genericTypeParameterList.nextTree());

                                        }
                                        stream_genericTypeParameterList.reset();
                                        adaptor.addChild(root_1, stream_type.nextTree());
                                        adaptor.addChild(root_1, stream_IDENT.nextNode());
                                        adaptor.addChild(root_1, stream_formalParameterList.nextTree());
                                        // ../etc/JamlAttrHash.g:435:114: ( arrayDeclaratorList )?
                                        if ( stream_arrayDeclaratorList.hasNext() ) {
                                            adaptor.addChild(root_1, stream_arrayDeclaratorList.nextTree());

                                        }
                                        stream_arrayDeclaratorList.reset();
                                        // ../etc/JamlAttrHash.g:435:135: ( throwsClause )?
                                        if ( stream_throwsClause.hasNext() ) {
                                            adaptor.addChild(root_1, stream_throwsClause.nextTree());

                                        }
                                        stream_throwsClause.reset();
                                        // ../etc/JamlAttrHash.g:435:149: ( block )?
                                        if ( stream_block.hasNext() ) {
                                            adaptor.addChild(root_1, stream_block.nextTree());

                                        }
                                        stream_block.reset();

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;
                                case 2 :
                                    // ../etc/JamlAttrHash.g:436:17: VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI )
                                    {
                                    VOID101=(Token)match(input,VOID,FOLLOW_VOID_in_classScopeDeclarations6033); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_VOID.add(VOID101);

                                    IDENT102=(Token)match(input,IDENT,FOLLOW_IDENT_in_classScopeDeclarations6035); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT102);

                                    pushFollow(FOLLOW_formalParameterList_in_classScopeDeclarations6037);
                                    formalParameterList103=formalParameterList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_formalParameterList.add(formalParameterList103.getTree());
                                    // ../etc/JamlAttrHash.g:436:48: ( throwsClause )?
                                    int alt34=2;
                                    int LA34_0 = input.LA(1);

                                    if ( (LA34_0==THROWS) ) {
                                        alt34=1;
                                    }
                                    switch (alt34) {
                                        case 1 :
                                            // ../etc/JamlAttrHash.g:0:0: throwsClause
                                            {
                                            pushFollow(FOLLOW_throwsClause_in_classScopeDeclarations6039);
                                            throwsClause104=throwsClause();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) stream_throwsClause.add(throwsClause104.getTree());

                                            }
                                            break;

                                    }

                                    // ../etc/JamlAttrHash.g:436:62: ( block | SEMI )
                                    int alt35=2;
                                    int LA35_0 = input.LA(1);

                                    if ( (LA35_0==LCURLY) ) {
                                        alt35=1;
                                    }
                                    else if ( (LA35_0==SEMI) ) {
                                        alt35=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 35, 0, input);

                                        throw nvae;
                                    }
                                    switch (alt35) {
                                        case 1 :
                                            // ../etc/JamlAttrHash.g:436:63: block
                                            {
                                            pushFollow(FOLLOW_block_in_classScopeDeclarations6043);
                                            block105=block();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) stream_block.add(block105.getTree());

                                            }
                                            break;
                                        case 2 :
                                            // ../etc/JamlAttrHash.g:436:71: SEMI
                                            {
                                            SEMI106=(Token)match(input,SEMI,FOLLOW_SEMI_in_classScopeDeclarations6047); if (state.failed) return retval; 
                                            if ( state.backtracking==0 ) stream_SEMI.add(SEMI106);


                                            }
                                            break;

                                    }



                                    // AST REWRITE
                                    // elements: genericTypeParameterList, IDENT, block, throwsClause, formalParameterList, modifierList
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 437:17: -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? )
                                    {
                                        // ../etc/JamlAttrHash.g:437:21: ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VOID_METHOD_DECL, "VOID_METHOD_DECL"), root_1);

                                        adaptor.addChild(root_1, stream_modifierList.nextTree());
                                        // ../etc/JamlAttrHash.g:437:53: ( genericTypeParameterList )?
                                        if ( stream_genericTypeParameterList.hasNext() ) {
                                            adaptor.addChild(root_1, stream_genericTypeParameterList.nextTree());

                                        }
                                        stream_genericTypeParameterList.reset();
                                        adaptor.addChild(root_1, stream_IDENT.nextNode());
                                        adaptor.addChild(root_1, stream_formalParameterList.nextTree());
                                        // ../etc/JamlAttrHash.g:437:105: ( throwsClause )?
                                        if ( stream_throwsClause.hasNext() ) {
                                            adaptor.addChild(root_1, stream_throwsClause.nextTree());

                                        }
                                        stream_throwsClause.reset();
                                        // ../etc/JamlAttrHash.g:437:119: ( block )?
                                        if ( stream_block.hasNext() ) {
                                            adaptor.addChild(root_1, stream_block.nextTree());

                                        }
                                        stream_block.reset();

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;
                                case 3 :
                                    // ../etc/JamlAttrHash.g:438:17: ident= IDENT formalParameterList ( throwsClause )? block
                                    {
                                    ident=(Token)match(input,IDENT,FOLLOW_IDENT_in_classScopeDeclarations6106); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(ident);

                                    pushFollow(FOLLOW_formalParameterList_in_classScopeDeclarations6108);
                                    formalParameterList107=formalParameterList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_formalParameterList.add(formalParameterList107.getTree());
                                    // ../etc/JamlAttrHash.g:438:49: ( throwsClause )?
                                    int alt36=2;
                                    int LA36_0 = input.LA(1);

                                    if ( (LA36_0==THROWS) ) {
                                        alt36=1;
                                    }
                                    switch (alt36) {
                                        case 1 :
                                            // ../etc/JamlAttrHash.g:0:0: throwsClause
                                            {
                                            pushFollow(FOLLOW_throwsClause_in_classScopeDeclarations6110);
                                            throwsClause108=throwsClause();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) stream_throwsClause.add(throwsClause108.getTree());

                                            }
                                            break;

                                    }

                                    pushFollow(FOLLOW_block_in_classScopeDeclarations6113);
                                    block109=block();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_block.add(block109.getTree());


                                    // AST REWRITE
                                    // elements: genericTypeParameterList, modifierList, throwsClause, formalParameterList, block
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 439:17: -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block )
                                    {
                                        // ../etc/JamlAttrHash.g:439:21: ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONSTRUCTOR_DECL, ident, "CONSTRUCTOR_DECL"), root_1);

                                        adaptor.addChild(root_1, stream_modifierList.nextTree());
                                        // ../etc/JamlAttrHash.g:439:81: ( genericTypeParameterList )?
                                        if ( stream_genericTypeParameterList.hasNext() ) {
                                            adaptor.addChild(root_1, stream_genericTypeParameterList.nextTree());

                                        }
                                        stream_genericTypeParameterList.reset();
                                        adaptor.addChild(root_1, stream_formalParameterList.nextTree());
                                        // ../etc/JamlAttrHash.g:439:127: ( throwsClause )?
                                        if ( stream_throwsClause.hasNext() ) {
                                            adaptor.addChild(root_1, stream_throwsClause.nextTree());

                                        }
                                        stream_throwsClause.reset();
                                        adaptor.addChild(root_1, stream_block.nextTree());

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // ../etc/JamlAttrHash.g:441:13: type classFieldDeclaratorList SEMI
                            {
                            pushFollow(FOLLOW_type_in_classScopeDeclarations6177);
                            type110=type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_type.add(type110.getTree());
                            pushFollow(FOLLOW_classFieldDeclaratorList_in_classScopeDeclarations6179);
                            classFieldDeclaratorList111=classFieldDeclaratorList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_classFieldDeclaratorList.add(classFieldDeclaratorList111.getTree());
                            SEMI112=(Token)match(input,SEMI,FOLLOW_SEMI_in_classScopeDeclarations6181); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMI.add(SEMI112);



                            // AST REWRITE
                            // elements: classFieldDeclaratorList, type, modifierList
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 442:13: -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList )
                            {
                                // ../etc/JamlAttrHash.g:442:17: ^( VAR_DECLARATION modifierList type classFieldDeclaratorList )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_DECLARATION, "VAR_DECLARATION"), root_1);

                                adaptor.addChild(root_1, stream_modifierList.nextTree());
                                adaptor.addChild(root_1, stream_type.nextTree());
                                adaptor.addChild(root_1, stream_classFieldDeclaratorList.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // ../etc/JamlAttrHash.g:444:9: typeDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_typeDeclaration_in_classScopeDeclarations6226);
                    typeDeclaration113=typeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDeclaration113.getTree());

                    }
                    break;
                case 5 :
                    // ../etc/JamlAttrHash.g:445:9: SEMI
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SEMI114=(Token)match(input,SEMI,FOLLOW_SEMI_in_classScopeDeclarations6236); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("classScopeDeclarations", 30);
            if ( state.backtracking>0 ) { memoize(input, 30, classScopeDeclarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classScopeDeclarations"

    public static class interfaceScopeDeclarations_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceScopeDeclarations"
    // ../etc/JamlAttrHash.g:448:1: interfaceScopeDeclarations : ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) ) | typeDeclaration | SEMI );
    public final JamlAttrHashParser.interfaceScopeDeclarations_return interfaceScopeDeclarations() throws RecognitionException {
    traceIn("interfaceScopeDeclarations", 31);
        JamlAttrHashParser.interfaceScopeDeclarations_return retval = new JamlAttrHashParser.interfaceScopeDeclarations_return();
        retval.start = input.LT(1);
        int interfaceScopeDeclarations_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT118=null;
        Token SEMI122=null;
        Token VOID123=null;
        Token IDENT124=null;
        Token SEMI127=null;
        Token SEMI130=null;
        Token SEMI132=null;
        JamlAttrHashParser.modifierList_return modifierList115 = null;

        JamlAttrHashParser.genericTypeParameterList_return genericTypeParameterList116 = null;

        JamlAttrHashParser.type_return type117 = null;

        JamlAttrHashParser.formalParameterList_return formalParameterList119 = null;

        JamlAttrHashParser.arrayDeclaratorList_return arrayDeclaratorList120 = null;

        JamlAttrHashParser.throwsClause_return throwsClause121 = null;

        JamlAttrHashParser.formalParameterList_return formalParameterList125 = null;

        JamlAttrHashParser.throwsClause_return throwsClause126 = null;

        JamlAttrHashParser.type_return type128 = null;

        JamlAttrHashParser.interfaceFieldDeclaratorList_return interfaceFieldDeclaratorList129 = null;

        JamlAttrHashParser.typeDeclaration_return typeDeclaration131 = null;


        CommonTree IDENT118_tree=null;
        CommonTree SEMI122_tree=null;
        CommonTree VOID123_tree=null;
        CommonTree IDENT124_tree=null;
        CommonTree SEMI127_tree=null;
        CommonTree SEMI130_tree=null;
        CommonTree SEMI132_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_VOID=new RewriteRuleTokenStream(adaptor,"token VOID");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleSubtreeStream stream_arrayDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclaratorList");
        RewriteRuleSubtreeStream stream_throwsClause=new RewriteRuleSubtreeStream(adaptor,"rule throwsClause");
        RewriteRuleSubtreeStream stream_modifierList=new RewriteRuleSubtreeStream(adaptor,"rule modifierList");
        RewriteRuleSubtreeStream stream_genericTypeParameterList=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeParameterList");
        RewriteRuleSubtreeStream stream_interfaceFieldDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule interfaceFieldDeclaratorList");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_formalParameterList=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }
            // ../etc/JamlAttrHash.g:449:5: ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) ) | typeDeclaration | SEMI )
            int alt46=3;
            alt46 = dfa46.predict(input);
            switch (alt46) {
                case 1 :
                    // ../etc/JamlAttrHash.g:449:9: modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) )
                    {
                    pushFollow(FOLLOW_modifierList_in_interfaceScopeDeclarations6268);
                    modifierList115=modifierList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_modifierList.add(modifierList115.getTree());
                    // ../etc/JamlAttrHash.g:450:9: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) )
                    int alt45=2;
                    switch ( input.LA(1) ) {
                    case LESS_THAN:
                    case VOID:
                        {
                        alt45=1;
                        }
                        break;
                    case BOOLEAN:
                    case BYTE:
                    case CHAR:
                    case DOUBLE:
                    case FLOAT:
                    case INT:
                    case LONG:
                    case SHORT:
                        {
                        int LA45_2 = input.LA(2);

                        if ( (synpred60_JamlAttrHash()) ) {
                            alt45=1;
                        }
                        else if ( (true) ) {
                            alt45=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 45, 2, input);

                            throw nvae;
                        }
                        }
                        break;
                    case IDENT:
                        {
                        int LA45_3 = input.LA(2);

                        if ( (synpred60_JamlAttrHash()) ) {
                            alt45=1;
                        }
                        else if ( (true) ) {
                            alt45=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 45, 3, input);

                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 45, 0, input);

                        throw nvae;
                    }

                    switch (alt45) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:450:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) )
                            {
                            // ../etc/JamlAttrHash.g:450:13: ( genericTypeParameterList )?
                            int alt40=2;
                            int LA40_0 = input.LA(1);

                            if ( (LA40_0==LESS_THAN) ) {
                                alt40=1;
                            }
                            switch (alt40) {
                                case 1 :
                                    // ../etc/JamlAttrHash.g:0:0: genericTypeParameterList
                                    {
                                    pushFollow(FOLLOW_genericTypeParameterList_in_interfaceScopeDeclarations6282);
                                    genericTypeParameterList116=genericTypeParameterList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_genericTypeParameterList.add(genericTypeParameterList116.getTree());

                                    }
                                    break;

                            }

                            // ../etc/JamlAttrHash.g:451:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) )
                            int alt44=2;
                            int LA44_0 = input.LA(1);

                            if ( (LA44_0==BOOLEAN||LA44_0==BYTE||LA44_0==CHAR||LA44_0==DOUBLE||LA44_0==FLOAT||(LA44_0>=INT && LA44_0<=LONG)||LA44_0==SHORT||LA44_0==IDENT) ) {
                                alt44=1;
                            }
                            else if ( (LA44_0==VOID) ) {
                                alt44=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 44, 0, input);

                                throw nvae;
                            }
                            switch (alt44) {
                                case 1 :
                                    // ../etc/JamlAttrHash.g:451:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI
                                    {
                                    pushFollow(FOLLOW_type_in_interfaceScopeDeclarations6301);
                                    type117=type();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_type.add(type117.getTree());
                                    IDENT118=(Token)match(input,IDENT,FOLLOW_IDENT_in_interfaceScopeDeclarations6303); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT118);

                                    pushFollow(FOLLOW_formalParameterList_in_interfaceScopeDeclarations6305);
                                    formalParameterList119=formalParameterList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_formalParameterList.add(formalParameterList119.getTree());
                                    // ../etc/JamlAttrHash.g:451:48: ( arrayDeclaratorList )?
                                    int alt41=2;
                                    int LA41_0 = input.LA(1);

                                    if ( (LA41_0==LBRACK) ) {
                                        alt41=1;
                                    }
                                    switch (alt41) {
                                        case 1 :
                                            // ../etc/JamlAttrHash.g:0:0: arrayDeclaratorList
                                            {
                                            pushFollow(FOLLOW_arrayDeclaratorList_in_interfaceScopeDeclarations6307);
                                            arrayDeclaratorList120=arrayDeclaratorList();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) stream_arrayDeclaratorList.add(arrayDeclaratorList120.getTree());

                                            }
                                            break;

                                    }

                                    // ../etc/JamlAttrHash.g:451:69: ( throwsClause )?
                                    int alt42=2;
                                    int LA42_0 = input.LA(1);

                                    if ( (LA42_0==THROWS) ) {
                                        alt42=1;
                                    }
                                    switch (alt42) {
                                        case 1 :
                                            // ../etc/JamlAttrHash.g:0:0: throwsClause
                                            {
                                            pushFollow(FOLLOW_throwsClause_in_interfaceScopeDeclarations6310);
                                            throwsClause121=throwsClause();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) stream_throwsClause.add(throwsClause121.getTree());

                                            }
                                            break;

                                    }

                                    SEMI122=(Token)match(input,SEMI,FOLLOW_SEMI_in_interfaceScopeDeclarations6313); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI122);



                                    // AST REWRITE
                                    // elements: IDENT, genericTypeParameterList, formalParameterList, throwsClause, arrayDeclaratorList, type, modifierList
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 452:17: -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? )
                                    {
                                        // ../etc/JamlAttrHash.g:452:21: ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FUNCTION_METHOD_DECL, "FUNCTION_METHOD_DECL"), root_1);

                                        adaptor.addChild(root_1, stream_modifierList.nextTree());
                                        // ../etc/JamlAttrHash.g:452:57: ( genericTypeParameterList )?
                                        if ( stream_genericTypeParameterList.hasNext() ) {
                                            adaptor.addChild(root_1, stream_genericTypeParameterList.nextTree());

                                        }
                                        stream_genericTypeParameterList.reset();
                                        adaptor.addChild(root_1, stream_type.nextTree());
                                        adaptor.addChild(root_1, stream_IDENT.nextNode());
                                        adaptor.addChild(root_1, stream_formalParameterList.nextTree());
                                        // ../etc/JamlAttrHash.g:452:114: ( arrayDeclaratorList )?
                                        if ( stream_arrayDeclaratorList.hasNext() ) {
                                            adaptor.addChild(root_1, stream_arrayDeclaratorList.nextTree());

                                        }
                                        stream_arrayDeclaratorList.reset();
                                        // ../etc/JamlAttrHash.g:452:135: ( throwsClause )?
                                        if ( stream_throwsClause.hasNext() ) {
                                            adaptor.addChild(root_1, stream_throwsClause.nextTree());

                                        }
                                        stream_throwsClause.reset();

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;
                                case 2 :
                                    // ../etc/JamlAttrHash.g:453:17: VOID IDENT formalParameterList ( throwsClause )? SEMI
                                    {
                                    VOID123=(Token)match(input,VOID,FOLLOW_VOID_in_interfaceScopeDeclarations6371); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_VOID.add(VOID123);

                                    IDENT124=(Token)match(input,IDENT,FOLLOW_IDENT_in_interfaceScopeDeclarations6373); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT124);

                                    pushFollow(FOLLOW_formalParameterList_in_interfaceScopeDeclarations6375);
                                    formalParameterList125=formalParameterList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_formalParameterList.add(formalParameterList125.getTree());
                                    // ../etc/JamlAttrHash.g:453:48: ( throwsClause )?
                                    int alt43=2;
                                    int LA43_0 = input.LA(1);

                                    if ( (LA43_0==THROWS) ) {
                                        alt43=1;
                                    }
                                    switch (alt43) {
                                        case 1 :
                                            // ../etc/JamlAttrHash.g:0:0: throwsClause
                                            {
                                            pushFollow(FOLLOW_throwsClause_in_interfaceScopeDeclarations6377);
                                            throwsClause126=throwsClause();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) stream_throwsClause.add(throwsClause126.getTree());

                                            }
                                            break;

                                    }

                                    SEMI127=(Token)match(input,SEMI,FOLLOW_SEMI_in_interfaceScopeDeclarations6380); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI127);



                                    // AST REWRITE
                                    // elements: IDENT, modifierList, genericTypeParameterList, formalParameterList, throwsClause
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 454:17: -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? )
                                    {
                                        // ../etc/JamlAttrHash.g:454:21: ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VOID_METHOD_DECL, "VOID_METHOD_DECL"), root_1);

                                        adaptor.addChild(root_1, stream_modifierList.nextTree());
                                        // ../etc/JamlAttrHash.g:454:53: ( genericTypeParameterList )?
                                        if ( stream_genericTypeParameterList.hasNext() ) {
                                            adaptor.addChild(root_1, stream_genericTypeParameterList.nextTree());

                                        }
                                        stream_genericTypeParameterList.reset();
                                        adaptor.addChild(root_1, stream_IDENT.nextNode());
                                        adaptor.addChild(root_1, stream_formalParameterList.nextTree());
                                        // ../etc/JamlAttrHash.g:454:105: ( throwsClause )?
                                        if ( stream_throwsClause.hasNext() ) {
                                            adaptor.addChild(root_1, stream_throwsClause.nextTree());

                                        }
                                        stream_throwsClause.reset();

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // ../etc/JamlAttrHash.g:456:13: type interfaceFieldDeclaratorList SEMI
                            {
                            pushFollow(FOLLOW_type_in_interfaceScopeDeclarations6443);
                            type128=type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_type.add(type128.getTree());
                            pushFollow(FOLLOW_interfaceFieldDeclaratorList_in_interfaceScopeDeclarations6445);
                            interfaceFieldDeclaratorList129=interfaceFieldDeclaratorList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_interfaceFieldDeclaratorList.add(interfaceFieldDeclaratorList129.getTree());
                            SEMI130=(Token)match(input,SEMI,FOLLOW_SEMI_in_interfaceScopeDeclarations6447); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMI.add(SEMI130);



                            // AST REWRITE
                            // elements: modifierList, type, interfaceFieldDeclaratorList
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 457:13: -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList )
                            {
                                // ../etc/JamlAttrHash.g:457:17: ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_DECLARATION, "VAR_DECLARATION"), root_1);

                                adaptor.addChild(root_1, stream_modifierList.nextTree());
                                adaptor.addChild(root_1, stream_type.nextTree());
                                adaptor.addChild(root_1, stream_interfaceFieldDeclaratorList.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:459:9: typeDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_typeDeclaration_in_interfaceScopeDeclarations6492);
                    typeDeclaration131=typeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDeclaration131.getTree());

                    }
                    break;
                case 3 :
                    // ../etc/JamlAttrHash.g:460:9: SEMI
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SEMI132=(Token)match(input,SEMI,FOLLOW_SEMI_in_interfaceScopeDeclarations6502); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("interfaceScopeDeclarations", 31);
            if ( state.backtracking>0 ) { memoize(input, 31, interfaceScopeDeclarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceScopeDeclarations"

    public static class classFieldDeclaratorList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classFieldDeclaratorList"
    // ../etc/JamlAttrHash.g:463:1: classFieldDeclaratorList : classFieldDeclarator ( COMMA classFieldDeclarator )* -> ^( VAR_DECLARATOR_LIST ( classFieldDeclarator )+ ) ;
    public final JamlAttrHashParser.classFieldDeclaratorList_return classFieldDeclaratorList() throws RecognitionException {
    traceIn("classFieldDeclaratorList", 32);
        JamlAttrHashParser.classFieldDeclaratorList_return retval = new JamlAttrHashParser.classFieldDeclaratorList_return();
        retval.start = input.LT(1);
        int classFieldDeclaratorList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA134=null;
        JamlAttrHashParser.classFieldDeclarator_return classFieldDeclarator133 = null;

        JamlAttrHashParser.classFieldDeclarator_return classFieldDeclarator135 = null;


        CommonTree COMMA134_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_classFieldDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule classFieldDeclarator");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }
            // ../etc/JamlAttrHash.g:464:5: ( classFieldDeclarator ( COMMA classFieldDeclarator )* -> ^( VAR_DECLARATOR_LIST ( classFieldDeclarator )+ ) )
            // ../etc/JamlAttrHash.g:464:9: classFieldDeclarator ( COMMA classFieldDeclarator )*
            {
            pushFollow(FOLLOW_classFieldDeclarator_in_classFieldDeclaratorList6522);
            classFieldDeclarator133=classFieldDeclarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classFieldDeclarator.add(classFieldDeclarator133.getTree());
            // ../etc/JamlAttrHash.g:464:30: ( COMMA classFieldDeclarator )*
            loop47:
            do {
                int alt47=2;
                int LA47_0 = input.LA(1);

                if ( (LA47_0==COMMA) ) {
                    alt47=1;
                }


                switch (alt47) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:464:31: COMMA classFieldDeclarator
            	    {
            	    COMMA134=(Token)match(input,COMMA,FOLLOW_COMMA_in_classFieldDeclaratorList6525); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA134);

            	    pushFollow(FOLLOW_classFieldDeclarator_in_classFieldDeclaratorList6527);
            	    classFieldDeclarator135=classFieldDeclarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_classFieldDeclarator.add(classFieldDeclarator135.getTree());

            	    }
            	    break;

            	default :
            	    break loop47;
                }
            } while (true);



            // AST REWRITE
            // elements: classFieldDeclarator
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 465:9: -> ^( VAR_DECLARATOR_LIST ( classFieldDeclarator )+ )
            {
                // ../etc/JamlAttrHash.g:465:13: ^( VAR_DECLARATOR_LIST ( classFieldDeclarator )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_DECLARATOR_LIST, "VAR_DECLARATOR_LIST"), root_1);

                if ( !(stream_classFieldDeclarator.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_classFieldDeclarator.hasNext() ) {
                    adaptor.addChild(root_1, stream_classFieldDeclarator.nextTree());

                }
                stream_classFieldDeclarator.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("classFieldDeclaratorList", 32);
            if ( state.backtracking>0 ) { memoize(input, 32, classFieldDeclaratorList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classFieldDeclaratorList"

    public static class classFieldDeclarator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classFieldDeclarator"
    // ../etc/JamlAttrHash.g:468:1: classFieldDeclarator : variableDeclaratorId ( ASSIGN variableInitializer )? -> ^( VAR_DECLARATOR variableDeclaratorId ( variableInitializer )? ) ;
    public final JamlAttrHashParser.classFieldDeclarator_return classFieldDeclarator() throws RecognitionException {
    traceIn("classFieldDeclarator", 33);
        JamlAttrHashParser.classFieldDeclarator_return retval = new JamlAttrHashParser.classFieldDeclarator_return();
        retval.start = input.LT(1);
        int classFieldDeclarator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ASSIGN137=null;
        JamlAttrHashParser.variableDeclaratorId_return variableDeclaratorId136 = null;

        JamlAttrHashParser.variableInitializer_return variableInitializer138 = null;


        CommonTree ASSIGN137_tree=null;
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_variableDeclaratorId=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorId");
        RewriteRuleSubtreeStream stream_variableInitializer=new RewriteRuleSubtreeStream(adaptor,"rule variableInitializer");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }
            // ../etc/JamlAttrHash.g:469:5: ( variableDeclaratorId ( ASSIGN variableInitializer )? -> ^( VAR_DECLARATOR variableDeclaratorId ( variableInitializer )? ) )
            // ../etc/JamlAttrHash.g:469:9: variableDeclaratorId ( ASSIGN variableInitializer )?
            {
            pushFollow(FOLLOW_variableDeclaratorId_in_classFieldDeclarator6566);
            variableDeclaratorId136=variableDeclaratorId();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableDeclaratorId.add(variableDeclaratorId136.getTree());
            // ../etc/JamlAttrHash.g:469:30: ( ASSIGN variableInitializer )?
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==ASSIGN) ) {
                alt48=1;
            }
            switch (alt48) {
                case 1 :
                    // ../etc/JamlAttrHash.g:469:31: ASSIGN variableInitializer
                    {
                    ASSIGN137=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_classFieldDeclarator6569); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN137);

                    pushFollow(FOLLOW_variableInitializer_in_classFieldDeclarator6571);
                    variableInitializer138=variableInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variableInitializer.add(variableInitializer138.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: variableInitializer, variableDeclaratorId
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 470:9: -> ^( VAR_DECLARATOR variableDeclaratorId ( variableInitializer )? )
            {
                // ../etc/JamlAttrHash.g:470:13: ^( VAR_DECLARATOR variableDeclaratorId ( variableInitializer )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_DECLARATOR, "VAR_DECLARATOR"), root_1);

                adaptor.addChild(root_1, stream_variableDeclaratorId.nextTree());
                // ../etc/JamlAttrHash.g:470:51: ( variableInitializer )?
                if ( stream_variableInitializer.hasNext() ) {
                    adaptor.addChild(root_1, stream_variableInitializer.nextTree());

                }
                stream_variableInitializer.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("classFieldDeclarator", 33);
            if ( state.backtracking>0 ) { memoize(input, 33, classFieldDeclarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classFieldDeclarator"

    public static class interfaceFieldDeclaratorList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceFieldDeclaratorList"
    // ../etc/JamlAttrHash.g:473:1: interfaceFieldDeclaratorList : interfaceFieldDeclarator ( COMMA interfaceFieldDeclarator )* -> ^( VAR_DECLARATOR_LIST ( interfaceFieldDeclarator )+ ) ;
    public final JamlAttrHashParser.interfaceFieldDeclaratorList_return interfaceFieldDeclaratorList() throws RecognitionException {
    traceIn("interfaceFieldDeclaratorList", 34);
        JamlAttrHashParser.interfaceFieldDeclaratorList_return retval = new JamlAttrHashParser.interfaceFieldDeclaratorList_return();
        retval.start = input.LT(1);
        int interfaceFieldDeclaratorList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA140=null;
        JamlAttrHashParser.interfaceFieldDeclarator_return interfaceFieldDeclarator139 = null;

        JamlAttrHashParser.interfaceFieldDeclarator_return interfaceFieldDeclarator141 = null;


        CommonTree COMMA140_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_interfaceFieldDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule interfaceFieldDeclarator");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }
            // ../etc/JamlAttrHash.g:474:5: ( interfaceFieldDeclarator ( COMMA interfaceFieldDeclarator )* -> ^( VAR_DECLARATOR_LIST ( interfaceFieldDeclarator )+ ) )
            // ../etc/JamlAttrHash.g:474:9: interfaceFieldDeclarator ( COMMA interfaceFieldDeclarator )*
            {
            pushFollow(FOLLOW_interfaceFieldDeclarator_in_interfaceFieldDeclaratorList6616);
            interfaceFieldDeclarator139=interfaceFieldDeclarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_interfaceFieldDeclarator.add(interfaceFieldDeclarator139.getTree());
            // ../etc/JamlAttrHash.g:474:34: ( COMMA interfaceFieldDeclarator )*
            loop49:
            do {
                int alt49=2;
                int LA49_0 = input.LA(1);

                if ( (LA49_0==COMMA) ) {
                    alt49=1;
                }


                switch (alt49) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:474:35: COMMA interfaceFieldDeclarator
            	    {
            	    COMMA140=(Token)match(input,COMMA,FOLLOW_COMMA_in_interfaceFieldDeclaratorList6619); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA140);

            	    pushFollow(FOLLOW_interfaceFieldDeclarator_in_interfaceFieldDeclaratorList6621);
            	    interfaceFieldDeclarator141=interfaceFieldDeclarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_interfaceFieldDeclarator.add(interfaceFieldDeclarator141.getTree());

            	    }
            	    break;

            	default :
            	    break loop49;
                }
            } while (true);



            // AST REWRITE
            // elements: interfaceFieldDeclarator
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 475:9: -> ^( VAR_DECLARATOR_LIST ( interfaceFieldDeclarator )+ )
            {
                // ../etc/JamlAttrHash.g:475:13: ^( VAR_DECLARATOR_LIST ( interfaceFieldDeclarator )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_DECLARATOR_LIST, "VAR_DECLARATOR_LIST"), root_1);

                if ( !(stream_interfaceFieldDeclarator.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_interfaceFieldDeclarator.hasNext() ) {
                    adaptor.addChild(root_1, stream_interfaceFieldDeclarator.nextTree());

                }
                stream_interfaceFieldDeclarator.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("interfaceFieldDeclaratorList", 34);
            if ( state.backtracking>0 ) { memoize(input, 34, interfaceFieldDeclaratorList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceFieldDeclaratorList"

    public static class interfaceFieldDeclarator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceFieldDeclarator"
    // ../etc/JamlAttrHash.g:478:1: interfaceFieldDeclarator : variableDeclaratorId ASSIGN variableInitializer -> ^( VAR_DECLARATOR variableDeclaratorId variableInitializer ) ;
    public final JamlAttrHashParser.interfaceFieldDeclarator_return interfaceFieldDeclarator() throws RecognitionException {
    traceIn("interfaceFieldDeclarator", 35);
        JamlAttrHashParser.interfaceFieldDeclarator_return retval = new JamlAttrHashParser.interfaceFieldDeclarator_return();
        retval.start = input.LT(1);
        int interfaceFieldDeclarator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ASSIGN143=null;
        JamlAttrHashParser.variableDeclaratorId_return variableDeclaratorId142 = null;

        JamlAttrHashParser.variableInitializer_return variableInitializer144 = null;


        CommonTree ASSIGN143_tree=null;
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_variableDeclaratorId=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorId");
        RewriteRuleSubtreeStream stream_variableInitializer=new RewriteRuleSubtreeStream(adaptor,"rule variableInitializer");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }
            // ../etc/JamlAttrHash.g:479:5: ( variableDeclaratorId ASSIGN variableInitializer -> ^( VAR_DECLARATOR variableDeclaratorId variableInitializer ) )
            // ../etc/JamlAttrHash.g:479:9: variableDeclaratorId ASSIGN variableInitializer
            {
            pushFollow(FOLLOW_variableDeclaratorId_in_interfaceFieldDeclarator6660);
            variableDeclaratorId142=variableDeclaratorId();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableDeclaratorId.add(variableDeclaratorId142.getTree());
            ASSIGN143=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_interfaceFieldDeclarator6662); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN143);

            pushFollow(FOLLOW_variableInitializer_in_interfaceFieldDeclarator6664);
            variableInitializer144=variableInitializer();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableInitializer.add(variableInitializer144.getTree());


            // AST REWRITE
            // elements: variableDeclaratorId, variableInitializer
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 480:9: -> ^( VAR_DECLARATOR variableDeclaratorId variableInitializer )
            {
                // ../etc/JamlAttrHash.g:480:13: ^( VAR_DECLARATOR variableDeclaratorId variableInitializer )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_DECLARATOR, "VAR_DECLARATOR"), root_1);

                adaptor.addChild(root_1, stream_variableDeclaratorId.nextTree());
                adaptor.addChild(root_1, stream_variableInitializer.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("interfaceFieldDeclarator", 35);
            if ( state.backtracking>0 ) { memoize(input, 35, interfaceFieldDeclarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceFieldDeclarator"

    public static class variableDeclaratorId_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclaratorId"
    // ../etc/JamlAttrHash.g:483:1: variableDeclaratorId : IDENT ( arrayDeclaratorList )? ;
    public final JamlAttrHashParser.variableDeclaratorId_return variableDeclaratorId() throws RecognitionException {
    traceIn("variableDeclaratorId", 36);
        JamlAttrHashParser.variableDeclaratorId_return retval = new JamlAttrHashParser.variableDeclaratorId_return();
        retval.start = input.LT(1);
        int variableDeclaratorId_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT145=null;
        JamlAttrHashParser.arrayDeclaratorList_return arrayDeclaratorList146 = null;


        CommonTree IDENT145_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }
            // ../etc/JamlAttrHash.g:484:5: ( IDENT ( arrayDeclaratorList )? )
            // ../etc/JamlAttrHash.g:484:9: IDENT ( arrayDeclaratorList )?
            {
            root_0 = (CommonTree)adaptor.nil();

            IDENT145=(Token)match(input,IDENT,FOLLOW_IDENT_in_variableDeclaratorId6706); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT145_tree = (CommonTree)adaptor.create(IDENT145);
            root_0 = (CommonTree)adaptor.becomeRoot(IDENT145_tree, root_0);
            }
            // ../etc/JamlAttrHash.g:484:16: ( arrayDeclaratorList )?
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==LBRACK) ) {
                alt50=1;
            }
            switch (alt50) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: arrayDeclaratorList
                    {
                    pushFollow(FOLLOW_arrayDeclaratorList_in_variableDeclaratorId6709);
                    arrayDeclaratorList146=arrayDeclaratorList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayDeclaratorList146.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("variableDeclaratorId", 36);
            if ( state.backtracking>0 ) { memoize(input, 36, variableDeclaratorId_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableDeclaratorId"

    public static class variableInitializer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableInitializer"
    // ../etc/JamlAttrHash.g:487:1: variableInitializer : ( arrayInitializer | expression );
    public final JamlAttrHashParser.variableInitializer_return variableInitializer() throws RecognitionException {
    traceIn("variableInitializer", 37);
        JamlAttrHashParser.variableInitializer_return retval = new JamlAttrHashParser.variableInitializer_return();
        retval.start = input.LT(1);
        int variableInitializer_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.arrayInitializer_return arrayInitializer147 = null;

        JamlAttrHashParser.expression_return expression148 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }
            // ../etc/JamlAttrHash.g:488:5: ( arrayInitializer | expression )
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==LCURLY) ) {
                alt51=1;
            }
            else if ( (LA51_0==DEC||LA51_0==INC||LA51_0==LESS_THAN||LA51_0==LOGICAL_NOT||(LA51_0>=LPAREN && LA51_0<=MINUS)||LA51_0==NOT||LA51_0==PLUS||LA51_0==BOOLEAN||LA51_0==BYTE||LA51_0==CHAR||LA51_0==DOUBLE||LA51_0==FALSE||LA51_0==FLOAT||(LA51_0>=INT && LA51_0<=LONG)||(LA51_0>=NEW && LA51_0<=NULL)||LA51_0==SHORT||LA51_0==SUPER||LA51_0==THIS||LA51_0==TRUE||LA51_0==VOID||(LA51_0>=IDENT && LA51_0<=STRING_LITERAL)) ) {
                alt51=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 51, 0, input);

                throw nvae;
            }
            switch (alt51) {
                case 1 :
                    // ../etc/JamlAttrHash.g:488:9: arrayInitializer
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_arrayInitializer_in_variableInitializer6729);
                    arrayInitializer147=arrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayInitializer147.getTree());

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:489:9: expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expression_in_variableInitializer6739);
                    expression148=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression148.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("variableInitializer", 37);
            if ( state.backtracking>0 ) { memoize(input, 37, variableInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableInitializer"

    public static class arrayDeclarator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayDeclarator"
    // ../etc/JamlAttrHash.g:492:1: arrayDeclarator : LBRACK RBRACK -> ^( ARRAY_DECLARATOR ) ;
    public final JamlAttrHashParser.arrayDeclarator_return arrayDeclarator() throws RecognitionException {
    traceIn("arrayDeclarator", 38);
        JamlAttrHashParser.arrayDeclarator_return retval = new JamlAttrHashParser.arrayDeclarator_return();
        retval.start = input.LT(1);
        int arrayDeclarator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LBRACK149=null;
        Token RBRACK150=null;

        CommonTree LBRACK149_tree=null;
        CommonTree RBRACK150_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }
            // ../etc/JamlAttrHash.g:493:5: ( LBRACK RBRACK -> ^( ARRAY_DECLARATOR ) )
            // ../etc/JamlAttrHash.g:493:9: LBRACK RBRACK
            {
            LBRACK149=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_arrayDeclarator6758); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK149);

            RBRACK150=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_arrayDeclarator6760); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK150);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 494:9: -> ^( ARRAY_DECLARATOR )
            {
                // ../etc/JamlAttrHash.g:494:13: ^( ARRAY_DECLARATOR )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_DECLARATOR, "ARRAY_DECLARATOR"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("arrayDeclarator", 38);
            if ( state.backtracking>0 ) { memoize(input, 38, arrayDeclarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arrayDeclarator"

    public static class arrayDeclaratorList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayDeclaratorList"
    // ../etc/JamlAttrHash.g:497:1: arrayDeclaratorList : ( arrayDeclarator )+ -> ^( ARRAY_DECLARATOR_LIST ( arrayDeclarator )+ ) ;
    public final JamlAttrHashParser.arrayDeclaratorList_return arrayDeclaratorList() throws RecognitionException {
    traceIn("arrayDeclaratorList", 39);
        JamlAttrHashParser.arrayDeclaratorList_return retval = new JamlAttrHashParser.arrayDeclaratorList_return();
        retval.start = input.LT(1);
        int arrayDeclaratorList_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.arrayDeclarator_return arrayDeclarator151 = null;


        RewriteRuleSubtreeStream stream_arrayDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclarator");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }
            // ../etc/JamlAttrHash.g:498:5: ( ( arrayDeclarator )+ -> ^( ARRAY_DECLARATOR_LIST ( arrayDeclarator )+ ) )
            // ../etc/JamlAttrHash.g:498:9: ( arrayDeclarator )+
            {
            // ../etc/JamlAttrHash.g:498:9: ( arrayDeclarator )+
            int cnt52=0;
            loop52:
            do {
                int alt52=2;
                int LA52_0 = input.LA(1);

                if ( (LA52_0==LBRACK) ) {
                    int LA52_2 = input.LA(2);

                    if ( (synpred68_JamlAttrHash()) ) {
                        alt52=1;
                    }


                }


                switch (alt52) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:0:0: arrayDeclarator
            	    {
            	    pushFollow(FOLLOW_arrayDeclarator_in_arrayDeclaratorList6794);
            	    arrayDeclarator151=arrayDeclarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_arrayDeclarator.add(arrayDeclarator151.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt52 >= 1 ) break loop52;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(52, input);
                        throw eee;
                }
                cnt52++;
            } while (true);



            // AST REWRITE
            // elements: arrayDeclarator
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 499:9: -> ^( ARRAY_DECLARATOR_LIST ( arrayDeclarator )+ )
            {
                // ../etc/JamlAttrHash.g:499:13: ^( ARRAY_DECLARATOR_LIST ( arrayDeclarator )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_DECLARATOR_LIST, "ARRAY_DECLARATOR_LIST"), root_1);

                if ( !(stream_arrayDeclarator.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_arrayDeclarator.hasNext() ) {
                    adaptor.addChild(root_1, stream_arrayDeclarator.nextTree());

                }
                stream_arrayDeclarator.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("arrayDeclaratorList", 39);
            if ( state.backtracking>0 ) { memoize(input, 39, arrayDeclaratorList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arrayDeclaratorList"

    public static class arrayInitializer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayInitializer"
    // ../etc/JamlAttrHash.g:502:1: arrayInitializer : LCURLY ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )? RCURLY -> ^( ARRAY_INITIALIZER[$LCURLY, \"ARRAY_INITIALIZER\"] ( variableInitializer )* ) ;
    public final JamlAttrHashParser.arrayInitializer_return arrayInitializer() throws RecognitionException {
    traceIn("arrayInitializer", 40);
        JamlAttrHashParser.arrayInitializer_return retval = new JamlAttrHashParser.arrayInitializer_return();
        retval.start = input.LT(1);
        int arrayInitializer_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LCURLY152=null;
        Token COMMA154=null;
        Token COMMA156=null;
        Token RCURLY157=null;
        JamlAttrHashParser.variableInitializer_return variableInitializer153 = null;

        JamlAttrHashParser.variableInitializer_return variableInitializer155 = null;


        CommonTree LCURLY152_tree=null;
        CommonTree COMMA154_tree=null;
        CommonTree COMMA156_tree=null;
        CommonTree RCURLY157_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_variableInitializer=new RewriteRuleSubtreeStream(adaptor,"rule variableInitializer");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }
            // ../etc/JamlAttrHash.g:503:5: ( LCURLY ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )? RCURLY -> ^( ARRAY_INITIALIZER[$LCURLY, \"ARRAY_INITIALIZER\"] ( variableInitializer )* ) )
            // ../etc/JamlAttrHash.g:503:9: LCURLY ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )? RCURLY
            {
            LCURLY152=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_arrayInitializer6839); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY152);

            // ../etc/JamlAttrHash.g:503:16: ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )?
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==DEC||LA55_0==INC||LA55_0==LCURLY||LA55_0==LESS_THAN||LA55_0==LOGICAL_NOT||(LA55_0>=LPAREN && LA55_0<=MINUS)||LA55_0==NOT||LA55_0==PLUS||LA55_0==BOOLEAN||LA55_0==BYTE||LA55_0==CHAR||LA55_0==DOUBLE||LA55_0==FALSE||LA55_0==FLOAT||(LA55_0>=INT && LA55_0<=LONG)||(LA55_0>=NEW && LA55_0<=NULL)||LA55_0==SHORT||LA55_0==SUPER||LA55_0==THIS||LA55_0==TRUE||LA55_0==VOID||(LA55_0>=IDENT && LA55_0<=STRING_LITERAL)) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    // ../etc/JamlAttrHash.g:503:17: variableInitializer ( COMMA variableInitializer )* ( COMMA )?
                    {
                    pushFollow(FOLLOW_variableInitializer_in_arrayInitializer6842);
                    variableInitializer153=variableInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variableInitializer.add(variableInitializer153.getTree());
                    // ../etc/JamlAttrHash.g:503:37: ( COMMA variableInitializer )*
                    loop53:
                    do {
                        int alt53=2;
                        int LA53_0 = input.LA(1);

                        if ( (LA53_0==COMMA) ) {
                            int LA53_1 = input.LA(2);

                            if ( (LA53_1==DEC||LA53_1==INC||LA53_1==LCURLY||LA53_1==LESS_THAN||LA53_1==LOGICAL_NOT||(LA53_1>=LPAREN && LA53_1<=MINUS)||LA53_1==NOT||LA53_1==PLUS||LA53_1==BOOLEAN||LA53_1==BYTE||LA53_1==CHAR||LA53_1==DOUBLE||LA53_1==FALSE||LA53_1==FLOAT||(LA53_1>=INT && LA53_1<=LONG)||(LA53_1>=NEW && LA53_1<=NULL)||LA53_1==SHORT||LA53_1==SUPER||LA53_1==THIS||LA53_1==TRUE||LA53_1==VOID||(LA53_1>=IDENT && LA53_1<=STRING_LITERAL)) ) {
                                alt53=1;
                            }


                        }


                        switch (alt53) {
                    	case 1 :
                    	    // ../etc/JamlAttrHash.g:503:38: COMMA variableInitializer
                    	    {
                    	    COMMA154=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer6845); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA154);

                    	    pushFollow(FOLLOW_variableInitializer_in_arrayInitializer6847);
                    	    variableInitializer155=variableInitializer();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_variableInitializer.add(variableInitializer155.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop53;
                        }
                    } while (true);

                    // ../etc/JamlAttrHash.g:503:66: ( COMMA )?
                    int alt54=2;
                    int LA54_0 = input.LA(1);

                    if ( (LA54_0==COMMA) ) {
                        alt54=1;
                    }
                    switch (alt54) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:0:0: COMMA
                            {
                            COMMA156=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer6851); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA156);


                            }
                            break;

                    }


                    }
                    break;

            }

            RCURLY157=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_arrayInitializer6856); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY157);



            // AST REWRITE
            // elements: variableInitializer
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 504:9: -> ^( ARRAY_INITIALIZER[$LCURLY, \"ARRAY_INITIALIZER\"] ( variableInitializer )* )
            {
                // ../etc/JamlAttrHash.g:504:13: ^( ARRAY_INITIALIZER[$LCURLY, \"ARRAY_INITIALIZER\"] ( variableInitializer )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_INITIALIZER, LCURLY152, "ARRAY_INITIALIZER"), root_1);

                // ../etc/JamlAttrHash.g:504:63: ( variableInitializer )*
                while ( stream_variableInitializer.hasNext() ) {
                    adaptor.addChild(root_1, stream_variableInitializer.nextTree());

                }
                stream_variableInitializer.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("arrayInitializer", 40);
            if ( state.backtracking>0 ) { memoize(input, 40, arrayInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arrayInitializer"

    public static class throwsClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "throwsClause"
    // ../etc/JamlAttrHash.g:507:1: throwsClause : THROWS qualifiedIdentList -> ^( THROWS_CLAUSE[$THROWS, \"THROWS_CLAUSE\"] qualifiedIdentList ) ;
    public final JamlAttrHashParser.throwsClause_return throwsClause() throws RecognitionException {
    traceIn("throwsClause", 41);
        JamlAttrHashParser.throwsClause_return retval = new JamlAttrHashParser.throwsClause_return();
        retval.start = input.LT(1);
        int throwsClause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token THROWS158=null;
        JamlAttrHashParser.qualifiedIdentList_return qualifiedIdentList159 = null;


        CommonTree THROWS158_tree=null;
        RewriteRuleTokenStream stream_THROWS=new RewriteRuleTokenStream(adaptor,"token THROWS");
        RewriteRuleSubtreeStream stream_qualifiedIdentList=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedIdentList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }
            // ../etc/JamlAttrHash.g:508:5: ( THROWS qualifiedIdentList -> ^( THROWS_CLAUSE[$THROWS, \"THROWS_CLAUSE\"] qualifiedIdentList ) )
            // ../etc/JamlAttrHash.g:508:9: THROWS qualifiedIdentList
            {
            THROWS158=(Token)match(input,THROWS,FOLLOW_THROWS_in_throwsClause6894); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_THROWS.add(THROWS158);

            pushFollow(FOLLOW_qualifiedIdentList_in_throwsClause6896);
            qualifiedIdentList159=qualifiedIdentList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifiedIdentList.add(qualifiedIdentList159.getTree());


            // AST REWRITE
            // elements: qualifiedIdentList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 509:9: -> ^( THROWS_CLAUSE[$THROWS, \"THROWS_CLAUSE\"] qualifiedIdentList )
            {
                // ../etc/JamlAttrHash.g:509:13: ^( THROWS_CLAUSE[$THROWS, \"THROWS_CLAUSE\"] qualifiedIdentList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(THROWS_CLAUSE, THROWS158, "THROWS_CLAUSE"), root_1);

                adaptor.addChild(root_1, stream_qualifiedIdentList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("throwsClause", 41);
            if ( state.backtracking>0 ) { memoize(input, 41, throwsClause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "throwsClause"

    public static class modifierList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "modifierList"
    // ../etc/JamlAttrHash.g:512:1: modifierList : ( modifier )* -> ^( MODIFIER_LIST ( modifier )* ) ;
    public final JamlAttrHashParser.modifierList_return modifierList() throws RecognitionException {
    traceIn("modifierList", 42);
        JamlAttrHashParser.modifierList_return retval = new JamlAttrHashParser.modifierList_return();
        retval.start = input.LT(1);
        int modifierList_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.modifier_return modifier160 = null;


        RewriteRuleSubtreeStream stream_modifier=new RewriteRuleSubtreeStream(adaptor,"rule modifier");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }
            // ../etc/JamlAttrHash.g:513:5: ( ( modifier )* -> ^( MODIFIER_LIST ( modifier )* ) )
            // ../etc/JamlAttrHash.g:513:9: ( modifier )*
            {
            // ../etc/JamlAttrHash.g:513:9: ( modifier )*
            loop56:
            do {
                int alt56=2;
                int LA56_0 = input.LA(1);

                if ( (LA56_0==AT) ) {
                    int LA56_2 = input.LA(2);

                    if ( (LA56_2==IDENT) ) {
                        alt56=1;
                    }


                }
                else if ( (LA56_0==ABSTRACT||LA56_0==FINAL||LA56_0==NATIVE||(LA56_0>=PRIVATE && LA56_0<=PUBLIC)||(LA56_0>=STATIC && LA56_0<=STRICTFP)||LA56_0==SYNCHRONIZED||LA56_0==TRANSIENT||LA56_0==VOLATILE) ) {
                    alt56=1;
                }


                switch (alt56) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:0:0: modifier
            	    {
            	    pushFollow(FOLLOW_modifier_in_modifierList6933);
            	    modifier160=modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_modifier.add(modifier160.getTree());

            	    }
            	    break;

            	default :
            	    break loop56;
                }
            } while (true);



            // AST REWRITE
            // elements: modifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 514:9: -> ^( MODIFIER_LIST ( modifier )* )
            {
                // ../etc/JamlAttrHash.g:514:13: ^( MODIFIER_LIST ( modifier )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MODIFIER_LIST, "MODIFIER_LIST"), root_1);

                // ../etc/JamlAttrHash.g:514:29: ( modifier )*
                while ( stream_modifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_modifier.nextTree());

                }
                stream_modifier.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("modifierList", 42);
            if ( state.backtracking>0 ) { memoize(input, 42, modifierList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "modifierList"

    public static class modifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "modifier"
    // ../etc/JamlAttrHash.g:517:1: modifier : ( PUBLIC | PROTECTED | PRIVATE | STATIC | ABSTRACT | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | localModifier );
    public final JamlAttrHashParser.modifier_return modifier() throws RecognitionException {
    traceIn("modifier", 43);
        JamlAttrHashParser.modifier_return retval = new JamlAttrHashParser.modifier_return();
        retval.start = input.LT(1);
        int modifier_StartIndex = input.index();
        CommonTree root_0 = null;

        Token PUBLIC161=null;
        Token PROTECTED162=null;
        Token PRIVATE163=null;
        Token STATIC164=null;
        Token ABSTRACT165=null;
        Token NATIVE166=null;
        Token SYNCHRONIZED167=null;
        Token TRANSIENT168=null;
        Token VOLATILE169=null;
        Token STRICTFP170=null;
        JamlAttrHashParser.localModifier_return localModifier171 = null;


        CommonTree PUBLIC161_tree=null;
        CommonTree PROTECTED162_tree=null;
        CommonTree PRIVATE163_tree=null;
        CommonTree STATIC164_tree=null;
        CommonTree ABSTRACT165_tree=null;
        CommonTree NATIVE166_tree=null;
        CommonTree SYNCHRONIZED167_tree=null;
        CommonTree TRANSIENT168_tree=null;
        CommonTree VOLATILE169_tree=null;
        CommonTree STRICTFP170_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }
            // ../etc/JamlAttrHash.g:518:5: ( PUBLIC | PROTECTED | PRIVATE | STATIC | ABSTRACT | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | localModifier )
            int alt57=11;
            switch ( input.LA(1) ) {
            case PUBLIC:
                {
                alt57=1;
                }
                break;
            case PROTECTED:
                {
                alt57=2;
                }
                break;
            case PRIVATE:
                {
                alt57=3;
                }
                break;
            case STATIC:
                {
                alt57=4;
                }
                break;
            case ABSTRACT:
                {
                alt57=5;
                }
                break;
            case NATIVE:
                {
                alt57=6;
                }
                break;
            case SYNCHRONIZED:
                {
                alt57=7;
                }
                break;
            case TRANSIENT:
                {
                alt57=8;
                }
                break;
            case VOLATILE:
                {
                alt57=9;
                }
                break;
            case STRICTFP:
                {
                alt57=10;
                }
                break;
            case AT:
            case FINAL:
                {
                alt57=11;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 57, 0, input);

                throw nvae;
            }

            switch (alt57) {
                case 1 :
                    // ../etc/JamlAttrHash.g:518:9: PUBLIC
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PUBLIC161=(Token)match(input,PUBLIC,FOLLOW_PUBLIC_in_modifier6974); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PUBLIC161_tree = (CommonTree)adaptor.create(PUBLIC161);
                    adaptor.addChild(root_0, PUBLIC161_tree);
                    }

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:519:9: PROTECTED
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PROTECTED162=(Token)match(input,PROTECTED,FOLLOW_PROTECTED_in_modifier6984); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PROTECTED162_tree = (CommonTree)adaptor.create(PROTECTED162);
                    adaptor.addChild(root_0, PROTECTED162_tree);
                    }

                    }
                    break;
                case 3 :
                    // ../etc/JamlAttrHash.g:520:9: PRIVATE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PRIVATE163=(Token)match(input,PRIVATE,FOLLOW_PRIVATE_in_modifier6994); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIVATE163_tree = (CommonTree)adaptor.create(PRIVATE163);
                    adaptor.addChild(root_0, PRIVATE163_tree);
                    }

                    }
                    break;
                case 4 :
                    // ../etc/JamlAttrHash.g:521:9: STATIC
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STATIC164=(Token)match(input,STATIC,FOLLOW_STATIC_in_modifier7004); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STATIC164_tree = (CommonTree)adaptor.create(STATIC164);
                    adaptor.addChild(root_0, STATIC164_tree);
                    }

                    }
                    break;
                case 5 :
                    // ../etc/JamlAttrHash.g:522:9: ABSTRACT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ABSTRACT165=(Token)match(input,ABSTRACT,FOLLOW_ABSTRACT_in_modifier7014); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ABSTRACT165_tree = (CommonTree)adaptor.create(ABSTRACT165);
                    adaptor.addChild(root_0, ABSTRACT165_tree);
                    }

                    }
                    break;
                case 6 :
                    // ../etc/JamlAttrHash.g:523:9: NATIVE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    NATIVE166=(Token)match(input,NATIVE,FOLLOW_NATIVE_in_modifier7024); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NATIVE166_tree = (CommonTree)adaptor.create(NATIVE166);
                    adaptor.addChild(root_0, NATIVE166_tree);
                    }

                    }
                    break;
                case 7 :
                    // ../etc/JamlAttrHash.g:524:9: SYNCHRONIZED
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SYNCHRONIZED167=(Token)match(input,SYNCHRONIZED,FOLLOW_SYNCHRONIZED_in_modifier7034); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SYNCHRONIZED167_tree = (CommonTree)adaptor.create(SYNCHRONIZED167);
                    adaptor.addChild(root_0, SYNCHRONIZED167_tree);
                    }

                    }
                    break;
                case 8 :
                    // ../etc/JamlAttrHash.g:525:9: TRANSIENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    TRANSIENT168=(Token)match(input,TRANSIENT,FOLLOW_TRANSIENT_in_modifier7044); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TRANSIENT168_tree = (CommonTree)adaptor.create(TRANSIENT168);
                    adaptor.addChild(root_0, TRANSIENT168_tree);
                    }

                    }
                    break;
                case 9 :
                    // ../etc/JamlAttrHash.g:526:9: VOLATILE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    VOLATILE169=(Token)match(input,VOLATILE,FOLLOW_VOLATILE_in_modifier7054); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VOLATILE169_tree = (CommonTree)adaptor.create(VOLATILE169);
                    adaptor.addChild(root_0, VOLATILE169_tree);
                    }

                    }
                    break;
                case 10 :
                    // ../etc/JamlAttrHash.g:527:9: STRICTFP
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STRICTFP170=(Token)match(input,STRICTFP,FOLLOW_STRICTFP_in_modifier7064); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STRICTFP170_tree = (CommonTree)adaptor.create(STRICTFP170);
                    adaptor.addChild(root_0, STRICTFP170_tree);
                    }

                    }
                    break;
                case 11 :
                    // ../etc/JamlAttrHash.g:528:9: localModifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_localModifier_in_modifier7074);
                    localModifier171=localModifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, localModifier171.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("modifier", 43);
            if ( state.backtracking>0 ) { memoize(input, 43, modifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "modifier"

    public static class localModifierList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "localModifierList"
    // ../etc/JamlAttrHash.g:531:1: localModifierList : ( localModifier )* -> ^( LOCAL_MODIFIER_LIST ( localModifier )* ) ;
    public final JamlAttrHashParser.localModifierList_return localModifierList() throws RecognitionException {
    traceIn("localModifierList", 44);
        JamlAttrHashParser.localModifierList_return retval = new JamlAttrHashParser.localModifierList_return();
        retval.start = input.LT(1);
        int localModifierList_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.localModifier_return localModifier172 = null;


        RewriteRuleSubtreeStream stream_localModifier=new RewriteRuleSubtreeStream(adaptor,"rule localModifier");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }
            // ../etc/JamlAttrHash.g:532:5: ( ( localModifier )* -> ^( LOCAL_MODIFIER_LIST ( localModifier )* ) )
            // ../etc/JamlAttrHash.g:532:9: ( localModifier )*
            {
            // ../etc/JamlAttrHash.g:532:9: ( localModifier )*
            loop58:
            do {
                int alt58=2;
                int LA58_0 = input.LA(1);

                if ( (LA58_0==AT||LA58_0==FINAL) ) {
                    alt58=1;
                }


                switch (alt58) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:0:0: localModifier
            	    {
            	    pushFollow(FOLLOW_localModifier_in_localModifierList7093);
            	    localModifier172=localModifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_localModifier.add(localModifier172.getTree());

            	    }
            	    break;

            	default :
            	    break loop58;
                }
            } while (true);



            // AST REWRITE
            // elements: localModifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 533:9: -> ^( LOCAL_MODIFIER_LIST ( localModifier )* )
            {
                // ../etc/JamlAttrHash.g:533:12: ^( LOCAL_MODIFIER_LIST ( localModifier )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LOCAL_MODIFIER_LIST, "LOCAL_MODIFIER_LIST"), root_1);

                // ../etc/JamlAttrHash.g:533:34: ( localModifier )*
                while ( stream_localModifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_localModifier.nextTree());

                }
                stream_localModifier.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("localModifierList", 44);
            if ( state.backtracking>0 ) { memoize(input, 44, localModifierList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "localModifierList"

    public static class localModifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "localModifier"
    // ../etc/JamlAttrHash.g:536:1: localModifier : ( FINAL | annotation );
    public final JamlAttrHashParser.localModifier_return localModifier() throws RecognitionException {
    traceIn("localModifier", 45);
        JamlAttrHashParser.localModifier_return retval = new JamlAttrHashParser.localModifier_return();
        retval.start = input.LT(1);
        int localModifier_StartIndex = input.index();
        CommonTree root_0 = null;

        Token FINAL173=null;
        JamlAttrHashParser.annotation_return annotation174 = null;


        CommonTree FINAL173_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }
            // ../etc/JamlAttrHash.g:537:5: ( FINAL | annotation )
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==FINAL) ) {
                alt59=1;
            }
            else if ( (LA59_0==AT) ) {
                alt59=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 59, 0, input);

                throw nvae;
            }
            switch (alt59) {
                case 1 :
                    // ../etc/JamlAttrHash.g:537:9: FINAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    FINAL173=(Token)match(input,FINAL,FOLLOW_FINAL_in_localModifier7134); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FINAL173_tree = (CommonTree)adaptor.create(FINAL173);
                    adaptor.addChild(root_0, FINAL173_tree);
                    }

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:538:9: annotation
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_annotation_in_localModifier7144);
                    annotation174=annotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotation174.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("localModifier", 45);
            if ( state.backtracking>0 ) { memoize(input, 45, localModifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "localModifier"

    public static class type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type"
    // ../etc/JamlAttrHash.g:541:1: type : ( simpleType | objectType );
    public final JamlAttrHashParser.type_return type() throws RecognitionException {
    traceIn("type", 46);
        JamlAttrHashParser.type_return retval = new JamlAttrHashParser.type_return();
        retval.start = input.LT(1);
        int type_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.simpleType_return simpleType175 = null;

        JamlAttrHashParser.objectType_return objectType176 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }
            // ../etc/JamlAttrHash.g:542:5: ( simpleType | objectType )
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==BOOLEAN||LA60_0==BYTE||LA60_0==CHAR||LA60_0==DOUBLE||LA60_0==FLOAT||(LA60_0>=INT && LA60_0<=LONG)||LA60_0==SHORT) ) {
                alt60=1;
            }
            else if ( (LA60_0==IDENT) ) {
                alt60=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 60, 0, input);

                throw nvae;
            }
            switch (alt60) {
                case 1 :
                    // ../etc/JamlAttrHash.g:542:9: simpleType
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_simpleType_in_type7163);
                    simpleType175=simpleType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleType175.getTree());

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:543:9: objectType
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_objectType_in_type7173);
                    objectType176=objectType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, objectType176.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("type", 46);
            if ( state.backtracking>0 ) { memoize(input, 46, type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type"

    public static class simpleType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "simpleType"
    // ../etc/JamlAttrHash.g:546:1: simpleType : primitiveType ( arrayDeclaratorList )? -> ^( TYPE primitiveType ( arrayDeclaratorList )? ) ;
    public final JamlAttrHashParser.simpleType_return simpleType() throws RecognitionException {
    traceIn("simpleType", 47);
        JamlAttrHashParser.simpleType_return retval = new JamlAttrHashParser.simpleType_return();
        retval.start = input.LT(1);
        int simpleType_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.primitiveType_return primitiveType177 = null;

        JamlAttrHashParser.arrayDeclaratorList_return arrayDeclaratorList178 = null;


        RewriteRuleSubtreeStream stream_arrayDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclaratorList");
        RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }
            // ../etc/JamlAttrHash.g:547:5: ( primitiveType ( arrayDeclaratorList )? -> ^( TYPE primitiveType ( arrayDeclaratorList )? ) )
            // ../etc/JamlAttrHash.g:547:9: primitiveType ( arrayDeclaratorList )?
            {
            pushFollow(FOLLOW_primitiveType_in_simpleType7193);
            primitiveType177=primitiveType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_primitiveType.add(primitiveType177.getTree());
            // ../etc/JamlAttrHash.g:547:23: ( arrayDeclaratorList )?
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==LBRACK) ) {
                int LA61_1 = input.LA(2);

                if ( (LA61_1==RBRACK) ) {
                    int LA61_3 = input.LA(3);

                    if ( (synpred86_JamlAttrHash()) ) {
                        alt61=1;
                    }
                }
            }
            switch (alt61) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: arrayDeclaratorList
                    {
                    pushFollow(FOLLOW_arrayDeclaratorList_in_simpleType7195);
                    arrayDeclaratorList178=arrayDeclaratorList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arrayDeclaratorList.add(arrayDeclaratorList178.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: primitiveType, arrayDeclaratorList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 548:9: -> ^( TYPE primitiveType ( arrayDeclaratorList )? )
            {
                // ../etc/JamlAttrHash.g:548:13: ^( TYPE primitiveType ( arrayDeclaratorList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE, "TYPE"), root_1);

                adaptor.addChild(root_1, stream_primitiveType.nextTree());
                // ../etc/JamlAttrHash.g:548:34: ( arrayDeclaratorList )?
                if ( stream_arrayDeclaratorList.hasNext() ) {
                    adaptor.addChild(root_1, stream_arrayDeclaratorList.nextTree());

                }
                stream_arrayDeclaratorList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("simpleType", 47);
            if ( state.backtracking>0 ) { memoize(input, 47, simpleType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "simpleType"

    public static class objectType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "objectType"
    // ../etc/JamlAttrHash.g:551:1: objectType : qualifiedTypeIdent ( arrayDeclaratorList )? -> ^( TYPE qualifiedTypeIdent ( arrayDeclaratorList )? ) ;
    public final JamlAttrHashParser.objectType_return objectType() throws RecognitionException {
    traceIn("objectType", 48);
        JamlAttrHashParser.objectType_return retval = new JamlAttrHashParser.objectType_return();
        retval.start = input.LT(1);
        int objectType_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.qualifiedTypeIdent_return qualifiedTypeIdent179 = null;

        JamlAttrHashParser.arrayDeclaratorList_return arrayDeclaratorList180 = null;


        RewriteRuleSubtreeStream stream_arrayDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclaratorList");
        RewriteRuleSubtreeStream stream_qualifiedTypeIdent=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedTypeIdent");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }
            // ../etc/JamlAttrHash.g:552:5: ( qualifiedTypeIdent ( arrayDeclaratorList )? -> ^( TYPE qualifiedTypeIdent ( arrayDeclaratorList )? ) )
            // ../etc/JamlAttrHash.g:552:9: qualifiedTypeIdent ( arrayDeclaratorList )?
            {
            pushFollow(FOLLOW_qualifiedTypeIdent_in_objectType7242);
            qualifiedTypeIdent179=qualifiedTypeIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifiedTypeIdent.add(qualifiedTypeIdent179.getTree());
            // ../etc/JamlAttrHash.g:552:28: ( arrayDeclaratorList )?
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==LBRACK) ) {
                int LA62_1 = input.LA(2);

                if ( (synpred87_JamlAttrHash()) ) {
                    alt62=1;
                }
            }
            switch (alt62) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: arrayDeclaratorList
                    {
                    pushFollow(FOLLOW_arrayDeclaratorList_in_objectType7244);
                    arrayDeclaratorList180=arrayDeclaratorList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arrayDeclaratorList.add(arrayDeclaratorList180.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: qualifiedTypeIdent, arrayDeclaratorList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 553:9: -> ^( TYPE qualifiedTypeIdent ( arrayDeclaratorList )? )
            {
                // ../etc/JamlAttrHash.g:553:13: ^( TYPE qualifiedTypeIdent ( arrayDeclaratorList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE, "TYPE"), root_1);

                adaptor.addChild(root_1, stream_qualifiedTypeIdent.nextTree());
                // ../etc/JamlAttrHash.g:553:39: ( arrayDeclaratorList )?
                if ( stream_arrayDeclaratorList.hasNext() ) {
                    adaptor.addChild(root_1, stream_arrayDeclaratorList.nextTree());

                }
                stream_arrayDeclaratorList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("objectType", 48);
            if ( state.backtracking>0 ) { memoize(input, 48, objectType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "objectType"

    public static class objectTypeSimplified_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "objectTypeSimplified"
    // ../etc/JamlAttrHash.g:556:1: objectTypeSimplified : qualifiedTypeIdentSimplified ( arrayDeclaratorList )? -> ^( TYPE qualifiedTypeIdentSimplified ( arrayDeclaratorList )? ) ;
    public final JamlAttrHashParser.objectTypeSimplified_return objectTypeSimplified() throws RecognitionException {
    traceIn("objectTypeSimplified", 49);
        JamlAttrHashParser.objectTypeSimplified_return retval = new JamlAttrHashParser.objectTypeSimplified_return();
        retval.start = input.LT(1);
        int objectTypeSimplified_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.qualifiedTypeIdentSimplified_return qualifiedTypeIdentSimplified181 = null;

        JamlAttrHashParser.arrayDeclaratorList_return arrayDeclaratorList182 = null;


        RewriteRuleSubtreeStream stream_arrayDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclaratorList");
        RewriteRuleSubtreeStream stream_qualifiedTypeIdentSimplified=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedTypeIdentSimplified");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }
            // ../etc/JamlAttrHash.g:557:5: ( qualifiedTypeIdentSimplified ( arrayDeclaratorList )? -> ^( TYPE qualifiedTypeIdentSimplified ( arrayDeclaratorList )? ) )
            // ../etc/JamlAttrHash.g:557:9: qualifiedTypeIdentSimplified ( arrayDeclaratorList )?
            {
            pushFollow(FOLLOW_qualifiedTypeIdentSimplified_in_objectTypeSimplified7284);
            qualifiedTypeIdentSimplified181=qualifiedTypeIdentSimplified();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifiedTypeIdentSimplified.add(qualifiedTypeIdentSimplified181.getTree());
            // ../etc/JamlAttrHash.g:557:38: ( arrayDeclaratorList )?
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==LBRACK) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: arrayDeclaratorList
                    {
                    pushFollow(FOLLOW_arrayDeclaratorList_in_objectTypeSimplified7286);
                    arrayDeclaratorList182=arrayDeclaratorList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arrayDeclaratorList.add(arrayDeclaratorList182.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: arrayDeclaratorList, qualifiedTypeIdentSimplified
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 558:9: -> ^( TYPE qualifiedTypeIdentSimplified ( arrayDeclaratorList )? )
            {
                // ../etc/JamlAttrHash.g:558:13: ^( TYPE qualifiedTypeIdentSimplified ( arrayDeclaratorList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE, "TYPE"), root_1);

                adaptor.addChild(root_1, stream_qualifiedTypeIdentSimplified.nextTree());
                // ../etc/JamlAttrHash.g:558:49: ( arrayDeclaratorList )?
                if ( stream_arrayDeclaratorList.hasNext() ) {
                    adaptor.addChild(root_1, stream_arrayDeclaratorList.nextTree());

                }
                stream_arrayDeclaratorList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("objectTypeSimplified", 49);
            if ( state.backtracking>0 ) { memoize(input, 49, objectTypeSimplified_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "objectTypeSimplified"

    public static class qualifiedTypeIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedTypeIdent"
    // ../etc/JamlAttrHash.g:561:1: qualifiedTypeIdent : typeIdent ( DOT typeIdent )* -> ^( QUALIFIED_TYPE_IDENT ( typeIdent )+ ) ;
    public final JamlAttrHashParser.qualifiedTypeIdent_return qualifiedTypeIdent() throws RecognitionException {
    traceIn("qualifiedTypeIdent", 50);
        JamlAttrHashParser.qualifiedTypeIdent_return retval = new JamlAttrHashParser.qualifiedTypeIdent_return();
        retval.start = input.LT(1);
        int qualifiedTypeIdent_StartIndex = input.index();
        CommonTree root_0 = null;

        Token DOT184=null;
        JamlAttrHashParser.typeIdent_return typeIdent183 = null;

        JamlAttrHashParser.typeIdent_return typeIdent185 = null;


        CommonTree DOT184_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_typeIdent=new RewriteRuleSubtreeStream(adaptor,"rule typeIdent");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }
            // ../etc/JamlAttrHash.g:562:5: ( typeIdent ( DOT typeIdent )* -> ^( QUALIFIED_TYPE_IDENT ( typeIdent )+ ) )
            // ../etc/JamlAttrHash.g:562:9: typeIdent ( DOT typeIdent )*
            {
            pushFollow(FOLLOW_typeIdent_in_qualifiedTypeIdent7326);
            typeIdent183=typeIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeIdent.add(typeIdent183.getTree());
            // ../etc/JamlAttrHash.g:562:19: ( DOT typeIdent )*
            loop64:
            do {
                int alt64=2;
                int LA64_0 = input.LA(1);

                if ( (LA64_0==DOT) ) {
                    int LA64_2 = input.LA(2);

                    if ( (synpred89_JamlAttrHash()) ) {
                        alt64=1;
                    }


                }


                switch (alt64) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:562:20: DOT typeIdent
            	    {
            	    DOT184=(Token)match(input,DOT,FOLLOW_DOT_in_qualifiedTypeIdent7329); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT184);

            	    pushFollow(FOLLOW_typeIdent_in_qualifiedTypeIdent7331);
            	    typeIdent185=typeIdent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_typeIdent.add(typeIdent185.getTree());

            	    }
            	    break;

            	default :
            	    break loop64;
                }
            } while (true);



            // AST REWRITE
            // elements: typeIdent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 563:9: -> ^( QUALIFIED_TYPE_IDENT ( typeIdent )+ )
            {
                // ../etc/JamlAttrHash.g:563:13: ^( QUALIFIED_TYPE_IDENT ( typeIdent )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(QUALIFIED_TYPE_IDENT, "QUALIFIED_TYPE_IDENT"), root_1);

                if ( !(stream_typeIdent.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_typeIdent.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeIdent.nextTree());

                }
                stream_typeIdent.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("qualifiedTypeIdent", 50);
            if ( state.backtracking>0 ) { memoize(input, 50, qualifiedTypeIdent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedTypeIdent"

    public static class qualifiedTypeIdentSimplified_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedTypeIdentSimplified"
    // ../etc/JamlAttrHash.g:566:1: qualifiedTypeIdentSimplified : typeIdentSimplified ( DOT typeIdentSimplified )* -> ^( QUALIFIED_TYPE_IDENT ( typeIdentSimplified )+ ) ;
    public final JamlAttrHashParser.qualifiedTypeIdentSimplified_return qualifiedTypeIdentSimplified() throws RecognitionException {
    traceIn("qualifiedTypeIdentSimplified", 51);
        JamlAttrHashParser.qualifiedTypeIdentSimplified_return retval = new JamlAttrHashParser.qualifiedTypeIdentSimplified_return();
        retval.start = input.LT(1);
        int qualifiedTypeIdentSimplified_StartIndex = input.index();
        CommonTree root_0 = null;

        Token DOT187=null;
        JamlAttrHashParser.typeIdentSimplified_return typeIdentSimplified186 = null;

        JamlAttrHashParser.typeIdentSimplified_return typeIdentSimplified188 = null;


        CommonTree DOT187_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_typeIdentSimplified=new RewriteRuleSubtreeStream(adaptor,"rule typeIdentSimplified");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }
            // ../etc/JamlAttrHash.g:567:5: ( typeIdentSimplified ( DOT typeIdentSimplified )* -> ^( QUALIFIED_TYPE_IDENT ( typeIdentSimplified )+ ) )
            // ../etc/JamlAttrHash.g:567:9: typeIdentSimplified ( DOT typeIdentSimplified )*
            {
            pushFollow(FOLLOW_typeIdentSimplified_in_qualifiedTypeIdentSimplified7371);
            typeIdentSimplified186=typeIdentSimplified();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeIdentSimplified.add(typeIdentSimplified186.getTree());
            // ../etc/JamlAttrHash.g:567:29: ( DOT typeIdentSimplified )*
            loop65:
            do {
                int alt65=2;
                int LA65_0 = input.LA(1);

                if ( (LA65_0==DOT) ) {
                    alt65=1;
                }


                switch (alt65) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:567:30: DOT typeIdentSimplified
            	    {
            	    DOT187=(Token)match(input,DOT,FOLLOW_DOT_in_qualifiedTypeIdentSimplified7374); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT187);

            	    pushFollow(FOLLOW_typeIdentSimplified_in_qualifiedTypeIdentSimplified7376);
            	    typeIdentSimplified188=typeIdentSimplified();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_typeIdentSimplified.add(typeIdentSimplified188.getTree());

            	    }
            	    break;

            	default :
            	    break loop65;
                }
            } while (true);



            // AST REWRITE
            // elements: typeIdentSimplified
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 568:9: -> ^( QUALIFIED_TYPE_IDENT ( typeIdentSimplified )+ )
            {
                // ../etc/JamlAttrHash.g:568:13: ^( QUALIFIED_TYPE_IDENT ( typeIdentSimplified )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(QUALIFIED_TYPE_IDENT, "QUALIFIED_TYPE_IDENT"), root_1);

                if ( !(stream_typeIdentSimplified.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_typeIdentSimplified.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeIdentSimplified.nextTree());

                }
                stream_typeIdentSimplified.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("qualifiedTypeIdentSimplified", 51);
            if ( state.backtracking>0 ) { memoize(input, 51, qualifiedTypeIdentSimplified_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedTypeIdentSimplified"

    public static class typeIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeIdent"
    // ../etc/JamlAttrHash.g:571:1: typeIdent : IDENT ( genericTypeArgumentList )? ;
    public final JamlAttrHashParser.typeIdent_return typeIdent() throws RecognitionException {
    traceIn("typeIdent", 52);
        JamlAttrHashParser.typeIdent_return retval = new JamlAttrHashParser.typeIdent_return();
        retval.start = input.LT(1);
        int typeIdent_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT189=null;
        JamlAttrHashParser.genericTypeArgumentList_return genericTypeArgumentList190 = null;


        CommonTree IDENT189_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }
            // ../etc/JamlAttrHash.g:572:5: ( IDENT ( genericTypeArgumentList )? )
            // ../etc/JamlAttrHash.g:572:9: IDENT ( genericTypeArgumentList )?
            {
            root_0 = (CommonTree)adaptor.nil();

            IDENT189=(Token)match(input,IDENT,FOLLOW_IDENT_in_typeIdent7416); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT189_tree = (CommonTree)adaptor.create(IDENT189);
            root_0 = (CommonTree)adaptor.becomeRoot(IDENT189_tree, root_0);
            }
            // ../etc/JamlAttrHash.g:572:16: ( genericTypeArgumentList )?
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==LESS_THAN) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: genericTypeArgumentList
                    {
                    pushFollow(FOLLOW_genericTypeArgumentList_in_typeIdent7419);
                    genericTypeArgumentList190=genericTypeArgumentList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, genericTypeArgumentList190.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("typeIdent", 52);
            if ( state.backtracking>0 ) { memoize(input, 52, typeIdent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeIdent"

    public static class typeIdentSimplified_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeIdentSimplified"
    // ../etc/JamlAttrHash.g:575:1: typeIdentSimplified : IDENT ( genericTypeArgumentListSimplified )? ;
    public final JamlAttrHashParser.typeIdentSimplified_return typeIdentSimplified() throws RecognitionException {
    traceIn("typeIdentSimplified", 53);
        JamlAttrHashParser.typeIdentSimplified_return retval = new JamlAttrHashParser.typeIdentSimplified_return();
        retval.start = input.LT(1);
        int typeIdentSimplified_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT191=null;
        JamlAttrHashParser.genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified192 = null;


        CommonTree IDENT191_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }
            // ../etc/JamlAttrHash.g:576:5: ( IDENT ( genericTypeArgumentListSimplified )? )
            // ../etc/JamlAttrHash.g:576:9: IDENT ( genericTypeArgumentListSimplified )?
            {
            root_0 = (CommonTree)adaptor.nil();

            IDENT191=(Token)match(input,IDENT,FOLLOW_IDENT_in_typeIdentSimplified7439); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT191_tree = (CommonTree)adaptor.create(IDENT191);
            root_0 = (CommonTree)adaptor.becomeRoot(IDENT191_tree, root_0);
            }
            // ../etc/JamlAttrHash.g:576:16: ( genericTypeArgumentListSimplified )?
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==LESS_THAN) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: genericTypeArgumentListSimplified
                    {
                    pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_typeIdentSimplified7442);
                    genericTypeArgumentListSimplified192=genericTypeArgumentListSimplified();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, genericTypeArgumentListSimplified192.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("typeIdentSimplified", 53);
            if ( state.backtracking>0 ) { memoize(input, 53, typeIdentSimplified_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeIdentSimplified"

    public static class primitiveType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primitiveType"
    // ../etc/JamlAttrHash.g:579:1: primitiveType : ( BOOLEAN | CHAR | BYTE | SHORT | INT | LONG | FLOAT | DOUBLE );
    public final JamlAttrHashParser.primitiveType_return primitiveType() throws RecognitionException {
    traceIn("primitiveType", 54);
        JamlAttrHashParser.primitiveType_return retval = new JamlAttrHashParser.primitiveType_return();
        retval.start = input.LT(1);
        int primitiveType_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set193=null;

        CommonTree set193_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }
            // ../etc/JamlAttrHash.g:580:5: ( BOOLEAN | CHAR | BYTE | SHORT | INT | LONG | FLOAT | DOUBLE )
            // ../etc/JamlAttrHash.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set193=(Token)input.LT(1);
            if ( input.LA(1)==BOOLEAN||input.LA(1)==BYTE||input.LA(1)==CHAR||input.LA(1)==DOUBLE||input.LA(1)==FLOAT||(input.LA(1)>=INT && input.LA(1)<=LONG)||input.LA(1)==SHORT ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set193));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("primitiveType", 54);
            if ( state.backtracking>0 ) { memoize(input, 54, primitiveType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "primitiveType"

    public static class genericTypeArgumentList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericTypeArgumentList"
    // ../etc/JamlAttrHash.g:590:1: genericTypeArgumentList : LESS_THAN genericTypeArgument ( COMMA genericTypeArgument )* genericTypeListClosing -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgument )+ ) ;
    public final JamlAttrHashParser.genericTypeArgumentList_return genericTypeArgumentList() throws RecognitionException {
    traceIn("genericTypeArgumentList", 55);
        JamlAttrHashParser.genericTypeArgumentList_return retval = new JamlAttrHashParser.genericTypeArgumentList_return();
        retval.start = input.LT(1);
        int genericTypeArgumentList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LESS_THAN194=null;
        Token COMMA196=null;
        JamlAttrHashParser.genericTypeArgument_return genericTypeArgument195 = null;

        JamlAttrHashParser.genericTypeArgument_return genericTypeArgument197 = null;

        JamlAttrHashParser.genericTypeListClosing_return genericTypeListClosing198 = null;


        CommonTree LESS_THAN194_tree=null;
        CommonTree COMMA196_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LESS_THAN=new RewriteRuleTokenStream(adaptor,"token LESS_THAN");
        RewriteRuleSubtreeStream stream_genericTypeArgument=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgument");
        RewriteRuleSubtreeStream stream_genericTypeListClosing=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeListClosing");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }
            // ../etc/JamlAttrHash.g:591:5: ( LESS_THAN genericTypeArgument ( COMMA genericTypeArgument )* genericTypeListClosing -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgument )+ ) )
            // ../etc/JamlAttrHash.g:591:9: LESS_THAN genericTypeArgument ( COMMA genericTypeArgument )* genericTypeListClosing
            {
            LESS_THAN194=(Token)match(input,LESS_THAN,FOLLOW_LESS_THAN_in_genericTypeArgumentList7551); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LESS_THAN.add(LESS_THAN194);

            pushFollow(FOLLOW_genericTypeArgument_in_genericTypeArgumentList7553);
            genericTypeArgument195=genericTypeArgument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_genericTypeArgument.add(genericTypeArgument195.getTree());
            // ../etc/JamlAttrHash.g:591:39: ( COMMA genericTypeArgument )*
            loop68:
            do {
                int alt68=2;
                int LA68_0 = input.LA(1);

                if ( (LA68_0==COMMA) ) {
                    int LA68_2 = input.LA(2);

                    if ( (synpred100_JamlAttrHash()) ) {
                        alt68=1;
                    }


                }


                switch (alt68) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:591:40: COMMA genericTypeArgument
            	    {
            	    COMMA196=(Token)match(input,COMMA,FOLLOW_COMMA_in_genericTypeArgumentList7556); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA196);

            	    pushFollow(FOLLOW_genericTypeArgument_in_genericTypeArgumentList7558);
            	    genericTypeArgument197=genericTypeArgument();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_genericTypeArgument.add(genericTypeArgument197.getTree());

            	    }
            	    break;

            	default :
            	    break loop68;
                }
            } while (true);

            pushFollow(FOLLOW_genericTypeListClosing_in_genericTypeArgumentList7562);
            genericTypeListClosing198=genericTypeListClosing();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_genericTypeListClosing.add(genericTypeListClosing198.getTree());


            // AST REWRITE
            // elements: genericTypeArgument
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 592:9: -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgument )+ )
            {
                // ../etc/JamlAttrHash.g:592:13: ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgument )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GENERIC_TYPE_ARG_LIST, LESS_THAN194, "GENERIC_TYPE_ARG_LIST"), root_1);

                if ( !(stream_genericTypeArgument.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_genericTypeArgument.hasNext() ) {
                    adaptor.addChild(root_1, stream_genericTypeArgument.nextTree());

                }
                stream_genericTypeArgument.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("genericTypeArgumentList", 55);
            if ( state.backtracking>0 ) { memoize(input, 55, genericTypeArgumentList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "genericTypeArgumentList"

    public static class genericTypeArgument_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericTypeArgument"
    // ../etc/JamlAttrHash.g:595:1: genericTypeArgument : ( type | QUESTION ( genericWildcardBoundType )? -> ^( QUESTION ( genericWildcardBoundType )? ) );
    public final JamlAttrHashParser.genericTypeArgument_return genericTypeArgument() throws RecognitionException {
    traceIn("genericTypeArgument", 56);
        JamlAttrHashParser.genericTypeArgument_return retval = new JamlAttrHashParser.genericTypeArgument_return();
        retval.start = input.LT(1);
        int genericTypeArgument_StartIndex = input.index();
        CommonTree root_0 = null;

        Token QUESTION200=null;
        JamlAttrHashParser.type_return type199 = null;

        JamlAttrHashParser.genericWildcardBoundType_return genericWildcardBoundType201 = null;


        CommonTree QUESTION200_tree=null;
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleSubtreeStream stream_genericWildcardBoundType=new RewriteRuleSubtreeStream(adaptor,"rule genericWildcardBoundType");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }
            // ../etc/JamlAttrHash.g:596:5: ( type | QUESTION ( genericWildcardBoundType )? -> ^( QUESTION ( genericWildcardBoundType )? ) )
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==BOOLEAN||LA70_0==BYTE||LA70_0==CHAR||LA70_0==DOUBLE||LA70_0==FLOAT||(LA70_0>=INT && LA70_0<=LONG)||LA70_0==SHORT||LA70_0==IDENT) ) {
                alt70=1;
            }
            else if ( (LA70_0==QUESTION) ) {
                alt70=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 70, 0, input);

                throw nvae;
            }
            switch (alt70) {
                case 1 :
                    // ../etc/JamlAttrHash.g:596:9: type
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_type_in_genericTypeArgument7600);
                    type199=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type199.getTree());

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:597:9: QUESTION ( genericWildcardBoundType )?
                    {
                    QUESTION200=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_genericTypeArgument7610); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(QUESTION200);

                    // ../etc/JamlAttrHash.g:597:18: ( genericWildcardBoundType )?
                    int alt69=2;
                    int LA69_0 = input.LA(1);

                    if ( (LA69_0==EXTENDS) ) {
                        int LA69_1 = input.LA(2);

                        if ( (LA69_1==BOOLEAN||LA69_1==BYTE||LA69_1==CHAR||LA69_1==DOUBLE||LA69_1==FLOAT||(LA69_1>=INT && LA69_1<=LONG)||LA69_1==SHORT) ) {
                            int LA69_4 = input.LA(3);

                            if ( (synpred102_JamlAttrHash()) ) {
                                alt69=1;
                            }
                        }
                        else if ( (LA69_1==IDENT) ) {
                            int LA69_5 = input.LA(3);

                            if ( (synpred102_JamlAttrHash()) ) {
                                alt69=1;
                            }
                        }
                    }
                    else if ( (LA69_0==SUPER) ) {
                        int LA69_3 = input.LA(2);

                        if ( (LA69_3==BOOLEAN||LA69_3==BYTE||LA69_3==CHAR||LA69_3==DOUBLE||LA69_3==FLOAT||(LA69_3>=INT && LA69_3<=LONG)||LA69_3==SHORT||LA69_3==IDENT) ) {
                            alt69=1;
                        }
                    }
                    switch (alt69) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:0:0: genericWildcardBoundType
                            {
                            pushFollow(FOLLOW_genericWildcardBoundType_in_genericTypeArgument7612);
                            genericWildcardBoundType201=genericWildcardBoundType();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_genericWildcardBoundType.add(genericWildcardBoundType201.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: QUESTION, genericWildcardBoundType
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 598:9: -> ^( QUESTION ( genericWildcardBoundType )? )
                    {
                        // ../etc/JamlAttrHash.g:598:13: ^( QUESTION ( genericWildcardBoundType )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_QUESTION.nextNode(), root_1);

                        // ../etc/JamlAttrHash.g:598:24: ( genericWildcardBoundType )?
                        if ( stream_genericWildcardBoundType.hasNext() ) {
                            adaptor.addChild(root_1, stream_genericWildcardBoundType.nextTree());

                        }
                        stream_genericWildcardBoundType.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("genericTypeArgument", 56);
            if ( state.backtracking>0 ) { memoize(input, 56, genericTypeArgument_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "genericTypeArgument"

    public static class genericWildcardBoundType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericWildcardBoundType"
    // ../etc/JamlAttrHash.g:601:1: genericWildcardBoundType : ( EXTENDS | SUPER ) type ;
    public final JamlAttrHashParser.genericWildcardBoundType_return genericWildcardBoundType() throws RecognitionException {
    traceIn("genericWildcardBoundType", 57);
        JamlAttrHashParser.genericWildcardBoundType_return retval = new JamlAttrHashParser.genericWildcardBoundType_return();
        retval.start = input.LT(1);
        int genericWildcardBoundType_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set202=null;
        JamlAttrHashParser.type_return type203 = null;


        CommonTree set202_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }
            // ../etc/JamlAttrHash.g:602:5: ( ( EXTENDS | SUPER ) type )
            // ../etc/JamlAttrHash.g:602:9: ( EXTENDS | SUPER ) type
            {
            root_0 = (CommonTree)adaptor.nil();

            set202=(Token)input.LT(1);
            set202=(Token)input.LT(1);
            if ( input.LA(1)==EXTENDS||input.LA(1)==SUPER ) {
                input.consume();
                if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(set202), root_0);
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            pushFollow(FOLLOW_type_in_genericWildcardBoundType7663);
            type203=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type203.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("genericWildcardBoundType", 57);
            if ( state.backtracking>0 ) { memoize(input, 57, genericWildcardBoundType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "genericWildcardBoundType"

    public static class genericTypeArgumentListSimplified_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericTypeArgumentListSimplified"
    // ../etc/JamlAttrHash.g:605:1: genericTypeArgumentListSimplified : LESS_THAN genericTypeArgumentSimplified ( COMMA genericTypeArgumentSimplified )* genericTypeListClosing -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgumentSimplified )+ ) ;
    public final JamlAttrHashParser.genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified() throws RecognitionException {
    traceIn("genericTypeArgumentListSimplified", 58);
        JamlAttrHashParser.genericTypeArgumentListSimplified_return retval = new JamlAttrHashParser.genericTypeArgumentListSimplified_return();
        retval.start = input.LT(1);
        int genericTypeArgumentListSimplified_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LESS_THAN204=null;
        Token COMMA206=null;
        JamlAttrHashParser.genericTypeArgumentSimplified_return genericTypeArgumentSimplified205 = null;

        JamlAttrHashParser.genericTypeArgumentSimplified_return genericTypeArgumentSimplified207 = null;

        JamlAttrHashParser.genericTypeListClosing_return genericTypeListClosing208 = null;


        CommonTree LESS_THAN204_tree=null;
        CommonTree COMMA206_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LESS_THAN=new RewriteRuleTokenStream(adaptor,"token LESS_THAN");
        RewriteRuleSubtreeStream stream_genericTypeArgumentSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentSimplified");
        RewriteRuleSubtreeStream stream_genericTypeListClosing=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeListClosing");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }
            // ../etc/JamlAttrHash.g:606:5: ( LESS_THAN genericTypeArgumentSimplified ( COMMA genericTypeArgumentSimplified )* genericTypeListClosing -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgumentSimplified )+ ) )
            // ../etc/JamlAttrHash.g:606:9: LESS_THAN genericTypeArgumentSimplified ( COMMA genericTypeArgumentSimplified )* genericTypeListClosing
            {
            LESS_THAN204=(Token)match(input,LESS_THAN,FOLLOW_LESS_THAN_in_genericTypeArgumentListSimplified7682); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LESS_THAN.add(LESS_THAN204);

            pushFollow(FOLLOW_genericTypeArgumentSimplified_in_genericTypeArgumentListSimplified7684);
            genericTypeArgumentSimplified205=genericTypeArgumentSimplified();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_genericTypeArgumentSimplified.add(genericTypeArgumentSimplified205.getTree());
            // ../etc/JamlAttrHash.g:606:49: ( COMMA genericTypeArgumentSimplified )*
            loop71:
            do {
                int alt71=2;
                int LA71_0 = input.LA(1);

                if ( (LA71_0==COMMA) ) {
                    alt71=1;
                }


                switch (alt71) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:606:50: COMMA genericTypeArgumentSimplified
            	    {
            	    COMMA206=(Token)match(input,COMMA,FOLLOW_COMMA_in_genericTypeArgumentListSimplified7687); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA206);

            	    pushFollow(FOLLOW_genericTypeArgumentSimplified_in_genericTypeArgumentListSimplified7689);
            	    genericTypeArgumentSimplified207=genericTypeArgumentSimplified();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_genericTypeArgumentSimplified.add(genericTypeArgumentSimplified207.getTree());

            	    }
            	    break;

            	default :
            	    break loop71;
                }
            } while (true);

            pushFollow(FOLLOW_genericTypeListClosing_in_genericTypeArgumentListSimplified7693);
            genericTypeListClosing208=genericTypeListClosing();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_genericTypeListClosing.add(genericTypeListClosing208.getTree());


            // AST REWRITE
            // elements: genericTypeArgumentSimplified
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 607:9: -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgumentSimplified )+ )
            {
                // ../etc/JamlAttrHash.g:607:13: ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgumentSimplified )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GENERIC_TYPE_ARG_LIST, LESS_THAN204, "GENERIC_TYPE_ARG_LIST"), root_1);

                if ( !(stream_genericTypeArgumentSimplified.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_genericTypeArgumentSimplified.hasNext() ) {
                    adaptor.addChild(root_1, stream_genericTypeArgumentSimplified.nextTree());

                }
                stream_genericTypeArgumentSimplified.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("genericTypeArgumentListSimplified", 58);
            if ( state.backtracking>0 ) { memoize(input, 58, genericTypeArgumentListSimplified_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "genericTypeArgumentListSimplified"

    public static class genericTypeArgumentSimplified_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericTypeArgumentSimplified"
    // ../etc/JamlAttrHash.g:610:1: genericTypeArgumentSimplified : ( type | QUESTION );
    public final JamlAttrHashParser.genericTypeArgumentSimplified_return genericTypeArgumentSimplified() throws RecognitionException {
    traceIn("genericTypeArgumentSimplified", 59);
        JamlAttrHashParser.genericTypeArgumentSimplified_return retval = new JamlAttrHashParser.genericTypeArgumentSimplified_return();
        retval.start = input.LT(1);
        int genericTypeArgumentSimplified_StartIndex = input.index();
        CommonTree root_0 = null;

        Token QUESTION210=null;
        JamlAttrHashParser.type_return type209 = null;


        CommonTree QUESTION210_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }
            // ../etc/JamlAttrHash.g:611:5: ( type | QUESTION )
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==BOOLEAN||LA72_0==BYTE||LA72_0==CHAR||LA72_0==DOUBLE||LA72_0==FLOAT||(LA72_0>=INT && LA72_0<=LONG)||LA72_0==SHORT||LA72_0==IDENT) ) {
                alt72=1;
            }
            else if ( (LA72_0==QUESTION) ) {
                alt72=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 72, 0, input);

                throw nvae;
            }
            switch (alt72) {
                case 1 :
                    // ../etc/JamlAttrHash.g:611:9: type
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_type_in_genericTypeArgumentSimplified7735);
                    type209=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type209.getTree());

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:612:9: QUESTION
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    QUESTION210=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_genericTypeArgumentSimplified7745); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUESTION210_tree = (CommonTree)adaptor.create(QUESTION210);
                    adaptor.addChild(root_0, QUESTION210_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("genericTypeArgumentSimplified", 59);
            if ( state.backtracking>0 ) { memoize(input, 59, genericTypeArgumentSimplified_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "genericTypeArgumentSimplified"

    public static class qualifiedIdentList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedIdentList"
    // ../etc/JamlAttrHash.g:615:1: qualifiedIdentList : qualifiedIdentifier ( COMMA qualifiedIdentifier )* ;
    public final JamlAttrHashParser.qualifiedIdentList_return qualifiedIdentList() throws RecognitionException {
    traceIn("qualifiedIdentList", 60);
        JamlAttrHashParser.qualifiedIdentList_return retval = new JamlAttrHashParser.qualifiedIdentList_return();
        retval.start = input.LT(1);
        int qualifiedIdentList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA212=null;
        JamlAttrHashParser.qualifiedIdentifier_return qualifiedIdentifier211 = null;

        JamlAttrHashParser.qualifiedIdentifier_return qualifiedIdentifier213 = null;


        CommonTree COMMA212_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }
            // ../etc/JamlAttrHash.g:616:5: ( qualifiedIdentifier ( COMMA qualifiedIdentifier )* )
            // ../etc/JamlAttrHash.g:616:9: qualifiedIdentifier ( COMMA qualifiedIdentifier )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_qualifiedIdentifier_in_qualifiedIdentList7768);
            qualifiedIdentifier211=qualifiedIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedIdentifier211.getTree());
            // ../etc/JamlAttrHash.g:616:29: ( COMMA qualifiedIdentifier )*
            loop73:
            do {
                int alt73=2;
                int LA73_0 = input.LA(1);

                if ( (LA73_0==COMMA) ) {
                    alt73=1;
                }


                switch (alt73) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:616:30: COMMA qualifiedIdentifier
            	    {
            	    COMMA212=(Token)match(input,COMMA,FOLLOW_COMMA_in_qualifiedIdentList7771); if (state.failed) return retval;
            	    pushFollow(FOLLOW_qualifiedIdentifier_in_qualifiedIdentList7774);
            	    qualifiedIdentifier213=qualifiedIdentifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedIdentifier213.getTree());

            	    }
            	    break;

            	default :
            	    break loop73;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("qualifiedIdentList", 60);
            if ( state.backtracking>0 ) { memoize(input, 60, qualifiedIdentList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedIdentList"

    public static class formalParameterList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formalParameterList"
    // ../etc/JamlAttrHash.g:619:1: formalParameterList : LPAREN ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? ) | formalParameterVarArgDecl -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl ) | -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ) ) RPAREN ;
    public final JamlAttrHashParser.formalParameterList_return formalParameterList() throws RecognitionException {
    traceIn("formalParameterList", 61);
        JamlAttrHashParser.formalParameterList_return retval = new JamlAttrHashParser.formalParameterList_return();
        retval.start = input.LT(1);
        int formalParameterList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LPAREN214=null;
        Token COMMA216=null;
        Token COMMA218=null;
        Token RPAREN221=null;
        JamlAttrHashParser.formalParameterStandardDecl_return formalParameterStandardDecl215 = null;

        JamlAttrHashParser.formalParameterStandardDecl_return formalParameterStandardDecl217 = null;

        JamlAttrHashParser.formalParameterVarArgDecl_return formalParameterVarArgDecl219 = null;

        JamlAttrHashParser.formalParameterVarArgDecl_return formalParameterVarArgDecl220 = null;


        CommonTree LPAREN214_tree=null;
        CommonTree COMMA216_tree=null;
        CommonTree COMMA218_tree=null;
        CommonTree RPAREN221_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_formalParameterVarArgDecl=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterVarArgDecl");
        RewriteRuleSubtreeStream stream_formalParameterStandardDecl=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterStandardDecl");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }
            // ../etc/JamlAttrHash.g:620:5: ( LPAREN ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? ) | formalParameterVarArgDecl -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl ) | -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ) ) RPAREN )
            // ../etc/JamlAttrHash.g:620:9: LPAREN ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? ) | formalParameterVarArgDecl -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl ) | -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ) ) RPAREN
            {
            LPAREN214=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_formalParameterList7799); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN214);

            // ../etc/JamlAttrHash.g:621:9: ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? ) | formalParameterVarArgDecl -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl ) | -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ) )
            int alt76=3;
            switch ( input.LA(1) ) {
            case FINAL:
                {
                int LA76_1 = input.LA(2);

                if ( (synpred109_JamlAttrHash()) ) {
                    alt76=1;
                }
                else if ( (synpred110_JamlAttrHash()) ) {
                    alt76=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 76, 1, input);

                    throw nvae;
                }
                }
                break;
            case AT:
                {
                int LA76_2 = input.LA(2);

                if ( (synpred109_JamlAttrHash()) ) {
                    alt76=1;
                }
                else if ( (synpred110_JamlAttrHash()) ) {
                    alt76=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 76, 2, input);

                    throw nvae;
                }
                }
                break;
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
                {
                int LA76_3 = input.LA(2);

                if ( (synpred109_JamlAttrHash()) ) {
                    alt76=1;
                }
                else if ( (synpred110_JamlAttrHash()) ) {
                    alt76=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 76, 3, input);

                    throw nvae;
                }
                }
                break;
            case IDENT:
                {
                int LA76_4 = input.LA(2);

                if ( (synpred109_JamlAttrHash()) ) {
                    alt76=1;
                }
                else if ( (synpred110_JamlAttrHash()) ) {
                    alt76=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 76, 4, input);

                    throw nvae;
                }
                }
                break;
            case RPAREN:
                {
                alt76=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 76, 0, input);

                throw nvae;
            }

            switch (alt76) {
                case 1 :
                    // ../etc/JamlAttrHash.g:622:13: formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )?
                    {
                    pushFollow(FOLLOW_formalParameterStandardDecl_in_formalParameterList7827);
                    formalParameterStandardDecl215=formalParameterStandardDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_formalParameterStandardDecl.add(formalParameterStandardDecl215.getTree());
                    // ../etc/JamlAttrHash.g:622:41: ( COMMA formalParameterStandardDecl )*
                    loop74:
                    do {
                        int alt74=2;
                        int LA74_0 = input.LA(1);

                        if ( (LA74_0==COMMA) ) {
                            int LA74_1 = input.LA(2);

                            if ( (synpred107_JamlAttrHash()) ) {
                                alt74=1;
                            }


                        }


                        switch (alt74) {
                    	case 1 :
                    	    // ../etc/JamlAttrHash.g:622:42: COMMA formalParameterStandardDecl
                    	    {
                    	    COMMA216=(Token)match(input,COMMA,FOLLOW_COMMA_in_formalParameterList7830); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA216);

                    	    pushFollow(FOLLOW_formalParameterStandardDecl_in_formalParameterList7832);
                    	    formalParameterStandardDecl217=formalParameterStandardDecl();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_formalParameterStandardDecl.add(formalParameterStandardDecl217.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop74;
                        }
                    } while (true);

                    // ../etc/JamlAttrHash.g:622:78: ( COMMA formalParameterVarArgDecl )?
                    int alt75=2;
                    int LA75_0 = input.LA(1);

                    if ( (LA75_0==COMMA) ) {
                        alt75=1;
                    }
                    switch (alt75) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:622:79: COMMA formalParameterVarArgDecl
                            {
                            COMMA218=(Token)match(input,COMMA,FOLLOW_COMMA_in_formalParameterList7837); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA218);

                            pushFollow(FOLLOW_formalParameterVarArgDecl_in_formalParameterList7839);
                            formalParameterVarArgDecl219=formalParameterVarArgDecl();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_formalParameterVarArgDecl.add(formalParameterVarArgDecl219.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: formalParameterStandardDecl, formalParameterVarArgDecl
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 623:13: -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? )
                    {
                        // ../etc/JamlAttrHash.g:623:17: ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FORMAL_PARAM_LIST, LPAREN214, "FORMAL_PARAM_LIST"), root_1);

                        if ( !(stream_formalParameterStandardDecl.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_formalParameterStandardDecl.hasNext() ) {
                            adaptor.addChild(root_1, stream_formalParameterStandardDecl.nextTree());

                        }
                        stream_formalParameterStandardDecl.reset();
                        // ../etc/JamlAttrHash.g:623:96: ( formalParameterVarArgDecl )?
                        if ( stream_formalParameterVarArgDecl.hasNext() ) {
                            adaptor.addChild(root_1, stream_formalParameterVarArgDecl.nextTree());

                        }
                        stream_formalParameterVarArgDecl.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:625:13: formalParameterVarArgDecl
                    {
                    pushFollow(FOLLOW_formalParameterVarArgDecl_in_formalParameterList7896);
                    formalParameterVarArgDecl220=formalParameterVarArgDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_formalParameterVarArgDecl.add(formalParameterVarArgDecl220.getTree());


                    // AST REWRITE
                    // elements: formalParameterVarArgDecl
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 626:13: -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl )
                    {
                        // ../etc/JamlAttrHash.g:626:17: ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FORMAL_PARAM_LIST, LPAREN214, "FORMAL_PARAM_LIST"), root_1);

                        adaptor.addChild(root_1, stream_formalParameterVarArgDecl.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // ../etc/JamlAttrHash.g:628:13: 
                    {

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 628:13: -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] )
                    {
                        // ../etc/JamlAttrHash.g:628:17: ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FORMAL_PARAM_LIST, LPAREN214, "FORMAL_PARAM_LIST"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }

            RPAREN221=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_formalParameterList7973); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN221);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("formalParameterList", 61);
            if ( state.backtracking>0 ) { memoize(input, 61, formalParameterList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formalParameterList"

    public static class formalParameterStandardDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formalParameterStandardDecl"
    // ../etc/JamlAttrHash.g:633:1: formalParameterStandardDecl : localModifierList type variableDeclaratorId -> ^( FORMAL_PARAM_STD_DECL localModifierList type variableDeclaratorId ) ;
    public final JamlAttrHashParser.formalParameterStandardDecl_return formalParameterStandardDecl() throws RecognitionException {
    traceIn("formalParameterStandardDecl", 62);
        JamlAttrHashParser.formalParameterStandardDecl_return retval = new JamlAttrHashParser.formalParameterStandardDecl_return();
        retval.start = input.LT(1);
        int formalParameterStandardDecl_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.localModifierList_return localModifierList222 = null;

        JamlAttrHashParser.type_return type223 = null;

        JamlAttrHashParser.variableDeclaratorId_return variableDeclaratorId224 = null;


        RewriteRuleSubtreeStream stream_variableDeclaratorId=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorId");
        RewriteRuleSubtreeStream stream_localModifierList=new RewriteRuleSubtreeStream(adaptor,"rule localModifierList");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }
            // ../etc/JamlAttrHash.g:634:5: ( localModifierList type variableDeclaratorId -> ^( FORMAL_PARAM_STD_DECL localModifierList type variableDeclaratorId ) )
            // ../etc/JamlAttrHash.g:634:9: localModifierList type variableDeclaratorId
            {
            pushFollow(FOLLOW_localModifierList_in_formalParameterStandardDecl7996);
            localModifierList222=localModifierList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_localModifierList.add(localModifierList222.getTree());
            pushFollow(FOLLOW_type_in_formalParameterStandardDecl7998);
            type223=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type223.getTree());
            pushFollow(FOLLOW_variableDeclaratorId_in_formalParameterStandardDecl8000);
            variableDeclaratorId224=variableDeclaratorId();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableDeclaratorId.add(variableDeclaratorId224.getTree());


            // AST REWRITE
            // elements: variableDeclaratorId, type, localModifierList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 635:9: -> ^( FORMAL_PARAM_STD_DECL localModifierList type variableDeclaratorId )
            {
                // ../etc/JamlAttrHash.g:635:13: ^( FORMAL_PARAM_STD_DECL localModifierList type variableDeclaratorId )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FORMAL_PARAM_STD_DECL, "FORMAL_PARAM_STD_DECL"), root_1);

                adaptor.addChild(root_1, stream_localModifierList.nextTree());
                adaptor.addChild(root_1, stream_type.nextTree());
                adaptor.addChild(root_1, stream_variableDeclaratorId.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("formalParameterStandardDecl", 62);
            if ( state.backtracking>0 ) { memoize(input, 62, formalParameterStandardDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formalParameterStandardDecl"

    public static class formalParameterVarArgDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formalParameterVarArgDecl"
    // ../etc/JamlAttrHash.g:638:1: formalParameterVarArgDecl : localModifierList type ELLIPSIS variableDeclaratorId -> ^( FORMAL_PARAM_VARARG_DECL localModifierList type variableDeclaratorId ) ;
    public final JamlAttrHashParser.formalParameterVarArgDecl_return formalParameterVarArgDecl() throws RecognitionException {
    traceIn("formalParameterVarArgDecl", 63);
        JamlAttrHashParser.formalParameterVarArgDecl_return retval = new JamlAttrHashParser.formalParameterVarArgDecl_return();
        retval.start = input.LT(1);
        int formalParameterVarArgDecl_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ELLIPSIS227=null;
        JamlAttrHashParser.localModifierList_return localModifierList225 = null;

        JamlAttrHashParser.type_return type226 = null;

        JamlAttrHashParser.variableDeclaratorId_return variableDeclaratorId228 = null;


        CommonTree ELLIPSIS227_tree=null;
        RewriteRuleTokenStream stream_ELLIPSIS=new RewriteRuleTokenStream(adaptor,"token ELLIPSIS");
        RewriteRuleSubtreeStream stream_variableDeclaratorId=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorId");
        RewriteRuleSubtreeStream stream_localModifierList=new RewriteRuleSubtreeStream(adaptor,"rule localModifierList");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }
            // ../etc/JamlAttrHash.g:639:5: ( localModifierList type ELLIPSIS variableDeclaratorId -> ^( FORMAL_PARAM_VARARG_DECL localModifierList type variableDeclaratorId ) )
            // ../etc/JamlAttrHash.g:639:9: localModifierList type ELLIPSIS variableDeclaratorId
            {
            pushFollow(FOLLOW_localModifierList_in_formalParameterVarArgDecl8044);
            localModifierList225=localModifierList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_localModifierList.add(localModifierList225.getTree());
            pushFollow(FOLLOW_type_in_formalParameterVarArgDecl8046);
            type226=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type226.getTree());
            ELLIPSIS227=(Token)match(input,ELLIPSIS,FOLLOW_ELLIPSIS_in_formalParameterVarArgDecl8048); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ELLIPSIS.add(ELLIPSIS227);

            pushFollow(FOLLOW_variableDeclaratorId_in_formalParameterVarArgDecl8050);
            variableDeclaratorId228=variableDeclaratorId();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableDeclaratorId.add(variableDeclaratorId228.getTree());


            // AST REWRITE
            // elements: variableDeclaratorId, localModifierList, type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 640:9: -> ^( FORMAL_PARAM_VARARG_DECL localModifierList type variableDeclaratorId )
            {
                // ../etc/JamlAttrHash.g:640:13: ^( FORMAL_PARAM_VARARG_DECL localModifierList type variableDeclaratorId )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FORMAL_PARAM_VARARG_DECL, "FORMAL_PARAM_VARARG_DECL"), root_1);

                adaptor.addChild(root_1, stream_localModifierList.nextTree());
                adaptor.addChild(root_1, stream_type.nextTree());
                adaptor.addChild(root_1, stream_variableDeclaratorId.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("formalParameterVarArgDecl", 63);
            if ( state.backtracking>0 ) { memoize(input, 63, formalParameterVarArgDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formalParameterVarArgDecl"

    public static class qualifiedIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedIdentifier"
    // ../etc/JamlAttrHash.g:643:1: qualifiedIdentifier : ( IDENT -> IDENT ) ( DOT ident= IDENT -> ^( DOT $qualifiedIdentifier $ident) )* ;
    public final JamlAttrHashParser.qualifiedIdentifier_return qualifiedIdentifier() throws RecognitionException {
    traceIn("qualifiedIdentifier", 64);
        JamlAttrHashParser.qualifiedIdentifier_return retval = new JamlAttrHashParser.qualifiedIdentifier_return();
        retval.start = input.LT(1);
        int qualifiedIdentifier_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ident=null;
        Token IDENT229=null;
        Token DOT230=null;

        CommonTree ident_tree=null;
        CommonTree IDENT229_tree=null;
        CommonTree DOT230_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }
            // ../etc/JamlAttrHash.g:644:5: ( ( IDENT -> IDENT ) ( DOT ident= IDENT -> ^( DOT $qualifiedIdentifier $ident) )* )
            // ../etc/JamlAttrHash.g:644:9: ( IDENT -> IDENT ) ( DOT ident= IDENT -> ^( DOT $qualifiedIdentifier $ident) )*
            {
            // ../etc/JamlAttrHash.g:644:9: ( IDENT -> IDENT )
            // ../etc/JamlAttrHash.g:644:13: IDENT
            {
            IDENT229=(Token)match(input,IDENT,FOLLOW_IDENT_in_qualifiedIdentifier8098); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT229);



            // AST REWRITE
            // elements: IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 644:33: -> IDENT
            {
                adaptor.addChild(root_0, stream_IDENT.nextNode());

            }

            retval.tree = root_0;}
            }

            // ../etc/JamlAttrHash.g:646:9: ( DOT ident= IDENT -> ^( DOT $qualifiedIdentifier $ident) )*
            loop77:
            do {
                int alt77=2;
                int LA77_0 = input.LA(1);

                if ( (LA77_0==DOT) ) {
                    int LA77_2 = input.LA(2);

                    if ( (LA77_2==IDENT) ) {
                        int LA77_3 = input.LA(3);

                        if ( (synpred111_JamlAttrHash()) ) {
                            alt77=1;
                        }


                    }


                }


                switch (alt77) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:646:13: DOT ident= IDENT
            	    {
            	    DOT230=(Token)match(input,DOT,FOLLOW_DOT_in_qualifiedIdentifier8141); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT230);

            	    ident=(Token)match(input,IDENT,FOLLOW_IDENT_in_qualifiedIdentifier8145); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_IDENT.add(ident);



            	    // AST REWRITE
            	    // elements: qualifiedIdentifier, ident, DOT
            	    // token labels: ident
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {
            	    retval.tree = root_0;
            	    RewriteRuleTokenStream stream_ident=new RewriteRuleTokenStream(adaptor,"token ident",ident);
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (CommonTree)adaptor.nil();
            	    // 646:33: -> ^( DOT $qualifiedIdentifier $ident)
            	    {
            	        // ../etc/JamlAttrHash.g:646:37: ^( DOT $qualifiedIdentifier $ident)
            	        {
            	        CommonTree root_1 = (CommonTree)adaptor.nil();
            	        root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

            	        adaptor.addChild(root_1, stream_retval.nextTree());
            	        adaptor.addChild(root_1, stream_ident.nextNode());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }

            	    retval.tree = root_0;}
            	    }
            	    break;

            	default :
            	    break loop77;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("qualifiedIdentifier", 64);
            if ( state.backtracking>0 ) { memoize(input, 64, qualifiedIdentifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedIdentifier"

    public static class annotationList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationList"
    // ../etc/JamlAttrHash.g:652:1: annotationList : ( annotation )* -> ^( ANNOTATION_LIST ( annotation )* ) ;
    public final JamlAttrHashParser.annotationList_return annotationList() throws RecognitionException {
    traceIn("annotationList", 65);
        JamlAttrHashParser.annotationList_return retval = new JamlAttrHashParser.annotationList_return();
        retval.start = input.LT(1);
        int annotationList_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.annotation_return annotation231 = null;


        RewriteRuleSubtreeStream stream_annotation=new RewriteRuleSubtreeStream(adaptor,"rule annotation");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }
            // ../etc/JamlAttrHash.g:653:5: ( ( annotation )* -> ^( ANNOTATION_LIST ( annotation )* ) )
            // ../etc/JamlAttrHash.g:653:9: ( annotation )*
            {
            // ../etc/JamlAttrHash.g:653:9: ( annotation )*
            loop78:
            do {
                int alt78=2;
                int LA78_0 = input.LA(1);

                if ( (LA78_0==AT) ) {
                    int LA78_2 = input.LA(2);

                    if ( (LA78_2==IDENT) ) {
                        int LA78_3 = input.LA(3);

                        if ( (synpred112_JamlAttrHash()) ) {
                            alt78=1;
                        }


                    }


                }


                switch (alt78) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:0:0: annotation
            	    {
            	    pushFollow(FOLLOW_annotation_in_annotationList8198);
            	    annotation231=annotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_annotation.add(annotation231.getTree());

            	    }
            	    break;

            	default :
            	    break loop78;
                }
            } while (true);



            // AST REWRITE
            // elements: annotation
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 654:9: -> ^( ANNOTATION_LIST ( annotation )* )
            {
                // ../etc/JamlAttrHash.g:654:13: ^( ANNOTATION_LIST ( annotation )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_LIST, "ANNOTATION_LIST"), root_1);

                // ../etc/JamlAttrHash.g:654:31: ( annotation )*
                while ( stream_annotation.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotation.nextTree());

                }
                stream_annotation.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("annotationList", 65);
            if ( state.backtracking>0 ) { memoize(input, 65, annotationList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationList"

    public static class annotation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotation"
    // ../etc/JamlAttrHash.g:657:1: annotation : AT qualifiedIdentifier ( annotationInit )? ;
    public final JamlAttrHashParser.annotation_return annotation() throws RecognitionException {
    traceIn("annotation", 66);
        JamlAttrHashParser.annotation_return retval = new JamlAttrHashParser.annotation_return();
        retval.start = input.LT(1);
        int annotation_StartIndex = input.index();
        CommonTree root_0 = null;

        Token AT232=null;
        JamlAttrHashParser.qualifiedIdentifier_return qualifiedIdentifier233 = null;

        JamlAttrHashParser.annotationInit_return annotationInit234 = null;


        CommonTree AT232_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }
            // ../etc/JamlAttrHash.g:658:5: ( AT qualifiedIdentifier ( annotationInit )? )
            // ../etc/JamlAttrHash.g:658:9: AT qualifiedIdentifier ( annotationInit )?
            {
            root_0 = (CommonTree)adaptor.nil();

            AT232=(Token)match(input,AT,FOLLOW_AT_in_annotation8236); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            AT232_tree = (CommonTree)adaptor.create(AT232);
            root_0 = (CommonTree)adaptor.becomeRoot(AT232_tree, root_0);
            }
            pushFollow(FOLLOW_qualifiedIdentifier_in_annotation8239);
            qualifiedIdentifier233=qualifiedIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedIdentifier233.getTree());
            // ../etc/JamlAttrHash.g:658:33: ( annotationInit )?
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==LPAREN) ) {
                alt79=1;
            }
            switch (alt79) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: annotationInit
                    {
                    pushFollow(FOLLOW_annotationInit_in_annotation8241);
                    annotationInit234=annotationInit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationInit234.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("annotation", 66);
            if ( state.backtracking>0 ) { memoize(input, 66, annotation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotation"

    public static class annotationInit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationInit"
    // ../etc/JamlAttrHash.g:661:1: annotationInit : LPAREN annotationInitializers RPAREN -> ^( ANNOTATION_INIT_BLOCK[$LPAREN, \"ANNOTATION_INIT_BLOCK\"] annotationInitializers ) ;
    public final JamlAttrHashParser.annotationInit_return annotationInit() throws RecognitionException {
    traceIn("annotationInit", 67);
        JamlAttrHashParser.annotationInit_return retval = new JamlAttrHashParser.annotationInit_return();
        retval.start = input.LT(1);
        int annotationInit_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LPAREN235=null;
        Token RPAREN237=null;
        JamlAttrHashParser.annotationInitializers_return annotationInitializers236 = null;


        CommonTree LPAREN235_tree=null;
        CommonTree RPAREN237_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_annotationInitializers=new RewriteRuleSubtreeStream(adaptor,"rule annotationInitializers");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }
            // ../etc/JamlAttrHash.g:662:5: ( LPAREN annotationInitializers RPAREN -> ^( ANNOTATION_INIT_BLOCK[$LPAREN, \"ANNOTATION_INIT_BLOCK\"] annotationInitializers ) )
            // ../etc/JamlAttrHash.g:662:9: LPAREN annotationInitializers RPAREN
            {
            LPAREN235=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationInit8265); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN235);

            pushFollow(FOLLOW_annotationInitializers_in_annotationInit8267);
            annotationInitializers236=annotationInitializers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_annotationInitializers.add(annotationInitializers236.getTree());
            RPAREN237=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationInit8269); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN237);



            // AST REWRITE
            // elements: annotationInitializers
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 663:9: -> ^( ANNOTATION_INIT_BLOCK[$LPAREN, \"ANNOTATION_INIT_BLOCK\"] annotationInitializers )
            {
                // ../etc/JamlAttrHash.g:663:13: ^( ANNOTATION_INIT_BLOCK[$LPAREN, \"ANNOTATION_INIT_BLOCK\"] annotationInitializers )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_INIT_BLOCK, LPAREN235, "ANNOTATION_INIT_BLOCK"), root_1);

                adaptor.addChild(root_1, stream_annotationInitializers.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("annotationInit", 67);
            if ( state.backtracking>0 ) { memoize(input, 67, annotationInit_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationInit"

    public static class annotationInitializers_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationInitializers"
    // ../etc/JamlAttrHash.g:666:1: annotationInitializers : ( annotationInitializer ( COMMA annotationInitializer )* -> ^( ANNOTATION_INIT_KEY_LIST ( annotationInitializer )+ ) | annotationElementValue -> ^( ANNOTATION_INIT_DEFAULT_KEY annotationElementValue ) );
    public final JamlAttrHashParser.annotationInitializers_return annotationInitializers() throws RecognitionException {
    traceIn("annotationInitializers", 68);
        JamlAttrHashParser.annotationInitializers_return retval = new JamlAttrHashParser.annotationInitializers_return();
        retval.start = input.LT(1);
        int annotationInitializers_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA239=null;
        JamlAttrHashParser.annotationInitializer_return annotationInitializer238 = null;

        JamlAttrHashParser.annotationInitializer_return annotationInitializer240 = null;

        JamlAttrHashParser.annotationElementValue_return annotationElementValue241 = null;


        CommonTree COMMA239_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_annotationElementValue=new RewriteRuleSubtreeStream(adaptor,"rule annotationElementValue");
        RewriteRuleSubtreeStream stream_annotationInitializer=new RewriteRuleSubtreeStream(adaptor,"rule annotationInitializer");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }
            // ../etc/JamlAttrHash.g:667:5: ( annotationInitializer ( COMMA annotationInitializer )* -> ^( ANNOTATION_INIT_KEY_LIST ( annotationInitializer )+ ) | annotationElementValue -> ^( ANNOTATION_INIT_DEFAULT_KEY annotationElementValue ) )
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==IDENT) ) {
                int LA81_1 = input.LA(2);

                if ( (LA81_1==ASSIGN) ) {
                    alt81=1;
                }
                else if ( (LA81_1==AND||LA81_1==BIT_SHIFT_RIGHT||(LA81_1>=DEC && LA81_1<=DIV)||LA81_1==DOT||(LA81_1>=EQUAL && LA81_1<=LBRACK)||(LA81_1>=LESS_OR_EQUAL && LA81_1<=LOGICAL_AND)||(LA81_1>=LOGICAL_OR && LA81_1<=MINUS)||LA81_1==MOD||(LA81_1>=NOT_EQUAL && LA81_1<=OR)||LA81_1==PLUS||LA81_1==QUESTION||LA81_1==RPAREN||LA81_1==SHIFT_LEFT||LA81_1==SHIFT_RIGHT||LA81_1==STAR||LA81_1==XOR||LA81_1==INSTANCEOF) ) {
                    alt81=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 81, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA81_0==AT||LA81_0==DEC||LA81_0==INC||LA81_0==LCURLY||LA81_0==LESS_THAN||LA81_0==LOGICAL_NOT||(LA81_0>=LPAREN && LA81_0<=MINUS)||LA81_0==NOT||LA81_0==PLUS||LA81_0==BOOLEAN||LA81_0==BYTE||LA81_0==CHAR||LA81_0==DOUBLE||LA81_0==FALSE||LA81_0==FLOAT||(LA81_0>=INT && LA81_0<=LONG)||(LA81_0>=NEW && LA81_0<=NULL)||LA81_0==SHORT||LA81_0==SUPER||LA81_0==THIS||LA81_0==TRUE||LA81_0==VOID||(LA81_0>=HEX_LITERAL && LA81_0<=STRING_LITERAL)) ) {
                alt81=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 81, 0, input);

                throw nvae;
            }
            switch (alt81) {
                case 1 :
                    // ../etc/JamlAttrHash.g:667:9: annotationInitializer ( COMMA annotationInitializer )*
                    {
                    pushFollow(FOLLOW_annotationInitializer_in_annotationInitializers8306);
                    annotationInitializer238=annotationInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_annotationInitializer.add(annotationInitializer238.getTree());
                    // ../etc/JamlAttrHash.g:667:31: ( COMMA annotationInitializer )*
                    loop80:
                    do {
                        int alt80=2;
                        int LA80_0 = input.LA(1);

                        if ( (LA80_0==COMMA) ) {
                            alt80=1;
                        }


                        switch (alt80) {
                    	case 1 :
                    	    // ../etc/JamlAttrHash.g:667:32: COMMA annotationInitializer
                    	    {
                    	    COMMA239=(Token)match(input,COMMA,FOLLOW_COMMA_in_annotationInitializers8309); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA239);

                    	    pushFollow(FOLLOW_annotationInitializer_in_annotationInitializers8311);
                    	    annotationInitializer240=annotationInitializer();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_annotationInitializer.add(annotationInitializer240.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop80;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: annotationInitializer
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 668:9: -> ^( ANNOTATION_INIT_KEY_LIST ( annotationInitializer )+ )
                    {
                        // ../etc/JamlAttrHash.g:668:13: ^( ANNOTATION_INIT_KEY_LIST ( annotationInitializer )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_INIT_KEY_LIST, "ANNOTATION_INIT_KEY_LIST"), root_1);

                        if ( !(stream_annotationInitializer.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_annotationInitializer.hasNext() ) {
                            adaptor.addChild(root_1, stream_annotationInitializer.nextTree());

                        }
                        stream_annotationInitializer.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:669:9: annotationElementValue
                    {
                    pushFollow(FOLLOW_annotationElementValue_in_annotationInitializers8341);
                    annotationElementValue241=annotationElementValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_annotationElementValue.add(annotationElementValue241.getTree());


                    // AST REWRITE
                    // elements: annotationElementValue
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 670:9: -> ^( ANNOTATION_INIT_DEFAULT_KEY annotationElementValue )
                    {
                        // ../etc/JamlAttrHash.g:670:13: ^( ANNOTATION_INIT_DEFAULT_KEY annotationElementValue )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_INIT_DEFAULT_KEY, "ANNOTATION_INIT_DEFAULT_KEY"), root_1);

                        adaptor.addChild(root_1, stream_annotationElementValue.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("annotationInitializers", 68);
            if ( state.backtracking>0 ) { memoize(input, 68, annotationInitializers_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationInitializers"

    public static class annotationInitializer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationInitializer"
    // ../etc/JamlAttrHash.g:673:1: annotationInitializer : IDENT ASSIGN annotationElementValue ;
    public final JamlAttrHashParser.annotationInitializer_return annotationInitializer() throws RecognitionException {
    traceIn("annotationInitializer", 69);
        JamlAttrHashParser.annotationInitializer_return retval = new JamlAttrHashParser.annotationInitializer_return();
        retval.start = input.LT(1);
        int annotationInitializer_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT242=null;
        Token ASSIGN243=null;
        JamlAttrHashParser.annotationElementValue_return annotationElementValue244 = null;


        CommonTree IDENT242_tree=null;
        CommonTree ASSIGN243_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }
            // ../etc/JamlAttrHash.g:674:5: ( IDENT ASSIGN annotationElementValue )
            // ../etc/JamlAttrHash.g:674:9: IDENT ASSIGN annotationElementValue
            {
            root_0 = (CommonTree)adaptor.nil();

            IDENT242=(Token)match(input,IDENT,FOLLOW_IDENT_in_annotationInitializer8382); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT242_tree = (CommonTree)adaptor.create(IDENT242);
            root_0 = (CommonTree)adaptor.becomeRoot(IDENT242_tree, root_0);
            }
            ASSIGN243=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_annotationInitializer8385); if (state.failed) return retval;
            pushFollow(FOLLOW_annotationElementValue_in_annotationInitializer8388);
            annotationElementValue244=annotationElementValue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationElementValue244.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("annotationInitializer", 69);
            if ( state.backtracking>0 ) { memoize(input, 69, annotationInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationInitializer"

    public static class annotationElementValue_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationElementValue"
    // ../etc/JamlAttrHash.g:677:1: annotationElementValue : ( annotationElementValueExpression | annotation | annotationElementValueArrayInitializer );
    public final JamlAttrHashParser.annotationElementValue_return annotationElementValue() throws RecognitionException {
    traceIn("annotationElementValue", 70);
        JamlAttrHashParser.annotationElementValue_return retval = new JamlAttrHashParser.annotationElementValue_return();
        retval.start = input.LT(1);
        int annotationElementValue_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.annotationElementValueExpression_return annotationElementValueExpression245 = null;

        JamlAttrHashParser.annotation_return annotation246 = null;

        JamlAttrHashParser.annotationElementValueArrayInitializer_return annotationElementValueArrayInitializer247 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }
            // ../etc/JamlAttrHash.g:678:5: ( annotationElementValueExpression | annotation | annotationElementValueArrayInitializer )
            int alt82=3;
            switch ( input.LA(1) ) {
            case DEC:
            case INC:
            case LESS_THAN:
            case LOGICAL_NOT:
            case LPAREN:
            case MINUS:
            case NOT:
            case PLUS:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case SHORT:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
            case IDENT:
            case HEX_LITERAL:
            case OCTAL_LITERAL:
            case DECIMAL_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
                {
                alt82=1;
                }
                break;
            case AT:
                {
                alt82=2;
                }
                break;
            case LCURLY:
                {
                alt82=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 82, 0, input);

                throw nvae;
            }

            switch (alt82) {
                case 1 :
                    // ../etc/JamlAttrHash.g:678:9: annotationElementValueExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_annotationElementValueExpression_in_annotationElementValue8411);
                    annotationElementValueExpression245=annotationElementValueExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationElementValueExpression245.getTree());

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:679:9: annotation
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_annotation_in_annotationElementValue8421);
                    annotation246=annotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotation246.getTree());

                    }
                    break;
                case 3 :
                    // ../etc/JamlAttrHash.g:680:9: annotationElementValueArrayInitializer
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_annotationElementValueArrayInitializer_in_annotationElementValue8431);
                    annotationElementValueArrayInitializer247=annotationElementValueArrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationElementValueArrayInitializer247.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("annotationElementValue", 70);
            if ( state.backtracking>0 ) { memoize(input, 70, annotationElementValue_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationElementValue"

    public static class annotationElementValueExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationElementValueExpression"
    // ../etc/JamlAttrHash.g:683:1: annotationElementValueExpression : conditionalExpression -> ^( EXPR conditionalExpression ) ;
    public final JamlAttrHashParser.annotationElementValueExpression_return annotationElementValueExpression() throws RecognitionException {
    traceIn("annotationElementValueExpression", 71);
        JamlAttrHashParser.annotationElementValueExpression_return retval = new JamlAttrHashParser.annotationElementValueExpression_return();
        retval.start = input.LT(1);
        int annotationElementValueExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.conditionalExpression_return conditionalExpression248 = null;


        RewriteRuleSubtreeStream stream_conditionalExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }
            // ../etc/JamlAttrHash.g:684:5: ( conditionalExpression -> ^( EXPR conditionalExpression ) )
            // ../etc/JamlAttrHash.g:684:9: conditionalExpression
            {
            pushFollow(FOLLOW_conditionalExpression_in_annotationElementValueExpression8454);
            conditionalExpression248=conditionalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_conditionalExpression.add(conditionalExpression248.getTree());


            // AST REWRITE
            // elements: conditionalExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 685:9: -> ^( EXPR conditionalExpression )
            {
                // ../etc/JamlAttrHash.g:685:13: ^( EXPR conditionalExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXPR, "EXPR"), root_1);

                adaptor.addChild(root_1, stream_conditionalExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("annotationElementValueExpression", 71);
            if ( state.backtracking>0 ) { memoize(input, 71, annotationElementValueExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationElementValueExpression"

    public static class annotationElementValueArrayInitializer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationElementValueArrayInitializer"
    // ../etc/JamlAttrHash.g:688:1: annotationElementValueArrayInitializer : LCURLY ( annotationElementValue ( COMMA annotationElementValue )* )? ( COMMA )? RCURLY -> ^( ANNOTATION_INIT_ARRAY_ELEMENT[$LCURLY, \"ANNOTATION_ELEM_VALUE_ARRAY_INIT\"] ( annotationElementValue )* ) ;
    public final JamlAttrHashParser.annotationElementValueArrayInitializer_return annotationElementValueArrayInitializer() throws RecognitionException {
    traceIn("annotationElementValueArrayInitializer", 72);
        JamlAttrHashParser.annotationElementValueArrayInitializer_return retval = new JamlAttrHashParser.annotationElementValueArrayInitializer_return();
        retval.start = input.LT(1);
        int annotationElementValueArrayInitializer_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LCURLY249=null;
        Token COMMA251=null;
        Token COMMA253=null;
        Token RCURLY254=null;
        JamlAttrHashParser.annotationElementValue_return annotationElementValue250 = null;

        JamlAttrHashParser.annotationElementValue_return annotationElementValue252 = null;


        CommonTree LCURLY249_tree=null;
        CommonTree COMMA251_tree=null;
        CommonTree COMMA253_tree=null;
        CommonTree RCURLY254_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_annotationElementValue=new RewriteRuleSubtreeStream(adaptor,"rule annotationElementValue");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }
            // ../etc/JamlAttrHash.g:689:5: ( LCURLY ( annotationElementValue ( COMMA annotationElementValue )* )? ( COMMA )? RCURLY -> ^( ANNOTATION_INIT_ARRAY_ELEMENT[$LCURLY, \"ANNOTATION_ELEM_VALUE_ARRAY_INIT\"] ( annotationElementValue )* ) )
            // ../etc/JamlAttrHash.g:689:9: LCURLY ( annotationElementValue ( COMMA annotationElementValue )* )? ( COMMA )? RCURLY
            {
            LCURLY249=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_annotationElementValueArrayInitializer8494); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY249);

            // ../etc/JamlAttrHash.g:689:16: ( annotationElementValue ( COMMA annotationElementValue )* )?
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==AT||LA84_0==DEC||LA84_0==INC||LA84_0==LCURLY||LA84_0==LESS_THAN||LA84_0==LOGICAL_NOT||(LA84_0>=LPAREN && LA84_0<=MINUS)||LA84_0==NOT||LA84_0==PLUS||LA84_0==BOOLEAN||LA84_0==BYTE||LA84_0==CHAR||LA84_0==DOUBLE||LA84_0==FALSE||LA84_0==FLOAT||(LA84_0>=INT && LA84_0<=LONG)||(LA84_0>=NEW && LA84_0<=NULL)||LA84_0==SHORT||LA84_0==SUPER||LA84_0==THIS||LA84_0==TRUE||LA84_0==VOID||(LA84_0>=IDENT && LA84_0<=STRING_LITERAL)) ) {
                alt84=1;
            }
            switch (alt84) {
                case 1 :
                    // ../etc/JamlAttrHash.g:689:17: annotationElementValue ( COMMA annotationElementValue )*
                    {
                    pushFollow(FOLLOW_annotationElementValue_in_annotationElementValueArrayInitializer8497);
                    annotationElementValue250=annotationElementValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_annotationElementValue.add(annotationElementValue250.getTree());
                    // ../etc/JamlAttrHash.g:689:40: ( COMMA annotationElementValue )*
                    loop83:
                    do {
                        int alt83=2;
                        int LA83_0 = input.LA(1);

                        if ( (LA83_0==COMMA) ) {
                            int LA83_1 = input.LA(2);

                            if ( (LA83_1==AT||LA83_1==DEC||LA83_1==INC||LA83_1==LCURLY||LA83_1==LESS_THAN||LA83_1==LOGICAL_NOT||(LA83_1>=LPAREN && LA83_1<=MINUS)||LA83_1==NOT||LA83_1==PLUS||LA83_1==BOOLEAN||LA83_1==BYTE||LA83_1==CHAR||LA83_1==DOUBLE||LA83_1==FALSE||LA83_1==FLOAT||(LA83_1>=INT && LA83_1<=LONG)||(LA83_1>=NEW && LA83_1<=NULL)||LA83_1==SHORT||LA83_1==SUPER||LA83_1==THIS||LA83_1==TRUE||LA83_1==VOID||(LA83_1>=IDENT && LA83_1<=STRING_LITERAL)) ) {
                                alt83=1;
                            }


                        }


                        switch (alt83) {
                    	case 1 :
                    	    // ../etc/JamlAttrHash.g:689:41: COMMA annotationElementValue
                    	    {
                    	    COMMA251=(Token)match(input,COMMA,FOLLOW_COMMA_in_annotationElementValueArrayInitializer8500); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA251);

                    	    pushFollow(FOLLOW_annotationElementValue_in_annotationElementValueArrayInitializer8502);
                    	    annotationElementValue252=annotationElementValue();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_annotationElementValue.add(annotationElementValue252.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop83;
                        }
                    } while (true);


                    }
                    break;

            }

            // ../etc/JamlAttrHash.g:689:74: ( COMMA )?
            int alt85=2;
            int LA85_0 = input.LA(1);

            if ( (LA85_0==COMMA) ) {
                alt85=1;
            }
            switch (alt85) {
                case 1 :
                    // ../etc/JamlAttrHash.g:689:75: COMMA
                    {
                    COMMA253=(Token)match(input,COMMA,FOLLOW_COMMA_in_annotationElementValueArrayInitializer8509); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA253);


                    }
                    break;

            }

            RCURLY254=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_annotationElementValueArrayInitializer8513); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY254);



            // AST REWRITE
            // elements: annotationElementValue
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 690:9: -> ^( ANNOTATION_INIT_ARRAY_ELEMENT[$LCURLY, \"ANNOTATION_ELEM_VALUE_ARRAY_INIT\"] ( annotationElementValue )* )
            {
                // ../etc/JamlAttrHash.g:690:13: ^( ANNOTATION_INIT_ARRAY_ELEMENT[$LCURLY, \"ANNOTATION_ELEM_VALUE_ARRAY_INIT\"] ( annotationElementValue )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_INIT_ARRAY_ELEMENT, LCURLY249, "ANNOTATION_ELEM_VALUE_ARRAY_INIT"), root_1);

                // ../etc/JamlAttrHash.g:690:90: ( annotationElementValue )*
                while ( stream_annotationElementValue.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotationElementValue.nextTree());

                }
                stream_annotationElementValue.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("annotationElementValueArrayInitializer", 72);
            if ( state.backtracking>0 ) { memoize(input, 72, annotationElementValueArrayInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationElementValueArrayInitializer"

    public static class annotationTypeDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeDeclaration"
    // ../etc/JamlAttrHash.g:693:1: annotationTypeDeclaration[CommonTree modifiers] : AT INTERFACE IDENT annotationBody -> ^( AT IDENT annotationBody ) ;
    public final JamlAttrHashParser.annotationTypeDeclaration_return annotationTypeDeclaration(CommonTree modifiers) throws RecognitionException {
    traceIn("annotationTypeDeclaration", 73);
        JamlAttrHashParser.annotationTypeDeclaration_return retval = new JamlAttrHashParser.annotationTypeDeclaration_return();
        retval.start = input.LT(1);
        int annotationTypeDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token AT255=null;
        Token INTERFACE256=null;
        Token IDENT257=null;
        JamlAttrHashParser.annotationBody_return annotationBody258 = null;


        CommonTree AT255_tree=null;
        CommonTree INTERFACE256_tree=null;
        CommonTree IDENT257_tree=null;
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_INTERFACE=new RewriteRuleTokenStream(adaptor,"token INTERFACE");
        RewriteRuleSubtreeStream stream_annotationBody=new RewriteRuleSubtreeStream(adaptor,"rule annotationBody");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }
            // ../etc/JamlAttrHash.g:694:5: ( AT INTERFACE IDENT annotationBody -> ^( AT IDENT annotationBody ) )
            // ../etc/JamlAttrHash.g:694:9: AT INTERFACE IDENT annotationBody
            {
            AT255=(Token)match(input,AT,FOLLOW_AT_in_annotationTypeDeclaration8556); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AT.add(AT255);

            INTERFACE256=(Token)match(input,INTERFACE,FOLLOW_INTERFACE_in_annotationTypeDeclaration8558); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTERFACE.add(INTERFACE256);

            IDENT257=(Token)match(input,IDENT,FOLLOW_IDENT_in_annotationTypeDeclaration8560); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT257);

            pushFollow(FOLLOW_annotationBody_in_annotationTypeDeclaration8562);
            annotationBody258=annotationBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_annotationBody.add(annotationBody258.getTree());


            // AST REWRITE
            // elements: AT, IDENT, annotationBody
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 695:9: -> ^( AT IDENT annotationBody )
            {
                // ../etc/JamlAttrHash.g:695:12: ^( AT IDENT annotationBody )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AT.nextNode(), root_1);

                adaptor.addChild(root_1, modifiers);
                adaptor.addChild(root_1, stream_IDENT.nextNode());
                adaptor.addChild(root_1, stream_annotationBody.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("annotationTypeDeclaration", 73);
            if ( state.backtracking>0 ) { memoize(input, 73, annotationTypeDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationTypeDeclaration"

    public static class annotationBody_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationBody"
    // ../etc/JamlAttrHash.g:698:1: annotationBody : LCURLY ( annotationScopeDeclarations )* RCURLY -> ^( ANNOTATION_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( annotationScopeDeclarations )* ) ;
    public final JamlAttrHashParser.annotationBody_return annotationBody() throws RecognitionException {
    traceIn("annotationBody", 74);
        JamlAttrHashParser.annotationBody_return retval = new JamlAttrHashParser.annotationBody_return();
        retval.start = input.LT(1);
        int annotationBody_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LCURLY259=null;
        Token RCURLY261=null;
        JamlAttrHashParser.annotationScopeDeclarations_return annotationScopeDeclarations260 = null;


        CommonTree LCURLY259_tree=null;
        CommonTree RCURLY261_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_annotationScopeDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule annotationScopeDeclarations");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }
            // ../etc/JamlAttrHash.g:699:5: ( LCURLY ( annotationScopeDeclarations )* RCURLY -> ^( ANNOTATION_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( annotationScopeDeclarations )* ) )
            // ../etc/JamlAttrHash.g:699:9: LCURLY ( annotationScopeDeclarations )* RCURLY
            {
            LCURLY259=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_annotationBody8605); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY259);

            // ../etc/JamlAttrHash.g:699:16: ( annotationScopeDeclarations )*
            loop86:
            do {
                int alt86=2;
                int LA86_0 = input.LA(1);

                if ( (LA86_0==AT||LA86_0==LESS_THAN||LA86_0==ABSTRACT||LA86_0==BOOLEAN||LA86_0==BYTE||(LA86_0>=CHAR && LA86_0<=CLASS)||LA86_0==DOUBLE||LA86_0==ENUM||LA86_0==FINAL||LA86_0==FLOAT||LA86_0==INTERFACE||(LA86_0>=INT && LA86_0<=NATIVE)||(LA86_0>=PRIVATE && LA86_0<=PUBLIC)||(LA86_0>=SHORT && LA86_0<=STRICTFP)||LA86_0==SYNCHRONIZED||LA86_0==TRANSIENT||(LA86_0>=VOID && LA86_0<=VOLATILE)||LA86_0==IDENT) ) {
                    alt86=1;
                }


                switch (alt86) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:0:0: annotationScopeDeclarations
            	    {
            	    pushFollow(FOLLOW_annotationScopeDeclarations_in_annotationBody8607);
            	    annotationScopeDeclarations260=annotationScopeDeclarations();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_annotationScopeDeclarations.add(annotationScopeDeclarations260.getTree());

            	    }
            	    break;

            	default :
            	    break loop86;
                }
            } while (true);

            RCURLY261=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_annotationBody8610); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY261);



            // AST REWRITE
            // elements: annotationScopeDeclarations
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 700:9: -> ^( ANNOTATION_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( annotationScopeDeclarations )* )
            {
                // ../etc/JamlAttrHash.g:700:13: ^( ANNOTATION_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( annotationScopeDeclarations )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_TOP_LEVEL_SCOPE, LCURLY259, "CLASS_TOP_LEVEL_SCOPE"), root_1);

                // ../etc/JamlAttrHash.g:700:76: ( annotationScopeDeclarations )*
                while ( stream_annotationScopeDeclarations.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotationScopeDeclarations.nextTree());

                }
                stream_annotationScopeDeclarations.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("annotationBody", 74);
            if ( state.backtracking>0 ) { memoize(input, 74, annotationBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationBody"

    public static class annotationScopeDeclarations_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationScopeDeclarations"
    // ../etc/JamlAttrHash.g:703:1: annotationScopeDeclarations : ( modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration );
    public final JamlAttrHashParser.annotationScopeDeclarations_return annotationScopeDeclarations() throws RecognitionException {
    traceIn("annotationScopeDeclarations", 75);
        JamlAttrHashParser.annotationScopeDeclarations_return retval = new JamlAttrHashParser.annotationScopeDeclarations_return();
        retval.start = input.LT(1);
        int annotationScopeDeclarations_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT264=null;
        Token LPAREN265=null;
        Token RPAREN266=null;
        Token SEMI268=null;
        Token SEMI270=null;
        JamlAttrHashParser.modifierList_return modifierList262 = null;

        JamlAttrHashParser.type_return type263 = null;

        JamlAttrHashParser.annotationDefaultValue_return annotationDefaultValue267 = null;

        JamlAttrHashParser.classFieldDeclaratorList_return classFieldDeclaratorList269 = null;

        JamlAttrHashParser.typeDeclaration_return typeDeclaration271 = null;


        CommonTree IDENT264_tree=null;
        CommonTree LPAREN265_tree=null;
        CommonTree RPAREN266_tree=null;
        CommonTree SEMI268_tree=null;
        CommonTree SEMI270_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_modifierList=new RewriteRuleSubtreeStream(adaptor,"rule modifierList");
        RewriteRuleSubtreeStream stream_annotationDefaultValue=new RewriteRuleSubtreeStream(adaptor,"rule annotationDefaultValue");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_classFieldDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule classFieldDeclaratorList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }
            // ../etc/JamlAttrHash.g:704:5: ( modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration )
            int alt89=2;
            alt89 = dfa89.predict(input);
            switch (alt89) {
                case 1 :
                    // ../etc/JamlAttrHash.g:704:9: modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) )
                    {
                    pushFollow(FOLLOW_modifierList_in_annotationScopeDeclarations8652);
                    modifierList262=modifierList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_modifierList.add(modifierList262.getTree());
                    pushFollow(FOLLOW_type_in_annotationScopeDeclarations8654);
                    type263=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type263.getTree());
                    // ../etc/JamlAttrHash.g:705:9: ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) )
                    int alt88=2;
                    int LA88_0 = input.LA(1);

                    if ( (LA88_0==IDENT) ) {
                        int LA88_1 = input.LA(2);

                        if ( (LA88_1==LPAREN) ) {
                            alt88=1;
                        }
                        else if ( (LA88_1==ASSIGN||LA88_1==COMMA||LA88_1==LBRACK||LA88_1==SEMI) ) {
                            alt88=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 88, 1, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 88, 0, input);

                        throw nvae;
                    }
                    switch (alt88) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:705:13: IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI
                            {
                            IDENT264=(Token)match(input,IDENT,FOLLOW_IDENT_in_annotationScopeDeclarations8668); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(IDENT264);

                            LPAREN265=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationScopeDeclarations8670); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN265);

                            RPAREN266=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationScopeDeclarations8672); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN266);

                            // ../etc/JamlAttrHash.g:705:33: ( annotationDefaultValue )?
                            int alt87=2;
                            int LA87_0 = input.LA(1);

                            if ( (LA87_0==DEFAULT) ) {
                                alt87=1;
                            }
                            switch (alt87) {
                                case 1 :
                                    // ../etc/JamlAttrHash.g:0:0: annotationDefaultValue
                                    {
                                    pushFollow(FOLLOW_annotationDefaultValue_in_annotationScopeDeclarations8674);
                                    annotationDefaultValue267=annotationDefaultValue();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_annotationDefaultValue.add(annotationDefaultValue267.getTree());

                                    }
                                    break;

                            }

                            SEMI268=(Token)match(input,SEMI,FOLLOW_SEMI_in_annotationScopeDeclarations8677); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMI.add(SEMI268);



                            // AST REWRITE
                            // elements: type, annotationDefaultValue, modifierList, IDENT
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 706:13: -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? )
                            {
                                // ../etc/JamlAttrHash.g:706:17: ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_METHOD_DECL, "ANNOTATION_METHOD_DECL"), root_1);

                                adaptor.addChild(root_1, stream_modifierList.nextTree());
                                adaptor.addChild(root_1, stream_type.nextTree());
                                adaptor.addChild(root_1, stream_IDENT.nextNode());
                                // ../etc/JamlAttrHash.g:706:66: ( annotationDefaultValue )?
                                if ( stream_annotationDefaultValue.hasNext() ) {
                                    adaptor.addChild(root_1, stream_annotationDefaultValue.nextTree());

                                }
                                stream_annotationDefaultValue.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // ../etc/JamlAttrHash.g:707:13: classFieldDeclaratorList SEMI
                            {
                            pushFollow(FOLLOW_classFieldDeclaratorList_in_annotationScopeDeclarations8719);
                            classFieldDeclaratorList269=classFieldDeclaratorList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_classFieldDeclaratorList.add(classFieldDeclaratorList269.getTree());
                            SEMI270=(Token)match(input,SEMI,FOLLOW_SEMI_in_annotationScopeDeclarations8721); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMI.add(SEMI270);



                            // AST REWRITE
                            // elements: modifierList, type, classFieldDeclaratorList
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 708:13: -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList )
                            {
                                // ../etc/JamlAttrHash.g:708:17: ^( VAR_DECLARATION modifierList type classFieldDeclaratorList )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_DECLARATION, "VAR_DECLARATION"), root_1);

                                adaptor.addChild(root_1, stream_modifierList.nextTree());
                                adaptor.addChild(root_1, stream_type.nextTree());
                                adaptor.addChild(root_1, stream_classFieldDeclaratorList.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:710:9: typeDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_typeDeclaration_in_annotationScopeDeclarations8766);
                    typeDeclaration271=typeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDeclaration271.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("annotationScopeDeclarations", 75);
            if ( state.backtracking>0 ) { memoize(input, 75, annotationScopeDeclarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationScopeDeclarations"

    public static class annotationDefaultValue_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationDefaultValue"
    // ../etc/JamlAttrHash.g:713:1: annotationDefaultValue : DEFAULT annotationElementValue ;
    public final JamlAttrHashParser.annotationDefaultValue_return annotationDefaultValue() throws RecognitionException {
    traceIn("annotationDefaultValue", 76);
        JamlAttrHashParser.annotationDefaultValue_return retval = new JamlAttrHashParser.annotationDefaultValue_return();
        retval.start = input.LT(1);
        int annotationDefaultValue_StartIndex = input.index();
        CommonTree root_0 = null;

        Token DEFAULT272=null;
        JamlAttrHashParser.annotationElementValue_return annotationElementValue273 = null;


        CommonTree DEFAULT272_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }
            // ../etc/JamlAttrHash.g:714:5: ( DEFAULT annotationElementValue )
            // ../etc/JamlAttrHash.g:714:9: DEFAULT annotationElementValue
            {
            root_0 = (CommonTree)adaptor.nil();

            DEFAULT272=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_annotationDefaultValue8789); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DEFAULT272_tree = (CommonTree)adaptor.create(DEFAULT272);
            root_0 = (CommonTree)adaptor.becomeRoot(DEFAULT272_tree, root_0);
            }
            pushFollow(FOLLOW_annotationElementValue_in_annotationDefaultValue8792);
            annotationElementValue273=annotationElementValue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationElementValue273.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("annotationDefaultValue", 76);
            if ( state.backtracking>0 ) { memoize(input, 76, annotationDefaultValue_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationDefaultValue"

    public static class block_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "block"
    // ../etc/JamlAttrHash.g:719:1: block : LCURLY ( blockStatement )* RCURLY -> ^( BLOCK_SCOPE[$LCURLY, \"BLOCK_SCOPE\"] ( blockStatement )* ) ;
    public final JamlAttrHashParser.block_return block() throws RecognitionException {
    traceIn("block", 77);
        JamlAttrHashParser.block_return retval = new JamlAttrHashParser.block_return();
        retval.start = input.LT(1);
        int block_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LCURLY274=null;
        Token RCURLY276=null;
        JamlAttrHashParser.blockStatement_return blockStatement275 = null;


        CommonTree LCURLY274_tree=null;
        CommonTree RCURLY276_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_blockStatement=new RewriteRuleSubtreeStream(adaptor,"rule blockStatement");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }
            // ../etc/JamlAttrHash.g:720:5: ( LCURLY ( blockStatement )* RCURLY -> ^( BLOCK_SCOPE[$LCURLY, \"BLOCK_SCOPE\"] ( blockStatement )* ) )
            // ../etc/JamlAttrHash.g:720:9: LCURLY ( blockStatement )* RCURLY
            {
            LCURLY274=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_block8813); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY274);

            // ../etc/JamlAttrHash.g:720:16: ( blockStatement )*
            loop90:
            do {
                int alt90=2;
                int LA90_0 = input.LA(1);

                if ( (LA90_0==AT||LA90_0==DEC||LA90_0==INC||LA90_0==LCURLY||LA90_0==LESS_THAN||LA90_0==LOGICAL_NOT||(LA90_0>=LPAREN && LA90_0<=MINUS)||LA90_0==NOT||LA90_0==PLUS||LA90_0==SEMI||(LA90_0>=ABSTRACT && LA90_0<=BYTE)||(LA90_0>=CHAR && LA90_0<=CONTINUE)||(LA90_0>=DO && LA90_0<=DOUBLE)||LA90_0==ENUM||(LA90_0>=FALSE && LA90_0<=FINAL)||(LA90_0>=FLOAT && LA90_0<=IF)||LA90_0==INTERFACE||(LA90_0>=INT && LA90_0<=NULL)||(LA90_0>=PRIVATE && LA90_0<=THROW)||(LA90_0>=TRANSIENT && LA90_0<=WHILE)||(LA90_0>=IDENT && LA90_0<=STRING_LITERAL)) ) {
                    alt90=1;
                }


                switch (alt90) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:0:0: blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_block8815);
            	    blockStatement275=blockStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_blockStatement.add(blockStatement275.getTree());

            	    }
            	    break;

            	default :
            	    break loop90;
                }
            } while (true);

            RCURLY276=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_block8818); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY276);



            // AST REWRITE
            // elements: blockStatement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 721:9: -> ^( BLOCK_SCOPE[$LCURLY, \"BLOCK_SCOPE\"] ( blockStatement )* )
            {
                // ../etc/JamlAttrHash.g:721:13: ^( BLOCK_SCOPE[$LCURLY, \"BLOCK_SCOPE\"] ( blockStatement )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BLOCK_SCOPE, LCURLY274, "BLOCK_SCOPE"), root_1);

                // ../etc/JamlAttrHash.g:721:51: ( blockStatement )*
                while ( stream_blockStatement.hasNext() ) {
                    adaptor.addChild(root_1, stream_blockStatement.nextTree());

                }
                stream_blockStatement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("block", 77);
            if ( state.backtracking>0 ) { memoize(input, 77, block_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "block"

    public static class blockStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "blockStatement"
    // ../etc/JamlAttrHash.g:724:1: blockStatement : ( localVariableDeclaration SEMI | typeDeclaration | statement );
    public final JamlAttrHashParser.blockStatement_return blockStatement() throws RecognitionException {
    traceIn("blockStatement", 78);
        JamlAttrHashParser.blockStatement_return retval = new JamlAttrHashParser.blockStatement_return();
        retval.start = input.LT(1);
        int blockStatement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SEMI278=null;
        JamlAttrHashParser.localVariableDeclaration_return localVariableDeclaration277 = null;

        JamlAttrHashParser.typeDeclaration_return typeDeclaration279 = null;

        JamlAttrHashParser.statement_return statement280 = null;


        CommonTree SEMI278_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }
            // ../etc/JamlAttrHash.g:725:5: ( localVariableDeclaration SEMI | typeDeclaration | statement )
            int alt91=3;
            alt91 = dfa91.predict(input);
            switch (alt91) {
                case 1 :
                    // ../etc/JamlAttrHash.g:725:9: localVariableDeclaration SEMI
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_localVariableDeclaration_in_blockStatement8856);
                    localVariableDeclaration277=localVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, localVariableDeclaration277.getTree());
                    SEMI278=(Token)match(input,SEMI,FOLLOW_SEMI_in_blockStatement8858); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:726:9: typeDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_typeDeclaration_in_blockStatement8869);
                    typeDeclaration279=typeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDeclaration279.getTree());

                    }
                    break;
                case 3 :
                    // ../etc/JamlAttrHash.g:727:9: statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_statement_in_blockStatement8879);
                    statement280=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, statement280.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("blockStatement", 78);
            if ( state.backtracking>0 ) { memoize(input, 78, blockStatement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "blockStatement"

    public static class localVariableDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "localVariableDeclaration"
    // ../etc/JamlAttrHash.g:730:1: localVariableDeclaration : localModifierList type classFieldDeclaratorList -> ^( VAR_DECLARATION localModifierList type classFieldDeclaratorList ) ;
    public final JamlAttrHashParser.localVariableDeclaration_return localVariableDeclaration() throws RecognitionException {
    traceIn("localVariableDeclaration", 79);
        JamlAttrHashParser.localVariableDeclaration_return retval = new JamlAttrHashParser.localVariableDeclaration_return();
        retval.start = input.LT(1);
        int localVariableDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.localModifierList_return localModifierList281 = null;

        JamlAttrHashParser.type_return type282 = null;

        JamlAttrHashParser.classFieldDeclaratorList_return classFieldDeclaratorList283 = null;


        RewriteRuleSubtreeStream stream_localModifierList=new RewriteRuleSubtreeStream(adaptor,"rule localModifierList");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_classFieldDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule classFieldDeclaratorList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }
            // ../etc/JamlAttrHash.g:731:5: ( localModifierList type classFieldDeclaratorList -> ^( VAR_DECLARATION localModifierList type classFieldDeclaratorList ) )
            // ../etc/JamlAttrHash.g:731:9: localModifierList type classFieldDeclaratorList
            {
            pushFollow(FOLLOW_localModifierList_in_localVariableDeclaration8902);
            localModifierList281=localModifierList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_localModifierList.add(localModifierList281.getTree());
            pushFollow(FOLLOW_type_in_localVariableDeclaration8904);
            type282=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type282.getTree());
            pushFollow(FOLLOW_classFieldDeclaratorList_in_localVariableDeclaration8906);
            classFieldDeclaratorList283=classFieldDeclaratorList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classFieldDeclaratorList.add(classFieldDeclaratorList283.getTree());


            // AST REWRITE
            // elements: type, localModifierList, classFieldDeclaratorList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 732:9: -> ^( VAR_DECLARATION localModifierList type classFieldDeclaratorList )
            {
                // ../etc/JamlAttrHash.g:732:13: ^( VAR_DECLARATION localModifierList type classFieldDeclaratorList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_DECLARATION, "VAR_DECLARATION"), root_1);

                adaptor.addChild(root_1, stream_localModifierList.nextTree());
                adaptor.addChild(root_1, stream_type.nextTree());
                adaptor.addChild(root_1, stream_classFieldDeclaratorList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("localVariableDeclaration", 79);
            if ( state.backtracking>0 ) { memoize(input, 79, localVariableDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "localVariableDeclaration"

    public static class statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statement"
    // ../etc/JamlAttrHash.g:736:1: statement : ( block | ASSERT expr1= expression ( COLON expr2= expression SEMI -> ^( ASSERT $expr1 $expr2) | SEMI -> ^( ASSERT $expr1) ) | IF parenthesizedExpression ifStat= statement ( ELSE elseStat= statement -> ^( IF parenthesizedExpression $ifStat $elseStat) | -> ^( IF parenthesizedExpression $ifStat) ) | FOR LPAREN ( forInit SEMI forCondition SEMI forUpdater RPAREN statement -> ^( FOR forInit forCondition forUpdater statement ) | localModifierList type IDENT COLON expression RPAREN statement -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement ) ) | WHILE parenthesizedExpression statement -> ^( WHILE parenthesizedExpression statement ) | DO statement WHILE parenthesizedExpression SEMI -> ^( DO statement parenthesizedExpression ) | TRY block ( catches ( finallyClause )? | finallyClause ) -> ^( TRY block ( catches )? ( finallyClause )? ) | SWITCH parenthesizedExpression LCURLY switchBlockLabels RCURLY -> ^( SWITCH parenthesizedExpression switchBlockLabels ) | SYNCHRONIZED parenthesizedExpression block -> ^( SYNCHRONIZED parenthesizedExpression block ) | RETURN ( expression )? SEMI -> ^( RETURN ( expression )? ) | THROW expression SEMI -> ^( THROW expression ) | BREAK ( IDENT )? SEMI -> ^( BREAK ( IDENT )? ) | CONTINUE ( IDENT )? SEMI -> ^( CONTINUE ( IDENT )? ) | IDENT COLON statement -> ^( LABELED_STATEMENT IDENT statement ) | expression SEMI | SEMI );
    public final JamlAttrHashParser.statement_return statement() throws RecognitionException {
    traceIn("statement", 80);
        JamlAttrHashParser.statement_return retval = new JamlAttrHashParser.statement_return();
        retval.start = input.LT(1);
        int statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ASSERT285=null;
        Token COLON286=null;
        Token SEMI287=null;
        Token SEMI288=null;
        Token IF289=null;
        Token ELSE291=null;
        Token FOR292=null;
        Token LPAREN293=null;
        Token SEMI295=null;
        Token SEMI297=null;
        Token RPAREN299=null;
        Token IDENT303=null;
        Token COLON304=null;
        Token RPAREN306=null;
        Token WHILE308=null;
        Token DO311=null;
        Token WHILE313=null;
        Token SEMI315=null;
        Token TRY316=null;
        Token SWITCH321=null;
        Token LCURLY323=null;
        Token RCURLY325=null;
        Token SYNCHRONIZED326=null;
        Token RETURN329=null;
        Token SEMI331=null;
        Token THROW332=null;
        Token SEMI334=null;
        Token BREAK335=null;
        Token IDENT336=null;
        Token SEMI337=null;
        Token CONTINUE338=null;
        Token IDENT339=null;
        Token SEMI340=null;
        Token IDENT341=null;
        Token COLON342=null;
        Token SEMI345=null;
        Token SEMI346=null;
        JamlAttrHashParser.expression_return expr1 = null;

        JamlAttrHashParser.expression_return expr2 = null;

        JamlAttrHashParser.statement_return ifStat = null;

        JamlAttrHashParser.statement_return elseStat = null;

        JamlAttrHashParser.block_return block284 = null;

        JamlAttrHashParser.parenthesizedExpression_return parenthesizedExpression290 = null;

        JamlAttrHashParser.forInit_return forInit294 = null;

        JamlAttrHashParser.forCondition_return forCondition296 = null;

        JamlAttrHashParser.forUpdater_return forUpdater298 = null;

        JamlAttrHashParser.statement_return statement300 = null;

        JamlAttrHashParser.localModifierList_return localModifierList301 = null;

        JamlAttrHashParser.type_return type302 = null;

        JamlAttrHashParser.expression_return expression305 = null;

        JamlAttrHashParser.statement_return statement307 = null;

        JamlAttrHashParser.parenthesizedExpression_return parenthesizedExpression309 = null;

        JamlAttrHashParser.statement_return statement310 = null;

        JamlAttrHashParser.statement_return statement312 = null;

        JamlAttrHashParser.parenthesizedExpression_return parenthesizedExpression314 = null;

        JamlAttrHashParser.block_return block317 = null;

        JamlAttrHashParser.catches_return catches318 = null;

        JamlAttrHashParser.finallyClause_return finallyClause319 = null;

        JamlAttrHashParser.finallyClause_return finallyClause320 = null;

        JamlAttrHashParser.parenthesizedExpression_return parenthesizedExpression322 = null;

        JamlAttrHashParser.switchBlockLabels_return switchBlockLabels324 = null;

        JamlAttrHashParser.parenthesizedExpression_return parenthesizedExpression327 = null;

        JamlAttrHashParser.block_return block328 = null;

        JamlAttrHashParser.expression_return expression330 = null;

        JamlAttrHashParser.expression_return expression333 = null;

        JamlAttrHashParser.statement_return statement343 = null;

        JamlAttrHashParser.expression_return expression344 = null;


        CommonTree ASSERT285_tree=null;
        CommonTree COLON286_tree=null;
        CommonTree SEMI287_tree=null;
        CommonTree SEMI288_tree=null;
        CommonTree IF289_tree=null;
        CommonTree ELSE291_tree=null;
        CommonTree FOR292_tree=null;
        CommonTree LPAREN293_tree=null;
        CommonTree SEMI295_tree=null;
        CommonTree SEMI297_tree=null;
        CommonTree RPAREN299_tree=null;
        CommonTree IDENT303_tree=null;
        CommonTree COLON304_tree=null;
        CommonTree RPAREN306_tree=null;
        CommonTree WHILE308_tree=null;
        CommonTree DO311_tree=null;
        CommonTree WHILE313_tree=null;
        CommonTree SEMI315_tree=null;
        CommonTree TRY316_tree=null;
        CommonTree SWITCH321_tree=null;
        CommonTree LCURLY323_tree=null;
        CommonTree RCURLY325_tree=null;
        CommonTree SYNCHRONIZED326_tree=null;
        CommonTree RETURN329_tree=null;
        CommonTree SEMI331_tree=null;
        CommonTree THROW332_tree=null;
        CommonTree SEMI334_tree=null;
        CommonTree BREAK335_tree=null;
        CommonTree IDENT336_tree=null;
        CommonTree SEMI337_tree=null;
        CommonTree CONTINUE338_tree=null;
        CommonTree IDENT339_tree=null;
        CommonTree SEMI340_tree=null;
        CommonTree IDENT341_tree=null;
        CommonTree COLON342_tree=null;
        CommonTree SEMI345_tree=null;
        CommonTree SEMI346_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_SYNCHRONIZED=new RewriteRuleTokenStream(adaptor,"token SYNCHRONIZED");
        RewriteRuleTokenStream stream_WHILE=new RewriteRuleTokenStream(adaptor,"token WHILE");
        RewriteRuleTokenStream stream_CONTINUE=new RewriteRuleTokenStream(adaptor,"token CONTINUE");
        RewriteRuleTokenStream stream_SWITCH=new RewriteRuleTokenStream(adaptor,"token SWITCH");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleTokenStream stream_ELSE=new RewriteRuleTokenStream(adaptor,"token ELSE");
        RewriteRuleTokenStream stream_RETURN=new RewriteRuleTokenStream(adaptor,"token RETURN");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_FOR=new RewriteRuleTokenStream(adaptor,"token FOR");
        RewriteRuleTokenStream stream_DO=new RewriteRuleTokenStream(adaptor,"token DO");
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_ASSERT=new RewriteRuleTokenStream(adaptor,"token ASSERT");
        RewriteRuleTokenStream stream_BREAK=new RewriteRuleTokenStream(adaptor,"token BREAK");
        RewriteRuleTokenStream stream_THROW=new RewriteRuleTokenStream(adaptor,"token THROW");
        RewriteRuleTokenStream stream_TRY=new RewriteRuleTokenStream(adaptor,"token TRY");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_IF=new RewriteRuleTokenStream(adaptor,"token IF");
        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_finallyClause=new RewriteRuleSubtreeStream(adaptor,"rule finallyClause");
        RewriteRuleSubtreeStream stream_catches=new RewriteRuleSubtreeStream(adaptor,"rule catches");
        RewriteRuleSubtreeStream stream_forUpdater=new RewriteRuleSubtreeStream(adaptor,"rule forUpdater");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        RewriteRuleSubtreeStream stream_forCondition=new RewriteRuleSubtreeStream(adaptor,"rule forCondition");
        RewriteRuleSubtreeStream stream_localModifierList=new RewriteRuleSubtreeStream(adaptor,"rule localModifierList");
        RewriteRuleSubtreeStream stream_forInit=new RewriteRuleSubtreeStream(adaptor,"rule forInit");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_switchBlockLabels=new RewriteRuleSubtreeStream(adaptor,"rule switchBlockLabels");
        RewriteRuleSubtreeStream stream_parenthesizedExpression=new RewriteRuleSubtreeStream(adaptor,"rule parenthesizedExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }
            // ../etc/JamlAttrHash.g:737:5: ( block | ASSERT expr1= expression ( COLON expr2= expression SEMI -> ^( ASSERT $expr1 $expr2) | SEMI -> ^( ASSERT $expr1) ) | IF parenthesizedExpression ifStat= statement ( ELSE elseStat= statement -> ^( IF parenthesizedExpression $ifStat $elseStat) | -> ^( IF parenthesizedExpression $ifStat) ) | FOR LPAREN ( forInit SEMI forCondition SEMI forUpdater RPAREN statement -> ^( FOR forInit forCondition forUpdater statement ) | localModifierList type IDENT COLON expression RPAREN statement -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement ) ) | WHILE parenthesizedExpression statement -> ^( WHILE parenthesizedExpression statement ) | DO statement WHILE parenthesizedExpression SEMI -> ^( DO statement parenthesizedExpression ) | TRY block ( catches ( finallyClause )? | finallyClause ) -> ^( TRY block ( catches )? ( finallyClause )? ) | SWITCH parenthesizedExpression LCURLY switchBlockLabels RCURLY -> ^( SWITCH parenthesizedExpression switchBlockLabels ) | SYNCHRONIZED parenthesizedExpression block -> ^( SYNCHRONIZED parenthesizedExpression block ) | RETURN ( expression )? SEMI -> ^( RETURN ( expression )? ) | THROW expression SEMI -> ^( THROW expression ) | BREAK ( IDENT )? SEMI -> ^( BREAK ( IDENT )? ) | CONTINUE ( IDENT )? SEMI -> ^( CONTINUE ( IDENT )? ) | IDENT COLON statement -> ^( LABELED_STATEMENT IDENT statement ) | expression SEMI | SEMI )
            int alt100=16;
            alt100 = dfa100.predict(input);
            switch (alt100) {
                case 1 :
                    // ../etc/JamlAttrHash.g:737:9: block
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_block_in_statement8959);
                    block284=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block284.getTree());

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:738:9: ASSERT expr1= expression ( COLON expr2= expression SEMI -> ^( ASSERT $expr1 $expr2) | SEMI -> ^( ASSERT $expr1) )
                    {
                    ASSERT285=(Token)match(input,ASSERT,FOLLOW_ASSERT_in_statement8969); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSERT.add(ASSERT285);

                    pushFollow(FOLLOW_expression_in_statement8973);
                    expr1=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expr1.getTree());
                    // ../etc/JamlAttrHash.g:739:9: ( COLON expr2= expression SEMI -> ^( ASSERT $expr1 $expr2) | SEMI -> ^( ASSERT $expr1) )
                    int alt92=2;
                    int LA92_0 = input.LA(1);

                    if ( (LA92_0==COLON) ) {
                        alt92=1;
                    }
                    else if ( (LA92_0==SEMI) ) {
                        alt92=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 92, 0, input);

                        throw nvae;
                    }
                    switch (alt92) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:739:13: COLON expr2= expression SEMI
                            {
                            COLON286=(Token)match(input,COLON,FOLLOW_COLON_in_statement8988); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(COLON286);

                            pushFollow(FOLLOW_expression_in_statement8992);
                            expr2=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expr2.getTree());
                            SEMI287=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement8994); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMI.add(SEMI287);



                            // AST REWRITE
                            // elements: expr2, ASSERT, expr1
                            // token labels: 
                            // rule labels: retval, expr1, expr2
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            RewriteRuleSubtreeStream stream_expr1=new RewriteRuleSubtreeStream(adaptor,"rule expr1",expr1!=null?expr1.tree:null);
                            RewriteRuleSubtreeStream stream_expr2=new RewriteRuleSubtreeStream(adaptor,"rule expr2",expr2!=null?expr2.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 739:77: -> ^( ASSERT $expr1 $expr2)
                            {
                                // ../etc/JamlAttrHash.g:739:81: ^( ASSERT $expr1 $expr2)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_ASSERT.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_expr1.nextTree());
                                adaptor.addChild(root_1, stream_expr2.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // ../etc/JamlAttrHash.g:740:13: SEMI
                            {
                            SEMI288=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement9057); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMI.add(SEMI288);



                            // AST REWRITE
                            // elements: expr1, ASSERT
                            // token labels: 
                            // rule labels: retval, expr1
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            RewriteRuleSubtreeStream stream_expr1=new RewriteRuleSubtreeStream(adaptor,"rule expr1",expr1!=null?expr1.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 740:77: -> ^( ASSERT $expr1)
                            {
                                // ../etc/JamlAttrHash.g:740:81: ^( ASSERT $expr1)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_ASSERT.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_expr1.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // ../etc/JamlAttrHash.g:742:9: IF parenthesizedExpression ifStat= statement ( ELSE elseStat= statement -> ^( IF parenthesizedExpression $ifStat $elseStat) | -> ^( IF parenthesizedExpression $ifStat) )
                    {
                    IF289=(Token)match(input,IF,FOLLOW_IF_in_statement9146); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IF.add(IF289);

                    pushFollow(FOLLOW_parenthesizedExpression_in_statement9148);
                    parenthesizedExpression290=parenthesizedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parenthesizedExpression.add(parenthesizedExpression290.getTree());
                    pushFollow(FOLLOW_statement_in_statement9152);
                    ifStat=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(ifStat.getTree());
                    // ../etc/JamlAttrHash.g:743:9: ( ELSE elseStat= statement -> ^( IF parenthesizedExpression $ifStat $elseStat) | -> ^( IF parenthesizedExpression $ifStat) )
                    int alt93=2;
                    int LA93_0 = input.LA(1);

                    if ( (LA93_0==ELSE) ) {
                        int LA93_1 = input.LA(2);

                        if ( (synpred131_JamlAttrHash()) ) {
                            alt93=1;
                        }
                        else if ( (true) ) {
                            alt93=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 93, 1, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA93_0==EOF||LA93_0==AT||LA93_0==DEC||LA93_0==INC||LA93_0==LCURLY||LA93_0==LESS_THAN||LA93_0==LOGICAL_NOT||(LA93_0>=LPAREN && LA93_0<=MINUS)||LA93_0==NOT||LA93_0==PLUS||LA93_0==RCURLY||LA93_0==SEMI||(LA93_0>=ABSTRACT && LA93_0<=CASE)||(LA93_0>=CHAR && LA93_0<=DOUBLE)||LA93_0==ENUM||(LA93_0>=FALSE && LA93_0<=FINAL)||(LA93_0>=FLOAT && LA93_0<=IF)||LA93_0==INTERFACE||(LA93_0>=INT && LA93_0<=NULL)||(LA93_0>=PRIVATE && LA93_0<=THROW)||(LA93_0>=TRANSIENT && LA93_0<=WHILE)||(LA93_0>=IDENT && LA93_0<=STRING_LITERAL)) ) {
                        alt93=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 93, 0, input);

                        throw nvae;
                    }
                    switch (alt93) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:743:13: ELSE elseStat= statement
                            {
                            ELSE291=(Token)match(input,ELSE,FOLLOW_ELSE_in_statement9167); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_ELSE.add(ELSE291);

                            pushFollow(FOLLOW_statement_in_statement9171);
                            elseStat=statement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_statement.add(elseStat.getTree());


                            // AST REWRITE
                            // elements: elseStat, IF, ifStat, parenthesizedExpression
                            // token labels: 
                            // rule labels: retval, ifStat, elseStat
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            RewriteRuleSubtreeStream stream_ifStat=new RewriteRuleSubtreeStream(adaptor,"rule ifStat",ifStat!=null?ifStat.tree:null);
                            RewriteRuleSubtreeStream stream_elseStat=new RewriteRuleSubtreeStream(adaptor,"rule elseStat",elseStat!=null?elseStat.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 743:77: -> ^( IF parenthesizedExpression $ifStat $elseStat)
                            {
                                // ../etc/JamlAttrHash.g:743:81: ^( IF parenthesizedExpression $ifStat $elseStat)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_IF.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_parenthesizedExpression.nextTree());
                                adaptor.addChild(root_1, stream_ifStat.nextTree());
                                adaptor.addChild(root_1, stream_elseStat.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // ../etc/JamlAttrHash.g:744:77: 
                            {

                            // AST REWRITE
                            // elements: IF, ifStat, parenthesizedExpression
                            // token labels: 
                            // rule labels: retval, ifStat
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            RewriteRuleSubtreeStream stream_ifStat=new RewriteRuleSubtreeStream(adaptor,"rule ifStat",ifStat!=null?ifStat.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 744:77: -> ^( IF parenthesizedExpression $ifStat)
                            {
                                // ../etc/JamlAttrHash.g:744:81: ^( IF parenthesizedExpression $ifStat)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_IF.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_parenthesizedExpression.nextTree());
                                adaptor.addChild(root_1, stream_ifStat.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // ../etc/JamlAttrHash.g:746:9: FOR LPAREN ( forInit SEMI forCondition SEMI forUpdater RPAREN statement -> ^( FOR forInit forCondition forUpdater statement ) | localModifierList type IDENT COLON expression RPAREN statement -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement ) )
                    {
                    FOR292=(Token)match(input,FOR,FOLLOW_FOR_in_statement9337); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOR.add(FOR292);

                    LPAREN293=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_statement9339); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN293);

                    // ../etc/JamlAttrHash.g:747:9: ( forInit SEMI forCondition SEMI forUpdater RPAREN statement -> ^( FOR forInit forCondition forUpdater statement ) | localModifierList type IDENT COLON expression RPAREN statement -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement ) )
                    int alt94=2;
                    alt94 = dfa94.predict(input);
                    switch (alt94) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:747:13: forInit SEMI forCondition SEMI forUpdater RPAREN statement
                            {
                            pushFollow(FOLLOW_forInit_in_statement9354);
                            forInit294=forInit();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_forInit.add(forInit294.getTree());
                            SEMI295=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement9356); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMI.add(SEMI295);

                            pushFollow(FOLLOW_forCondition_in_statement9358);
                            forCondition296=forCondition();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_forCondition.add(forCondition296.getTree());
                            SEMI297=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement9360); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMI.add(SEMI297);

                            pushFollow(FOLLOW_forUpdater_in_statement9362);
                            forUpdater298=forUpdater();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_forUpdater.add(forUpdater298.getTree());
                            RPAREN299=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_statement9364); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN299);

                            pushFollow(FOLLOW_statement_in_statement9366);
                            statement300=statement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_statement.add(statement300.getTree());


                            // AST REWRITE
                            // elements: forCondition, forUpdater, statement, FOR, forInit
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 747:77: -> ^( FOR forInit forCondition forUpdater statement )
                            {
                                // ../etc/JamlAttrHash.g:747:81: ^( FOR forInit forCondition forUpdater statement )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_FOR.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_forInit.nextTree());
                                adaptor.addChild(root_1, stream_forCondition.nextTree());
                                adaptor.addChild(root_1, stream_forUpdater.nextTree());
                                adaptor.addChild(root_1, stream_statement.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // ../etc/JamlAttrHash.g:748:13: localModifierList type IDENT COLON expression RPAREN statement
                            {
                            pushFollow(FOLLOW_localModifierList_in_statement9401);
                            localModifierList301=localModifierList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_localModifierList.add(localModifierList301.getTree());
                            pushFollow(FOLLOW_type_in_statement9403);
                            type302=type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_type.add(type302.getTree());
                            IDENT303=(Token)match(input,IDENT,FOLLOW_IDENT_in_statement9405); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(IDENT303);

                            COLON304=(Token)match(input,COLON,FOLLOW_COLON_in_statement9407); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(COLON304);

                            pushFollow(FOLLOW_expression_in_statement9409);
                            expression305=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression305.getTree());
                            RPAREN306=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_statement9411); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN306);

                            pushFollow(FOLLOW_statement_in_statement9413);
                            statement307=statement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_statement.add(statement307.getTree());


                            // AST REWRITE
                            // elements: statement, IDENT, localModifierList, expression, type
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 749:77: -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement )
                            {
                                // ../etc/JamlAttrHash.g:749:81: ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOR_EACH, FOR292, "FOR_EACH"), root_1);

                                adaptor.addChild(root_1, stream_localModifierList.nextTree());
                                adaptor.addChild(root_1, stream_type.nextTree());
                                adaptor.addChild(root_1, stream_IDENT.nextNode());
                                adaptor.addChild(root_1, stream_expression.nextTree());
                                adaptor.addChild(root_1, stream_statement.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 5 :
                    // ../etc/JamlAttrHash.g:751:9: WHILE parenthesizedExpression statement
                    {
                    WHILE308=(Token)match(input,WHILE,FOLLOW_WHILE_in_statement9528); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHILE.add(WHILE308);

                    pushFollow(FOLLOW_parenthesizedExpression_in_statement9530);
                    parenthesizedExpression309=parenthesizedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parenthesizedExpression.add(parenthesizedExpression309.getTree());
                    pushFollow(FOLLOW_statement_in_statement9532);
                    statement310=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement310.getTree());


                    // AST REWRITE
                    // elements: WHILE, parenthesizedExpression, statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 751:77: -> ^( WHILE parenthesizedExpression statement )
                    {
                        // ../etc/JamlAttrHash.g:751:81: ^( WHILE parenthesizedExpression statement )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_WHILE.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_parenthesizedExpression.nextTree());
                        adaptor.addChild(root_1, stream_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // ../etc/JamlAttrHash.g:752:9: DO statement WHILE parenthesizedExpression SEMI
                    {
                    DO311=(Token)match(input,DO,FOLLOW_DO_in_statement9581); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DO.add(DO311);

                    pushFollow(FOLLOW_statement_in_statement9583);
                    statement312=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement312.getTree());
                    WHILE313=(Token)match(input,WHILE,FOLLOW_WHILE_in_statement9585); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHILE.add(WHILE313);

                    pushFollow(FOLLOW_parenthesizedExpression_in_statement9587);
                    parenthesizedExpression314=parenthesizedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parenthesizedExpression.add(parenthesizedExpression314.getTree());
                    SEMI315=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement9589); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI315);



                    // AST REWRITE
                    // elements: statement, DO, parenthesizedExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 752:77: -> ^( DO statement parenthesizedExpression )
                    {
                        // ../etc/JamlAttrHash.g:752:81: ^( DO statement parenthesizedExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_DO.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_statement.nextTree());
                        adaptor.addChild(root_1, stream_parenthesizedExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    // ../etc/JamlAttrHash.g:753:9: TRY block ( catches ( finallyClause )? | finallyClause )
                    {
                    TRY316=(Token)match(input,TRY,FOLLOW_TRY_in_statement9630); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TRY.add(TRY316);

                    pushFollow(FOLLOW_block_in_statement9632);
                    block317=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block317.getTree());
                    // ../etc/JamlAttrHash.g:753:19: ( catches ( finallyClause )? | finallyClause )
                    int alt96=2;
                    int LA96_0 = input.LA(1);

                    if ( (LA96_0==CATCH) ) {
                        alt96=1;
                    }
                    else if ( (LA96_0==FINALLY) ) {
                        alt96=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 96, 0, input);

                        throw nvae;
                    }
                    switch (alt96) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:753:20: catches ( finallyClause )?
                            {
                            pushFollow(FOLLOW_catches_in_statement9635);
                            catches318=catches();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_catches.add(catches318.getTree());
                            // ../etc/JamlAttrHash.g:753:28: ( finallyClause )?
                            int alt95=2;
                            int LA95_0 = input.LA(1);

                            if ( (LA95_0==FINALLY) ) {
                                alt95=1;
                            }
                            switch (alt95) {
                                case 1 :
                                    // ../etc/JamlAttrHash.g:0:0: finallyClause
                                    {
                                    pushFollow(FOLLOW_finallyClause_in_statement9637);
                                    finallyClause319=finallyClause();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_finallyClause.add(finallyClause319.getTree());

                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // ../etc/JamlAttrHash.g:753:45: finallyClause
                            {
                            pushFollow(FOLLOW_finallyClause_in_statement9642);
                            finallyClause320=finallyClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_finallyClause.add(finallyClause320.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: block, catches, TRY, finallyClause
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 753:77: -> ^( TRY block ( catches )? ( finallyClause )? )
                    {
                        // ../etc/JamlAttrHash.g:753:81: ^( TRY block ( catches )? ( finallyClause )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_TRY.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_block.nextTree());
                        // ../etc/JamlAttrHash.g:753:93: ( catches )?
                        if ( stream_catches.hasNext() ) {
                            adaptor.addChild(root_1, stream_catches.nextTree());

                        }
                        stream_catches.reset();
                        // ../etc/JamlAttrHash.g:753:102: ( finallyClause )?
                        if ( stream_finallyClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_finallyClause.nextTree());

                        }
                        stream_finallyClause.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 8 :
                    // ../etc/JamlAttrHash.g:754:9: SWITCH parenthesizedExpression LCURLY switchBlockLabels RCURLY
                    {
                    SWITCH321=(Token)match(input,SWITCH,FOLLOW_SWITCH_in_statement9685); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SWITCH.add(SWITCH321);

                    pushFollow(FOLLOW_parenthesizedExpression_in_statement9687);
                    parenthesizedExpression322=parenthesizedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parenthesizedExpression.add(parenthesizedExpression322.getTree());
                    LCURLY323=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_statement9689); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY323);

                    pushFollow(FOLLOW_switchBlockLabels_in_statement9691);
                    switchBlockLabels324=switchBlockLabels();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_switchBlockLabels.add(switchBlockLabels324.getTree());
                    RCURLY325=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_statement9693); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY325);



                    // AST REWRITE
                    // elements: switchBlockLabels, parenthesizedExpression, SWITCH
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 754:77: -> ^( SWITCH parenthesizedExpression switchBlockLabels )
                    {
                        // ../etc/JamlAttrHash.g:754:81: ^( SWITCH parenthesizedExpression switchBlockLabels )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_SWITCH.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_parenthesizedExpression.nextTree());
                        adaptor.addChild(root_1, stream_switchBlockLabels.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 9 :
                    // ../etc/JamlAttrHash.g:755:9: SYNCHRONIZED parenthesizedExpression block
                    {
                    SYNCHRONIZED326=(Token)match(input,SYNCHRONIZED,FOLLOW_SYNCHRONIZED_in_statement9719); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SYNCHRONIZED.add(SYNCHRONIZED326);

                    pushFollow(FOLLOW_parenthesizedExpression_in_statement9721);
                    parenthesizedExpression327=parenthesizedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parenthesizedExpression.add(parenthesizedExpression327.getTree());
                    pushFollow(FOLLOW_block_in_statement9723);
                    block328=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block328.getTree());


                    // AST REWRITE
                    // elements: block, SYNCHRONIZED, parenthesizedExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 755:77: -> ^( SYNCHRONIZED parenthesizedExpression block )
                    {
                        // ../etc/JamlAttrHash.g:755:81: ^( SYNCHRONIZED parenthesizedExpression block )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_SYNCHRONIZED.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_parenthesizedExpression.nextTree());
                        adaptor.addChild(root_1, stream_block.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 10 :
                    // ../etc/JamlAttrHash.g:756:9: RETURN ( expression )? SEMI
                    {
                    RETURN329=(Token)match(input,RETURN,FOLLOW_RETURN_in_statement9769); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETURN.add(RETURN329);

                    // ../etc/JamlAttrHash.g:756:16: ( expression )?
                    int alt97=2;
                    int LA97_0 = input.LA(1);

                    if ( (LA97_0==DEC||LA97_0==INC||LA97_0==LESS_THAN||LA97_0==LOGICAL_NOT||(LA97_0>=LPAREN && LA97_0<=MINUS)||LA97_0==NOT||LA97_0==PLUS||LA97_0==BOOLEAN||LA97_0==BYTE||LA97_0==CHAR||LA97_0==DOUBLE||LA97_0==FALSE||LA97_0==FLOAT||(LA97_0>=INT && LA97_0<=LONG)||(LA97_0>=NEW && LA97_0<=NULL)||LA97_0==SHORT||LA97_0==SUPER||LA97_0==THIS||LA97_0==TRUE||LA97_0==VOID||(LA97_0>=IDENT && LA97_0<=STRING_LITERAL)) ) {
                        alt97=1;
                    }
                    switch (alt97) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:0:0: expression
                            {
                            pushFollow(FOLLOW_expression_in_statement9771);
                            expression330=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression330.getTree());

                            }
                            break;

                    }

                    SEMI331=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement9774); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI331);



                    // AST REWRITE
                    // elements: RETURN, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 756:77: -> ^( RETURN ( expression )? )
                    {
                        // ../etc/JamlAttrHash.g:756:81: ^( RETURN ( expression )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_RETURN.nextNode(), root_1);

                        // ../etc/JamlAttrHash.g:756:90: ( expression )?
                        if ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());

                        }
                        stream_expression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 11 :
                    // ../etc/JamlAttrHash.g:757:9: THROW expression SEMI
                    {
                    THROW332=(Token)match(input,THROW,FOLLOW_THROW_in_statement9838); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_THROW.add(THROW332);

                    pushFollow(FOLLOW_expression_in_statement9840);
                    expression333=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression333.getTree());
                    SEMI334=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement9842); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI334);



                    // AST REWRITE
                    // elements: THROW, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 757:77: -> ^( THROW expression )
                    {
                        // ../etc/JamlAttrHash.g:757:81: ^( THROW expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_THROW.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 12 :
                    // ../etc/JamlAttrHash.g:758:9: BREAK ( IDENT )? SEMI
                    {
                    BREAK335=(Token)match(input,BREAK,FOLLOW_BREAK_in_statement9907); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BREAK.add(BREAK335);

                    // ../etc/JamlAttrHash.g:758:15: ( IDENT )?
                    int alt98=2;
                    int LA98_0 = input.LA(1);

                    if ( (LA98_0==IDENT) ) {
                        alt98=1;
                    }
                    switch (alt98) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:0:0: IDENT
                            {
                            IDENT336=(Token)match(input,IDENT,FOLLOW_IDENT_in_statement9909); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(IDENT336);


                            }
                            break;

                    }

                    SEMI337=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement9912); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI337);



                    // AST REWRITE
                    // elements: BREAK, IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 758:77: -> ^( BREAK ( IDENT )? )
                    {
                        // ../etc/JamlAttrHash.g:758:81: ^( BREAK ( IDENT )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_BREAK.nextNode(), root_1);

                        // ../etc/JamlAttrHash.g:758:89: ( IDENT )?
                        if ( stream_IDENT.hasNext() ) {
                            adaptor.addChild(root_1, stream_IDENT.nextNode());

                        }
                        stream_IDENT.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 13 :
                    // ../etc/JamlAttrHash.g:759:9: CONTINUE ( IDENT )? SEMI
                    {
                    CONTINUE338=(Token)match(input,CONTINUE,FOLLOW_CONTINUE_in_statement9982); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CONTINUE.add(CONTINUE338);

                    // ../etc/JamlAttrHash.g:759:18: ( IDENT )?
                    int alt99=2;
                    int LA99_0 = input.LA(1);

                    if ( (LA99_0==IDENT) ) {
                        alt99=1;
                    }
                    switch (alt99) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:0:0: IDENT
                            {
                            IDENT339=(Token)match(input,IDENT,FOLLOW_IDENT_in_statement9984); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(IDENT339);


                            }
                            break;

                    }

                    SEMI340=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement9987); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI340);



                    // AST REWRITE
                    // elements: IDENT, CONTINUE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 759:77: -> ^( CONTINUE ( IDENT )? )
                    {
                        // ../etc/JamlAttrHash.g:759:81: ^( CONTINUE ( IDENT )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_CONTINUE.nextNode(), root_1);

                        // ../etc/JamlAttrHash.g:759:92: ( IDENT )?
                        if ( stream_IDENT.hasNext() ) {
                            adaptor.addChild(root_1, stream_IDENT.nextNode());

                        }
                        stream_IDENT.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 14 :
                    // ../etc/JamlAttrHash.g:760:9: IDENT COLON statement
                    {
                    IDENT341=(Token)match(input,IDENT,FOLLOW_IDENT_in_statement10054); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT341);

                    COLON342=(Token)match(input,COLON,FOLLOW_COLON_in_statement10056); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(COLON342);

                    pushFollow(FOLLOW_statement_in_statement10058);
                    statement343=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement343.getTree());


                    // AST REWRITE
                    // elements: IDENT, statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 760:77: -> ^( LABELED_STATEMENT IDENT statement )
                    {
                        // ../etc/JamlAttrHash.g:760:81: ^( LABELED_STATEMENT IDENT statement )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LABELED_STATEMENT, "LABELED_STATEMENT"), root_1);

                        adaptor.addChild(root_1, stream_IDENT.nextNode());
                        adaptor.addChild(root_1, stream_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 15 :
                    // ../etc/JamlAttrHash.g:761:9: expression SEMI
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expression_in_statement10125);
                    expression344=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression344.getTree());
                    SEMI345=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement10127); if (state.failed) return retval;

                    }
                    break;
                case 16 :
                    // ../etc/JamlAttrHash.g:762:9: SEMI
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SEMI346=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement10138); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMI346_tree = (CommonTree)adaptor.create(SEMI346);
                    adaptor.addChild(root_0, SEMI346_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("statement", 80);
            if ( state.backtracking>0 ) { memoize(input, 80, statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "statement"

    public static class catches_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "catches"
    // ../etc/JamlAttrHash.g:765:1: catches : ( catchClause )+ -> ^( CATCH_CLAUSE_LIST ( catchClause )+ ) ;
    public final JamlAttrHashParser.catches_return catches() throws RecognitionException {
    traceIn("catches", 81);
        JamlAttrHashParser.catches_return retval = new JamlAttrHashParser.catches_return();
        retval.start = input.LT(1);
        int catches_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.catchClause_return catchClause347 = null;


        RewriteRuleSubtreeStream stream_catchClause=new RewriteRuleSubtreeStream(adaptor,"rule catchClause");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }
            // ../etc/JamlAttrHash.g:766:5: ( ( catchClause )+ -> ^( CATCH_CLAUSE_LIST ( catchClause )+ ) )
            // ../etc/JamlAttrHash.g:766:9: ( catchClause )+
            {
            // ../etc/JamlAttrHash.g:766:9: ( catchClause )+
            int cnt101=0;
            loop101:
            do {
                int alt101=2;
                int LA101_0 = input.LA(1);

                if ( (LA101_0==CATCH) ) {
                    alt101=1;
                }


                switch (alt101) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:0:0: catchClause
            	    {
            	    pushFollow(FOLLOW_catchClause_in_catches10177);
            	    catchClause347=catchClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_catchClause.add(catchClause347.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt101 >= 1 ) break loop101;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(101, input);
                        throw eee;
                }
                cnt101++;
            } while (true);



            // AST REWRITE
            // elements: catchClause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 767:9: -> ^( CATCH_CLAUSE_LIST ( catchClause )+ )
            {
                // ../etc/JamlAttrHash.g:767:13: ^( CATCH_CLAUSE_LIST ( catchClause )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CATCH_CLAUSE_LIST, "CATCH_CLAUSE_LIST"), root_1);

                if ( !(stream_catchClause.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_catchClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_catchClause.nextTree());

                }
                stream_catchClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("catches", 81);
            if ( state.backtracking>0 ) { memoize(input, 81, catches_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "catches"

    public static class catchClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "catchClause"
    // ../etc/JamlAttrHash.g:770:1: catchClause : CATCH LPAREN formalParameterStandardDecl RPAREN block ;
    public final JamlAttrHashParser.catchClause_return catchClause() throws RecognitionException {
    traceIn("catchClause", 82);
        JamlAttrHashParser.catchClause_return retval = new JamlAttrHashParser.catchClause_return();
        retval.start = input.LT(1);
        int catchClause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token CATCH348=null;
        Token LPAREN349=null;
        Token RPAREN351=null;
        JamlAttrHashParser.formalParameterStandardDecl_return formalParameterStandardDecl350 = null;

        JamlAttrHashParser.block_return block352 = null;


        CommonTree CATCH348_tree=null;
        CommonTree LPAREN349_tree=null;
        CommonTree RPAREN351_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }
            // ../etc/JamlAttrHash.g:771:5: ( CATCH LPAREN formalParameterStandardDecl RPAREN block )
            // ../etc/JamlAttrHash.g:771:9: CATCH LPAREN formalParameterStandardDecl RPAREN block
            {
            root_0 = (CommonTree)adaptor.nil();

            CATCH348=(Token)match(input,CATCH,FOLLOW_CATCH_in_catchClause10219); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CATCH348_tree = (CommonTree)adaptor.create(CATCH348);
            root_0 = (CommonTree)adaptor.becomeRoot(CATCH348_tree, root_0);
            }
            LPAREN349=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_catchClause10222); if (state.failed) return retval;
            pushFollow(FOLLOW_formalParameterStandardDecl_in_catchClause10225);
            formalParameterStandardDecl350=formalParameterStandardDecl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameterStandardDecl350.getTree());
            RPAREN351=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_catchClause10227); if (state.failed) return retval;
            pushFollow(FOLLOW_block_in_catchClause10230);
            block352=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block352.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("catchClause", 82);
            if ( state.backtracking>0 ) { memoize(input, 82, catchClause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "catchClause"

    public static class finallyClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "finallyClause"
    // ../etc/JamlAttrHash.g:774:1: finallyClause : FINALLY block -> block ;
    public final JamlAttrHashParser.finallyClause_return finallyClause() throws RecognitionException {
    traceIn("finallyClause", 83);
        JamlAttrHashParser.finallyClause_return retval = new JamlAttrHashParser.finallyClause_return();
        retval.start = input.LT(1);
        int finallyClause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token FINALLY353=null;
        JamlAttrHashParser.block_return block354 = null;


        CommonTree FINALLY353_tree=null;
        RewriteRuleTokenStream stream_FINALLY=new RewriteRuleTokenStream(adaptor,"token FINALLY");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }
            // ../etc/JamlAttrHash.g:775:5: ( FINALLY block -> block )
            // ../etc/JamlAttrHash.g:775:9: FINALLY block
            {
            FINALLY353=(Token)match(input,FINALLY,FOLLOW_FINALLY_in_finallyClause10249); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FINALLY.add(FINALLY353);

            pushFollow(FOLLOW_block_in_finallyClause10251);
            block354=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block354.getTree());


            // AST REWRITE
            // elements: block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 776:9: -> block
            {
                adaptor.addChild(root_0, stream_block.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("finallyClause", 83);
            if ( state.backtracking>0 ) { memoize(input, 83, finallyClause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "finallyClause"

    public static class switchBlockLabels_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchBlockLabels"
    // ../etc/JamlAttrHash.g:779:1: switchBlockLabels : switchCaseLabels ( switchDefaultLabel )? switchCaseLabels -> ^( SWITCH_BLOCK_LABEL_LIST switchCaseLabels ( switchDefaultLabel )? switchCaseLabels ) ;
    public final JamlAttrHashParser.switchBlockLabels_return switchBlockLabels() throws RecognitionException {
    traceIn("switchBlockLabels", 84);
        JamlAttrHashParser.switchBlockLabels_return retval = new JamlAttrHashParser.switchBlockLabels_return();
        retval.start = input.LT(1);
        int switchBlockLabels_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.switchCaseLabels_return switchCaseLabels355 = null;

        JamlAttrHashParser.switchDefaultLabel_return switchDefaultLabel356 = null;

        JamlAttrHashParser.switchCaseLabels_return switchCaseLabels357 = null;


        RewriteRuleSubtreeStream stream_switchDefaultLabel=new RewriteRuleSubtreeStream(adaptor,"rule switchDefaultLabel");
        RewriteRuleSubtreeStream stream_switchCaseLabels=new RewriteRuleSubtreeStream(adaptor,"rule switchCaseLabels");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }
            // ../etc/JamlAttrHash.g:780:5: ( switchCaseLabels ( switchDefaultLabel )? switchCaseLabels -> ^( SWITCH_BLOCK_LABEL_LIST switchCaseLabels ( switchDefaultLabel )? switchCaseLabels ) )
            // ../etc/JamlAttrHash.g:780:9: switchCaseLabels ( switchDefaultLabel )? switchCaseLabels
            {
            pushFollow(FOLLOW_switchCaseLabels_in_switchBlockLabels10283);
            switchCaseLabels355=switchCaseLabels();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_switchCaseLabels.add(switchCaseLabels355.getTree());
            // ../etc/JamlAttrHash.g:780:26: ( switchDefaultLabel )?
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==DEFAULT) ) {
                alt102=1;
            }
            switch (alt102) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: switchDefaultLabel
                    {
                    pushFollow(FOLLOW_switchDefaultLabel_in_switchBlockLabels10285);
                    switchDefaultLabel356=switchDefaultLabel();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_switchDefaultLabel.add(switchDefaultLabel356.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_switchCaseLabels_in_switchBlockLabels10288);
            switchCaseLabels357=switchCaseLabels();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_switchCaseLabels.add(switchCaseLabels357.getTree());


            // AST REWRITE
            // elements: switchCaseLabels, switchDefaultLabel, switchCaseLabels
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 781:9: -> ^( SWITCH_BLOCK_LABEL_LIST switchCaseLabels ( switchDefaultLabel )? switchCaseLabels )
            {
                // ../etc/JamlAttrHash.g:781:13: ^( SWITCH_BLOCK_LABEL_LIST switchCaseLabels ( switchDefaultLabel )? switchCaseLabels )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SWITCH_BLOCK_LABEL_LIST, "SWITCH_BLOCK_LABEL_LIST"), root_1);

                adaptor.addChild(root_1, stream_switchCaseLabels.nextTree());
                // ../etc/JamlAttrHash.g:781:56: ( switchDefaultLabel )?
                if ( stream_switchDefaultLabel.hasNext() ) {
                    adaptor.addChild(root_1, stream_switchDefaultLabel.nextTree());

                }
                stream_switchDefaultLabel.reset();
                adaptor.addChild(root_1, stream_switchCaseLabels.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("switchBlockLabels", 84);
            if ( state.backtracking>0 ) { memoize(input, 84, switchBlockLabels_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchBlockLabels"

    public static class switchCaseLabels_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchCaseLabels"
    // ../etc/JamlAttrHash.g:784:1: switchCaseLabels : ( switchCaseLabel )* ;
    public final JamlAttrHashParser.switchCaseLabels_return switchCaseLabels() throws RecognitionException {
    traceIn("switchCaseLabels", 85);
        JamlAttrHashParser.switchCaseLabels_return retval = new JamlAttrHashParser.switchCaseLabels_return();
        retval.start = input.LT(1);
        int switchCaseLabels_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.switchCaseLabel_return switchCaseLabel358 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }
            // ../etc/JamlAttrHash.g:785:5: ( ( switchCaseLabel )* )
            // ../etc/JamlAttrHash.g:785:9: ( switchCaseLabel )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // ../etc/JamlAttrHash.g:785:9: ( switchCaseLabel )*
            loop103:
            do {
                int alt103=2;
                int LA103_0 = input.LA(1);

                if ( (LA103_0==CASE) ) {
                    int LA103_2 = input.LA(2);

                    if ( (synpred153_JamlAttrHash()) ) {
                        alt103=1;
                    }


                }


                switch (alt103) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:0:0: switchCaseLabel
            	    {
            	    pushFollow(FOLLOW_switchCaseLabel_in_switchCaseLabels10333);
            	    switchCaseLabel358=switchCaseLabel();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, switchCaseLabel358.getTree());

            	    }
            	    break;

            	default :
            	    break loop103;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("switchCaseLabels", 85);
            if ( state.backtracking>0 ) { memoize(input, 85, switchCaseLabels_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchCaseLabels"

    public static class switchCaseLabel_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchCaseLabel"
    // ../etc/JamlAttrHash.g:788:1: switchCaseLabel : CASE expression COLON ( blockStatement )* ;
    public final JamlAttrHashParser.switchCaseLabel_return switchCaseLabel() throws RecognitionException {
    traceIn("switchCaseLabel", 86);
        JamlAttrHashParser.switchCaseLabel_return retval = new JamlAttrHashParser.switchCaseLabel_return();
        retval.start = input.LT(1);
        int switchCaseLabel_StartIndex = input.index();
        CommonTree root_0 = null;

        Token CASE359=null;
        Token COLON361=null;
        JamlAttrHashParser.expression_return expression360 = null;

        JamlAttrHashParser.blockStatement_return blockStatement362 = null;


        CommonTree CASE359_tree=null;
        CommonTree COLON361_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }
            // ../etc/JamlAttrHash.g:789:5: ( CASE expression COLON ( blockStatement )* )
            // ../etc/JamlAttrHash.g:789:9: CASE expression COLON ( blockStatement )*
            {
            root_0 = (CommonTree)adaptor.nil();

            CASE359=(Token)match(input,CASE,FOLLOW_CASE_in_switchCaseLabel10361); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CASE359_tree = (CommonTree)adaptor.create(CASE359);
            root_0 = (CommonTree)adaptor.becomeRoot(CASE359_tree, root_0);
            }
            pushFollow(FOLLOW_expression_in_switchCaseLabel10364);
            expression360=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression360.getTree());
            COLON361=(Token)match(input,COLON,FOLLOW_COLON_in_switchCaseLabel10366); if (state.failed) return retval;
            // ../etc/JamlAttrHash.g:789:33: ( blockStatement )*
            loop104:
            do {
                int alt104=2;
                int LA104_0 = input.LA(1);

                if ( (LA104_0==AT||LA104_0==DEC||LA104_0==INC||LA104_0==LCURLY||LA104_0==LESS_THAN||LA104_0==LOGICAL_NOT||(LA104_0>=LPAREN && LA104_0<=MINUS)||LA104_0==NOT||LA104_0==PLUS||LA104_0==SEMI||(LA104_0>=ABSTRACT && LA104_0<=BYTE)||(LA104_0>=CHAR && LA104_0<=CONTINUE)||(LA104_0>=DO && LA104_0<=DOUBLE)||LA104_0==ENUM||(LA104_0>=FALSE && LA104_0<=FINAL)||(LA104_0>=FLOAT && LA104_0<=IF)||LA104_0==INTERFACE||(LA104_0>=INT && LA104_0<=NULL)||(LA104_0>=PRIVATE && LA104_0<=THROW)||(LA104_0>=TRANSIENT && LA104_0<=WHILE)||(LA104_0>=IDENT && LA104_0<=STRING_LITERAL)) ) {
                    alt104=1;
                }


                switch (alt104) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:0:0: blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_switchCaseLabel10369);
            	    blockStatement362=blockStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, blockStatement362.getTree());

            	    }
            	    break;

            	default :
            	    break loop104;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("switchCaseLabel", 86);
            if ( state.backtracking>0 ) { memoize(input, 86, switchCaseLabel_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchCaseLabel"

    public static class switchDefaultLabel_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchDefaultLabel"
    // ../etc/JamlAttrHash.g:792:1: switchDefaultLabel : DEFAULT COLON ( blockStatement )* ;
    public final JamlAttrHashParser.switchDefaultLabel_return switchDefaultLabel() throws RecognitionException {
    traceIn("switchDefaultLabel", 87);
        JamlAttrHashParser.switchDefaultLabel_return retval = new JamlAttrHashParser.switchDefaultLabel_return();
        retval.start = input.LT(1);
        int switchDefaultLabel_StartIndex = input.index();
        CommonTree root_0 = null;

        Token DEFAULT363=null;
        Token COLON364=null;
        JamlAttrHashParser.blockStatement_return blockStatement365 = null;


        CommonTree DEFAULT363_tree=null;
        CommonTree COLON364_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }
            // ../etc/JamlAttrHash.g:793:5: ( DEFAULT COLON ( blockStatement )* )
            // ../etc/JamlAttrHash.g:793:9: DEFAULT COLON ( blockStatement )*
            {
            root_0 = (CommonTree)adaptor.nil();

            DEFAULT363=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_switchDefaultLabel10393); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DEFAULT363_tree = (CommonTree)adaptor.create(DEFAULT363);
            root_0 = (CommonTree)adaptor.becomeRoot(DEFAULT363_tree, root_0);
            }
            COLON364=(Token)match(input,COLON,FOLLOW_COLON_in_switchDefaultLabel10396); if (state.failed) return retval;
            // ../etc/JamlAttrHash.g:793:25: ( blockStatement )*
            loop105:
            do {
                int alt105=2;
                int LA105_0 = input.LA(1);

                if ( (LA105_0==AT||LA105_0==DEC||LA105_0==INC||LA105_0==LCURLY||LA105_0==LESS_THAN||LA105_0==LOGICAL_NOT||(LA105_0>=LPAREN && LA105_0<=MINUS)||LA105_0==NOT||LA105_0==PLUS||LA105_0==SEMI||(LA105_0>=ABSTRACT && LA105_0<=BYTE)||(LA105_0>=CHAR && LA105_0<=CONTINUE)||(LA105_0>=DO && LA105_0<=DOUBLE)||LA105_0==ENUM||(LA105_0>=FALSE && LA105_0<=FINAL)||(LA105_0>=FLOAT && LA105_0<=IF)||LA105_0==INTERFACE||(LA105_0>=INT && LA105_0<=NULL)||(LA105_0>=PRIVATE && LA105_0<=THROW)||(LA105_0>=TRANSIENT && LA105_0<=WHILE)||(LA105_0>=IDENT && LA105_0<=STRING_LITERAL)) ) {
                    alt105=1;
                }


                switch (alt105) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:0:0: blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_switchDefaultLabel10399);
            	    blockStatement365=blockStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, blockStatement365.getTree());

            	    }
            	    break;

            	default :
            	    break loop105;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("switchDefaultLabel", 87);
            if ( state.backtracking>0 ) { memoize(input, 87, switchDefaultLabel_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchDefaultLabel"

    public static class forInit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forInit"
    // ../etc/JamlAttrHash.g:796:1: forInit : ( localVariableDeclaration -> ^( FOR_INIT localVariableDeclaration ) | expressionList -> ^( FOR_INIT expressionList ) | -> ^( FOR_INIT ) );
    public final JamlAttrHashParser.forInit_return forInit() throws RecognitionException {
    traceIn("forInit", 88);
        JamlAttrHashParser.forInit_return retval = new JamlAttrHashParser.forInit_return();
        retval.start = input.LT(1);
        int forInit_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.localVariableDeclaration_return localVariableDeclaration366 = null;

        JamlAttrHashParser.expressionList_return expressionList367 = null;


        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_localVariableDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule localVariableDeclaration");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }
            // ../etc/JamlAttrHash.g:797:5: ( localVariableDeclaration -> ^( FOR_INIT localVariableDeclaration ) | expressionList -> ^( FOR_INIT expressionList ) | -> ^( FOR_INIT ) )
            int alt106=3;
            alt106 = dfa106.predict(input);
            switch (alt106) {
                case 1 :
                    // ../etc/JamlAttrHash.g:797:9: localVariableDeclaration
                    {
                    pushFollow(FOLLOW_localVariableDeclaration_in_forInit10423);
                    localVariableDeclaration366=localVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_localVariableDeclaration.add(localVariableDeclaration366.getTree());


                    // AST REWRITE
                    // elements: localVariableDeclaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 797:37: -> ^( FOR_INIT localVariableDeclaration )
                    {
                        // ../etc/JamlAttrHash.g:797:41: ^( FOR_INIT localVariableDeclaration )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOR_INIT, "FOR_INIT"), root_1);

                        adaptor.addChild(root_1, stream_localVariableDeclaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:798:9: expressionList
                    {
                    pushFollow(FOLLOW_expressionList_in_forInit10445);
                    expressionList367=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionList.add(expressionList367.getTree());


                    // AST REWRITE
                    // elements: expressionList
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 798:37: -> ^( FOR_INIT expressionList )
                    {
                        // ../etc/JamlAttrHash.g:798:41: ^( FOR_INIT expressionList )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOR_INIT, "FOR_INIT"), root_1);

                        adaptor.addChild(root_1, stream_expressionList.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // ../etc/JamlAttrHash.g:799:37: 
                    {

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 799:37: -> ^( FOR_INIT )
                    {
                        // ../etc/JamlAttrHash.g:799:41: ^( FOR_INIT )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOR_INIT, "FOR_INIT"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("forInit", 88);
            if ( state.backtracking>0 ) { memoize(input, 88, forInit_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forInit"

    public static class forCondition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forCondition"
    // ../etc/JamlAttrHash.g:802:1: forCondition : ( expression )? -> ^( FOR_CONDITION ( expression )? ) ;
    public final JamlAttrHashParser.forCondition_return forCondition() throws RecognitionException {
    traceIn("forCondition", 89);
        JamlAttrHashParser.forCondition_return retval = new JamlAttrHashParser.forCondition_return();
        retval.start = input.LT(1);
        int forCondition_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.expression_return expression368 = null;


        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }
            // ../etc/JamlAttrHash.g:803:5: ( ( expression )? -> ^( FOR_CONDITION ( expression )? ) )
            // ../etc/JamlAttrHash.g:803:9: ( expression )?
            {
            // ../etc/JamlAttrHash.g:803:9: ( expression )?
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==DEC||LA107_0==INC||LA107_0==LESS_THAN||LA107_0==LOGICAL_NOT||(LA107_0>=LPAREN && LA107_0<=MINUS)||LA107_0==NOT||LA107_0==PLUS||LA107_0==BOOLEAN||LA107_0==BYTE||LA107_0==CHAR||LA107_0==DOUBLE||LA107_0==FALSE||LA107_0==FLOAT||(LA107_0>=INT && LA107_0<=LONG)||(LA107_0>=NEW && LA107_0<=NULL)||LA107_0==SHORT||LA107_0==SUPER||LA107_0==THIS||LA107_0==TRUE||LA107_0==VOID||(LA107_0>=IDENT && LA107_0<=STRING_LITERAL)) ) {
                alt107=1;
            }
            switch (alt107) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: expression
                    {
                    pushFollow(FOLLOW_expression_in_forCondition10533);
                    expression368=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression368.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 804:9: -> ^( FOR_CONDITION ( expression )? )
            {
                // ../etc/JamlAttrHash.g:804:13: ^( FOR_CONDITION ( expression )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOR_CONDITION, "FOR_CONDITION"), root_1);

                // ../etc/JamlAttrHash.g:804:29: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("forCondition", 89);
            if ( state.backtracking>0 ) { memoize(input, 89, forCondition_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forCondition"

    public static class forUpdater_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forUpdater"
    // ../etc/JamlAttrHash.g:807:1: forUpdater : ( expressionList )? -> ^( FOR_UPDATE ( expressionList )? ) ;
    public final JamlAttrHashParser.forUpdater_return forUpdater() throws RecognitionException {
    traceIn("forUpdater", 90);
        JamlAttrHashParser.forUpdater_return retval = new JamlAttrHashParser.forUpdater_return();
        retval.start = input.LT(1);
        int forUpdater_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.expressionList_return expressionList369 = null;


        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }
            // ../etc/JamlAttrHash.g:808:5: ( ( expressionList )? -> ^( FOR_UPDATE ( expressionList )? ) )
            // ../etc/JamlAttrHash.g:808:9: ( expressionList )?
            {
            // ../etc/JamlAttrHash.g:808:9: ( expressionList )?
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==DEC||LA108_0==INC||LA108_0==LESS_THAN||LA108_0==LOGICAL_NOT||(LA108_0>=LPAREN && LA108_0<=MINUS)||LA108_0==NOT||LA108_0==PLUS||LA108_0==BOOLEAN||LA108_0==BYTE||LA108_0==CHAR||LA108_0==DOUBLE||LA108_0==FALSE||LA108_0==FLOAT||(LA108_0>=INT && LA108_0<=LONG)||(LA108_0>=NEW && LA108_0<=NULL)||LA108_0==SHORT||LA108_0==SUPER||LA108_0==THIS||LA108_0==TRUE||LA108_0==VOID||(LA108_0>=IDENT && LA108_0<=STRING_LITERAL)) ) {
                alt108=1;
            }
            switch (alt108) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: expressionList
                    {
                    pushFollow(FOLLOW_expressionList_in_forUpdater10575);
                    expressionList369=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionList.add(expressionList369.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: expressionList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 809:9: -> ^( FOR_UPDATE ( expressionList )? )
            {
                // ../etc/JamlAttrHash.g:809:13: ^( FOR_UPDATE ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOR_UPDATE, "FOR_UPDATE"), root_1);

                // ../etc/JamlAttrHash.g:809:26: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("forUpdater", 90);
            if ( state.backtracking>0 ) { memoize(input, 90, forUpdater_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forUpdater"

    public static class parenthesizedExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parenthesizedExpression"
    // ../etc/JamlAttrHash.g:814:1: parenthesizedExpression : LPAREN expression RPAREN -> ^( PARENTESIZED_EXPR[$LPAREN, \"PARENTESIZED_EXPR\"] expression ) ;
    public final JamlAttrHashParser.parenthesizedExpression_return parenthesizedExpression() throws RecognitionException {
    traceIn("parenthesizedExpression", 91);
        JamlAttrHashParser.parenthesizedExpression_return retval = new JamlAttrHashParser.parenthesizedExpression_return();
        retval.start = input.LT(1);
        int parenthesizedExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LPAREN370=null;
        Token RPAREN372=null;
        JamlAttrHashParser.expression_return expression371 = null;


        CommonTree LPAREN370_tree=null;
        CommonTree RPAREN372_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }
            // ../etc/JamlAttrHash.g:815:5: ( LPAREN expression RPAREN -> ^( PARENTESIZED_EXPR[$LPAREN, \"PARENTESIZED_EXPR\"] expression ) )
            // ../etc/JamlAttrHash.g:815:9: LPAREN expression RPAREN
            {
            LPAREN370=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_parenthesizedExpression10615); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN370);

            pushFollow(FOLLOW_expression_in_parenthesizedExpression10617);
            expression371=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression371.getTree());
            RPAREN372=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_parenthesizedExpression10619); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN372);



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 816:9: -> ^( PARENTESIZED_EXPR[$LPAREN, \"PARENTESIZED_EXPR\"] expression )
            {
                // ../etc/JamlAttrHash.g:816:13: ^( PARENTESIZED_EXPR[$LPAREN, \"PARENTESIZED_EXPR\"] expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PARENTESIZED_EXPR, LPAREN370, "PARENTESIZED_EXPR"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("parenthesizedExpression", 91);
            if ( state.backtracking>0 ) { memoize(input, 91, parenthesizedExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parenthesizedExpression"

    public static class expressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionList"
    // ../etc/JamlAttrHash.g:819:1: expressionList : expression ( COMMA expression )* ;
    public final JamlAttrHashParser.expressionList_return expressionList() throws RecognitionException {
    traceIn("expressionList", 92);
        JamlAttrHashParser.expressionList_return retval = new JamlAttrHashParser.expressionList_return();
        retval.start = input.LT(1);
        int expressionList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA374=null;
        JamlAttrHashParser.expression_return expression373 = null;

        JamlAttrHashParser.expression_return expression375 = null;


        CommonTree COMMA374_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }
            // ../etc/JamlAttrHash.g:820:5: ( expression ( COMMA expression )* )
            // ../etc/JamlAttrHash.g:820:9: expression ( COMMA expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_expressionList10660);
            expression373=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression373.getTree());
            // ../etc/JamlAttrHash.g:820:20: ( COMMA expression )*
            loop109:
            do {
                int alt109=2;
                int LA109_0 = input.LA(1);

                if ( (LA109_0==COMMA) ) {
                    alt109=1;
                }


                switch (alt109) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:820:21: COMMA expression
            	    {
            	    COMMA374=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList10663); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_expressionList10666);
            	    expression375=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression375.getTree());

            	    }
            	    break;

            	default :
            	    break loop109;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("expressionList", 92);
            if ( state.backtracking>0 ) { memoize(input, 92, expressionList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expressionList"

    public static class expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression"
    // ../etc/JamlAttrHash.g:823:1: expression : assignmentExpression -> ^( EXPR assignmentExpression ) ;
    public final JamlAttrHashParser.expression_return expression() throws RecognitionException {
    traceIn("expression", 93);
        JamlAttrHashParser.expression_return retval = new JamlAttrHashParser.expression_return();
        retval.start = input.LT(1);
        int expression_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.assignmentExpression_return assignmentExpression376 = null;


        RewriteRuleSubtreeStream stream_assignmentExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignmentExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }
            // ../etc/JamlAttrHash.g:824:5: ( assignmentExpression -> ^( EXPR assignmentExpression ) )
            // ../etc/JamlAttrHash.g:824:9: assignmentExpression
            {
            pushFollow(FOLLOW_assignmentExpression_in_expression10687);
            assignmentExpression376=assignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_assignmentExpression.add(assignmentExpression376.getTree());


            // AST REWRITE
            // elements: assignmentExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 825:9: -> ^( EXPR assignmentExpression )
            {
                // ../etc/JamlAttrHash.g:825:13: ^( EXPR assignmentExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXPR, "EXPR"), root_1);

                adaptor.addChild(root_1, stream_assignmentExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("expression", 93);
            if ( state.backtracking>0 ) { memoize(input, 93, expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expression"

    public static class assignmentExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "assignmentExpression"
    // ../etc/JamlAttrHash.g:828:1: assignmentExpression : conditionalExpression ( ( ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | STAR_ASSIGN | DIV_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | MOD_ASSIGN | SHIFT_LEFT_ASSIGN | SHIFT_RIGHT_ASSIGN | BIT_SHIFT_RIGHT_ASSIGN ) assignmentExpression )? ;
    public final JamlAttrHashParser.assignmentExpression_return assignmentExpression() throws RecognitionException {
    traceIn("assignmentExpression", 94);
        JamlAttrHashParser.assignmentExpression_return retval = new JamlAttrHashParser.assignmentExpression_return();
        retval.start = input.LT(1);
        int assignmentExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ASSIGN378=null;
        Token PLUS_ASSIGN379=null;
        Token MINUS_ASSIGN380=null;
        Token STAR_ASSIGN381=null;
        Token DIV_ASSIGN382=null;
        Token AND_ASSIGN383=null;
        Token OR_ASSIGN384=null;
        Token XOR_ASSIGN385=null;
        Token MOD_ASSIGN386=null;
        Token SHIFT_LEFT_ASSIGN387=null;
        Token SHIFT_RIGHT_ASSIGN388=null;
        Token BIT_SHIFT_RIGHT_ASSIGN389=null;
        JamlAttrHashParser.conditionalExpression_return conditionalExpression377 = null;

        JamlAttrHashParser.assignmentExpression_return assignmentExpression390 = null;


        CommonTree ASSIGN378_tree=null;
        CommonTree PLUS_ASSIGN379_tree=null;
        CommonTree MINUS_ASSIGN380_tree=null;
        CommonTree STAR_ASSIGN381_tree=null;
        CommonTree DIV_ASSIGN382_tree=null;
        CommonTree AND_ASSIGN383_tree=null;
        CommonTree OR_ASSIGN384_tree=null;
        CommonTree XOR_ASSIGN385_tree=null;
        CommonTree MOD_ASSIGN386_tree=null;
        CommonTree SHIFT_LEFT_ASSIGN387_tree=null;
        CommonTree SHIFT_RIGHT_ASSIGN388_tree=null;
        CommonTree BIT_SHIFT_RIGHT_ASSIGN389_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }
            // ../etc/JamlAttrHash.g:829:5: ( conditionalExpression ( ( ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | STAR_ASSIGN | DIV_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | MOD_ASSIGN | SHIFT_LEFT_ASSIGN | SHIFT_RIGHT_ASSIGN | BIT_SHIFT_RIGHT_ASSIGN ) assignmentExpression )? )
            // ../etc/JamlAttrHash.g:829:9: conditionalExpression ( ( ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | STAR_ASSIGN | DIV_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | MOD_ASSIGN | SHIFT_LEFT_ASSIGN | SHIFT_RIGHT_ASSIGN | BIT_SHIFT_RIGHT_ASSIGN ) assignmentExpression )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_conditionalExpression_in_assignmentExpression10723);
            conditionalExpression377=conditionalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalExpression377.getTree());
            // ../etc/JamlAttrHash.g:830:9: ( ( ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | STAR_ASSIGN | DIV_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | MOD_ASSIGN | SHIFT_LEFT_ASSIGN | SHIFT_RIGHT_ASSIGN | BIT_SHIFT_RIGHT_ASSIGN ) assignmentExpression )?
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( ((LA111_0>=AND_ASSIGN && LA111_0<=ASSIGN)||LA111_0==BIT_SHIFT_RIGHT_ASSIGN||LA111_0==DIV_ASSIGN||LA111_0==MINUS_ASSIGN||LA111_0==MOD_ASSIGN||LA111_0==OR_ASSIGN||LA111_0==PLUS_ASSIGN||LA111_0==SHIFT_LEFT_ASSIGN||LA111_0==SHIFT_RIGHT_ASSIGN||LA111_0==STAR_ASSIGN||LA111_0==XOR_ASSIGN) ) {
                alt111=1;
            }
            switch (alt111) {
                case 1 :
                    // ../etc/JamlAttrHash.g:830:13: ( ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | STAR_ASSIGN | DIV_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | MOD_ASSIGN | SHIFT_LEFT_ASSIGN | SHIFT_RIGHT_ASSIGN | BIT_SHIFT_RIGHT_ASSIGN ) assignmentExpression
                    {
                    // ../etc/JamlAttrHash.g:830:13: ( ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | STAR_ASSIGN | DIV_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | MOD_ASSIGN | SHIFT_LEFT_ASSIGN | SHIFT_RIGHT_ASSIGN | BIT_SHIFT_RIGHT_ASSIGN )
                    int alt110=12;
                    switch ( input.LA(1) ) {
                    case ASSIGN:
                        {
                        alt110=1;
                        }
                        break;
                    case PLUS_ASSIGN:
                        {
                        alt110=2;
                        }
                        break;
                    case MINUS_ASSIGN:
                        {
                        alt110=3;
                        }
                        break;
                    case STAR_ASSIGN:
                        {
                        alt110=4;
                        }
                        break;
                    case DIV_ASSIGN:
                        {
                        alt110=5;
                        }
                        break;
                    case AND_ASSIGN:
                        {
                        alt110=6;
                        }
                        break;
                    case OR_ASSIGN:
                        {
                        alt110=7;
                        }
                        break;
                    case XOR_ASSIGN:
                        {
                        alt110=8;
                        }
                        break;
                    case MOD_ASSIGN:
                        {
                        alt110=9;
                        }
                        break;
                    case SHIFT_LEFT_ASSIGN:
                        {
                        alt110=10;
                        }
                        break;
                    case SHIFT_RIGHT_ASSIGN:
                        {
                        alt110=11;
                        }
                        break;
                    case BIT_SHIFT_RIGHT_ASSIGN:
                        {
                        alt110=12;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 110, 0, input);

                        throw nvae;
                    }

                    switch (alt110) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:830:17: ASSIGN
                            {
                            ASSIGN378=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_assignmentExpression10742); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            ASSIGN378_tree = (CommonTree)adaptor.create(ASSIGN378);
                            root_0 = (CommonTree)adaptor.becomeRoot(ASSIGN378_tree, root_0);
                            }

                            }
                            break;
                        case 2 :
                            // ../etc/JamlAttrHash.g:831:17: PLUS_ASSIGN
                            {
                            PLUS_ASSIGN379=(Token)match(input,PLUS_ASSIGN,FOLLOW_PLUS_ASSIGN_in_assignmentExpression10761); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            PLUS_ASSIGN379_tree = (CommonTree)adaptor.create(PLUS_ASSIGN379);
                            root_0 = (CommonTree)adaptor.becomeRoot(PLUS_ASSIGN379_tree, root_0);
                            }

                            }
                            break;
                        case 3 :
                            // ../etc/JamlAttrHash.g:832:17: MINUS_ASSIGN
                            {
                            MINUS_ASSIGN380=(Token)match(input,MINUS_ASSIGN,FOLLOW_MINUS_ASSIGN_in_assignmentExpression10780); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            MINUS_ASSIGN380_tree = (CommonTree)adaptor.create(MINUS_ASSIGN380);
                            root_0 = (CommonTree)adaptor.becomeRoot(MINUS_ASSIGN380_tree, root_0);
                            }

                            }
                            break;
                        case 4 :
                            // ../etc/JamlAttrHash.g:833:17: STAR_ASSIGN
                            {
                            STAR_ASSIGN381=(Token)match(input,STAR_ASSIGN,FOLLOW_STAR_ASSIGN_in_assignmentExpression10799); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            STAR_ASSIGN381_tree = (CommonTree)adaptor.create(STAR_ASSIGN381);
                            root_0 = (CommonTree)adaptor.becomeRoot(STAR_ASSIGN381_tree, root_0);
                            }

                            }
                            break;
                        case 5 :
                            // ../etc/JamlAttrHash.g:834:17: DIV_ASSIGN
                            {
                            DIV_ASSIGN382=(Token)match(input,DIV_ASSIGN,FOLLOW_DIV_ASSIGN_in_assignmentExpression10818); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DIV_ASSIGN382_tree = (CommonTree)adaptor.create(DIV_ASSIGN382);
                            root_0 = (CommonTree)adaptor.becomeRoot(DIV_ASSIGN382_tree, root_0);
                            }

                            }
                            break;
                        case 6 :
                            // ../etc/JamlAttrHash.g:835:17: AND_ASSIGN
                            {
                            AND_ASSIGN383=(Token)match(input,AND_ASSIGN,FOLLOW_AND_ASSIGN_in_assignmentExpression10837); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            AND_ASSIGN383_tree = (CommonTree)adaptor.create(AND_ASSIGN383);
                            root_0 = (CommonTree)adaptor.becomeRoot(AND_ASSIGN383_tree, root_0);
                            }

                            }
                            break;
                        case 7 :
                            // ../etc/JamlAttrHash.g:836:17: OR_ASSIGN
                            {
                            OR_ASSIGN384=(Token)match(input,OR_ASSIGN,FOLLOW_OR_ASSIGN_in_assignmentExpression10856); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            OR_ASSIGN384_tree = (CommonTree)adaptor.create(OR_ASSIGN384);
                            root_0 = (CommonTree)adaptor.becomeRoot(OR_ASSIGN384_tree, root_0);
                            }

                            }
                            break;
                        case 8 :
                            // ../etc/JamlAttrHash.g:837:17: XOR_ASSIGN
                            {
                            XOR_ASSIGN385=(Token)match(input,XOR_ASSIGN,FOLLOW_XOR_ASSIGN_in_assignmentExpression10875); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            XOR_ASSIGN385_tree = (CommonTree)adaptor.create(XOR_ASSIGN385);
                            root_0 = (CommonTree)adaptor.becomeRoot(XOR_ASSIGN385_tree, root_0);
                            }

                            }
                            break;
                        case 9 :
                            // ../etc/JamlAttrHash.g:838:17: MOD_ASSIGN
                            {
                            MOD_ASSIGN386=(Token)match(input,MOD_ASSIGN,FOLLOW_MOD_ASSIGN_in_assignmentExpression10894); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            MOD_ASSIGN386_tree = (CommonTree)adaptor.create(MOD_ASSIGN386);
                            root_0 = (CommonTree)adaptor.becomeRoot(MOD_ASSIGN386_tree, root_0);
                            }

                            }
                            break;
                        case 10 :
                            // ../etc/JamlAttrHash.g:839:17: SHIFT_LEFT_ASSIGN
                            {
                            SHIFT_LEFT_ASSIGN387=(Token)match(input,SHIFT_LEFT_ASSIGN,FOLLOW_SHIFT_LEFT_ASSIGN_in_assignmentExpression10913); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            SHIFT_LEFT_ASSIGN387_tree = (CommonTree)adaptor.create(SHIFT_LEFT_ASSIGN387);
                            root_0 = (CommonTree)adaptor.becomeRoot(SHIFT_LEFT_ASSIGN387_tree, root_0);
                            }

                            }
                            break;
                        case 11 :
                            // ../etc/JamlAttrHash.g:840:17: SHIFT_RIGHT_ASSIGN
                            {
                            SHIFT_RIGHT_ASSIGN388=(Token)match(input,SHIFT_RIGHT_ASSIGN,FOLLOW_SHIFT_RIGHT_ASSIGN_in_assignmentExpression10932); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            SHIFT_RIGHT_ASSIGN388_tree = (CommonTree)adaptor.create(SHIFT_RIGHT_ASSIGN388);
                            root_0 = (CommonTree)adaptor.becomeRoot(SHIFT_RIGHT_ASSIGN388_tree, root_0);
                            }

                            }
                            break;
                        case 12 :
                            // ../etc/JamlAttrHash.g:841:17: BIT_SHIFT_RIGHT_ASSIGN
                            {
                            BIT_SHIFT_RIGHT_ASSIGN389=(Token)match(input,BIT_SHIFT_RIGHT_ASSIGN,FOLLOW_BIT_SHIFT_RIGHT_ASSIGN_in_assignmentExpression10951); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            BIT_SHIFT_RIGHT_ASSIGN389_tree = (CommonTree)adaptor.create(BIT_SHIFT_RIGHT_ASSIGN389);
                            root_0 = (CommonTree)adaptor.becomeRoot(BIT_SHIFT_RIGHT_ASSIGN389_tree, root_0);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_assignmentExpression_in_assignmentExpression10973);
                    assignmentExpression390=assignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignmentExpression390.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("assignmentExpression", 94);
            if ( state.backtracking>0 ) { memoize(input, 94, assignmentExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "assignmentExpression"

    public static class conditionalExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalExpression"
    // ../etc/JamlAttrHash.g:846:1: conditionalExpression : logicalOrExpression ( QUESTION assignmentExpression COLON conditionalExpression )? ;
    public final JamlAttrHashParser.conditionalExpression_return conditionalExpression() throws RecognitionException {
    traceIn("conditionalExpression", 95);
        JamlAttrHashParser.conditionalExpression_return retval = new JamlAttrHashParser.conditionalExpression_return();
        retval.start = input.LT(1);
        int conditionalExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token QUESTION392=null;
        Token COLON394=null;
        JamlAttrHashParser.logicalOrExpression_return logicalOrExpression391 = null;

        JamlAttrHashParser.assignmentExpression_return assignmentExpression393 = null;

        JamlAttrHashParser.conditionalExpression_return conditionalExpression395 = null;


        CommonTree QUESTION392_tree=null;
        CommonTree COLON394_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }
            // ../etc/JamlAttrHash.g:847:5: ( logicalOrExpression ( QUESTION assignmentExpression COLON conditionalExpression )? )
            // ../etc/JamlAttrHash.g:847:9: logicalOrExpression ( QUESTION assignmentExpression COLON conditionalExpression )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_logicalOrExpression_in_conditionalExpression10998);
            logicalOrExpression391=logicalOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, logicalOrExpression391.getTree());
            // ../etc/JamlAttrHash.g:847:29: ( QUESTION assignmentExpression COLON conditionalExpression )?
            int alt112=2;
            int LA112_0 = input.LA(1);

            if ( (LA112_0==QUESTION) ) {
                alt112=1;
            }
            switch (alt112) {
                case 1 :
                    // ../etc/JamlAttrHash.g:847:30: QUESTION assignmentExpression COLON conditionalExpression
                    {
                    QUESTION392=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_conditionalExpression11001); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUESTION392_tree = (CommonTree)adaptor.create(QUESTION392);
                    root_0 = (CommonTree)adaptor.becomeRoot(QUESTION392_tree, root_0);
                    }
                    pushFollow(FOLLOW_assignmentExpression_in_conditionalExpression11004);
                    assignmentExpression393=assignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignmentExpression393.getTree());
                    COLON394=(Token)match(input,COLON,FOLLOW_COLON_in_conditionalExpression11006); if (state.failed) return retval;
                    pushFollow(FOLLOW_conditionalExpression_in_conditionalExpression11009);
                    conditionalExpression395=conditionalExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalExpression395.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("conditionalExpression", 95);
            if ( state.backtracking>0 ) { memoize(input, 95, conditionalExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conditionalExpression"

    public static class logicalOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "logicalOrExpression"
    // ../etc/JamlAttrHash.g:850:1: logicalOrExpression : logicalAndExpression ( LOGICAL_OR logicalAndExpression )* ;
    public final JamlAttrHashParser.logicalOrExpression_return logicalOrExpression() throws RecognitionException {
    traceIn("logicalOrExpression", 96);
        JamlAttrHashParser.logicalOrExpression_return retval = new JamlAttrHashParser.logicalOrExpression_return();
        retval.start = input.LT(1);
        int logicalOrExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LOGICAL_OR397=null;
        JamlAttrHashParser.logicalAndExpression_return logicalAndExpression396 = null;

        JamlAttrHashParser.logicalAndExpression_return logicalAndExpression398 = null;


        CommonTree LOGICAL_OR397_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }
            // ../etc/JamlAttrHash.g:851:5: ( logicalAndExpression ( LOGICAL_OR logicalAndExpression )* )
            // ../etc/JamlAttrHash.g:851:9: logicalAndExpression ( LOGICAL_OR logicalAndExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_logicalAndExpression_in_logicalOrExpression11030);
            logicalAndExpression396=logicalAndExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, logicalAndExpression396.getTree());
            // ../etc/JamlAttrHash.g:851:30: ( LOGICAL_OR logicalAndExpression )*
            loop113:
            do {
                int alt113=2;
                int LA113_0 = input.LA(1);

                if ( (LA113_0==LOGICAL_OR) ) {
                    alt113=1;
                }


                switch (alt113) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:851:31: LOGICAL_OR logicalAndExpression
            	    {
            	    LOGICAL_OR397=(Token)match(input,LOGICAL_OR,FOLLOW_LOGICAL_OR_in_logicalOrExpression11033); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    LOGICAL_OR397_tree = (CommonTree)adaptor.create(LOGICAL_OR397);
            	    root_0 = (CommonTree)adaptor.becomeRoot(LOGICAL_OR397_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_logicalAndExpression_in_logicalOrExpression11036);
            	    logicalAndExpression398=logicalAndExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, logicalAndExpression398.getTree());

            	    }
            	    break;

            	default :
            	    break loop113;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("logicalOrExpression", 96);
            if ( state.backtracking>0 ) { memoize(input, 96, logicalOrExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "logicalOrExpression"

    public static class logicalAndExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "logicalAndExpression"
    // ../etc/JamlAttrHash.g:854:1: logicalAndExpression : inclusiveOrExpression ( LOGICAL_AND inclusiveOrExpression )* ;
    public final JamlAttrHashParser.logicalAndExpression_return logicalAndExpression() throws RecognitionException {
    traceIn("logicalAndExpression", 97);
        JamlAttrHashParser.logicalAndExpression_return retval = new JamlAttrHashParser.logicalAndExpression_return();
        retval.start = input.LT(1);
        int logicalAndExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LOGICAL_AND400=null;
        JamlAttrHashParser.inclusiveOrExpression_return inclusiveOrExpression399 = null;

        JamlAttrHashParser.inclusiveOrExpression_return inclusiveOrExpression401 = null;


        CommonTree LOGICAL_AND400_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }
            // ../etc/JamlAttrHash.g:855:5: ( inclusiveOrExpression ( LOGICAL_AND inclusiveOrExpression )* )
            // ../etc/JamlAttrHash.g:855:9: inclusiveOrExpression ( LOGICAL_AND inclusiveOrExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_inclusiveOrExpression_in_logicalAndExpression11057);
            inclusiveOrExpression399=inclusiveOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inclusiveOrExpression399.getTree());
            // ../etc/JamlAttrHash.g:855:31: ( LOGICAL_AND inclusiveOrExpression )*
            loop114:
            do {
                int alt114=2;
                int LA114_0 = input.LA(1);

                if ( (LA114_0==LOGICAL_AND) ) {
                    alt114=1;
                }


                switch (alt114) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:855:32: LOGICAL_AND inclusiveOrExpression
            	    {
            	    LOGICAL_AND400=(Token)match(input,LOGICAL_AND,FOLLOW_LOGICAL_AND_in_logicalAndExpression11060); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    LOGICAL_AND400_tree = (CommonTree)adaptor.create(LOGICAL_AND400);
            	    root_0 = (CommonTree)adaptor.becomeRoot(LOGICAL_AND400_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_inclusiveOrExpression_in_logicalAndExpression11063);
            	    inclusiveOrExpression401=inclusiveOrExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inclusiveOrExpression401.getTree());

            	    }
            	    break;

            	default :
            	    break loop114;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("logicalAndExpression", 97);
            if ( state.backtracking>0 ) { memoize(input, 97, logicalAndExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "logicalAndExpression"

    public static class inclusiveOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inclusiveOrExpression"
    // ../etc/JamlAttrHash.g:858:1: inclusiveOrExpression : exclusiveOrExpression ( OR exclusiveOrExpression )* ;
    public final JamlAttrHashParser.inclusiveOrExpression_return inclusiveOrExpression() throws RecognitionException {
    traceIn("inclusiveOrExpression", 98);
        JamlAttrHashParser.inclusiveOrExpression_return retval = new JamlAttrHashParser.inclusiveOrExpression_return();
        retval.start = input.LT(1);
        int inclusiveOrExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token OR403=null;
        JamlAttrHashParser.exclusiveOrExpression_return exclusiveOrExpression402 = null;

        JamlAttrHashParser.exclusiveOrExpression_return exclusiveOrExpression404 = null;


        CommonTree OR403_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }
            // ../etc/JamlAttrHash.g:859:5: ( exclusiveOrExpression ( OR exclusiveOrExpression )* )
            // ../etc/JamlAttrHash.g:859:9: exclusiveOrExpression ( OR exclusiveOrExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression11084);
            exclusiveOrExpression402=exclusiveOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, exclusiveOrExpression402.getTree());
            // ../etc/JamlAttrHash.g:859:31: ( OR exclusiveOrExpression )*
            loop115:
            do {
                int alt115=2;
                int LA115_0 = input.LA(1);

                if ( (LA115_0==OR) ) {
                    alt115=1;
                }


                switch (alt115) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:859:32: OR exclusiveOrExpression
            	    {
            	    OR403=(Token)match(input,OR,FOLLOW_OR_in_inclusiveOrExpression11087); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    OR403_tree = (CommonTree)adaptor.create(OR403);
            	    root_0 = (CommonTree)adaptor.becomeRoot(OR403_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression11090);
            	    exclusiveOrExpression404=exclusiveOrExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exclusiveOrExpression404.getTree());

            	    }
            	    break;

            	default :
            	    break loop115;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("inclusiveOrExpression", 98);
            if ( state.backtracking>0 ) { memoize(input, 98, inclusiveOrExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inclusiveOrExpression"

    public static class exclusiveOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exclusiveOrExpression"
    // ../etc/JamlAttrHash.g:862:1: exclusiveOrExpression : andExpression ( XOR andExpression )* ;
    public final JamlAttrHashParser.exclusiveOrExpression_return exclusiveOrExpression() throws RecognitionException {
    traceIn("exclusiveOrExpression", 99);
        JamlAttrHashParser.exclusiveOrExpression_return retval = new JamlAttrHashParser.exclusiveOrExpression_return();
        retval.start = input.LT(1);
        int exclusiveOrExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token XOR406=null;
        JamlAttrHashParser.andExpression_return andExpression405 = null;

        JamlAttrHashParser.andExpression_return andExpression407 = null;


        CommonTree XOR406_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }
            // ../etc/JamlAttrHash.g:863:5: ( andExpression ( XOR andExpression )* )
            // ../etc/JamlAttrHash.g:863:9: andExpression ( XOR andExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression11111);
            andExpression405=andExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, andExpression405.getTree());
            // ../etc/JamlAttrHash.g:863:23: ( XOR andExpression )*
            loop116:
            do {
                int alt116=2;
                int LA116_0 = input.LA(1);

                if ( (LA116_0==XOR) ) {
                    alt116=1;
                }


                switch (alt116) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:863:24: XOR andExpression
            	    {
            	    XOR406=(Token)match(input,XOR,FOLLOW_XOR_in_exclusiveOrExpression11114); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    XOR406_tree = (CommonTree)adaptor.create(XOR406);
            	    root_0 = (CommonTree)adaptor.becomeRoot(XOR406_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression11117);
            	    andExpression407=andExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, andExpression407.getTree());

            	    }
            	    break;

            	default :
            	    break loop116;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("exclusiveOrExpression", 99);
            if ( state.backtracking>0 ) { memoize(input, 99, exclusiveOrExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exclusiveOrExpression"

    public static class andExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "andExpression"
    // ../etc/JamlAttrHash.g:866:1: andExpression : equalityExpression ( AND equalityExpression )* ;
    public final JamlAttrHashParser.andExpression_return andExpression() throws RecognitionException {
    traceIn("andExpression", 100);
        JamlAttrHashParser.andExpression_return retval = new JamlAttrHashParser.andExpression_return();
        retval.start = input.LT(1);
        int andExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token AND409=null;
        JamlAttrHashParser.equalityExpression_return equalityExpression408 = null;

        JamlAttrHashParser.equalityExpression_return equalityExpression410 = null;


        CommonTree AND409_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }
            // ../etc/JamlAttrHash.g:867:5: ( equalityExpression ( AND equalityExpression )* )
            // ../etc/JamlAttrHash.g:867:9: equalityExpression ( AND equalityExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_equalityExpression_in_andExpression11138);
            equalityExpression408=equalityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, equalityExpression408.getTree());
            // ../etc/JamlAttrHash.g:867:28: ( AND equalityExpression )*
            loop117:
            do {
                int alt117=2;
                int LA117_0 = input.LA(1);

                if ( (LA117_0==AND) ) {
                    alt117=1;
                }


                switch (alt117) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:867:29: AND equalityExpression
            	    {
            	    AND409=(Token)match(input,AND,FOLLOW_AND_in_andExpression11141); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    AND409_tree = (CommonTree)adaptor.create(AND409);
            	    root_0 = (CommonTree)adaptor.becomeRoot(AND409_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_equalityExpression_in_andExpression11144);
            	    equalityExpression410=equalityExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, equalityExpression410.getTree());

            	    }
            	    break;

            	default :
            	    break loop117;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("andExpression", 100);
            if ( state.backtracking>0 ) { memoize(input, 100, andExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "andExpression"

    public static class equalityExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "equalityExpression"
    // ../etc/JamlAttrHash.g:870:1: equalityExpression : instanceOfExpression ( ( EQUAL | NOT_EQUAL ) instanceOfExpression )* ;
    public final JamlAttrHashParser.equalityExpression_return equalityExpression() throws RecognitionException {
    traceIn("equalityExpression", 101);
        JamlAttrHashParser.equalityExpression_return retval = new JamlAttrHashParser.equalityExpression_return();
        retval.start = input.LT(1);
        int equalityExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token EQUAL412=null;
        Token NOT_EQUAL413=null;
        JamlAttrHashParser.instanceOfExpression_return instanceOfExpression411 = null;

        JamlAttrHashParser.instanceOfExpression_return instanceOfExpression414 = null;


        CommonTree EQUAL412_tree=null;
        CommonTree NOT_EQUAL413_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }
            // ../etc/JamlAttrHash.g:871:5: ( instanceOfExpression ( ( EQUAL | NOT_EQUAL ) instanceOfExpression )* )
            // ../etc/JamlAttrHash.g:871:9: instanceOfExpression ( ( EQUAL | NOT_EQUAL ) instanceOfExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression11165);
            instanceOfExpression411=instanceOfExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, instanceOfExpression411.getTree());
            // ../etc/JamlAttrHash.g:872:9: ( ( EQUAL | NOT_EQUAL ) instanceOfExpression )*
            loop119:
            do {
                int alt119=2;
                int LA119_0 = input.LA(1);

                if ( (LA119_0==EQUAL||LA119_0==NOT_EQUAL) ) {
                    alt119=1;
                }


                switch (alt119) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:872:13: ( EQUAL | NOT_EQUAL ) instanceOfExpression
            	    {
            	    // ../etc/JamlAttrHash.g:872:13: ( EQUAL | NOT_EQUAL )
            	    int alt118=2;
            	    int LA118_0 = input.LA(1);

            	    if ( (LA118_0==EQUAL) ) {
            	        alt118=1;
            	    }
            	    else if ( (LA118_0==NOT_EQUAL) ) {
            	        alt118=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 118, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt118) {
            	        case 1 :
            	            // ../etc/JamlAttrHash.g:872:17: EQUAL
            	            {
            	            EQUAL412=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_equalityExpression11184); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            EQUAL412_tree = (CommonTree)adaptor.create(EQUAL412);
            	            root_0 = (CommonTree)adaptor.becomeRoot(EQUAL412_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // ../etc/JamlAttrHash.g:873:17: NOT_EQUAL
            	            {
            	            NOT_EQUAL413=(Token)match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_equalityExpression11203); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            NOT_EQUAL413_tree = (CommonTree)adaptor.create(NOT_EQUAL413);
            	            root_0 = (CommonTree)adaptor.becomeRoot(NOT_EQUAL413_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression11233);
            	    instanceOfExpression414=instanceOfExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, instanceOfExpression414.getTree());

            	    }
            	    break;

            	default :
            	    break loop119;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("equalityExpression", 101);
            if ( state.backtracking>0 ) { memoize(input, 101, equalityExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "equalityExpression"

    public static class instanceOfExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "instanceOfExpression"
    // ../etc/JamlAttrHash.g:879:1: instanceOfExpression : relationalExpression ( INSTANCEOF type )? ;
    public final JamlAttrHashParser.instanceOfExpression_return instanceOfExpression() throws RecognitionException {
    traceIn("instanceOfExpression", 102);
        JamlAttrHashParser.instanceOfExpression_return retval = new JamlAttrHashParser.instanceOfExpression_return();
        retval.start = input.LT(1);
        int instanceOfExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token INSTANCEOF416=null;
        JamlAttrHashParser.relationalExpression_return relationalExpression415 = null;

        JamlAttrHashParser.type_return type417 = null;


        CommonTree INSTANCEOF416_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }
            // ../etc/JamlAttrHash.g:880:5: ( relationalExpression ( INSTANCEOF type )? )
            // ../etc/JamlAttrHash.g:880:9: relationalExpression ( INSTANCEOF type )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_relationalExpression_in_instanceOfExpression11263);
            relationalExpression415=relationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, relationalExpression415.getTree());
            // ../etc/JamlAttrHash.g:880:30: ( INSTANCEOF type )?
            int alt120=2;
            int LA120_0 = input.LA(1);

            if ( (LA120_0==INSTANCEOF) ) {
                alt120=1;
            }
            switch (alt120) {
                case 1 :
                    // ../etc/JamlAttrHash.g:880:31: INSTANCEOF type
                    {
                    INSTANCEOF416=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_instanceOfExpression11266); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF416_tree = (CommonTree)adaptor.create(INSTANCEOF416);
                    root_0 = (CommonTree)adaptor.becomeRoot(INSTANCEOF416_tree, root_0);
                    }
                    pushFollow(FOLLOW_type_in_instanceOfExpression11269);
                    type417=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type417.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("instanceOfExpression", 102);
            if ( state.backtracking>0 ) { memoize(input, 102, instanceOfExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "instanceOfExpression"

    public static class relationalExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relationalExpression"
    // ../etc/JamlAttrHash.g:883:1: relationalExpression : shiftExpression ( ( LESS_OR_EQUAL | GREATER_OR_EQUAL | LESS_THAN | GREATER_THAN ) shiftExpression )* ;
    public final JamlAttrHashParser.relationalExpression_return relationalExpression() throws RecognitionException {
    traceIn("relationalExpression", 103);
        JamlAttrHashParser.relationalExpression_return retval = new JamlAttrHashParser.relationalExpression_return();
        retval.start = input.LT(1);
        int relationalExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LESS_OR_EQUAL419=null;
        Token GREATER_OR_EQUAL420=null;
        Token LESS_THAN421=null;
        Token GREATER_THAN422=null;
        JamlAttrHashParser.shiftExpression_return shiftExpression418 = null;

        JamlAttrHashParser.shiftExpression_return shiftExpression423 = null;


        CommonTree LESS_OR_EQUAL419_tree=null;
        CommonTree GREATER_OR_EQUAL420_tree=null;
        CommonTree LESS_THAN421_tree=null;
        CommonTree GREATER_THAN422_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }
            // ../etc/JamlAttrHash.g:884:5: ( shiftExpression ( ( LESS_OR_EQUAL | GREATER_OR_EQUAL | LESS_THAN | GREATER_THAN ) shiftExpression )* )
            // ../etc/JamlAttrHash.g:884:9: shiftExpression ( ( LESS_OR_EQUAL | GREATER_OR_EQUAL | LESS_THAN | GREATER_THAN ) shiftExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_shiftExpression_in_relationalExpression11290);
            shiftExpression418=shiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, shiftExpression418.getTree());
            // ../etc/JamlAttrHash.g:885:9: ( ( LESS_OR_EQUAL | GREATER_OR_EQUAL | LESS_THAN | GREATER_THAN ) shiftExpression )*
            loop122:
            do {
                int alt122=2;
                int LA122_0 = input.LA(1);

                if ( ((LA122_0>=GREATER_OR_EQUAL && LA122_0<=GREATER_THAN)||(LA122_0>=LESS_OR_EQUAL && LA122_0<=LESS_THAN)) ) {
                    alt122=1;
                }


                switch (alt122) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:885:13: ( LESS_OR_EQUAL | GREATER_OR_EQUAL | LESS_THAN | GREATER_THAN ) shiftExpression
            	    {
            	    // ../etc/JamlAttrHash.g:885:13: ( LESS_OR_EQUAL | GREATER_OR_EQUAL | LESS_THAN | GREATER_THAN )
            	    int alt121=4;
            	    switch ( input.LA(1) ) {
            	    case LESS_OR_EQUAL:
            	        {
            	        alt121=1;
            	        }
            	        break;
            	    case GREATER_OR_EQUAL:
            	        {
            	        alt121=2;
            	        }
            	        break;
            	    case LESS_THAN:
            	        {
            	        alt121=3;
            	        }
            	        break;
            	    case GREATER_THAN:
            	        {
            	        alt121=4;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 121, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt121) {
            	        case 1 :
            	            // ../etc/JamlAttrHash.g:885:17: LESS_OR_EQUAL
            	            {
            	            LESS_OR_EQUAL419=(Token)match(input,LESS_OR_EQUAL,FOLLOW_LESS_OR_EQUAL_in_relationalExpression11309); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            LESS_OR_EQUAL419_tree = (CommonTree)adaptor.create(LESS_OR_EQUAL419);
            	            root_0 = (CommonTree)adaptor.becomeRoot(LESS_OR_EQUAL419_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // ../etc/JamlAttrHash.g:886:17: GREATER_OR_EQUAL
            	            {
            	            GREATER_OR_EQUAL420=(Token)match(input,GREATER_OR_EQUAL,FOLLOW_GREATER_OR_EQUAL_in_relationalExpression11328); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            GREATER_OR_EQUAL420_tree = (CommonTree)adaptor.create(GREATER_OR_EQUAL420);
            	            root_0 = (CommonTree)adaptor.becomeRoot(GREATER_OR_EQUAL420_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // ../etc/JamlAttrHash.g:887:17: LESS_THAN
            	            {
            	            LESS_THAN421=(Token)match(input,LESS_THAN,FOLLOW_LESS_THAN_in_relationalExpression11347); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            LESS_THAN421_tree = (CommonTree)adaptor.create(LESS_THAN421);
            	            root_0 = (CommonTree)adaptor.becomeRoot(LESS_THAN421_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 4 :
            	            // ../etc/JamlAttrHash.g:888:17: GREATER_THAN
            	            {
            	            GREATER_THAN422=(Token)match(input,GREATER_THAN,FOLLOW_GREATER_THAN_in_relationalExpression11366); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            GREATER_THAN422_tree = (CommonTree)adaptor.create(GREATER_THAN422);
            	            root_0 = (CommonTree)adaptor.becomeRoot(GREATER_THAN422_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_shiftExpression_in_relationalExpression11395);
            	    shiftExpression423=shiftExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, shiftExpression423.getTree());

            	    }
            	    break;

            	default :
            	    break loop122;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("relationalExpression", 103);
            if ( state.backtracking>0 ) { memoize(input, 103, relationalExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "relationalExpression"

    public static class shiftExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "shiftExpression"
    // ../etc/JamlAttrHash.g:894:1: shiftExpression : additiveExpression ( ( BIT_SHIFT_RIGHT | SHIFT_RIGHT | SHIFT_LEFT ) additiveExpression )* ;
    public final JamlAttrHashParser.shiftExpression_return shiftExpression() throws RecognitionException {
    traceIn("shiftExpression", 104);
        JamlAttrHashParser.shiftExpression_return retval = new JamlAttrHashParser.shiftExpression_return();
        retval.start = input.LT(1);
        int shiftExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token BIT_SHIFT_RIGHT425=null;
        Token SHIFT_RIGHT426=null;
        Token SHIFT_LEFT427=null;
        JamlAttrHashParser.additiveExpression_return additiveExpression424 = null;

        JamlAttrHashParser.additiveExpression_return additiveExpression428 = null;


        CommonTree BIT_SHIFT_RIGHT425_tree=null;
        CommonTree SHIFT_RIGHT426_tree=null;
        CommonTree SHIFT_LEFT427_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }
            // ../etc/JamlAttrHash.g:895:5: ( additiveExpression ( ( BIT_SHIFT_RIGHT | SHIFT_RIGHT | SHIFT_LEFT ) additiveExpression )* )
            // ../etc/JamlAttrHash.g:895:9: additiveExpression ( ( BIT_SHIFT_RIGHT | SHIFT_RIGHT | SHIFT_LEFT ) additiveExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_additiveExpression_in_shiftExpression11429);
            additiveExpression424=additiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, additiveExpression424.getTree());
            // ../etc/JamlAttrHash.g:896:9: ( ( BIT_SHIFT_RIGHT | SHIFT_RIGHT | SHIFT_LEFT ) additiveExpression )*
            loop124:
            do {
                int alt124=2;
                int LA124_0 = input.LA(1);

                if ( (LA124_0==BIT_SHIFT_RIGHT||LA124_0==SHIFT_LEFT||LA124_0==SHIFT_RIGHT) ) {
                    alt124=1;
                }


                switch (alt124) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:896:13: ( BIT_SHIFT_RIGHT | SHIFT_RIGHT | SHIFT_LEFT ) additiveExpression
            	    {
            	    // ../etc/JamlAttrHash.g:896:13: ( BIT_SHIFT_RIGHT | SHIFT_RIGHT | SHIFT_LEFT )
            	    int alt123=3;
            	    switch ( input.LA(1) ) {
            	    case BIT_SHIFT_RIGHT:
            	        {
            	        alt123=1;
            	        }
            	        break;
            	    case SHIFT_RIGHT:
            	        {
            	        alt123=2;
            	        }
            	        break;
            	    case SHIFT_LEFT:
            	        {
            	        alt123=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 123, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt123) {
            	        case 1 :
            	            // ../etc/JamlAttrHash.g:896:17: BIT_SHIFT_RIGHT
            	            {
            	            BIT_SHIFT_RIGHT425=(Token)match(input,BIT_SHIFT_RIGHT,FOLLOW_BIT_SHIFT_RIGHT_in_shiftExpression11447); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BIT_SHIFT_RIGHT425_tree = (CommonTree)adaptor.create(BIT_SHIFT_RIGHT425);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BIT_SHIFT_RIGHT425_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // ../etc/JamlAttrHash.g:897:17: SHIFT_RIGHT
            	            {
            	            SHIFT_RIGHT426=(Token)match(input,SHIFT_RIGHT,FOLLOW_SHIFT_RIGHT_in_shiftExpression11466); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            SHIFT_RIGHT426_tree = (CommonTree)adaptor.create(SHIFT_RIGHT426);
            	            root_0 = (CommonTree)adaptor.becomeRoot(SHIFT_RIGHT426_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // ../etc/JamlAttrHash.g:898:17: SHIFT_LEFT
            	            {
            	            SHIFT_LEFT427=(Token)match(input,SHIFT_LEFT,FOLLOW_SHIFT_LEFT_in_shiftExpression11485); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            SHIFT_LEFT427_tree = (CommonTree)adaptor.create(SHIFT_LEFT427);
            	            root_0 = (CommonTree)adaptor.becomeRoot(SHIFT_LEFT427_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_additiveExpression_in_shiftExpression11514);
            	    additiveExpression428=additiveExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, additiveExpression428.getTree());

            	    }
            	    break;

            	default :
            	    break loop124;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("shiftExpression", 104);
            if ( state.backtracking>0 ) { memoize(input, 104, shiftExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "shiftExpression"

    public static class additiveExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "additiveExpression"
    // ../etc/JamlAttrHash.g:904:1: additiveExpression : multiplicativeExpression ( ( PLUS | MINUS ) multiplicativeExpression )* ;
    public final JamlAttrHashParser.additiveExpression_return additiveExpression() throws RecognitionException {
    traceIn("additiveExpression", 105);
        JamlAttrHashParser.additiveExpression_return retval = new JamlAttrHashParser.additiveExpression_return();
        retval.start = input.LT(1);
        int additiveExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token PLUS430=null;
        Token MINUS431=null;
        JamlAttrHashParser.multiplicativeExpression_return multiplicativeExpression429 = null;

        JamlAttrHashParser.multiplicativeExpression_return multiplicativeExpression432 = null;


        CommonTree PLUS430_tree=null;
        CommonTree MINUS431_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }
            // ../etc/JamlAttrHash.g:905:5: ( multiplicativeExpression ( ( PLUS | MINUS ) multiplicativeExpression )* )
            // ../etc/JamlAttrHash.g:905:9: multiplicativeExpression ( ( PLUS | MINUS ) multiplicativeExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression11544);
            multiplicativeExpression429=multiplicativeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplicativeExpression429.getTree());
            // ../etc/JamlAttrHash.g:906:9: ( ( PLUS | MINUS ) multiplicativeExpression )*
            loop126:
            do {
                int alt126=2;
                int LA126_0 = input.LA(1);

                if ( (LA126_0==MINUS||LA126_0==PLUS) ) {
                    alt126=1;
                }


                switch (alt126) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:906:13: ( PLUS | MINUS ) multiplicativeExpression
            	    {
            	    // ../etc/JamlAttrHash.g:906:13: ( PLUS | MINUS )
            	    int alt125=2;
            	    int LA125_0 = input.LA(1);

            	    if ( (LA125_0==PLUS) ) {
            	        alt125=1;
            	    }
            	    else if ( (LA125_0==MINUS) ) {
            	        alt125=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 125, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt125) {
            	        case 1 :
            	            // ../etc/JamlAttrHash.g:906:17: PLUS
            	            {
            	            PLUS430=(Token)match(input,PLUS,FOLLOW_PLUS_in_additiveExpression11562); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUS430_tree = (CommonTree)adaptor.create(PLUS430);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUS430_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // ../etc/JamlAttrHash.g:907:17: MINUS
            	            {
            	            MINUS431=(Token)match(input,MINUS,FOLLOW_MINUS_in_additiveExpression11581); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUS431_tree = (CommonTree)adaptor.create(MINUS431);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUS431_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression11610);
            	    multiplicativeExpression432=multiplicativeExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplicativeExpression432.getTree());

            	    }
            	    break;

            	default :
            	    break loop126;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("additiveExpression", 105);
            if ( state.backtracking>0 ) { memoize(input, 105, additiveExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "additiveExpression"

    public static class multiplicativeExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiplicativeExpression"
    // ../etc/JamlAttrHash.g:913:1: multiplicativeExpression : unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )* ;
    public final JamlAttrHashParser.multiplicativeExpression_return multiplicativeExpression() throws RecognitionException {
    traceIn("multiplicativeExpression", 106);
        JamlAttrHashParser.multiplicativeExpression_return retval = new JamlAttrHashParser.multiplicativeExpression_return();
        retval.start = input.LT(1);
        int multiplicativeExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token STAR434=null;
        Token DIV435=null;
        Token MOD436=null;
        JamlAttrHashParser.unaryExpression_return unaryExpression433 = null;

        JamlAttrHashParser.unaryExpression_return unaryExpression437 = null;


        CommonTree STAR434_tree=null;
        CommonTree DIV435_tree=null;
        CommonTree MOD436_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }
            // ../etc/JamlAttrHash.g:914:5: ( unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )* )
            // ../etc/JamlAttrHash.g:914:9: unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression11640);
            unaryExpression433=unaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression433.getTree());
            // ../etc/JamlAttrHash.g:915:9: ( ( STAR | DIV | MOD ) unaryExpression )*
            loop128:
            do {
                int alt128=2;
                int LA128_0 = input.LA(1);

                if ( (LA128_0==DIV||LA128_0==MOD||LA128_0==STAR) ) {
                    alt128=1;
                }


                switch (alt128) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:915:13: ( STAR | DIV | MOD ) unaryExpression
            	    {
            	    // ../etc/JamlAttrHash.g:915:13: ( STAR | DIV | MOD )
            	    int alt127=3;
            	    switch ( input.LA(1) ) {
            	    case STAR:
            	        {
            	        alt127=1;
            	        }
            	        break;
            	    case DIV:
            	        {
            	        alt127=2;
            	        }
            	        break;
            	    case MOD:
            	        {
            	        alt127=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 127, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt127) {
            	        case 1 :
            	            // ../etc/JamlAttrHash.g:915:17: STAR
            	            {
            	            STAR434=(Token)match(input,STAR,FOLLOW_STAR_in_multiplicativeExpression11659); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            STAR434_tree = (CommonTree)adaptor.create(STAR434);
            	            root_0 = (CommonTree)adaptor.becomeRoot(STAR434_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // ../etc/JamlAttrHash.g:916:17: DIV
            	            {
            	            DIV435=(Token)match(input,DIV,FOLLOW_DIV_in_multiplicativeExpression11678); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DIV435_tree = (CommonTree)adaptor.create(DIV435);
            	            root_0 = (CommonTree)adaptor.becomeRoot(DIV435_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // ../etc/JamlAttrHash.g:917:17: MOD
            	            {
            	            MOD436=(Token)match(input,MOD,FOLLOW_MOD_in_multiplicativeExpression11697); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MOD436_tree = (CommonTree)adaptor.create(MOD436);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MOD436_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression11726);
            	    unaryExpression437=unaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression437.getTree());

            	    }
            	    break;

            	default :
            	    break loop128;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("multiplicativeExpression", 106);
            if ( state.backtracking>0 ) { memoize(input, 106, multiplicativeExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiplicativeExpression"

    public static class unaryExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpression"
    // ../etc/JamlAttrHash.g:923:1: unaryExpression : ( PLUS unaryExpression -> ^( UNARY_PLUS[$PLUS, \"UNARY_PLUS\"] unaryExpression ) | MINUS unaryExpression -> ^( UNARY_MINUS[$MINUS, \"UNARY_MINUS\"] unaryExpression ) | INC postfixedExpression -> ^( PRE_INC[$INC, \"PRE_INC\"] postfixedExpression ) | DEC postfixedExpression -> ^( PRE_DEC[$DEC, \"PRE_DEC\"] postfixedExpression ) | unaryExpressionNotPlusMinus );
    public final JamlAttrHashParser.unaryExpression_return unaryExpression() throws RecognitionException {
    traceIn("unaryExpression", 107);
        JamlAttrHashParser.unaryExpression_return retval = new JamlAttrHashParser.unaryExpression_return();
        retval.start = input.LT(1);
        int unaryExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token PLUS438=null;
        Token MINUS440=null;
        Token INC442=null;
        Token DEC444=null;
        JamlAttrHashParser.unaryExpression_return unaryExpression439 = null;

        JamlAttrHashParser.unaryExpression_return unaryExpression441 = null;

        JamlAttrHashParser.postfixedExpression_return postfixedExpression443 = null;

        JamlAttrHashParser.postfixedExpression_return postfixedExpression445 = null;

        JamlAttrHashParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus446 = null;


        CommonTree PLUS438_tree=null;
        CommonTree MINUS440_tree=null;
        CommonTree INC442_tree=null;
        CommonTree DEC444_tree=null;
        RewriteRuleTokenStream stream_DEC=new RewriteRuleTokenStream(adaptor,"token DEC");
        RewriteRuleTokenStream stream_INC=new RewriteRuleTokenStream(adaptor,"token INC");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_postfixedExpression=new RewriteRuleSubtreeStream(adaptor,"rule postfixedExpression");
        RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }
            // ../etc/JamlAttrHash.g:924:5: ( PLUS unaryExpression -> ^( UNARY_PLUS[$PLUS, \"UNARY_PLUS\"] unaryExpression ) | MINUS unaryExpression -> ^( UNARY_MINUS[$MINUS, \"UNARY_MINUS\"] unaryExpression ) | INC postfixedExpression -> ^( PRE_INC[$INC, \"PRE_INC\"] postfixedExpression ) | DEC postfixedExpression -> ^( PRE_DEC[$DEC, \"PRE_DEC\"] postfixedExpression ) | unaryExpressionNotPlusMinus )
            int alt129=5;
            switch ( input.LA(1) ) {
            case PLUS:
                {
                alt129=1;
                }
                break;
            case MINUS:
                {
                alt129=2;
                }
                break;
            case INC:
                {
                alt129=3;
                }
                break;
            case DEC:
                {
                alt129=4;
                }
                break;
            case LESS_THAN:
            case LOGICAL_NOT:
            case LPAREN:
            case NOT:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case SHORT:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
            case IDENT:
            case HEX_LITERAL:
            case OCTAL_LITERAL:
            case DECIMAL_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
                {
                alt129=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 129, 0, input);

                throw nvae;
            }

            switch (alt129) {
                case 1 :
                    // ../etc/JamlAttrHash.g:924:9: PLUS unaryExpression
                    {
                    PLUS438=(Token)match(input,PLUS,FOLLOW_PLUS_in_unaryExpression11760); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(PLUS438);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression11762);
                    unaryExpression439=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression439.getTree());


                    // AST REWRITE
                    // elements: unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 924:37: -> ^( UNARY_PLUS[$PLUS, \"UNARY_PLUS\"] unaryExpression )
                    {
                        // ../etc/JamlAttrHash.g:924:41: ^( UNARY_PLUS[$PLUS, \"UNARY_PLUS\"] unaryExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UNARY_PLUS, PLUS438, "UNARY_PLUS"), root_1);

                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:925:9: MINUS unaryExpression
                    {
                    MINUS440=(Token)match(input,MINUS,FOLLOW_MINUS_in_unaryExpression11789); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS440);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression11791);
                    unaryExpression441=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression441.getTree());


                    // AST REWRITE
                    // elements: unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 925:37: -> ^( UNARY_MINUS[$MINUS, \"UNARY_MINUS\"] unaryExpression )
                    {
                        // ../etc/JamlAttrHash.g:925:41: ^( UNARY_MINUS[$MINUS, \"UNARY_MINUS\"] unaryExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UNARY_MINUS, MINUS440, "UNARY_MINUS"), root_1);

                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // ../etc/JamlAttrHash.g:926:9: INC postfixedExpression
                    {
                    INC442=(Token)match(input,INC,FOLLOW_INC_in_unaryExpression11817); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INC.add(INC442);

                    pushFollow(FOLLOW_postfixedExpression_in_unaryExpression11819);
                    postfixedExpression443=postfixedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_postfixedExpression.add(postfixedExpression443.getTree());


                    // AST REWRITE
                    // elements: postfixedExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 926:37: -> ^( PRE_INC[$INC, \"PRE_INC\"] postfixedExpression )
                    {
                        // ../etc/JamlAttrHash.g:926:41: ^( PRE_INC[$INC, \"PRE_INC\"] postfixedExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PRE_INC, INC442, "PRE_INC"), root_1);

                        adaptor.addChild(root_1, stream_postfixedExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // ../etc/JamlAttrHash.g:927:9: DEC postfixedExpression
                    {
                    DEC444=(Token)match(input,DEC,FOLLOW_DEC_in_unaryExpression11843); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DEC.add(DEC444);

                    pushFollow(FOLLOW_postfixedExpression_in_unaryExpression11845);
                    postfixedExpression445=postfixedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_postfixedExpression.add(postfixedExpression445.getTree());


                    // AST REWRITE
                    // elements: postfixedExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 927:37: -> ^( PRE_DEC[$DEC, \"PRE_DEC\"] postfixedExpression )
                    {
                        // ../etc/JamlAttrHash.g:927:41: ^( PRE_DEC[$DEC, \"PRE_DEC\"] postfixedExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PRE_DEC, DEC444, "PRE_DEC"), root_1);

                        adaptor.addChild(root_1, stream_postfixedExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // ../etc/JamlAttrHash.g:928:9: unaryExpressionNotPlusMinus
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression11869);
                    unaryExpressionNotPlusMinus446=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpressionNotPlusMinus446.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("unaryExpression", 107);
            if ( state.backtracking>0 ) { memoize(input, 107, unaryExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unaryExpression"

    public static class unaryExpressionNotPlusMinus_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpressionNotPlusMinus"
    // ../etc/JamlAttrHash.g:931:1: unaryExpressionNotPlusMinus : ( NOT unaryExpression -> ^( NOT unaryExpression ) | LOGICAL_NOT unaryExpression -> ^( LOGICAL_NOT unaryExpression ) | LPAREN type RPAREN unaryExpression -> ^( CAST_EXPR[$LPAREN, \"CAST_EXPR\"] type unaryExpression ) | postfixedExpression );
    public final JamlAttrHashParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus() throws RecognitionException {
    traceIn("unaryExpressionNotPlusMinus", 108);
        JamlAttrHashParser.unaryExpressionNotPlusMinus_return retval = new JamlAttrHashParser.unaryExpressionNotPlusMinus_return();
        retval.start = input.LT(1);
        int unaryExpressionNotPlusMinus_StartIndex = input.index();
        CommonTree root_0 = null;

        Token NOT447=null;
        Token LOGICAL_NOT449=null;
        Token LPAREN451=null;
        Token RPAREN453=null;
        JamlAttrHashParser.unaryExpression_return unaryExpression448 = null;

        JamlAttrHashParser.unaryExpression_return unaryExpression450 = null;

        JamlAttrHashParser.type_return type452 = null;

        JamlAttrHashParser.unaryExpression_return unaryExpression454 = null;

        JamlAttrHashParser.postfixedExpression_return postfixedExpression455 = null;


        CommonTree NOT447_tree=null;
        CommonTree LOGICAL_NOT449_tree=null;
        CommonTree LPAREN451_tree=null;
        CommonTree RPAREN453_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LOGICAL_NOT=new RewriteRuleTokenStream(adaptor,"token LOGICAL_NOT");
        RewriteRuleTokenStream stream_NOT=new RewriteRuleTokenStream(adaptor,"token NOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }
            // ../etc/JamlAttrHash.g:932:5: ( NOT unaryExpression -> ^( NOT unaryExpression ) | LOGICAL_NOT unaryExpression -> ^( LOGICAL_NOT unaryExpression ) | LPAREN type RPAREN unaryExpression -> ^( CAST_EXPR[$LPAREN, \"CAST_EXPR\"] type unaryExpression ) | postfixedExpression )
            int alt130=4;
            alt130 = dfa130.predict(input);
            switch (alt130) {
                case 1 :
                    // ../etc/JamlAttrHash.g:932:9: NOT unaryExpression
                    {
                    NOT447=(Token)match(input,NOT,FOLLOW_NOT_in_unaryExpressionNotPlusMinus11888); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NOT.add(NOT447);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus11890);
                    unaryExpression448=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression448.getTree());


                    // AST REWRITE
                    // elements: NOT, unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 932:57: -> ^( NOT unaryExpression )
                    {
                        // ../etc/JamlAttrHash.g:932:61: ^( NOT unaryExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_NOT.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:933:9: LOGICAL_NOT unaryExpression
                    {
                    LOGICAL_NOT449=(Token)match(input,LOGICAL_NOT,FOLLOW_LOGICAL_NOT_in_unaryExpressionNotPlusMinus11937); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LOGICAL_NOT.add(LOGICAL_NOT449);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus11939);
                    unaryExpression450=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression450.getTree());


                    // AST REWRITE
                    // elements: LOGICAL_NOT, unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 933:57: -> ^( LOGICAL_NOT unaryExpression )
                    {
                        // ../etc/JamlAttrHash.g:933:61: ^( LOGICAL_NOT unaryExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_LOGICAL_NOT.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // ../etc/JamlAttrHash.g:934:9: LPAREN type RPAREN unaryExpression
                    {
                    LPAREN451=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_unaryExpressionNotPlusMinus11978); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN451);

                    pushFollow(FOLLOW_type_in_unaryExpressionNotPlusMinus11980);
                    type452=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type452.getTree());
                    RPAREN453=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_unaryExpressionNotPlusMinus11982); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN453);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus11984);
                    unaryExpression454=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression454.getTree());


                    // AST REWRITE
                    // elements: unaryExpression, type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 934:57: -> ^( CAST_EXPR[$LPAREN, \"CAST_EXPR\"] type unaryExpression )
                    {
                        // ../etc/JamlAttrHash.g:934:61: ^( CAST_EXPR[$LPAREN, \"CAST_EXPR\"] type unaryExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CAST_EXPR, LPAREN451, "CAST_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_type.nextTree());
                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // ../etc/JamlAttrHash.g:935:9: postfixedExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_postfixedExpression_in_unaryExpressionNotPlusMinus12019);
                    postfixedExpression455=postfixedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, postfixedExpression455.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("unaryExpressionNotPlusMinus", 108);
            if ( state.backtracking>0 ) { memoize(input, 108, unaryExpressionNotPlusMinus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unaryExpressionNotPlusMinus"

    public static class postfixedExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "postfixedExpression"
    // ../etc/JamlAttrHash.g:938:1: postfixedExpression : ( primaryExpression -> primaryExpression ) (outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) ) | LBRACK expression RBRACK -> ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression ) )* ( INC -> ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression) | DEC -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression) )? ;
    public final JamlAttrHashParser.postfixedExpression_return postfixedExpression() throws RecognitionException {
    traceIn("postfixedExpression", 109);
        JamlAttrHashParser.postfixedExpression_return retval = new JamlAttrHashParser.postfixedExpression_return();
        retval.start = input.LT(1);
        int postfixedExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token outerDot=null;
        Token Super=null;
        Token innerDot=null;
        Token IDENT458=null;
        Token THIS460=null;
        Token SUPER462=null;
        Token IDENT463=null;
        Token LBRACK466=null;
        Token RBRACK468=null;
        Token INC469=null;
        Token DEC470=null;
        JamlAttrHashParser.primaryExpression_return primaryExpression456 = null;

        JamlAttrHashParser.genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified457 = null;

        JamlAttrHashParser.arguments_return arguments459 = null;

        JamlAttrHashParser.arguments_return arguments461 = null;

        JamlAttrHashParser.arguments_return arguments464 = null;

        JamlAttrHashParser.innerNewExpression_return innerNewExpression465 = null;

        JamlAttrHashParser.expression_return expression467 = null;


        CommonTree outerDot_tree=null;
        CommonTree Super_tree=null;
        CommonTree innerDot_tree=null;
        CommonTree IDENT458_tree=null;
        CommonTree THIS460_tree=null;
        CommonTree SUPER462_tree=null;
        CommonTree IDENT463_tree=null;
        CommonTree LBRACK466_tree=null;
        CommonTree RBRACK468_tree=null;
        CommonTree INC469_tree=null;
        CommonTree DEC470_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_INC=new RewriteRuleTokenStream(adaptor,"token INC");
        RewriteRuleTokenStream stream_DEC=new RewriteRuleTokenStream(adaptor,"token DEC");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_SUPER=new RewriteRuleTokenStream(adaptor,"token SUPER");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_THIS=new RewriteRuleTokenStream(adaptor,"token THIS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_primaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule primaryExpression");
        RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
        RewriteRuleSubtreeStream stream_innerNewExpression=new RewriteRuleSubtreeStream(adaptor,"rule innerNewExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }
            // ../etc/JamlAttrHash.g:940:5: ( ( primaryExpression -> primaryExpression ) (outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) ) | LBRACK expression RBRACK -> ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression ) )* ( INC -> ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression) | DEC -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression) )? )
            // ../etc/JamlAttrHash.g:940:9: ( primaryExpression -> primaryExpression ) (outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) ) | LBRACK expression RBRACK -> ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression ) )* ( INC -> ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression) | DEC -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression) )?
            {
            // ../etc/JamlAttrHash.g:940:9: ( primaryExpression -> primaryExpression )
            // ../etc/JamlAttrHash.g:940:13: primaryExpression
            {
            pushFollow(FOLLOW_primaryExpression_in_postfixedExpression12055);
            primaryExpression456=primaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_primaryExpression.add(primaryExpression456.getTree());


            // AST REWRITE
            // elements: primaryExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 940:53: -> primaryExpression
            {
                adaptor.addChild(root_0, stream_primaryExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            // ../etc/JamlAttrHash.g:943:9: (outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) ) | LBRACK expression RBRACK -> ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression ) )*
            loop135:
            do {
                int alt135=3;
                int LA135_0 = input.LA(1);

                if ( (LA135_0==DOT) ) {
                    alt135=1;
                }
                else if ( (LA135_0==LBRACK) ) {
                    alt135=2;
                }


                switch (alt135) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:943:13: outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) )
            	    {
            	    outerDot=(Token)match(input,DOT,FOLLOW_DOT_in_postfixedExpression12117); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(outerDot);

            	    // ../etc/JamlAttrHash.g:944:13: ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) )
            	    int alt134=5;
            	    switch ( input.LA(1) ) {
            	    case LESS_THAN:
            	    case IDENT:
            	        {
            	        alt134=1;
            	        }
            	        break;
            	    case THIS:
            	        {
            	        alt134=2;
            	        }
            	        break;
            	    case SUPER:
            	        {
            	        int LA134_3 = input.LA(2);

            	        if ( (LA134_3==DOT) ) {
            	            alt134=4;
            	        }
            	        else if ( (LA134_3==LPAREN) ) {
            	            alt134=3;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 134, 3, input);

            	            throw nvae;
            	        }
            	        }
            	        break;
            	    case NEW:
            	        {
            	        alt134=5;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 134, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt134) {
            	        case 1 :
            	            // ../etc/JamlAttrHash.g:944:17: ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )?
            	            {
            	            // ../etc/JamlAttrHash.g:944:17: ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) )
            	            // ../etc/JamlAttrHash.g:944:21: ( genericTypeArgumentListSimplified )? IDENT
            	            {
            	            // ../etc/JamlAttrHash.g:944:21: ( genericTypeArgumentListSimplified )?
            	            int alt131=2;
            	            int LA131_0 = input.LA(1);

            	            if ( (LA131_0==LESS_THAN) ) {
            	                alt131=1;
            	            }
            	            switch (alt131) {
            	                case 1 :
            	                    // ../etc/JamlAttrHash.g:0:0: genericTypeArgumentListSimplified
            	                    {
            	                    pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_postfixedExpression12167);
            	                    genericTypeArgumentListSimplified457=genericTypeArgumentListSimplified();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_genericTypeArgumentListSimplified.add(genericTypeArgumentListSimplified457.getTree());

            	                    }
            	                    break;

            	            }

            	            IDENT458=(Token)match(input,IDENT,FOLLOW_IDENT_in_postfixedExpression12249); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IDENT.add(IDENT458);



            	            // AST REWRITE
            	            // elements: IDENT, postfixedExpression, DOT
            	            // token labels: 
            	            // rule labels: retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {
            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (CommonTree)adaptor.nil();
            	            // 946:53: -> ^( DOT $postfixedExpression IDENT )
            	            {
            	                // ../etc/JamlAttrHash.g:946:57: ^( DOT $postfixedExpression IDENT )
            	                {
            	                CommonTree root_1 = (CommonTree)adaptor.nil();
            	                root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());
            	                adaptor.addChild(root_1, stream_IDENT.nextNode());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }

            	            retval.tree = root_0;}
            	            }

            	            // ../etc/JamlAttrHash.g:948:17: ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )?
            	            int alt132=2;
            	            int LA132_0 = input.LA(1);

            	            if ( (LA132_0==LPAREN) ) {
            	                alt132=1;
            	            }
            	            switch (alt132) {
            	                case 1 :
            	                    // ../etc/JamlAttrHash.g:948:21: arguments
            	                    {
            	                    pushFollow(FOLLOW_arguments_in_postfixedExpression12328);
            	                    arguments459=arguments();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_arguments.add(arguments459.getTree());


            	                    // AST REWRITE
            	                    // elements: postfixedExpression, genericTypeArgumentListSimplified, arguments
            	                    // token labels: 
            	                    // rule labels: retval
            	                    // token list labels: 
            	                    // rule list labels: 
            	                    // wildcard labels: 
            	                    if ( state.backtracking==0 ) {
            	                    retval.tree = root_0;
            	                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	                    root_0 = (CommonTree)adaptor.nil();
            	                    // 948:53: -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments )
            	                    {
            	                        // ../etc/JamlAttrHash.g:948:57: ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments )
            	                        {
            	                        CommonTree root_1 = (CommonTree)adaptor.nil();
            	                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_CALL, "METHOD_CALL"), root_1);

            	                        adaptor.addChild(root_1, stream_retval.nextTree());
            	                        // ../etc/JamlAttrHash.g:948:92: ( genericTypeArgumentListSimplified )?
            	                        if ( stream_genericTypeArgumentListSimplified.hasNext() ) {
            	                            adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());

            	                        }
            	                        stream_genericTypeArgumentListSimplified.reset();
            	                        adaptor.addChild(root_1, stream_arguments.nextTree());

            	                        adaptor.addChild(root_0, root_1);
            	                        }

            	                    }

            	                    retval.tree = root_0;}
            	                    }
            	                    break;

            	            }


            	            }
            	            break;
            	        case 2 :
            	            // ../etc/JamlAttrHash.g:950:17: THIS
            	            {
            	            THIS460=(Token)match(input,THIS,FOLLOW_THIS_in_postfixedExpression12402); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_THIS.add(THIS460);



            	            // AST REWRITE
            	            // elements: THIS, DOT, postfixedExpression
            	            // token labels: 
            	            // rule labels: retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {
            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (CommonTree)adaptor.nil();
            	            // 950:53: -> ^( DOT $postfixedExpression THIS )
            	            {
            	                // ../etc/JamlAttrHash.g:950:57: ^( DOT $postfixedExpression THIS )
            	                {
            	                CommonTree root_1 = (CommonTree)adaptor.nil();
            	                root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());
            	                adaptor.addChild(root_1, stream_THIS.nextNode());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }

            	            retval.tree = root_0;}
            	            }
            	            break;
            	        case 3 :
            	            // ../etc/JamlAttrHash.g:951:17: Super= SUPER arguments
            	            {
            	            Super=(Token)match(input,SUPER,FOLLOW_SUPER_in_postfixedExpression12465); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_SUPER.add(Super);

            	            pushFollow(FOLLOW_arguments_in_postfixedExpression12467);
            	            arguments461=arguments();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_arguments.add(arguments461.getTree());


            	            // AST REWRITE
            	            // elements: arguments, postfixedExpression
            	            // token labels: 
            	            // rule labels: retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {
            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (CommonTree)adaptor.nil();
            	            // 951:57: -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments )
            	            {
            	                // ../etc/JamlAttrHash.g:951:61: ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments )
            	                {
            	                CommonTree root_1 = (CommonTree)adaptor.nil();
            	                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUPER_CONSTRUCTOR_CALL, Super, "SUPER_CONSTRUCTOR_CALL"), root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());
            	                adaptor.addChild(root_1, stream_arguments.nextTree());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }

            	            retval.tree = root_0;}
            	            }
            	            break;
            	        case 4 :
            	            // ../etc/JamlAttrHash.g:952:17: ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )?
            	            {
            	            // ../etc/JamlAttrHash.g:952:17: ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) )
            	            // ../etc/JamlAttrHash.g:952:21: SUPER innerDot= DOT IDENT
            	            {
            	            SUPER462=(Token)match(input,SUPER,FOLLOW_SUPER_in_postfixedExpression12520); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_SUPER.add(SUPER462);

            	            innerDot=(Token)match(input,DOT,FOLLOW_DOT_in_postfixedExpression12524); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_DOT.add(innerDot);

            	            IDENT463=(Token)match(input,IDENT,FOLLOW_IDENT_in_postfixedExpression12526); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IDENT.add(IDENT463);



            	            // AST REWRITE
            	            // elements: outerDot, innerDot, SUPER, postfixedExpression, IDENT
            	            // token labels: outerDot, innerDot
            	            // rule labels: retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {
            	            retval.tree = root_0;
            	            RewriteRuleTokenStream stream_outerDot=new RewriteRuleTokenStream(adaptor,"token outerDot",outerDot);
            	            RewriteRuleTokenStream stream_innerDot=new RewriteRuleTokenStream(adaptor,"token innerDot",innerDot);
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (CommonTree)adaptor.nil();
            	            // 952:53: -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT )
            	            {
            	                // ../etc/JamlAttrHash.g:952:57: ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT )
            	                {
            	                CommonTree root_1 = (CommonTree)adaptor.nil();
            	                root_1 = (CommonTree)adaptor.becomeRoot(stream_innerDot.nextNode(), root_1);

            	                // ../etc/JamlAttrHash.g:952:69: ^( $outerDot $postfixedExpression SUPER )
            	                {
            	                CommonTree root_2 = (CommonTree)adaptor.nil();
            	                root_2 = (CommonTree)adaptor.becomeRoot(stream_outerDot.nextNode(), root_2);

            	                adaptor.addChild(root_2, stream_retval.nextTree());
            	                adaptor.addChild(root_2, stream_SUPER.nextNode());

            	                adaptor.addChild(root_1, root_2);
            	                }
            	                adaptor.addChild(root_1, stream_IDENT.nextNode());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }

            	            retval.tree = root_0;}
            	            }

            	            // ../etc/JamlAttrHash.g:954:17: ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )?
            	            int alt133=2;
            	            int LA133_0 = input.LA(1);

            	            if ( (LA133_0==LPAREN) ) {
            	                alt133=1;
            	            }
            	            switch (alt133) {
            	                case 1 :
            	                    // ../etc/JamlAttrHash.g:954:21: arguments
            	                    {
            	                    pushFollow(FOLLOW_arguments_in_postfixedExpression12593);
            	                    arguments464=arguments();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_arguments.add(arguments464.getTree());


            	                    // AST REWRITE
            	                    // elements: postfixedExpression, arguments
            	                    // token labels: 
            	                    // rule labels: retval
            	                    // token list labels: 
            	                    // rule list labels: 
            	                    // wildcard labels: 
            	                    if ( state.backtracking==0 ) {
            	                    retval.tree = root_0;
            	                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	                    root_0 = (CommonTree)adaptor.nil();
            	                    // 954:53: -> ^( METHOD_CALL $postfixedExpression arguments )
            	                    {
            	                        // ../etc/JamlAttrHash.g:954:57: ^( METHOD_CALL $postfixedExpression arguments )
            	                        {
            	                        CommonTree root_1 = (CommonTree)adaptor.nil();
            	                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_CALL, "METHOD_CALL"), root_1);

            	                        adaptor.addChild(root_1, stream_retval.nextTree());
            	                        adaptor.addChild(root_1, stream_arguments.nextTree());

            	                        adaptor.addChild(root_0, root_1);
            	                        }

            	                    }

            	                    retval.tree = root_0;}
            	                    }
            	                    break;

            	            }


            	            }
            	            break;
            	        case 5 :
            	            // ../etc/JamlAttrHash.g:956:17: innerNewExpression
            	            {
            	            pushFollow(FOLLOW_innerNewExpression_in_postfixedExpression12664);
            	            innerNewExpression465=innerNewExpression();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_innerNewExpression.add(innerNewExpression465.getTree());


            	            // AST REWRITE
            	            // elements: innerNewExpression, postfixedExpression, DOT
            	            // token labels: 
            	            // rule labels: retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {
            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (CommonTree)adaptor.nil();
            	            // 956:53: -> ^( DOT $postfixedExpression innerNewExpression )
            	            {
            	                // ../etc/JamlAttrHash.g:956:57: ^( DOT $postfixedExpression innerNewExpression )
            	                {
            	                CommonTree root_1 = (CommonTree)adaptor.nil();
            	                root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());
            	                adaptor.addChild(root_1, stream_innerNewExpression.nextTree());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }

            	            retval.tree = root_0;}
            	            }
            	            break;

            	    }


            	    }
            	    break;
            	case 2 :
            	    // ../etc/JamlAttrHash.g:958:13: LBRACK expression RBRACK
            	    {
            	    LBRACK466=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_postfixedExpression12721); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK466);

            	    pushFollow(FOLLOW_expression_in_postfixedExpression12723);
            	    expression467=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression467.getTree());
            	    RBRACK468=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_postfixedExpression12725); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK468);



            	    // AST REWRITE
            	    // elements: expression, postfixedExpression
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (CommonTree)adaptor.nil();
            	    // 958:53: -> ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression )
            	    {
            	        // ../etc/JamlAttrHash.g:958:57: ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression )
            	        {
            	        CommonTree root_1 = (CommonTree)adaptor.nil();
            	        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_ELEMENT_ACCESS, "ARRAY_ELEMENT_ACCESS"), root_1);

            	        adaptor.addChild(root_1, stream_retval.nextTree());
            	        adaptor.addChild(root_1, stream_expression.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }

            	    retval.tree = root_0;}
            	    }
            	    break;

            	default :
            	    break loop135;
                }
            } while (true);

            // ../etc/JamlAttrHash.g:961:9: ( INC -> ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression) | DEC -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression) )?
            int alt136=3;
            int LA136_0 = input.LA(1);

            if ( (LA136_0==INC) ) {
                alt136=1;
            }
            else if ( (LA136_0==DEC) ) {
                alt136=2;
            }
            switch (alt136) {
                case 1 :
                    // ../etc/JamlAttrHash.g:961:13: INC
                    {
                    INC469=(Token)match(input,INC,FOLLOW_INC_in_postfixedExpression12786); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INC.add(INC469);



                    // AST REWRITE
                    // elements: postfixedExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 961:17: -> ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression)
                    {
                        // ../etc/JamlAttrHash.g:961:20: ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(POST_INC, INC469, "POST_INC"), root_1);

                        adaptor.addChild(root_1, stream_retval.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:962:13: DEC
                    {
                    DEC470=(Token)match(input,DEC,FOLLOW_DEC_in_postfixedExpression12810); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DEC.add(DEC470);



                    // AST REWRITE
                    // elements: postfixedExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 962:17: -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression)
                    {
                        // ../etc/JamlAttrHash.g:962:20: ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(POST_DEC, DEC470, "POST_DEC"), root_1);

                        adaptor.addChild(root_1, stream_retval.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("postfixedExpression", 109);
            if ( state.backtracking>0 ) { memoize(input, 109, postfixedExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "postfixedExpression"

    public static class primaryExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primaryExpression"
    // ../etc/JamlAttrHash.g:966:1: primaryExpression : ( parenthesizedExpression | literal | newExpression | qualifiedIdentExpression | genericTypeArgumentListSimplified ( SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) ) | IDENT arguments -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments ) | THIS arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) ) | ( THIS -> THIS ) ( arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments ) )? | SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] arguments ) | ( SUPER DOT IDENT ) ( arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) ) | ( primitiveType -> primitiveType ) ( arrayDeclarator -> ^( arrayDeclarator $primaryExpression) )* DOT CLASS -> ^( DOT $primaryExpression CLASS ) | VOID DOT CLASS -> ^( DOT VOID CLASS ) );
    public final JamlAttrHashParser.primaryExpression_return primaryExpression() throws RecognitionException {
    traceIn("primaryExpression", 110);
        JamlAttrHashParser.primaryExpression_return retval = new JamlAttrHashParser.primaryExpression_return();
        retval.start = input.LT(1);
        int primaryExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SUPER476=null;
        Token DOT478=null;
        Token IDENT479=null;
        Token IDENT481=null;
        Token THIS483=null;
        Token THIS485=null;
        Token SUPER487=null;
        Token SUPER489=null;
        Token DOT490=null;
        Token IDENT491=null;
        Token DOT495=null;
        Token CLASS496=null;
        Token VOID497=null;
        Token DOT498=null;
        Token CLASS499=null;
        JamlAttrHashParser.parenthesizedExpression_return parenthesizedExpression471 = null;

        JamlAttrHashParser.literal_return literal472 = null;

        JamlAttrHashParser.newExpression_return newExpression473 = null;

        JamlAttrHashParser.qualifiedIdentExpression_return qualifiedIdentExpression474 = null;

        JamlAttrHashParser.genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified475 = null;

        JamlAttrHashParser.arguments_return arguments477 = null;

        JamlAttrHashParser.arguments_return arguments480 = null;

        JamlAttrHashParser.arguments_return arguments482 = null;

        JamlAttrHashParser.arguments_return arguments484 = null;

        JamlAttrHashParser.arguments_return arguments486 = null;

        JamlAttrHashParser.arguments_return arguments488 = null;

        JamlAttrHashParser.arguments_return arguments492 = null;

        JamlAttrHashParser.primitiveType_return primitiveType493 = null;

        JamlAttrHashParser.arrayDeclarator_return arrayDeclarator494 = null;


        CommonTree SUPER476_tree=null;
        CommonTree DOT478_tree=null;
        CommonTree IDENT479_tree=null;
        CommonTree IDENT481_tree=null;
        CommonTree THIS483_tree=null;
        CommonTree THIS485_tree=null;
        CommonTree SUPER487_tree=null;
        CommonTree SUPER489_tree=null;
        CommonTree DOT490_tree=null;
        CommonTree IDENT491_tree=null;
        CommonTree DOT495_tree=null;
        CommonTree CLASS496_tree=null;
        CommonTree VOID497_tree=null;
        CommonTree DOT498_tree=null;
        CommonTree CLASS499_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
        RewriteRuleTokenStream stream_VOID=new RewriteRuleTokenStream(adaptor,"token VOID");
        RewriteRuleTokenStream stream_SUPER=new RewriteRuleTokenStream(adaptor,"token SUPER");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_THIS=new RewriteRuleTokenStream(adaptor,"token THIS");
        RewriteRuleSubtreeStream stream_arrayDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclarator");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
        RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }
            // ../etc/JamlAttrHash.g:967:5: ( parenthesizedExpression | literal | newExpression | qualifiedIdentExpression | genericTypeArgumentListSimplified ( SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) ) | IDENT arguments -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments ) | THIS arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) ) | ( THIS -> THIS ) ( arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments ) )? | SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] arguments ) | ( SUPER DOT IDENT ) ( arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) ) | ( primitiveType -> primitiveType ) ( arrayDeclarator -> ^( arrayDeclarator $primaryExpression) )* DOT CLASS -> ^( DOT $primaryExpression CLASS ) | VOID DOT CLASS -> ^( DOT VOID CLASS ) )
            int alt142=10;
            alt142 = dfa142.predict(input);
            switch (alt142) {
                case 1 :
                    // ../etc/JamlAttrHash.g:967:9: parenthesizedExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_parenthesizedExpression_in_primaryExpression12858);
                    parenthesizedExpression471=parenthesizedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parenthesizedExpression471.getTree());

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:968:9: literal
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_literal_in_primaryExpression12868);
                    literal472=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal472.getTree());

                    }
                    break;
                case 3 :
                    // ../etc/JamlAttrHash.g:969:9: newExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_newExpression_in_primaryExpression12878);
                    newExpression473=newExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, newExpression473.getTree());

                    }
                    break;
                case 4 :
                    // ../etc/JamlAttrHash.g:970:9: qualifiedIdentExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_qualifiedIdentExpression_in_primaryExpression12888);
                    qualifiedIdentExpression474=qualifiedIdentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedIdentExpression474.getTree());

                    }
                    break;
                case 5 :
                    // ../etc/JamlAttrHash.g:971:9: genericTypeArgumentListSimplified ( SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) ) | IDENT arguments -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments ) | THIS arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) )
                    {
                    pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_primaryExpression12898);
                    genericTypeArgumentListSimplified475=genericTypeArgumentListSimplified();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_genericTypeArgumentListSimplified.add(genericTypeArgumentListSimplified475.getTree());
                    // ../etc/JamlAttrHash.g:972:9: ( SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) ) | IDENT arguments -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments ) | THIS arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) )
                    int alt138=3;
                    switch ( input.LA(1) ) {
                    case SUPER:
                        {
                        alt138=1;
                        }
                        break;
                    case IDENT:
                        {
                        alt138=2;
                        }
                        break;
                    case THIS:
                        {
                        alt138=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 138, 0, input);

                        throw nvae;
                    }

                    switch (alt138) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:972:13: SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) )
                            {
                            SUPER476=(Token)match(input,SUPER,FOLLOW_SUPER_in_primaryExpression12913); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SUPER.add(SUPER476);

                            // ../etc/JamlAttrHash.g:973:13: ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) )
                            int alt137=2;
                            int LA137_0 = input.LA(1);

                            if ( (LA137_0==LPAREN) ) {
                                alt137=1;
                            }
                            else if ( (LA137_0==DOT) ) {
                                alt137=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 137, 0, input);

                                throw nvae;
                            }
                            switch (alt137) {
                                case 1 :
                                    // ../etc/JamlAttrHash.g:973:17: arguments
                                    {
                                    pushFollow(FOLLOW_arguments_in_primaryExpression12931);
                                    arguments477=arguments();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_arguments.add(arguments477.getTree());


                                    // AST REWRITE
                                    // elements: genericTypeArgumentListSimplified, arguments
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 973:57: -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments )
                                    {
                                        // ../etc/JamlAttrHash.g:973:61: ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUPER_CONSTRUCTOR_CALL, SUPER476, "SUPER_CONSTRUCTOR_CALL"), root_1);

                                        adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());
                                        adaptor.addChild(root_1, stream_arguments.nextTree());

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;
                                case 2 :
                                    // ../etc/JamlAttrHash.g:974:17: DOT IDENT arguments
                                    {
                                    DOT478=(Token)match(input,DOT,FOLLOW_DOT_in_primaryExpression12991); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_DOT.add(DOT478);

                                    IDENT479=(Token)match(input,IDENT,FOLLOW_IDENT_in_primaryExpression12993); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT479);

                                    pushFollow(FOLLOW_arguments_in_primaryExpression12995);
                                    arguments480=arguments();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_arguments.add(arguments480.getTree());


                                    // AST REWRITE
                                    // elements: IDENT, genericTypeArgumentListSimplified, arguments, DOT, SUPER
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 974:57: -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments )
                                    {
                                        // ../etc/JamlAttrHash.g:974:61: ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_CALL, "METHOD_CALL"), root_1);

                                        // ../etc/JamlAttrHash.g:974:75: ^( DOT SUPER IDENT )
                                        {
                                        CommonTree root_2 = (CommonTree)adaptor.nil();
                                        root_2 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_2);

                                        adaptor.addChild(root_2, stream_SUPER.nextNode());
                                        adaptor.addChild(root_2, stream_IDENT.nextNode());

                                        adaptor.addChild(root_1, root_2);
                                        }
                                        adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());
                                        adaptor.addChild(root_1, stream_arguments.nextTree());

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // ../etc/JamlAttrHash.g:976:13: IDENT arguments
                            {
                            IDENT481=(Token)match(input,IDENT,FOLLOW_IDENT_in_primaryExpression13062); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(IDENT481);

                            pushFollow(FOLLOW_arguments_in_primaryExpression13064);
                            arguments482=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arguments.add(arguments482.getTree());


                            // AST REWRITE
                            // elements: genericTypeArgumentListSimplified, arguments, IDENT
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 976:57: -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments )
                            {
                                // ../etc/JamlAttrHash.g:976:61: ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_CALL, "METHOD_CALL"), root_1);

                                adaptor.addChild(root_1, stream_IDENT.nextNode());
                                adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());
                                adaptor.addChild(root_1, stream_arguments.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            // ../etc/JamlAttrHash.g:977:13: THIS arguments
                            {
                            THIS483=(Token)match(input,THIS,FOLLOW_THIS_in_primaryExpression13119); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THIS.add(THIS483);

                            pushFollow(FOLLOW_arguments_in_primaryExpression13121);
                            arguments484=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arguments.add(arguments484.getTree());


                            // AST REWRITE
                            // elements: genericTypeArgumentListSimplified, arguments
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 977:57: -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments )
                            {
                                // ../etc/JamlAttrHash.g:977:61: ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(THIS_CONSTRUCTOR_CALL, THIS483, "THIS_CONSTRUCTOR_CALL"), root_1);

                                adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());
                                adaptor.addChild(root_1, stream_arguments.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 6 :
                    // ../etc/JamlAttrHash.g:979:9: ( THIS -> THIS ) ( arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments ) )?
                    {
                    // ../etc/JamlAttrHash.g:979:9: ( THIS -> THIS )
                    // ../etc/JamlAttrHash.g:979:13: THIS
                    {
                    THIS485=(Token)match(input,THIS,FOLLOW_THIS_in_primaryExpression13186); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_THIS.add(THIS485);



                    // AST REWRITE
                    // elements: THIS
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 979:57: -> THIS
                    {
                        adaptor.addChild(root_0, stream_THIS.nextNode());

                    }

                    retval.tree = root_0;}
                    }

                    // ../etc/JamlAttrHash.g:981:9: ( arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments ) )?
                    int alt139=2;
                    int LA139_0 = input.LA(1);

                    if ( (LA139_0==LPAREN) ) {
                        alt139=1;
                    }
                    switch (alt139) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:981:13: arguments
                            {
                            pushFollow(FOLLOW_arguments_in_primaryExpression13254);
                            arguments486=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arguments.add(arguments486.getTree());


                            // AST REWRITE
                            // elements: arguments
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 981:57: -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments )
                            {
                                // ../etc/JamlAttrHash.g:981:61: ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(THIS_CONSTRUCTOR_CALL, THIS485, "THIS_CONSTRUCTOR_CALL"), root_1);

                                adaptor.addChild(root_1, stream_arguments.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 7 :
                    // ../etc/JamlAttrHash.g:983:9: SUPER arguments
                    {
                    SUPER487=(Token)match(input,SUPER,FOLLOW_SUPER_in_primaryExpression13319); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SUPER.add(SUPER487);

                    pushFollow(FOLLOW_arguments_in_primaryExpression13321);
                    arguments488=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arguments.add(arguments488.getTree());


                    // AST REWRITE
                    // elements: arguments
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 983:57: -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] arguments )
                    {
                        // ../etc/JamlAttrHash.g:983:61: ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] arguments )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUPER_CONSTRUCTOR_CALL, SUPER487, "SUPER_CONSTRUCTOR_CALL"), root_1);

                        adaptor.addChild(root_1, stream_arguments.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 8 :
                    // ../etc/JamlAttrHash.g:984:9: ( SUPER DOT IDENT ) ( arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) )
                    {
                    // ../etc/JamlAttrHash.g:984:9: ( SUPER DOT IDENT )
                    // ../etc/JamlAttrHash.g:984:13: SUPER DOT IDENT
                    {
                    SUPER489=(Token)match(input,SUPER,FOLLOW_SUPER_in_primaryExpression13377); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SUPER.add(SUPER489);

                    DOT490=(Token)match(input,DOT,FOLLOW_DOT_in_primaryExpression13379); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT490);

                    IDENT491=(Token)match(input,IDENT,FOLLOW_IDENT_in_primaryExpression13381); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT491);


                    }

                    // ../etc/JamlAttrHash.g:986:9: ( arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) )
                    int alt140=2;
                    int LA140_0 = input.LA(1);

                    if ( (LA140_0==LPAREN) ) {
                        alt140=1;
                    }
                    else if ( (LA140_0==EOF||(LA140_0>=AND && LA140_0<=ASSIGN)||(LA140_0>=BIT_SHIFT_RIGHT && LA140_0<=DOT)||(LA140_0>=EQUAL && LA140_0<=LBRACK)||(LA140_0>=LESS_OR_EQUAL && LA140_0<=LOGICAL_AND)||LA140_0==LOGICAL_OR||(LA140_0>=MINUS && LA140_0<=MOD_ASSIGN)||(LA140_0>=NOT_EQUAL && LA140_0<=XOR_ASSIGN)||LA140_0==INSTANCEOF) ) {
                        alt140=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 140, 0, input);

                        throw nvae;
                    }
                    switch (alt140) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:986:13: arguments
                            {
                            pushFollow(FOLLOW_arguments_in_primaryExpression13405);
                            arguments492=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arguments.add(arguments492.getTree());


                            // AST REWRITE
                            // elements: DOT, arguments, IDENT, SUPER
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 986:57: -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments )
                            {
                                // ../etc/JamlAttrHash.g:986:61: ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_CALL, "METHOD_CALL"), root_1);

                                // ../etc/JamlAttrHash.g:986:75: ^( DOT SUPER IDENT )
                                {
                                CommonTree root_2 = (CommonTree)adaptor.nil();
                                root_2 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_2);

                                adaptor.addChild(root_2, stream_SUPER.nextNode());
                                adaptor.addChild(root_2, stream_IDENT.nextNode());

                                adaptor.addChild(root_1, root_2);
                                }
                                adaptor.addChild(root_1, stream_arguments.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // ../etc/JamlAttrHash.g:987:57: 
                            {

                            // AST REWRITE
                            // elements: DOT, IDENT, SUPER
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 987:57: -> ^( DOT SUPER IDENT )
                            {
                                // ../etc/JamlAttrHash.g:987:61: ^( DOT SUPER IDENT )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_SUPER.nextNode());
                                adaptor.addChild(root_1, stream_IDENT.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 9 :
                    // ../etc/JamlAttrHash.g:989:9: ( primitiveType -> primitiveType ) ( arrayDeclarator -> ^( arrayDeclarator $primaryExpression) )* DOT CLASS
                    {
                    // ../etc/JamlAttrHash.g:989:9: ( primitiveType -> primitiveType )
                    // ../etc/JamlAttrHash.g:989:13: primitiveType
                    {
                    pushFollow(FOLLOW_primitiveType_in_primaryExpression13547);
                    primitiveType493=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitiveType.add(primitiveType493.getTree());


                    // AST REWRITE
                    // elements: primitiveType
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 989:57: -> primitiveType
                    {
                        adaptor.addChild(root_0, stream_primitiveType.nextTree());

                    }

                    retval.tree = root_0;}
                    }

                    // ../etc/JamlAttrHash.g:991:9: ( arrayDeclarator -> ^( arrayDeclarator $primaryExpression) )*
                    loop141:
                    do {
                        int alt141=2;
                        int LA141_0 = input.LA(1);

                        if ( (LA141_0==LBRACK) ) {
                            alt141=1;
                        }


                        switch (alt141) {
                    	case 1 :
                    	    // ../etc/JamlAttrHash.g:991:13: arrayDeclarator
                    	    {
                    	    pushFollow(FOLLOW_arrayDeclarator_in_primaryExpression13606);
                    	    arrayDeclarator494=arrayDeclarator();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_arrayDeclarator.add(arrayDeclarator494.getTree());


                    	    // AST REWRITE
                    	    // elements: arrayDeclarator, primaryExpression
                    	    // token labels: 
                    	    // rule labels: retval
                    	    // token list labels: 
                    	    // rule list labels: 
                    	    // wildcard labels: 
                    	    if ( state.backtracking==0 ) {
                    	    retval.tree = root_0;
                    	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    	    root_0 = (CommonTree)adaptor.nil();
                    	    // 991:57: -> ^( arrayDeclarator $primaryExpression)
                    	    {
                    	        // ../etc/JamlAttrHash.g:991:61: ^( arrayDeclarator $primaryExpression)
                    	        {
                    	        CommonTree root_1 = (CommonTree)adaptor.nil();
                    	        root_1 = (CommonTree)adaptor.becomeRoot(stream_arrayDeclarator.nextNode(), root_1);

                    	        adaptor.addChild(root_1, stream_retval.nextTree());

                    	        adaptor.addChild(root_0, root_1);
                    	        }

                    	    }

                    	    retval.tree = root_0;}
                    	    }
                    	    break;

                    	default :
                    	    break loop141;
                        }
                    } while (true);

                    DOT495=(Token)match(input,DOT,FOLLOW_DOT_in_primaryExpression13669); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT495);

                    CLASS496=(Token)match(input,CLASS,FOLLOW_CLASS_in_primaryExpression13671); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLASS.add(CLASS496);



                    // AST REWRITE
                    // elements: DOT, primaryExpression, CLASS
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 993:57: -> ^( DOT $primaryExpression CLASS )
                    {
                        // ../etc/JamlAttrHash.g:993:61: ^( DOT $primaryExpression CLASS )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_retval.nextTree());
                        adaptor.addChild(root_1, stream_CLASS.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 10 :
                    // ../etc/JamlAttrHash.g:994:9: VOID DOT CLASS
                    {
                    VOID497=(Token)match(input,VOID,FOLLOW_VOID_in_primaryExpression13731); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VOID.add(VOID497);

                    DOT498=(Token)match(input,DOT,FOLLOW_DOT_in_primaryExpression13733); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT498);

                    CLASS499=(Token)match(input,CLASS,FOLLOW_CLASS_in_primaryExpression13735); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLASS.add(CLASS499);



                    // AST REWRITE
                    // elements: CLASS, DOT, VOID
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 994:57: -> ^( DOT VOID CLASS )
                    {
                        // ../etc/JamlAttrHash.g:994:61: ^( DOT VOID CLASS )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_VOID.nextNode());
                        adaptor.addChild(root_1, stream_CLASS.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("primaryExpression", 110);
            if ( state.backtracking>0 ) { memoize(input, 110, primaryExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "primaryExpression"

    public static class qualifiedIdentExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedIdentExpression"
    // ../etc/JamlAttrHash.g:997:1: qualifiedIdentExpression : ( qualifiedIdentifier -> qualifiedIdentifier ) ( ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) ) | arguments -> ^( METHOD_CALL qualifiedIdentifier arguments ) | outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) ) )? ;
    public final JamlAttrHashParser.qualifiedIdentExpression_return qualifiedIdentExpression() throws RecognitionException {
    traceIn("qualifiedIdentExpression", 111);
        JamlAttrHashParser.qualifiedIdentExpression_return retval = new JamlAttrHashParser.qualifiedIdentExpression_return();
        retval.start = input.LT(1);
        int qualifiedIdentExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token outerDot=null;
        Token Super=null;
        Token innerDot=null;
        Token DOT502=null;
        Token CLASS503=null;
        Token CLASS505=null;
        Token SUPER508=null;
        Token IDENT509=null;
        Token IDENT511=null;
        Token THIS513=null;
        JamlAttrHashParser.qualifiedIdentifier_return qualifiedIdentifier500 = null;

        JamlAttrHashParser.arrayDeclarator_return arrayDeclarator501 = null;

        JamlAttrHashParser.arguments_return arguments504 = null;

        JamlAttrHashParser.genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified506 = null;

        JamlAttrHashParser.arguments_return arguments507 = null;

        JamlAttrHashParser.arguments_return arguments510 = null;

        JamlAttrHashParser.arguments_return arguments512 = null;

        JamlAttrHashParser.arguments_return arguments514 = null;

        JamlAttrHashParser.innerNewExpression_return innerNewExpression515 = null;


        CommonTree outerDot_tree=null;
        CommonTree Super_tree=null;
        CommonTree innerDot_tree=null;
        CommonTree DOT502_tree=null;
        CommonTree CLASS503_tree=null;
        CommonTree CLASS505_tree=null;
        CommonTree SUPER508_tree=null;
        CommonTree IDENT509_tree=null;
        CommonTree IDENT511_tree=null;
        CommonTree THIS513_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
        RewriteRuleTokenStream stream_SUPER=new RewriteRuleTokenStream(adaptor,"token SUPER");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_THIS=new RewriteRuleTokenStream(adaptor,"token THIS");
        RewriteRuleSubtreeStream stream_arrayDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclarator");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_qualifiedIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedIdentifier");
        RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
        RewriteRuleSubtreeStream stream_innerNewExpression=new RewriteRuleSubtreeStream(adaptor,"rule innerNewExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }
            // ../etc/JamlAttrHash.g:999:5: ( ( qualifiedIdentifier -> qualifiedIdentifier ) ( ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) ) | arguments -> ^( METHOD_CALL qualifiedIdentifier arguments ) | outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) ) )? )
            // ../etc/JamlAttrHash.g:999:9: ( qualifiedIdentifier -> qualifiedIdentifier ) ( ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) ) | arguments -> ^( METHOD_CALL qualifiedIdentifier arguments ) | outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) ) )?
            {
            // ../etc/JamlAttrHash.g:999:9: ( qualifiedIdentifier -> qualifiedIdentifier )
            // ../etc/JamlAttrHash.g:999:13: qualifiedIdentifier
            {
            pushFollow(FOLLOW_qualifiedIdentifier_in_qualifiedIdentExpression13815);
            qualifiedIdentifier500=qualifiedIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifiedIdentifier.add(qualifiedIdentifier500.getTree());


            // AST REWRITE
            // elements: qualifiedIdentifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 999:61: -> qualifiedIdentifier
            {
                adaptor.addChild(root_0, stream_qualifiedIdentifier.nextTree());

            }

            retval.tree = root_0;}
            }

            // ../etc/JamlAttrHash.g:1002:9: ( ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) ) | arguments -> ^( METHOD_CALL qualifiedIdentifier arguments ) | outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) ) )?
            int alt146=4;
            alt146 = dfa146.predict(input);
            switch (alt146) {
                case 1 :
                    // ../etc/JamlAttrHash.g:1002:13: ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) )
                    {
                    // ../etc/JamlAttrHash.g:1002:13: ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+
                    int cnt143=0;
                    loop143:
                    do {
                        int alt143=2;
                        int LA143_0 = input.LA(1);

                        if ( (LA143_0==LBRACK) ) {
                            alt143=1;
                        }


                        switch (alt143) {
                    	case 1 :
                    	    // ../etc/JamlAttrHash.g:1002:17: arrayDeclarator
                    	    {
                    	    pushFollow(FOLLOW_arrayDeclarator_in_qualifiedIdentExpression13885);
                    	    arrayDeclarator501=arrayDeclarator();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_arrayDeclarator.add(arrayDeclarator501.getTree());


                    	    // AST REWRITE
                    	    // elements: qualifiedIdentExpression, arrayDeclarator
                    	    // token labels: 
                    	    // rule labels: retval
                    	    // token list labels: 
                    	    // rule list labels: 
                    	    // wildcard labels: 
                    	    if ( state.backtracking==0 ) {
                    	    retval.tree = root_0;
                    	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    	    root_0 = (CommonTree)adaptor.nil();
                    	    // 1002:57: -> ^( arrayDeclarator $qualifiedIdentExpression)
                    	    {
                    	        // ../etc/JamlAttrHash.g:1002:61: ^( arrayDeclarator $qualifiedIdentExpression)
                    	        {
                    	        CommonTree root_1 = (CommonTree)adaptor.nil();
                    	        root_1 = (CommonTree)adaptor.becomeRoot(stream_arrayDeclarator.nextNode(), root_1);

                    	        adaptor.addChild(root_1, stream_retval.nextTree());

                    	        adaptor.addChild(root_0, root_1);
                    	        }

                    	    }

                    	    retval.tree = root_0;}
                    	    }
                    	    break;

                    	default :
                    	    if ( cnt143 >= 1 ) break loop143;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(143, input);
                                throw eee;
                        }
                        cnt143++;
                    } while (true);

                    // ../etc/JamlAttrHash.g:1004:13: ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) )
                    // ../etc/JamlAttrHash.g:1004:17: DOT CLASS
                    {
                    DOT502=(Token)match(input,DOT,FOLLOW_DOT_in_qualifiedIdentExpression13953); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT502);

                    CLASS503=(Token)match(input,CLASS,FOLLOW_CLASS_in_qualifiedIdentExpression13955); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLASS.add(CLASS503);



                    // AST REWRITE
                    // elements: qualifiedIdentExpression, DOT, CLASS
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1004:57: -> ^( DOT $qualifiedIdentExpression CLASS )
                    {
                        // ../etc/JamlAttrHash.g:1004:61: ^( DOT $qualifiedIdentExpression CLASS )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_retval.nextTree());
                        adaptor.addChild(root_1, stream_CLASS.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:1006:13: arguments
                    {
                    pushFollow(FOLLOW_arguments_in_qualifiedIdentExpression14025);
                    arguments504=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arguments.add(arguments504.getTree());


                    // AST REWRITE
                    // elements: qualifiedIdentifier, arguments
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1006:57: -> ^( METHOD_CALL qualifiedIdentifier arguments )
                    {
                        // ../etc/JamlAttrHash.g:1006:61: ^( METHOD_CALL qualifiedIdentifier arguments )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_CALL, "METHOD_CALL"), root_1);

                        adaptor.addChild(root_1, stream_qualifiedIdentifier.nextTree());
                        adaptor.addChild(root_1, stream_arguments.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // ../etc/JamlAttrHash.g:1007:13: outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) )
                    {
                    outerDot=(Token)match(input,DOT,FOLLOW_DOT_in_qualifiedIdentExpression14086); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(outerDot);

                    // ../etc/JamlAttrHash.g:1008:13: ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) )
                    int alt145=5;
                    switch ( input.LA(1) ) {
                    case CLASS:
                        {
                        alt145=1;
                        }
                        break;
                    case LESS_THAN:
                        {
                        alt145=2;
                        }
                        break;
                    case THIS:
                        {
                        alt145=3;
                        }
                        break;
                    case SUPER:
                        {
                        alt145=4;
                        }
                        break;
                    case NEW:
                        {
                        alt145=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 145, 0, input);

                        throw nvae;
                    }

                    switch (alt145) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:1008:17: CLASS
                            {
                            CLASS505=(Token)match(input,CLASS,FOLLOW_CLASS_in_qualifiedIdentExpression14104); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_CLASS.add(CLASS505);



                            // AST REWRITE
                            // elements: DOT, CLASS, qualifiedIdentifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1008:57: -> ^( DOT qualifiedIdentifier CLASS )
                            {
                                // ../etc/JamlAttrHash.g:1008:61: ^( DOT qualifiedIdentifier CLASS )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_qualifiedIdentifier.nextTree());
                                adaptor.addChild(root_1, stream_CLASS.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // ../etc/JamlAttrHash.g:1009:17: genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) )
                            {
                            pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_qualifiedIdentExpression14167);
                            genericTypeArgumentListSimplified506=genericTypeArgumentListSimplified();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_genericTypeArgumentListSimplified.add(genericTypeArgumentListSimplified506.getTree());
                            // ../etc/JamlAttrHash.g:1010:17: (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) )
                            int alt144=3;
                            int LA144_0 = input.LA(1);

                            if ( (LA144_0==SUPER) ) {
                                int LA144_1 = input.LA(2);

                                if ( (LA144_1==DOT) ) {
                                    alt144=2;
                                }
                                else if ( (LA144_1==LPAREN) ) {
                                    alt144=1;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 144, 1, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA144_0==IDENT) ) {
                                alt144=3;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 144, 0, input);

                                throw nvae;
                            }
                            switch (alt144) {
                                case 1 :
                                    // ../etc/JamlAttrHash.g:1010:21: Super= SUPER arguments
                                    {
                                    Super=(Token)match(input,SUPER,FOLLOW_SUPER_in_qualifiedIdentExpression14192); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_SUPER.add(Super);

                                    pushFollow(FOLLOW_arguments_in_qualifiedIdentExpression14194);
                                    arguments507=arguments();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_arguments.add(arguments507.getTree());


                                    // AST REWRITE
                                    // elements: genericTypeArgumentListSimplified, qualifiedIdentifier, arguments
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 1010:57: -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments )
                                    {
                                        // ../etc/JamlAttrHash.g:1010:61: ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUPER_CONSTRUCTOR_CALL, Super, "SUPER_CONSTRUCTOR_CALL"), root_1);

                                        adaptor.addChild(root_1, stream_qualifiedIdentifier.nextTree());
                                        adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());
                                        adaptor.addChild(root_1, stream_arguments.nextTree());

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;
                                case 2 :
                                    // ../etc/JamlAttrHash.g:1011:21: SUPER innerDot= DOT IDENT arguments
                                    {
                                    SUPER508=(Token)match(input,SUPER,FOLLOW_SUPER_in_qualifiedIdentExpression14244); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_SUPER.add(SUPER508);

                                    innerDot=(Token)match(input,DOT,FOLLOW_DOT_in_qualifiedIdentExpression14248); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_DOT.add(innerDot);

                                    IDENT509=(Token)match(input,IDENT,FOLLOW_IDENT_in_qualifiedIdentExpression14250); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT509);

                                    pushFollow(FOLLOW_arguments_in_qualifiedIdentExpression14252);
                                    arguments510=arguments();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_arguments.add(arguments510.getTree());


                                    // AST REWRITE
                                    // elements: genericTypeArgumentListSimplified, SUPER, arguments, IDENT, qualifiedIdentifier, outerDot, innerDot
                                    // token labels: outerDot, innerDot
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleTokenStream stream_outerDot=new RewriteRuleTokenStream(adaptor,"token outerDot",outerDot);
                                    RewriteRuleTokenStream stream_innerDot=new RewriteRuleTokenStream(adaptor,"token innerDot",innerDot);
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 1011:57: -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments )
                                    {
                                        // ../etc/JamlAttrHash.g:1011:61: ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_CALL, "METHOD_CALL"), root_1);

                                        // ../etc/JamlAttrHash.g:1011:75: ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT )
                                        {
                                        CommonTree root_2 = (CommonTree)adaptor.nil();
                                        root_2 = (CommonTree)adaptor.becomeRoot(stream_innerDot.nextNode(), root_2);

                                        // ../etc/JamlAttrHash.g:1011:87: ^( $outerDot qualifiedIdentifier SUPER )
                                        {
                                        CommonTree root_3 = (CommonTree)adaptor.nil();
                                        root_3 = (CommonTree)adaptor.becomeRoot(stream_outerDot.nextNode(), root_3);

                                        adaptor.addChild(root_3, stream_qualifiedIdentifier.nextTree());
                                        adaptor.addChild(root_3, stream_SUPER.nextNode());

                                        adaptor.addChild(root_2, root_3);
                                        }
                                        adaptor.addChild(root_2, stream_IDENT.nextNode());

                                        adaptor.addChild(root_1, root_2);
                                        }
                                        adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());
                                        adaptor.addChild(root_1, stream_arguments.nextTree());

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;
                                case 3 :
                                    // ../etc/JamlAttrHash.g:1012:21: IDENT arguments
                                    {
                                    IDENT511=(Token)match(input,IDENT,FOLLOW_IDENT_in_qualifiedIdentExpression14302); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT511);

                                    pushFollow(FOLLOW_arguments_in_qualifiedIdentExpression14304);
                                    arguments512=arguments();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_arguments.add(arguments512.getTree());


                                    // AST REWRITE
                                    // elements: qualifiedIdentifier, arguments, genericTypeArgumentListSimplified, IDENT, DOT
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 1012:57: -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments )
                                    {
                                        // ../etc/JamlAttrHash.g:1012:61: ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_CALL, "METHOD_CALL"), root_1);

                                        // ../etc/JamlAttrHash.g:1012:75: ^( DOT qualifiedIdentifier IDENT )
                                        {
                                        CommonTree root_2 = (CommonTree)adaptor.nil();
                                        root_2 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_2);

                                        adaptor.addChild(root_2, stream_qualifiedIdentifier.nextTree());
                                        adaptor.addChild(root_2, stream_IDENT.nextNode());

                                        adaptor.addChild(root_1, root_2);
                                        }
                                        adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());
                                        adaptor.addChild(root_1, stream_arguments.nextTree());

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;

                            }


                            }
                            break;
                        case 3 :
                            // ../etc/JamlAttrHash.g:1014:17: THIS
                            {
                            THIS513=(Token)match(input,THIS,FOLLOW_THIS_in_qualifiedIdentExpression14379); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THIS.add(THIS513);



                            // AST REWRITE
                            // elements: qualifiedIdentifier, DOT, THIS
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1014:57: -> ^( DOT qualifiedIdentifier THIS )
                            {
                                // ../etc/JamlAttrHash.g:1014:61: ^( DOT qualifiedIdentifier THIS )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_qualifiedIdentifier.nextTree());
                                adaptor.addChild(root_1, stream_THIS.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            // ../etc/JamlAttrHash.g:1015:17: Super= SUPER arguments
                            {
                            Super=(Token)match(input,SUPER,FOLLOW_SUPER_in_qualifiedIdentExpression14445); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SUPER.add(Super);

                            pushFollow(FOLLOW_arguments_in_qualifiedIdentExpression14447);
                            arguments514=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arguments.add(arguments514.getTree());


                            // AST REWRITE
                            // elements: arguments, qualifiedIdentifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1015:57: -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments )
                            {
                                // ../etc/JamlAttrHash.g:1015:61: ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUPER_CONSTRUCTOR_CALL, Super, "SUPER_CONSTRUCTOR_CALL"), root_1);

                                adaptor.addChild(root_1, stream_qualifiedIdentifier.nextTree());
                                adaptor.addChild(root_1, stream_arguments.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 5 :
                            // ../etc/JamlAttrHash.g:1016:17: innerNewExpression
                            {
                            pushFollow(FOLLOW_innerNewExpression_in_qualifiedIdentExpression14495);
                            innerNewExpression515=innerNewExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_innerNewExpression.add(innerNewExpression515.getTree());


                            // AST REWRITE
                            // elements: qualifiedIdentifier, innerNewExpression, DOT
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1016:57: -> ^( DOT qualifiedIdentifier innerNewExpression )
                            {
                                // ../etc/JamlAttrHash.g:1016:61: ^( DOT qualifiedIdentifier innerNewExpression )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_qualifiedIdentifier.nextTree());
                                adaptor.addChild(root_1, stream_innerNewExpression.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("qualifiedIdentExpression", 111);
            if ( state.backtracking>0 ) { memoize(input, 111, qualifiedIdentExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedIdentExpression"

    public static class newExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "newExpression"
    // ../etc/JamlAttrHash.g:1021:1: newExpression : NEW ( primitiveType newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction ) | ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) ) ) ;
    public final JamlAttrHashParser.newExpression_return newExpression() throws RecognitionException {
    traceIn("newExpression", 112);
        JamlAttrHashParser.newExpression_return retval = new JamlAttrHashParser.newExpression_return();
        retval.start = input.LT(1);
        int newExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token NEW516=null;
        JamlAttrHashParser.primitiveType_return primitiveType517 = null;

        JamlAttrHashParser.newArrayConstruction_return newArrayConstruction518 = null;

        JamlAttrHashParser.genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified519 = null;

        JamlAttrHashParser.qualifiedTypeIdentSimplified_return qualifiedTypeIdentSimplified520 = null;

        JamlAttrHashParser.newArrayConstruction_return newArrayConstruction521 = null;

        JamlAttrHashParser.arguments_return arguments522 = null;

        JamlAttrHashParser.classBody_return classBody523 = null;


        CommonTree NEW516_tree=null;
        RewriteRuleTokenStream stream_NEW=new RewriteRuleTokenStream(adaptor,"token NEW");
        RewriteRuleSubtreeStream stream_newArrayConstruction=new RewriteRuleSubtreeStream(adaptor,"rule newArrayConstruction");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_qualifiedTypeIdentSimplified=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedTypeIdentSimplified");
        RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
        RewriteRuleSubtreeStream stream_classBody=new RewriteRuleSubtreeStream(adaptor,"rule classBody");
        RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }
            // ../etc/JamlAttrHash.g:1022:5: ( NEW ( primitiveType newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction ) | ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) ) ) )
            // ../etc/JamlAttrHash.g:1022:9: NEW ( primitiveType newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction ) | ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) ) )
            {
            NEW516=(Token)match(input,NEW,FOLLOW_NEW_in_newExpression14571); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NEW.add(NEW516);

            // ../etc/JamlAttrHash.g:1023:9: ( primitiveType newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction ) | ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) ) )
            int alt150=2;
            int LA150_0 = input.LA(1);

            if ( (LA150_0==BOOLEAN||LA150_0==BYTE||LA150_0==CHAR||LA150_0==DOUBLE||LA150_0==FLOAT||(LA150_0>=INT && LA150_0<=LONG)||LA150_0==SHORT) ) {
                alt150=1;
            }
            else if ( (LA150_0==LESS_THAN||LA150_0==IDENT) ) {
                alt150=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 150, 0, input);

                throw nvae;
            }
            switch (alt150) {
                case 1 :
                    // ../etc/JamlAttrHash.g:1023:13: primitiveType newArrayConstruction
                    {
                    pushFollow(FOLLOW_primitiveType_in_newExpression14587);
                    primitiveType517=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitiveType.add(primitiveType517.getTree());
                    pushFollow(FOLLOW_newArrayConstruction_in_newExpression14589);
                    newArrayConstruction518=newArrayConstruction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_newArrayConstruction.add(newArrayConstruction518.getTree());


                    // AST REWRITE
                    // elements: primitiveType, newArrayConstruction
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1024:13: -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction )
                    {
                        // ../etc/JamlAttrHash.g:1024:17: ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STATIC_ARRAY_CREATOR, NEW516, "STATIC_ARRAY_CREATOR"), root_1);

                        adaptor.addChild(root_1, stream_primitiveType.nextTree());
                        adaptor.addChild(root_1, stream_newArrayConstruction.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:1025:13: ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) )
                    {
                    // ../etc/JamlAttrHash.g:1025:13: ( genericTypeArgumentListSimplified )?
                    int alt147=2;
                    int LA147_0 = input.LA(1);

                    if ( (LA147_0==LESS_THAN) ) {
                        alt147=1;
                    }
                    switch (alt147) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:0:0: genericTypeArgumentListSimplified
                            {
                            pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_newExpression14633);
                            genericTypeArgumentListSimplified519=genericTypeArgumentListSimplified();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_genericTypeArgumentListSimplified.add(genericTypeArgumentListSimplified519.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_qualifiedTypeIdentSimplified_in_newExpression14636);
                    qualifiedTypeIdentSimplified520=qualifiedTypeIdentSimplified();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualifiedTypeIdentSimplified.add(qualifiedTypeIdentSimplified520.getTree());
                    // ../etc/JamlAttrHash.g:1026:13: ( newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) )
                    int alt149=2;
                    int LA149_0 = input.LA(1);

                    if ( (LA149_0==LBRACK) ) {
                        alt149=1;
                    }
                    else if ( (LA149_0==LPAREN) ) {
                        alt149=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 149, 0, input);

                        throw nvae;
                    }
                    switch (alt149) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:1026:17: newArrayConstruction
                            {
                            pushFollow(FOLLOW_newArrayConstruction_in_newExpression14654);
                            newArrayConstruction521=newArrayConstruction();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_newArrayConstruction.add(newArrayConstruction521.getTree());


                            // AST REWRITE
                            // elements: genericTypeArgumentListSimplified, qualifiedTypeIdentSimplified, newArrayConstruction
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1027:17: -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction )
                            {
                                // ../etc/JamlAttrHash.g:1027:21: ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STATIC_ARRAY_CREATOR, NEW516, "STATIC_ARRAY_CREATOR"), root_1);

                                // ../etc/JamlAttrHash.g:1027:74: ( genericTypeArgumentListSimplified )?
                                if ( stream_genericTypeArgumentListSimplified.hasNext() ) {
                                    adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());

                                }
                                stream_genericTypeArgumentListSimplified.reset();
                                adaptor.addChild(root_1, stream_qualifiedTypeIdentSimplified.nextTree());
                                adaptor.addChild(root_1, stream_newArrayConstruction.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // ../etc/JamlAttrHash.g:1028:17: arguments ( classBody )?
                            {
                            pushFollow(FOLLOW_arguments_in_newExpression14719);
                            arguments522=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arguments.add(arguments522.getTree());
                            // ../etc/JamlAttrHash.g:1028:27: ( classBody )?
                            int alt148=2;
                            int LA148_0 = input.LA(1);

                            if ( (LA148_0==LCURLY) ) {
                                alt148=1;
                            }
                            switch (alt148) {
                                case 1 :
                                    // ../etc/JamlAttrHash.g:0:0: classBody
                                    {
                                    pushFollow(FOLLOW_classBody_in_newExpression14721);
                                    classBody523=classBody();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_classBody.add(classBody523.getTree());

                                    }
                                    break;

                            }



                            // AST REWRITE
                            // elements: classBody, genericTypeArgumentListSimplified, qualifiedTypeIdentSimplified, arguments
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1029:17: -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? )
                            {
                                // ../etc/JamlAttrHash.g:1029:21: ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_CONSTRUCTOR_CALL, NEW516, "STATIC_ARRAY_CREATOR"), root_1);

                                // ../etc/JamlAttrHash.g:1029:76: ( genericTypeArgumentListSimplified )?
                                if ( stream_genericTypeArgumentListSimplified.hasNext() ) {
                                    adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());

                                }
                                stream_genericTypeArgumentListSimplified.reset();
                                adaptor.addChild(root_1, stream_qualifiedTypeIdentSimplified.nextTree());
                                adaptor.addChild(root_1, stream_arguments.nextTree());
                                // ../etc/JamlAttrHash.g:1029:150: ( classBody )?
                                if ( stream_classBody.hasNext() ) {
                                    adaptor.addChild(root_1, stream_classBody.nextTree());

                                }
                                stream_classBody.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("newExpression", 112);
            if ( state.backtracking>0 ) { memoize(input, 112, newExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "newExpression"

    public static class innerNewExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "innerNewExpression"
    // ../etc/JamlAttrHash.g:1034:1: innerNewExpression : NEW ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? ) ;
    public final JamlAttrHashParser.innerNewExpression_return innerNewExpression() throws RecognitionException {
    traceIn("innerNewExpression", 113);
        JamlAttrHashParser.innerNewExpression_return retval = new JamlAttrHashParser.innerNewExpression_return();
        retval.start = input.LT(1);
        int innerNewExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token NEW524=null;
        Token IDENT526=null;
        JamlAttrHashParser.genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified525 = null;

        JamlAttrHashParser.arguments_return arguments527 = null;

        JamlAttrHashParser.classBody_return classBody528 = null;


        CommonTree NEW524_tree=null;
        CommonTree IDENT526_tree=null;
        RewriteRuleTokenStream stream_NEW=new RewriteRuleTokenStream(adaptor,"token NEW");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_classBody=new RewriteRuleSubtreeStream(adaptor,"rule classBody");
        RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }
            // ../etc/JamlAttrHash.g:1035:5: ( NEW ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? ) )
            // ../etc/JamlAttrHash.g:1035:9: NEW ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )?
            {
            NEW524=(Token)match(input,NEW,FOLLOW_NEW_in_innerNewExpression14820); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NEW.add(NEW524);

            // ../etc/JamlAttrHash.g:1035:13: ( genericTypeArgumentListSimplified )?
            int alt151=2;
            int LA151_0 = input.LA(1);

            if ( (LA151_0==LESS_THAN) ) {
                alt151=1;
            }
            switch (alt151) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: genericTypeArgumentListSimplified
                    {
                    pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_innerNewExpression14822);
                    genericTypeArgumentListSimplified525=genericTypeArgumentListSimplified();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_genericTypeArgumentListSimplified.add(genericTypeArgumentListSimplified525.getTree());

                    }
                    break;

            }

            IDENT526=(Token)match(input,IDENT,FOLLOW_IDENT_in_innerNewExpression14825); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT526);

            pushFollow(FOLLOW_arguments_in_innerNewExpression14827);
            arguments527=arguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_arguments.add(arguments527.getTree());
            // ../etc/JamlAttrHash.g:1035:64: ( classBody )?
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==LCURLY) ) {
                alt152=1;
            }
            switch (alt152) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: classBody
                    {
                    pushFollow(FOLLOW_classBody_in_innerNewExpression14829);
                    classBody528=classBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classBody.add(classBody528.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: genericTypeArgumentListSimplified, arguments, classBody, IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1036:9: -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? )
            {
                // ../etc/JamlAttrHash.g:1036:13: ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_CONSTRUCTOR_CALL, NEW524, "STATIC_ARRAY_CREATOR"), root_1);

                // ../etc/JamlAttrHash.g:1036:68: ( genericTypeArgumentListSimplified )?
                if ( stream_genericTypeArgumentListSimplified.hasNext() ) {
                    adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());

                }
                stream_genericTypeArgumentListSimplified.reset();
                adaptor.addChild(root_1, stream_IDENT.nextNode());
                adaptor.addChild(root_1, stream_arguments.nextTree());
                // ../etc/JamlAttrHash.g:1036:119: ( classBody )?
                if ( stream_classBody.hasNext() ) {
                    adaptor.addChild(root_1, stream_classBody.nextTree());

                }
                stream_classBody.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("innerNewExpression", 113);
            if ( state.backtracking>0 ) { memoize(input, 113, innerNewExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "innerNewExpression"

    public static class newArrayConstruction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "newArrayConstruction"
    // ../etc/JamlAttrHash.g:1039:1: newArrayConstruction : ( arrayDeclaratorList arrayInitializer | LBRACK expression RBRACK ( LBRACK expression RBRACK )* ( arrayDeclaratorList )? );
    public final JamlAttrHashParser.newArrayConstruction_return newArrayConstruction() throws RecognitionException {
    traceIn("newArrayConstruction", 114);
        JamlAttrHashParser.newArrayConstruction_return retval = new JamlAttrHashParser.newArrayConstruction_return();
        retval.start = input.LT(1);
        int newArrayConstruction_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LBRACK531=null;
        Token RBRACK533=null;
        Token LBRACK534=null;
        Token RBRACK536=null;
        JamlAttrHashParser.arrayDeclaratorList_return arrayDeclaratorList529 = null;

        JamlAttrHashParser.arrayInitializer_return arrayInitializer530 = null;

        JamlAttrHashParser.expression_return expression532 = null;

        JamlAttrHashParser.expression_return expression535 = null;

        JamlAttrHashParser.arrayDeclaratorList_return arrayDeclaratorList537 = null;


        CommonTree LBRACK531_tree=null;
        CommonTree RBRACK533_tree=null;
        CommonTree LBRACK534_tree=null;
        CommonTree RBRACK536_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }
            // ../etc/JamlAttrHash.g:1040:5: ( arrayDeclaratorList arrayInitializer | LBRACK expression RBRACK ( LBRACK expression RBRACK )* ( arrayDeclaratorList )? )
            int alt155=2;
            int LA155_0 = input.LA(1);

            if ( (LA155_0==LBRACK) ) {
                int LA155_1 = input.LA(2);

                if ( (LA155_1==RBRACK) ) {
                    alt155=1;
                }
                else if ( (LA155_1==DEC||LA155_1==INC||LA155_1==LESS_THAN||LA155_1==LOGICAL_NOT||(LA155_1>=LPAREN && LA155_1<=MINUS)||LA155_1==NOT||LA155_1==PLUS||LA155_1==BOOLEAN||LA155_1==BYTE||LA155_1==CHAR||LA155_1==DOUBLE||LA155_1==FALSE||LA155_1==FLOAT||(LA155_1>=INT && LA155_1<=LONG)||(LA155_1>=NEW && LA155_1<=NULL)||LA155_1==SHORT||LA155_1==SUPER||LA155_1==THIS||LA155_1==TRUE||LA155_1==VOID||(LA155_1>=IDENT && LA155_1<=STRING_LITERAL)) ) {
                    alt155=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 155, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 155, 0, input);

                throw nvae;
            }
            switch (alt155) {
                case 1 :
                    // ../etc/JamlAttrHash.g:1040:9: arrayDeclaratorList arrayInitializer
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_arrayDeclaratorList_in_newArrayConstruction14875);
                    arrayDeclaratorList529=arrayDeclaratorList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayDeclaratorList529.getTree());
                    pushFollow(FOLLOW_arrayInitializer_in_newArrayConstruction14877);
                    arrayInitializer530=arrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayInitializer530.getTree());

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:1041:9: LBRACK expression RBRACK ( LBRACK expression RBRACK )* ( arrayDeclaratorList )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LBRACK531=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_newArrayConstruction14887); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_newArrayConstruction14890);
                    expression532=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression532.getTree());
                    RBRACK533=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_newArrayConstruction14892); if (state.failed) return retval;
                    // ../etc/JamlAttrHash.g:1041:36: ( LBRACK expression RBRACK )*
                    loop153:
                    do {
                        int alt153=2;
                        alt153 = dfa153.predict(input);
                        switch (alt153) {
                    	case 1 :
                    	    // ../etc/JamlAttrHash.g:1041:37: LBRACK expression RBRACK
                    	    {
                    	    LBRACK534=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_newArrayConstruction14896); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_newArrayConstruction14899);
                    	    expression535=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression535.getTree());
                    	    RBRACK536=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_newArrayConstruction14901); if (state.failed) return retval;

                    	    }
                    	    break;

                    	default :
                    	    break loop153;
                        }
                    } while (true);

                    // ../etc/JamlAttrHash.g:1041:66: ( arrayDeclaratorList )?
                    int alt154=2;
                    int LA154_0 = input.LA(1);

                    if ( (LA154_0==LBRACK) ) {
                        int LA154_1 = input.LA(2);

                        if ( (LA154_1==RBRACK) ) {
                            alt154=1;
                        }
                    }
                    switch (alt154) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:0:0: arrayDeclaratorList
                            {
                            pushFollow(FOLLOW_arrayDeclaratorList_in_newArrayConstruction14906);
                            arrayDeclaratorList537=arrayDeclaratorList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayDeclaratorList537.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("newArrayConstruction", 114);
            if ( state.backtracking>0 ) { memoize(input, 114, newArrayConstruction_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "newArrayConstruction"

    public static class arguments_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arguments"
    // ../etc/JamlAttrHash.g:1044:1: arguments : LPAREN ( expressionList )? RPAREN -> ^( ARGUMENT_LIST[$LPAREN, \"ARGUMENT_LIST\"] ( expressionList )? ) ;
    public final JamlAttrHashParser.arguments_return arguments() throws RecognitionException {
    traceIn("arguments", 115);
        JamlAttrHashParser.arguments_return retval = new JamlAttrHashParser.arguments_return();
        retval.start = input.LT(1);
        int arguments_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LPAREN538=null;
        Token RPAREN540=null;
        JamlAttrHashParser.expressionList_return expressionList539 = null;


        CommonTree LPAREN538_tree=null;
        CommonTree RPAREN540_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }
            // ../etc/JamlAttrHash.g:1045:5: ( LPAREN ( expressionList )? RPAREN -> ^( ARGUMENT_LIST[$LPAREN, \"ARGUMENT_LIST\"] ( expressionList )? ) )
            // ../etc/JamlAttrHash.g:1045:9: LPAREN ( expressionList )? RPAREN
            {
            LPAREN538=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_arguments14926); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN538);

            // ../etc/JamlAttrHash.g:1045:16: ( expressionList )?
            int alt156=2;
            int LA156_0 = input.LA(1);

            if ( (LA156_0==DEC||LA156_0==INC||LA156_0==LESS_THAN||LA156_0==LOGICAL_NOT||(LA156_0>=LPAREN && LA156_0<=MINUS)||LA156_0==NOT||LA156_0==PLUS||LA156_0==BOOLEAN||LA156_0==BYTE||LA156_0==CHAR||LA156_0==DOUBLE||LA156_0==FALSE||LA156_0==FLOAT||(LA156_0>=INT && LA156_0<=LONG)||(LA156_0>=NEW && LA156_0<=NULL)||LA156_0==SHORT||LA156_0==SUPER||LA156_0==THIS||LA156_0==TRUE||LA156_0==VOID||(LA156_0>=IDENT && LA156_0<=STRING_LITERAL)) ) {
                alt156=1;
            }
            switch (alt156) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: expressionList
                    {
                    pushFollow(FOLLOW_expressionList_in_arguments14928);
                    expressionList539=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionList.add(expressionList539.getTree());

                    }
                    break;

            }

            RPAREN540=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_arguments14931); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN540);



            // AST REWRITE
            // elements: expressionList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1046:9: -> ^( ARGUMENT_LIST[$LPAREN, \"ARGUMENT_LIST\"] ( expressionList )? )
            {
                // ../etc/JamlAttrHash.g:1046:13: ^( ARGUMENT_LIST[$LPAREN, \"ARGUMENT_LIST\"] ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARGUMENT_LIST, LPAREN538, "ARGUMENT_LIST"), root_1);

                // ../etc/JamlAttrHash.g:1046:55: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("arguments", 115);
            if ( state.backtracking>0 ) { memoize(input, 115, arguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arguments"

    // $ANTLR start synpred24_JamlAttrHash
    public final void synpred24_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred24_JamlAttrHash_fragment", 139);
        try {
            // ../etc/JamlAttrHash.g:367:9: ( GREATER_THAN )
            // ../etc/JamlAttrHash.g:367:9: GREATER_THAN
            {
            match(input,GREATER_THAN,FOLLOW_GREATER_THAN_in_synpred24_JamlAttrHash5314); if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred24_JamlAttrHash_fragment", 139);
        }}
    // $ANTLR end synpred24_JamlAttrHash

    // $ANTLR start synpred25_JamlAttrHash
    public final void synpred25_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred25_JamlAttrHash_fragment", 140);
        try {
            // ../etc/JamlAttrHash.g:368:9: ( SHIFT_RIGHT )
            // ../etc/JamlAttrHash.g:368:9: SHIFT_RIGHT
            {
            match(input,SHIFT_RIGHT,FOLLOW_SHIFT_RIGHT_in_synpred25_JamlAttrHash5324); if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred25_JamlAttrHash_fragment", 140);
        }}
    // $ANTLR end synpred25_JamlAttrHash

    // $ANTLR start synpred26_JamlAttrHash
    public final void synpred26_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred26_JamlAttrHash_fragment", 141);
        try {
            // ../etc/JamlAttrHash.g:369:9: ( BIT_SHIFT_RIGHT )
            // ../etc/JamlAttrHash.g:369:9: BIT_SHIFT_RIGHT
            {
            match(input,BIT_SHIFT_RIGHT,FOLLOW_BIT_SHIFT_RIGHT_in_synpred26_JamlAttrHash5334); if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred26_JamlAttrHash_fragment", 141);
        }}
    // $ANTLR end synpred26_JamlAttrHash

    // $ANTLR start synpred27_JamlAttrHash
    public final void synpred27_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred27_JamlAttrHash_fragment", 142);
        try {
            // ../etc/JamlAttrHash.g:374:15: ( bound )
            // ../etc/JamlAttrHash.g:374:15: bound
            {
            pushFollow(FOLLOW_bound_in_synpred27_JamlAttrHash5364);
            bound();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred27_JamlAttrHash_fragment", 142);
        }}
    // $ANTLR end synpred27_JamlAttrHash

    // $ANTLR start synpred42_JamlAttrHash
    public final void synpred42_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred42_JamlAttrHash_fragment", 157);
        try {
            // ../etc/JamlAttrHash.g:431:9: ( STATIC block )
            // ../etc/JamlAttrHash.g:431:9: STATIC block
            {
            match(input,STATIC,FOLLOW_STATIC_in_synpred42_JamlAttrHash5896); if (state.failed) return ;
            pushFollow(FOLLOW_block_in_synpred42_JamlAttrHash5898);
            block();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred42_JamlAttrHash_fragment", 157);
        }}
    // $ANTLR end synpred42_JamlAttrHash

    // $ANTLR start synpred52_JamlAttrHash
    public final void synpred52_JamlAttrHash_fragment() throws RecognitionException {   
        Token ident=null;

        traceIn("synpred52_JamlAttrHash_fragment", 167);
        try {
            // ../etc/JamlAttrHash.g:433:13: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) | ident= IDENT formalParameterList ( throwsClause )? block ) )
            // ../etc/JamlAttrHash.g:433:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) | ident= IDENT formalParameterList ( throwsClause )? block )
            {
            // ../etc/JamlAttrHash.g:433:13: ( genericTypeParameterList )?
            int alt162=2;
            int LA162_0 = input.LA(1);

            if ( (LA162_0==LESS_THAN) ) {
                alt162=1;
            }
            switch (alt162) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: genericTypeParameterList
                    {
                    pushFollow(FOLLOW_genericTypeParameterList_in_synpred52_JamlAttrHash5935);
                    genericTypeParameterList();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            // ../etc/JamlAttrHash.g:434:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) | ident= IDENT formalParameterList ( throwsClause )? block )
            int alt169=3;
            switch ( input.LA(1) ) {
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
                {
                alt169=1;
                }
                break;
            case IDENT:
                {
                int LA169_2 = input.LA(2);

                if ( (LA169_2==LPAREN) ) {
                    alt169=3;
                }
                else if ( (LA169_2==DOT||LA169_2==LBRACK||LA169_2==LESS_THAN||LA169_2==IDENT) ) {
                    alt169=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 169, 2, input);

                    throw nvae;
                }
                }
                break;
            case VOID:
                {
                alt169=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 169, 0, input);

                throw nvae;
            }

            switch (alt169) {
                case 1 :
                    // ../etc/JamlAttrHash.g:434:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI )
                    {
                    pushFollow(FOLLOW_type_in_synpred52_JamlAttrHash5954);
                    type();

                    state._fsp--;
                    if (state.failed) return ;
                    match(input,IDENT,FOLLOW_IDENT_in_synpred52_JamlAttrHash5956); if (state.failed) return ;
                    pushFollow(FOLLOW_formalParameterList_in_synpred52_JamlAttrHash5958);
                    formalParameterList();

                    state._fsp--;
                    if (state.failed) return ;
                    // ../etc/JamlAttrHash.g:434:48: ( arrayDeclaratorList )?
                    int alt163=2;
                    int LA163_0 = input.LA(1);

                    if ( (LA163_0==LBRACK) ) {
                        alt163=1;
                    }
                    switch (alt163) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:0:0: arrayDeclaratorList
                            {
                            pushFollow(FOLLOW_arrayDeclaratorList_in_synpred52_JamlAttrHash5960);
                            arrayDeclaratorList();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }

                    // ../etc/JamlAttrHash.g:434:69: ( throwsClause )?
                    int alt164=2;
                    int LA164_0 = input.LA(1);

                    if ( (LA164_0==THROWS) ) {
                        alt164=1;
                    }
                    switch (alt164) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:0:0: throwsClause
                            {
                            pushFollow(FOLLOW_throwsClause_in_synpred52_JamlAttrHash5963);
                            throwsClause();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }

                    // ../etc/JamlAttrHash.g:434:83: ( block | SEMI )
                    int alt165=2;
                    int LA165_0 = input.LA(1);

                    if ( (LA165_0==LCURLY) ) {
                        alt165=1;
                    }
                    else if ( (LA165_0==SEMI) ) {
                        alt165=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 165, 0, input);

                        throw nvae;
                    }
                    switch (alt165) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:434:84: block
                            {
                            pushFollow(FOLLOW_block_in_synpred52_JamlAttrHash5967);
                            block();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;
                        case 2 :
                            // ../etc/JamlAttrHash.g:434:92: SEMI
                            {
                            match(input,SEMI,FOLLOW_SEMI_in_synpred52_JamlAttrHash5971); if (state.failed) return ;

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:436:17: VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI )
                    {
                    match(input,VOID,FOLLOW_VOID_in_synpred52_JamlAttrHash6033); if (state.failed) return ;
                    match(input,IDENT,FOLLOW_IDENT_in_synpred52_JamlAttrHash6035); if (state.failed) return ;
                    pushFollow(FOLLOW_formalParameterList_in_synpred52_JamlAttrHash6037);
                    formalParameterList();

                    state._fsp--;
                    if (state.failed) return ;
                    // ../etc/JamlAttrHash.g:436:48: ( throwsClause )?
                    int alt166=2;
                    int LA166_0 = input.LA(1);

                    if ( (LA166_0==THROWS) ) {
                        alt166=1;
                    }
                    switch (alt166) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:0:0: throwsClause
                            {
                            pushFollow(FOLLOW_throwsClause_in_synpred52_JamlAttrHash6039);
                            throwsClause();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }

                    // ../etc/JamlAttrHash.g:436:62: ( block | SEMI )
                    int alt167=2;
                    int LA167_0 = input.LA(1);

                    if ( (LA167_0==LCURLY) ) {
                        alt167=1;
                    }
                    else if ( (LA167_0==SEMI) ) {
                        alt167=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 167, 0, input);

                        throw nvae;
                    }
                    switch (alt167) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:436:63: block
                            {
                            pushFollow(FOLLOW_block_in_synpred52_JamlAttrHash6043);
                            block();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;
                        case 2 :
                            // ../etc/JamlAttrHash.g:436:71: SEMI
                            {
                            match(input,SEMI,FOLLOW_SEMI_in_synpred52_JamlAttrHash6047); if (state.failed) return ;

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // ../etc/JamlAttrHash.g:438:17: ident= IDENT formalParameterList ( throwsClause )? block
                    {
                    ident=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred52_JamlAttrHash6106); if (state.failed) return ;
                    pushFollow(FOLLOW_formalParameterList_in_synpred52_JamlAttrHash6108);
                    formalParameterList();

                    state._fsp--;
                    if (state.failed) return ;
                    // ../etc/JamlAttrHash.g:438:49: ( throwsClause )?
                    int alt168=2;
                    int LA168_0 = input.LA(1);

                    if ( (LA168_0==THROWS) ) {
                        alt168=1;
                    }
                    switch (alt168) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:0:0: throwsClause
                            {
                            pushFollow(FOLLOW_throwsClause_in_synpred52_JamlAttrHash6110);
                            throwsClause();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_block_in_synpred52_JamlAttrHash6113);
                    block();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        finally {
            traceOut("synpred52_JamlAttrHash_fragment", 167);
        }}
    // $ANTLR end synpred52_JamlAttrHash

    // $ANTLR start synpred53_JamlAttrHash
    public final void synpred53_JamlAttrHash_fragment() throws RecognitionException {   
        Token ident=null;

        traceIn("synpred53_JamlAttrHash_fragment", 168);
        try {
            // ../etc/JamlAttrHash.g:432:9: ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) | ident= IDENT formalParameterList ( throwsClause )? block ) | type classFieldDeclaratorList SEMI ) )
            // ../etc/JamlAttrHash.g:432:9: modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) | ident= IDENT formalParameterList ( throwsClause )? block ) | type classFieldDeclaratorList SEMI )
            {
            pushFollow(FOLLOW_modifierList_in_synpred53_JamlAttrHash5921);
            modifierList();

            state._fsp--;
            if (state.failed) return ;
            // ../etc/JamlAttrHash.g:433:9: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) | ident= IDENT formalParameterList ( throwsClause )? block ) | type classFieldDeclaratorList SEMI )
            int alt178=2;
            switch ( input.LA(1) ) {
            case LESS_THAN:
            case VOID:
                {
                alt178=1;
                }
                break;
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
                {
                int LA178_2 = input.LA(2);

                if ( (synpred52_JamlAttrHash()) ) {
                    alt178=1;
                }
                else if ( (true) ) {
                    alt178=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 178, 2, input);

                    throw nvae;
                }
                }
                break;
            case IDENT:
                {
                int LA178_3 = input.LA(2);

                if ( (synpred52_JamlAttrHash()) ) {
                    alt178=1;
                }
                else if ( (true) ) {
                    alt178=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 178, 3, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 178, 0, input);

                throw nvae;
            }

            switch (alt178) {
                case 1 :
                    // ../etc/JamlAttrHash.g:433:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) | ident= IDENT formalParameterList ( throwsClause )? block )
                    {
                    // ../etc/JamlAttrHash.g:433:13: ( genericTypeParameterList )?
                    int alt170=2;
                    int LA170_0 = input.LA(1);

                    if ( (LA170_0==LESS_THAN) ) {
                        alt170=1;
                    }
                    switch (alt170) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:0:0: genericTypeParameterList
                            {
                            pushFollow(FOLLOW_genericTypeParameterList_in_synpred53_JamlAttrHash5935);
                            genericTypeParameterList();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }

                    // ../etc/JamlAttrHash.g:434:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) | ident= IDENT formalParameterList ( throwsClause )? block )
                    int alt177=3;
                    switch ( input.LA(1) ) {
                    case BOOLEAN:
                    case BYTE:
                    case CHAR:
                    case DOUBLE:
                    case FLOAT:
                    case INT:
                    case LONG:
                    case SHORT:
                        {
                        alt177=1;
                        }
                        break;
                    case IDENT:
                        {
                        int LA177_2 = input.LA(2);

                        if ( (LA177_2==DOT||LA177_2==LBRACK||LA177_2==LESS_THAN||LA177_2==IDENT) ) {
                            alt177=1;
                        }
                        else if ( (LA177_2==LPAREN) ) {
                            alt177=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return ;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 177, 2, input);

                            throw nvae;
                        }
                        }
                        break;
                    case VOID:
                        {
                        alt177=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 177, 0, input);

                        throw nvae;
                    }

                    switch (alt177) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:434:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI )
                            {
                            pushFollow(FOLLOW_type_in_synpred53_JamlAttrHash5954);
                            type();

                            state._fsp--;
                            if (state.failed) return ;
                            match(input,IDENT,FOLLOW_IDENT_in_synpred53_JamlAttrHash5956); if (state.failed) return ;
                            pushFollow(FOLLOW_formalParameterList_in_synpred53_JamlAttrHash5958);
                            formalParameterList();

                            state._fsp--;
                            if (state.failed) return ;
                            // ../etc/JamlAttrHash.g:434:48: ( arrayDeclaratorList )?
                            int alt171=2;
                            int LA171_0 = input.LA(1);

                            if ( (LA171_0==LBRACK) ) {
                                alt171=1;
                            }
                            switch (alt171) {
                                case 1 :
                                    // ../etc/JamlAttrHash.g:0:0: arrayDeclaratorList
                                    {
                                    pushFollow(FOLLOW_arrayDeclaratorList_in_synpred53_JamlAttrHash5960);
                                    arrayDeclaratorList();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }

                            // ../etc/JamlAttrHash.g:434:69: ( throwsClause )?
                            int alt172=2;
                            int LA172_0 = input.LA(1);

                            if ( (LA172_0==THROWS) ) {
                                alt172=1;
                            }
                            switch (alt172) {
                                case 1 :
                                    // ../etc/JamlAttrHash.g:0:0: throwsClause
                                    {
                                    pushFollow(FOLLOW_throwsClause_in_synpred53_JamlAttrHash5963);
                                    throwsClause();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }

                            // ../etc/JamlAttrHash.g:434:83: ( block | SEMI )
                            int alt173=2;
                            int LA173_0 = input.LA(1);

                            if ( (LA173_0==LCURLY) ) {
                                alt173=1;
                            }
                            else if ( (LA173_0==SEMI) ) {
                                alt173=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return ;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 173, 0, input);

                                throw nvae;
                            }
                            switch (alt173) {
                                case 1 :
                                    // ../etc/JamlAttrHash.g:434:84: block
                                    {
                                    pushFollow(FOLLOW_block_in_synpred53_JamlAttrHash5967);
                                    block();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;
                                case 2 :
                                    // ../etc/JamlAttrHash.g:434:92: SEMI
                                    {
                                    match(input,SEMI,FOLLOW_SEMI_in_synpred53_JamlAttrHash5971); if (state.failed) return ;

                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // ../etc/JamlAttrHash.g:436:17: VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI )
                            {
                            match(input,VOID,FOLLOW_VOID_in_synpred53_JamlAttrHash6033); if (state.failed) return ;
                            match(input,IDENT,FOLLOW_IDENT_in_synpred53_JamlAttrHash6035); if (state.failed) return ;
                            pushFollow(FOLLOW_formalParameterList_in_synpred53_JamlAttrHash6037);
                            formalParameterList();

                            state._fsp--;
                            if (state.failed) return ;
                            // ../etc/JamlAttrHash.g:436:48: ( throwsClause )?
                            int alt174=2;
                            int LA174_0 = input.LA(1);

                            if ( (LA174_0==THROWS) ) {
                                alt174=1;
                            }
                            switch (alt174) {
                                case 1 :
                                    // ../etc/JamlAttrHash.g:0:0: throwsClause
                                    {
                                    pushFollow(FOLLOW_throwsClause_in_synpred53_JamlAttrHash6039);
                                    throwsClause();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }

                            // ../etc/JamlAttrHash.g:436:62: ( block | SEMI )
                            int alt175=2;
                            int LA175_0 = input.LA(1);

                            if ( (LA175_0==LCURLY) ) {
                                alt175=1;
                            }
                            else if ( (LA175_0==SEMI) ) {
                                alt175=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return ;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 175, 0, input);

                                throw nvae;
                            }
                            switch (alt175) {
                                case 1 :
                                    // ../etc/JamlAttrHash.g:436:63: block
                                    {
                                    pushFollow(FOLLOW_block_in_synpred53_JamlAttrHash6043);
                                    block();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;
                                case 2 :
                                    // ../etc/JamlAttrHash.g:436:71: SEMI
                                    {
                                    match(input,SEMI,FOLLOW_SEMI_in_synpred53_JamlAttrHash6047); if (state.failed) return ;

                                    }
                                    break;

                            }


                            }
                            break;
                        case 3 :
                            // ../etc/JamlAttrHash.g:438:17: ident= IDENT formalParameterList ( throwsClause )? block
                            {
                            ident=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred53_JamlAttrHash6106); if (state.failed) return ;
                            pushFollow(FOLLOW_formalParameterList_in_synpred53_JamlAttrHash6108);
                            formalParameterList();

                            state._fsp--;
                            if (state.failed) return ;
                            // ../etc/JamlAttrHash.g:438:49: ( throwsClause )?
                            int alt176=2;
                            int LA176_0 = input.LA(1);

                            if ( (LA176_0==THROWS) ) {
                                alt176=1;
                            }
                            switch (alt176) {
                                case 1 :
                                    // ../etc/JamlAttrHash.g:0:0: throwsClause
                                    {
                                    pushFollow(FOLLOW_throwsClause_in_synpred53_JamlAttrHash6110);
                                    throwsClause();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_block_in_synpred53_JamlAttrHash6113);
                            block();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:441:13: type classFieldDeclaratorList SEMI
                    {
                    pushFollow(FOLLOW_type_in_synpred53_JamlAttrHash6177);
                    type();

                    state._fsp--;
                    if (state.failed) return ;
                    pushFollow(FOLLOW_classFieldDeclaratorList_in_synpred53_JamlAttrHash6179);
                    classFieldDeclaratorList();

                    state._fsp--;
                    if (state.failed) return ;
                    match(input,SEMI,FOLLOW_SEMI_in_synpred53_JamlAttrHash6181); if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        finally {
            traceOut("synpred53_JamlAttrHash_fragment", 168);
        }}
    // $ANTLR end synpred53_JamlAttrHash

    // $ANTLR start synpred54_JamlAttrHash
    public final void synpred54_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred54_JamlAttrHash_fragment", 169);
        try {
            // ../etc/JamlAttrHash.g:444:9: ( typeDeclaration )
            // ../etc/JamlAttrHash.g:444:9: typeDeclaration
            {
            pushFollow(FOLLOW_typeDeclaration_in_synpred54_JamlAttrHash6226);
            typeDeclaration();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred54_JamlAttrHash_fragment", 169);
        }}
    // $ANTLR end synpred54_JamlAttrHash

    // $ANTLR start synpred60_JamlAttrHash
    public final void synpred60_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred60_JamlAttrHash_fragment", 175);
        try {
            // ../etc/JamlAttrHash.g:450:13: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI ) )
            // ../etc/JamlAttrHash.g:450:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI )
            {
            // ../etc/JamlAttrHash.g:450:13: ( genericTypeParameterList )?
            int alt181=2;
            int LA181_0 = input.LA(1);

            if ( (LA181_0==LESS_THAN) ) {
                alt181=1;
            }
            switch (alt181) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: genericTypeParameterList
                    {
                    pushFollow(FOLLOW_genericTypeParameterList_in_synpred60_JamlAttrHash6282);
                    genericTypeParameterList();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            // ../etc/JamlAttrHash.g:451:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI )
            int alt185=2;
            int LA185_0 = input.LA(1);

            if ( (LA185_0==BOOLEAN||LA185_0==BYTE||LA185_0==CHAR||LA185_0==DOUBLE||LA185_0==FLOAT||(LA185_0>=INT && LA185_0<=LONG)||LA185_0==SHORT||LA185_0==IDENT) ) {
                alt185=1;
            }
            else if ( (LA185_0==VOID) ) {
                alt185=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 185, 0, input);

                throw nvae;
            }
            switch (alt185) {
                case 1 :
                    // ../etc/JamlAttrHash.g:451:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI
                    {
                    pushFollow(FOLLOW_type_in_synpred60_JamlAttrHash6301);
                    type();

                    state._fsp--;
                    if (state.failed) return ;
                    match(input,IDENT,FOLLOW_IDENT_in_synpred60_JamlAttrHash6303); if (state.failed) return ;
                    pushFollow(FOLLOW_formalParameterList_in_synpred60_JamlAttrHash6305);
                    formalParameterList();

                    state._fsp--;
                    if (state.failed) return ;
                    // ../etc/JamlAttrHash.g:451:48: ( arrayDeclaratorList )?
                    int alt182=2;
                    int LA182_0 = input.LA(1);

                    if ( (LA182_0==LBRACK) ) {
                        alt182=1;
                    }
                    switch (alt182) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:0:0: arrayDeclaratorList
                            {
                            pushFollow(FOLLOW_arrayDeclaratorList_in_synpred60_JamlAttrHash6307);
                            arrayDeclaratorList();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }

                    // ../etc/JamlAttrHash.g:451:69: ( throwsClause )?
                    int alt183=2;
                    int LA183_0 = input.LA(1);

                    if ( (LA183_0==THROWS) ) {
                        alt183=1;
                    }
                    switch (alt183) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:0:0: throwsClause
                            {
                            pushFollow(FOLLOW_throwsClause_in_synpred60_JamlAttrHash6310);
                            throwsClause();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }

                    match(input,SEMI,FOLLOW_SEMI_in_synpred60_JamlAttrHash6313); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:453:17: VOID IDENT formalParameterList ( throwsClause )? SEMI
                    {
                    match(input,VOID,FOLLOW_VOID_in_synpred60_JamlAttrHash6371); if (state.failed) return ;
                    match(input,IDENT,FOLLOW_IDENT_in_synpred60_JamlAttrHash6373); if (state.failed) return ;
                    pushFollow(FOLLOW_formalParameterList_in_synpred60_JamlAttrHash6375);
                    formalParameterList();

                    state._fsp--;
                    if (state.failed) return ;
                    // ../etc/JamlAttrHash.g:453:48: ( throwsClause )?
                    int alt184=2;
                    int LA184_0 = input.LA(1);

                    if ( (LA184_0==THROWS) ) {
                        alt184=1;
                    }
                    switch (alt184) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:0:0: throwsClause
                            {
                            pushFollow(FOLLOW_throwsClause_in_synpred60_JamlAttrHash6377);
                            throwsClause();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }

                    match(input,SEMI,FOLLOW_SEMI_in_synpred60_JamlAttrHash6380); if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        finally {
            traceOut("synpred60_JamlAttrHash_fragment", 175);
        }}
    // $ANTLR end synpred60_JamlAttrHash

    // $ANTLR start synpred61_JamlAttrHash
    public final void synpred61_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred61_JamlAttrHash_fragment", 176);
        try {
            // ../etc/JamlAttrHash.g:449:9: ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI ) | type interfaceFieldDeclaratorList SEMI ) )
            // ../etc/JamlAttrHash.g:449:9: modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI ) | type interfaceFieldDeclaratorList SEMI )
            {
            pushFollow(FOLLOW_modifierList_in_synpred61_JamlAttrHash6268);
            modifierList();

            state._fsp--;
            if (state.failed) return ;
            // ../etc/JamlAttrHash.g:450:9: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI ) | type interfaceFieldDeclaratorList SEMI )
            int alt191=2;
            switch ( input.LA(1) ) {
            case LESS_THAN:
            case VOID:
                {
                alt191=1;
                }
                break;
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
                {
                int LA191_2 = input.LA(2);

                if ( (synpred60_JamlAttrHash()) ) {
                    alt191=1;
                }
                else if ( (true) ) {
                    alt191=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 191, 2, input);

                    throw nvae;
                }
                }
                break;
            case IDENT:
                {
                int LA191_3 = input.LA(2);

                if ( (synpred60_JamlAttrHash()) ) {
                    alt191=1;
                }
                else if ( (true) ) {
                    alt191=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 191, 3, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 191, 0, input);

                throw nvae;
            }

            switch (alt191) {
                case 1 :
                    // ../etc/JamlAttrHash.g:450:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI )
                    {
                    // ../etc/JamlAttrHash.g:450:13: ( genericTypeParameterList )?
                    int alt186=2;
                    int LA186_0 = input.LA(1);

                    if ( (LA186_0==LESS_THAN) ) {
                        alt186=1;
                    }
                    switch (alt186) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:0:0: genericTypeParameterList
                            {
                            pushFollow(FOLLOW_genericTypeParameterList_in_synpred61_JamlAttrHash6282);
                            genericTypeParameterList();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }

                    // ../etc/JamlAttrHash.g:451:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI )
                    int alt190=2;
                    int LA190_0 = input.LA(1);

                    if ( (LA190_0==BOOLEAN||LA190_0==BYTE||LA190_0==CHAR||LA190_0==DOUBLE||LA190_0==FLOAT||(LA190_0>=INT && LA190_0<=LONG)||LA190_0==SHORT||LA190_0==IDENT) ) {
                        alt190=1;
                    }
                    else if ( (LA190_0==VOID) ) {
                        alt190=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 190, 0, input);

                        throw nvae;
                    }
                    switch (alt190) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:451:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI
                            {
                            pushFollow(FOLLOW_type_in_synpred61_JamlAttrHash6301);
                            type();

                            state._fsp--;
                            if (state.failed) return ;
                            match(input,IDENT,FOLLOW_IDENT_in_synpred61_JamlAttrHash6303); if (state.failed) return ;
                            pushFollow(FOLLOW_formalParameterList_in_synpred61_JamlAttrHash6305);
                            formalParameterList();

                            state._fsp--;
                            if (state.failed) return ;
                            // ../etc/JamlAttrHash.g:451:48: ( arrayDeclaratorList )?
                            int alt187=2;
                            int LA187_0 = input.LA(1);

                            if ( (LA187_0==LBRACK) ) {
                                alt187=1;
                            }
                            switch (alt187) {
                                case 1 :
                                    // ../etc/JamlAttrHash.g:0:0: arrayDeclaratorList
                                    {
                                    pushFollow(FOLLOW_arrayDeclaratorList_in_synpred61_JamlAttrHash6307);
                                    arrayDeclaratorList();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }

                            // ../etc/JamlAttrHash.g:451:69: ( throwsClause )?
                            int alt188=2;
                            int LA188_0 = input.LA(1);

                            if ( (LA188_0==THROWS) ) {
                                alt188=1;
                            }
                            switch (alt188) {
                                case 1 :
                                    // ../etc/JamlAttrHash.g:0:0: throwsClause
                                    {
                                    pushFollow(FOLLOW_throwsClause_in_synpred61_JamlAttrHash6310);
                                    throwsClause();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }

                            match(input,SEMI,FOLLOW_SEMI_in_synpred61_JamlAttrHash6313); if (state.failed) return ;

                            }
                            break;
                        case 2 :
                            // ../etc/JamlAttrHash.g:453:17: VOID IDENT formalParameterList ( throwsClause )? SEMI
                            {
                            match(input,VOID,FOLLOW_VOID_in_synpred61_JamlAttrHash6371); if (state.failed) return ;
                            match(input,IDENT,FOLLOW_IDENT_in_synpred61_JamlAttrHash6373); if (state.failed) return ;
                            pushFollow(FOLLOW_formalParameterList_in_synpred61_JamlAttrHash6375);
                            formalParameterList();

                            state._fsp--;
                            if (state.failed) return ;
                            // ../etc/JamlAttrHash.g:453:48: ( throwsClause )?
                            int alt189=2;
                            int LA189_0 = input.LA(1);

                            if ( (LA189_0==THROWS) ) {
                                alt189=1;
                            }
                            switch (alt189) {
                                case 1 :
                                    // ../etc/JamlAttrHash.g:0:0: throwsClause
                                    {
                                    pushFollow(FOLLOW_throwsClause_in_synpred61_JamlAttrHash6377);
                                    throwsClause();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }

                            match(input,SEMI,FOLLOW_SEMI_in_synpred61_JamlAttrHash6380); if (state.failed) return ;

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:456:13: type interfaceFieldDeclaratorList SEMI
                    {
                    pushFollow(FOLLOW_type_in_synpred61_JamlAttrHash6443);
                    type();

                    state._fsp--;
                    if (state.failed) return ;
                    pushFollow(FOLLOW_interfaceFieldDeclaratorList_in_synpred61_JamlAttrHash6445);
                    interfaceFieldDeclaratorList();

                    state._fsp--;
                    if (state.failed) return ;
                    match(input,SEMI,FOLLOW_SEMI_in_synpred61_JamlAttrHash6447); if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        finally {
            traceOut("synpred61_JamlAttrHash_fragment", 176);
        }}
    // $ANTLR end synpred61_JamlAttrHash

    // $ANTLR start synpred62_JamlAttrHash
    public final void synpred62_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred62_JamlAttrHash_fragment", 177);
        try {
            // ../etc/JamlAttrHash.g:459:9: ( typeDeclaration )
            // ../etc/JamlAttrHash.g:459:9: typeDeclaration
            {
            pushFollow(FOLLOW_typeDeclaration_in_synpred62_JamlAttrHash6492);
            typeDeclaration();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred62_JamlAttrHash_fragment", 177);
        }}
    // $ANTLR end synpred62_JamlAttrHash

    // $ANTLR start synpred68_JamlAttrHash
    public final void synpred68_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred68_JamlAttrHash_fragment", 183);
        try {
            // ../etc/JamlAttrHash.g:498:9: ( arrayDeclarator )
            // ../etc/JamlAttrHash.g:498:9: arrayDeclarator
            {
            pushFollow(FOLLOW_arrayDeclarator_in_synpred68_JamlAttrHash6794);
            arrayDeclarator();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred68_JamlAttrHash_fragment", 183);
        }}
    // $ANTLR end synpred68_JamlAttrHash

    // $ANTLR start synpred86_JamlAttrHash
    public final void synpred86_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred86_JamlAttrHash_fragment", 201);
        try {
            // ../etc/JamlAttrHash.g:547:23: ( arrayDeclaratorList )
            // ../etc/JamlAttrHash.g:547:23: arrayDeclaratorList
            {
            pushFollow(FOLLOW_arrayDeclaratorList_in_synpred86_JamlAttrHash7195);
            arrayDeclaratorList();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred86_JamlAttrHash_fragment", 201);
        }}
    // $ANTLR end synpred86_JamlAttrHash

    // $ANTLR start synpred87_JamlAttrHash
    public final void synpred87_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred87_JamlAttrHash_fragment", 202);
        try {
            // ../etc/JamlAttrHash.g:552:28: ( arrayDeclaratorList )
            // ../etc/JamlAttrHash.g:552:28: arrayDeclaratorList
            {
            pushFollow(FOLLOW_arrayDeclaratorList_in_synpred87_JamlAttrHash7244);
            arrayDeclaratorList();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred87_JamlAttrHash_fragment", 202);
        }}
    // $ANTLR end synpred87_JamlAttrHash

    // $ANTLR start synpred89_JamlAttrHash
    public final void synpred89_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred89_JamlAttrHash_fragment", 204);
        try {
            // ../etc/JamlAttrHash.g:562:20: ( DOT typeIdent )
            // ../etc/JamlAttrHash.g:562:20: DOT typeIdent
            {
            match(input,DOT,FOLLOW_DOT_in_synpred89_JamlAttrHash7329); if (state.failed) return ;
            pushFollow(FOLLOW_typeIdent_in_synpred89_JamlAttrHash7331);
            typeIdent();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred89_JamlAttrHash_fragment", 204);
        }}
    // $ANTLR end synpred89_JamlAttrHash

    // $ANTLR start synpred100_JamlAttrHash
    public final void synpred100_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred100_JamlAttrHash_fragment", 215);
        try {
            // ../etc/JamlAttrHash.g:591:40: ( COMMA genericTypeArgument )
            // ../etc/JamlAttrHash.g:591:40: COMMA genericTypeArgument
            {
            match(input,COMMA,FOLLOW_COMMA_in_synpred100_JamlAttrHash7556); if (state.failed) return ;
            pushFollow(FOLLOW_genericTypeArgument_in_synpred100_JamlAttrHash7558);
            genericTypeArgument();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred100_JamlAttrHash_fragment", 215);
        }}
    // $ANTLR end synpred100_JamlAttrHash

    // $ANTLR start synpred102_JamlAttrHash
    public final void synpred102_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred102_JamlAttrHash_fragment", 217);
        try {
            // ../etc/JamlAttrHash.g:597:18: ( genericWildcardBoundType )
            // ../etc/JamlAttrHash.g:597:18: genericWildcardBoundType
            {
            pushFollow(FOLLOW_genericWildcardBoundType_in_synpred102_JamlAttrHash7612);
            genericWildcardBoundType();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred102_JamlAttrHash_fragment", 217);
        }}
    // $ANTLR end synpred102_JamlAttrHash

    // $ANTLR start synpred107_JamlAttrHash
    public final void synpred107_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred107_JamlAttrHash_fragment", 222);
        try {
            // ../etc/JamlAttrHash.g:622:42: ( COMMA formalParameterStandardDecl )
            // ../etc/JamlAttrHash.g:622:42: COMMA formalParameterStandardDecl
            {
            match(input,COMMA,FOLLOW_COMMA_in_synpred107_JamlAttrHash7830); if (state.failed) return ;
            pushFollow(FOLLOW_formalParameterStandardDecl_in_synpred107_JamlAttrHash7832);
            formalParameterStandardDecl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred107_JamlAttrHash_fragment", 222);
        }}
    // $ANTLR end synpred107_JamlAttrHash

    // $ANTLR start synpred109_JamlAttrHash
    public final void synpred109_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred109_JamlAttrHash_fragment", 224);
        try {
            // ../etc/JamlAttrHash.g:622:13: ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? )
            // ../etc/JamlAttrHash.g:622:13: formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )?
            {
            pushFollow(FOLLOW_formalParameterStandardDecl_in_synpred109_JamlAttrHash7827);
            formalParameterStandardDecl();

            state._fsp--;
            if (state.failed) return ;
            // ../etc/JamlAttrHash.g:622:41: ( COMMA formalParameterStandardDecl )*
            loop194:
            do {
                int alt194=2;
                int LA194_0 = input.LA(1);

                if ( (LA194_0==COMMA) ) {
                    int LA194_1 = input.LA(2);

                    if ( (synpred107_JamlAttrHash()) ) {
                        alt194=1;
                    }


                }


                switch (alt194) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:622:42: COMMA formalParameterStandardDecl
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_synpred109_JamlAttrHash7830); if (state.failed) return ;
            	    pushFollow(FOLLOW_formalParameterStandardDecl_in_synpred109_JamlAttrHash7832);
            	    formalParameterStandardDecl();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop194;
                }
            } while (true);

            // ../etc/JamlAttrHash.g:622:78: ( COMMA formalParameterVarArgDecl )?
            int alt195=2;
            int LA195_0 = input.LA(1);

            if ( (LA195_0==COMMA) ) {
                alt195=1;
            }
            switch (alt195) {
                case 1 :
                    // ../etc/JamlAttrHash.g:622:79: COMMA formalParameterVarArgDecl
                    {
                    match(input,COMMA,FOLLOW_COMMA_in_synpred109_JamlAttrHash7837); if (state.failed) return ;
                    pushFollow(FOLLOW_formalParameterVarArgDecl_in_synpred109_JamlAttrHash7839);
                    formalParameterVarArgDecl();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        finally {
            traceOut("synpred109_JamlAttrHash_fragment", 224);
        }}
    // $ANTLR end synpred109_JamlAttrHash

    // $ANTLR start synpred110_JamlAttrHash
    public final void synpred110_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred110_JamlAttrHash_fragment", 225);
        try {
            // ../etc/JamlAttrHash.g:625:13: ( formalParameterVarArgDecl )
            // ../etc/JamlAttrHash.g:625:13: formalParameterVarArgDecl
            {
            pushFollow(FOLLOW_formalParameterVarArgDecl_in_synpred110_JamlAttrHash7896);
            formalParameterVarArgDecl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred110_JamlAttrHash_fragment", 225);
        }}
    // $ANTLR end synpred110_JamlAttrHash

    // $ANTLR start synpred111_JamlAttrHash
    public final void synpred111_JamlAttrHash_fragment() throws RecognitionException {   
        Token ident=null;

        traceIn("synpred111_JamlAttrHash_fragment", 226);
        try {
            // ../etc/JamlAttrHash.g:646:13: ( DOT ident= IDENT )
            // ../etc/JamlAttrHash.g:646:13: DOT ident= IDENT
            {
            match(input,DOT,FOLLOW_DOT_in_synpred111_JamlAttrHash8141); if (state.failed) return ;
            ident=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred111_JamlAttrHash8145); if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred111_JamlAttrHash_fragment", 226);
        }}
    // $ANTLR end synpred111_JamlAttrHash

    // $ANTLR start synpred112_JamlAttrHash
    public final void synpred112_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred112_JamlAttrHash_fragment", 227);
        try {
            // ../etc/JamlAttrHash.g:653:9: ( annotation )
            // ../etc/JamlAttrHash.g:653:9: annotation
            {
            pushFollow(FOLLOW_annotation_in_synpred112_JamlAttrHash8198);
            annotation();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred112_JamlAttrHash_fragment", 227);
        }}
    // $ANTLR end synpred112_JamlAttrHash

    // $ANTLR start synpred124_JamlAttrHash
    public final void synpred124_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred124_JamlAttrHash_fragment", 239);
        try {
            // ../etc/JamlAttrHash.g:704:9: ( modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI | classFieldDeclaratorList SEMI ) )
            // ../etc/JamlAttrHash.g:704:9: modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI | classFieldDeclaratorList SEMI )
            {
            pushFollow(FOLLOW_modifierList_in_synpred124_JamlAttrHash8652);
            modifierList();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_type_in_synpred124_JamlAttrHash8654);
            type();

            state._fsp--;
            if (state.failed) return ;
            // ../etc/JamlAttrHash.g:705:9: ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI | classFieldDeclaratorList SEMI )
            int alt200=2;
            int LA200_0 = input.LA(1);

            if ( (LA200_0==IDENT) ) {
                int LA200_1 = input.LA(2);

                if ( (LA200_1==LPAREN) ) {
                    alt200=1;
                }
                else if ( (LA200_1==ASSIGN||LA200_1==COMMA||LA200_1==LBRACK||LA200_1==SEMI) ) {
                    alt200=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 200, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 200, 0, input);

                throw nvae;
            }
            switch (alt200) {
                case 1 :
                    // ../etc/JamlAttrHash.g:705:13: IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI
                    {
                    match(input,IDENT,FOLLOW_IDENT_in_synpred124_JamlAttrHash8668); if (state.failed) return ;
                    match(input,LPAREN,FOLLOW_LPAREN_in_synpred124_JamlAttrHash8670); if (state.failed) return ;
                    match(input,RPAREN,FOLLOW_RPAREN_in_synpred124_JamlAttrHash8672); if (state.failed) return ;
                    // ../etc/JamlAttrHash.g:705:33: ( annotationDefaultValue )?
                    int alt199=2;
                    int LA199_0 = input.LA(1);

                    if ( (LA199_0==DEFAULT) ) {
                        alt199=1;
                    }
                    switch (alt199) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:0:0: annotationDefaultValue
                            {
                            pushFollow(FOLLOW_annotationDefaultValue_in_synpred124_JamlAttrHash8674);
                            annotationDefaultValue();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }

                    match(input,SEMI,FOLLOW_SEMI_in_synpred124_JamlAttrHash8677); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:707:13: classFieldDeclaratorList SEMI
                    {
                    pushFollow(FOLLOW_classFieldDeclaratorList_in_synpred124_JamlAttrHash8719);
                    classFieldDeclaratorList();

                    state._fsp--;
                    if (state.failed) return ;
                    match(input,SEMI,FOLLOW_SEMI_in_synpred124_JamlAttrHash8721); if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        finally {
            traceOut("synpred124_JamlAttrHash_fragment", 239);
        }}
    // $ANTLR end synpred124_JamlAttrHash

    // $ANTLR start synpred126_JamlAttrHash
    public final void synpred126_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred126_JamlAttrHash_fragment", 241);
        try {
            // ../etc/JamlAttrHash.g:725:9: ( localVariableDeclaration SEMI )
            // ../etc/JamlAttrHash.g:725:9: localVariableDeclaration SEMI
            {
            pushFollow(FOLLOW_localVariableDeclaration_in_synpred126_JamlAttrHash8856);
            localVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,SEMI,FOLLOW_SEMI_in_synpred126_JamlAttrHash8858); if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred126_JamlAttrHash_fragment", 241);
        }}
    // $ANTLR end synpred126_JamlAttrHash

    // $ANTLR start synpred127_JamlAttrHash
    public final void synpred127_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred127_JamlAttrHash_fragment", 242);
        try {
            // ../etc/JamlAttrHash.g:726:9: ( typeDeclaration )
            // ../etc/JamlAttrHash.g:726:9: typeDeclaration
            {
            pushFollow(FOLLOW_typeDeclaration_in_synpred127_JamlAttrHash8869);
            typeDeclaration();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred127_JamlAttrHash_fragment", 242);
        }}
    // $ANTLR end synpred127_JamlAttrHash

    // $ANTLR start synpred131_JamlAttrHash
    public final void synpred131_JamlAttrHash_fragment() throws RecognitionException {   
        JamlAttrHashParser.statement_return elseStat = null;


        traceIn("synpred131_JamlAttrHash_fragment", 246);
        try {
            // ../etc/JamlAttrHash.g:743:13: ( ELSE elseStat= statement )
            // ../etc/JamlAttrHash.g:743:13: ELSE elseStat= statement
            {
            match(input,ELSE,FOLLOW_ELSE_in_synpred131_JamlAttrHash9167); if (state.failed) return ;
            pushFollow(FOLLOW_statement_in_synpred131_JamlAttrHash9171);
            elseStat=statement();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred131_JamlAttrHash_fragment", 246);
        }}
    // $ANTLR end synpred131_JamlAttrHash

    // $ANTLR start synpred133_JamlAttrHash
    public final void synpred133_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred133_JamlAttrHash_fragment", 248);
        try {
            // ../etc/JamlAttrHash.g:747:13: ( forInit SEMI forCondition SEMI forUpdater RPAREN statement )
            // ../etc/JamlAttrHash.g:747:13: forInit SEMI forCondition SEMI forUpdater RPAREN statement
            {
            pushFollow(FOLLOW_forInit_in_synpred133_JamlAttrHash9354);
            forInit();

            state._fsp--;
            if (state.failed) return ;
            match(input,SEMI,FOLLOW_SEMI_in_synpred133_JamlAttrHash9356); if (state.failed) return ;
            pushFollow(FOLLOW_forCondition_in_synpred133_JamlAttrHash9358);
            forCondition();

            state._fsp--;
            if (state.failed) return ;
            match(input,SEMI,FOLLOW_SEMI_in_synpred133_JamlAttrHash9360); if (state.failed) return ;
            pushFollow(FOLLOW_forUpdater_in_synpred133_JamlAttrHash9362);
            forUpdater();

            state._fsp--;
            if (state.failed) return ;
            match(input,RPAREN,FOLLOW_RPAREN_in_synpred133_JamlAttrHash9364); if (state.failed) return ;
            pushFollow(FOLLOW_statement_in_synpred133_JamlAttrHash9366);
            statement();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred133_JamlAttrHash_fragment", 248);
        }}
    // $ANTLR end synpred133_JamlAttrHash

    // $ANTLR start synpred153_JamlAttrHash
    public final void synpred153_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred153_JamlAttrHash_fragment", 268);
        try {
            // ../etc/JamlAttrHash.g:785:9: ( switchCaseLabel )
            // ../etc/JamlAttrHash.g:785:9: switchCaseLabel
            {
            pushFollow(FOLLOW_switchCaseLabel_in_synpred153_JamlAttrHash10333);
            switchCaseLabel();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred153_JamlAttrHash_fragment", 268);
        }}
    // $ANTLR end synpred153_JamlAttrHash

    // $ANTLR start synpred156_JamlAttrHash
    public final void synpred156_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred156_JamlAttrHash_fragment", 271);
        try {
            // ../etc/JamlAttrHash.g:797:9: ( localVariableDeclaration )
            // ../etc/JamlAttrHash.g:797:9: localVariableDeclaration
            {
            pushFollow(FOLLOW_localVariableDeclaration_in_synpred156_JamlAttrHash10423);
            localVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred156_JamlAttrHash_fragment", 271);
        }}
    // $ANTLR end synpred156_JamlAttrHash

    // $ANTLR start synpred157_JamlAttrHash
    public final void synpred157_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred157_JamlAttrHash_fragment", 272);
        try {
            // ../etc/JamlAttrHash.g:798:9: ( expressionList )
            // ../etc/JamlAttrHash.g:798:9: expressionList
            {
            pushFollow(FOLLOW_expressionList_in_synpred157_JamlAttrHash10445);
            expressionList();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred157_JamlAttrHash_fragment", 272);
        }}
    // $ANTLR end synpred157_JamlAttrHash

    // $ANTLR start synpred200_JamlAttrHash
    public final void synpred200_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred200_JamlAttrHash_fragment", 315);
        try {
            // ../etc/JamlAttrHash.g:934:9: ( LPAREN type RPAREN unaryExpression )
            // ../etc/JamlAttrHash.g:934:9: LPAREN type RPAREN unaryExpression
            {
            match(input,LPAREN,FOLLOW_LPAREN_in_synpred200_JamlAttrHash11978); if (state.failed) return ;
            pushFollow(FOLLOW_type_in_synpred200_JamlAttrHash11980);
            type();

            state._fsp--;
            if (state.failed) return ;
            match(input,RPAREN,FOLLOW_RPAREN_in_synpred200_JamlAttrHash11982); if (state.failed) return ;
            pushFollow(FOLLOW_unaryExpression_in_synpred200_JamlAttrHash11984);
            unaryExpression();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred200_JamlAttrHash_fragment", 315);
        }}
    // $ANTLR end synpred200_JamlAttrHash

    // $ANTLR start synpred228_JamlAttrHash
    public final void synpred228_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred228_JamlAttrHash_fragment", 343);
        try {
            // ../etc/JamlAttrHash.g:1002:13: ( ( arrayDeclarator )+ ( DOT CLASS ) )
            // ../etc/JamlAttrHash.g:1002:13: ( arrayDeclarator )+ ( DOT CLASS )
            {
            // ../etc/JamlAttrHash.g:1002:13: ( arrayDeclarator )+
            int cnt223=0;
            loop223:
            do {
                int alt223=2;
                int LA223_0 = input.LA(1);

                if ( (LA223_0==LBRACK) ) {
                    alt223=1;
                }


                switch (alt223) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:1002:17: arrayDeclarator
            	    {
            	    pushFollow(FOLLOW_arrayDeclarator_in_synpred228_JamlAttrHash13885);
            	    arrayDeclarator();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    if ( cnt223 >= 1 ) break loop223;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(223, input);
                        throw eee;
                }
                cnt223++;
            } while (true);

            // ../etc/JamlAttrHash.g:1004:13: ( DOT CLASS )
            // ../etc/JamlAttrHash.g:1004:17: DOT CLASS
            {
            match(input,DOT,FOLLOW_DOT_in_synpred228_JamlAttrHash13953); if (state.failed) return ;
            match(input,CLASS,FOLLOW_CLASS_in_synpred228_JamlAttrHash13955); if (state.failed) return ;

            }


            }

        }
        finally {
            traceOut("synpred228_JamlAttrHash_fragment", 343);
        }}
    // $ANTLR end synpred228_JamlAttrHash

    // $ANTLR start synpred236_JamlAttrHash
    public final void synpred236_JamlAttrHash_fragment() throws RecognitionException {   
        Token outerDot=null;
        Token Super=null;
        Token innerDot=null;

        traceIn("synpred236_JamlAttrHash_fragment", 351);
        try {
            // ../etc/JamlAttrHash.g:1007:13: (outerDot= DOT ( CLASS | genericTypeArgumentListSimplified (Super= SUPER arguments | SUPER innerDot= DOT IDENT arguments | IDENT arguments ) | THIS | Super= SUPER arguments | innerNewExpression ) )
            // ../etc/JamlAttrHash.g:1007:13: outerDot= DOT ( CLASS | genericTypeArgumentListSimplified (Super= SUPER arguments | SUPER innerDot= DOT IDENT arguments | IDENT arguments ) | THIS | Super= SUPER arguments | innerNewExpression )
            {
            outerDot=(Token)match(input,DOT,FOLLOW_DOT_in_synpred236_JamlAttrHash14086); if (state.failed) return ;
            // ../etc/JamlAttrHash.g:1008:13: ( CLASS | genericTypeArgumentListSimplified (Super= SUPER arguments | SUPER innerDot= DOT IDENT arguments | IDENT arguments ) | THIS | Super= SUPER arguments | innerNewExpression )
            int alt226=5;
            switch ( input.LA(1) ) {
            case CLASS:
                {
                alt226=1;
                }
                break;
            case LESS_THAN:
                {
                alt226=2;
                }
                break;
            case THIS:
                {
                alt226=3;
                }
                break;
            case SUPER:
                {
                alt226=4;
                }
                break;
            case NEW:
                {
                alt226=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 226, 0, input);

                throw nvae;
            }

            switch (alt226) {
                case 1 :
                    // ../etc/JamlAttrHash.g:1008:17: CLASS
                    {
                    match(input,CLASS,FOLLOW_CLASS_in_synpred236_JamlAttrHash14104); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:1009:17: genericTypeArgumentListSimplified (Super= SUPER arguments | SUPER innerDot= DOT IDENT arguments | IDENT arguments )
                    {
                    pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_synpred236_JamlAttrHash14167);
                    genericTypeArgumentListSimplified();

                    state._fsp--;
                    if (state.failed) return ;
                    // ../etc/JamlAttrHash.g:1010:17: (Super= SUPER arguments | SUPER innerDot= DOT IDENT arguments | IDENT arguments )
                    int alt225=3;
                    int LA225_0 = input.LA(1);

                    if ( (LA225_0==SUPER) ) {
                        int LA225_1 = input.LA(2);

                        if ( (LA225_1==DOT) ) {
                            alt225=2;
                        }
                        else if ( (LA225_1==LPAREN) ) {
                            alt225=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return ;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 225, 1, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA225_0==IDENT) ) {
                        alt225=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 225, 0, input);

                        throw nvae;
                    }
                    switch (alt225) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:1010:21: Super= SUPER arguments
                            {
                            Super=(Token)match(input,SUPER,FOLLOW_SUPER_in_synpred236_JamlAttrHash14192); if (state.failed) return ;
                            pushFollow(FOLLOW_arguments_in_synpred236_JamlAttrHash14194);
                            arguments();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;
                        case 2 :
                            // ../etc/JamlAttrHash.g:1011:21: SUPER innerDot= DOT IDENT arguments
                            {
                            match(input,SUPER,FOLLOW_SUPER_in_synpred236_JamlAttrHash14244); if (state.failed) return ;
                            innerDot=(Token)match(input,DOT,FOLLOW_DOT_in_synpred236_JamlAttrHash14248); if (state.failed) return ;
                            match(input,IDENT,FOLLOW_IDENT_in_synpred236_JamlAttrHash14250); if (state.failed) return ;
                            pushFollow(FOLLOW_arguments_in_synpred236_JamlAttrHash14252);
                            arguments();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;
                        case 3 :
                            // ../etc/JamlAttrHash.g:1012:21: IDENT arguments
                            {
                            match(input,IDENT,FOLLOW_IDENT_in_synpred236_JamlAttrHash14302); if (state.failed) return ;
                            pushFollow(FOLLOW_arguments_in_synpred236_JamlAttrHash14304);
                            arguments();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // ../etc/JamlAttrHash.g:1014:17: THIS
                    {
                    match(input,THIS,FOLLOW_THIS_in_synpred236_JamlAttrHash14379); if (state.failed) return ;

                    }
                    break;
                case 4 :
                    // ../etc/JamlAttrHash.g:1015:17: Super= SUPER arguments
                    {
                    Super=(Token)match(input,SUPER,FOLLOW_SUPER_in_synpred236_JamlAttrHash14445); if (state.failed) return ;
                    pushFollow(FOLLOW_arguments_in_synpred236_JamlAttrHash14447);
                    arguments();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 5 :
                    // ../etc/JamlAttrHash.g:1016:17: innerNewExpression
                    {
                    pushFollow(FOLLOW_innerNewExpression_in_synpred236_JamlAttrHash14495);
                    innerNewExpression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        finally {
            traceOut("synpred236_JamlAttrHash_fragment", 351);
        }}
    // $ANTLR end synpred236_JamlAttrHash

    // $ANTLR start synpred244_JamlAttrHash
    public final void synpred244_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred244_JamlAttrHash_fragment", 359);
        try {
            // ../etc/JamlAttrHash.g:1041:37: ( LBRACK expression RBRACK )
            // ../etc/JamlAttrHash.g:1041:37: LBRACK expression RBRACK
            {
            match(input,LBRACK,FOLLOW_LBRACK_in_synpred244_JamlAttrHash14896); if (state.failed) return ;
            pushFollow(FOLLOW_expression_in_synpred244_JamlAttrHash14899);
            expression();

            state._fsp--;
            if (state.failed) return ;
            match(input,RBRACK,FOLLOW_RBRACK_in_synpred244_JamlAttrHash14901); if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred244_JamlAttrHash_fragment", 359);
        }}
    // $ANTLR end synpred244_JamlAttrHash

    // Delegated rules

    public final boolean synpred102_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred102_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred124_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred124_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred25_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred25_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred228_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred228_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred86_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred86_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred127_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred127_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred131_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred131_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred68_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred68_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred110_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred110_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred62_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred62_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred60_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred60_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred42_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred42_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred157_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred157_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred133_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred133_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred100_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred100_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred111_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred111_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred200_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred200_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred109_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred109_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred27_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred244_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred244_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred24_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred156_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred156_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred53_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred53_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred153_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred153_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred107_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred107_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred61_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred61_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred54_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred54_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred26_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred26_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred236_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred236_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred112_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred112_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred126_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred126_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred52_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred52_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred89_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred89_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred87_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred87_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA39 dfa39 = new DFA39(this);
    protected DFA46 dfa46 = new DFA46(this);
    protected DFA89 dfa89 = new DFA89(this);
    protected DFA91 dfa91 = new DFA91(this);
    protected DFA100 dfa100 = new DFA100(this);
    protected DFA94 dfa94 = new DFA94(this);
    protected DFA106 dfa106 = new DFA106(this);
    protected DFA130 dfa130 = new DFA130(this);
    protected DFA142 dfa142 = new DFA142(this);
    protected DFA146 dfa146 = new DFA146(this);
    protected DFA153 dfa153 = new DFA153(this);
    static final String DFA39_eotS =
        "\27\uffff";
    static final String DFA39_eofS =
        "\27\uffff";
    static final String DFA39_minS =
        "\1\7\1\uffff\14\0\11\uffff";
    static final String DFA39_maxS =
        "\1\u00a4\1\uffff\14\0\11\uffff";
    static final String DFA39_acceptS =
        "\1\uffff\1\1\14\uffff\1\3\3\uffff\1\4\2\uffff\1\5\1\2";
    static final String DFA39_specialS =
        "\2\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\11"+
        "\uffff}>";
    static final String[] DFA39_transitionS = {
            "\1\15\17\uffff\1\1\1\uffff\1\16\22\uffff\1\25\10\uffff\1\6\1"+
            "\uffff\1\16\1\uffff\1\16\2\uffff\1\16\1\22\3\uffff\1\16\1\uffff"+
            "\1\22\2\uffff\1\14\1\uffff\1\16\4\uffff\1\22\1\uffff\2\16\1"+
            "\7\3\uffff\1\5\1\4\1\3\1\uffff\1\16\1\2\1\13\2\uffff\1\10\3"+
            "\uffff\1\11\2\uffff\1\16\1\12\75\uffff\1\16",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA39_eot = DFA.unpackEncodedString(DFA39_eotS);
    static final short[] DFA39_eof = DFA.unpackEncodedString(DFA39_eofS);
    static final char[] DFA39_min = DFA.unpackEncodedStringToUnsignedChars(DFA39_minS);
    static final char[] DFA39_max = DFA.unpackEncodedStringToUnsignedChars(DFA39_maxS);
    static final short[] DFA39_accept = DFA.unpackEncodedString(DFA39_acceptS);
    static final short[] DFA39_special = DFA.unpackEncodedString(DFA39_specialS);
    static final short[][] DFA39_transition;

    static {
        int numStates = DFA39_transitionS.length;
        DFA39_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA39_transition[i] = DFA.unpackEncodedString(DFA39_transitionS[i]);
        }
    }

    class DFA39 extends DFA {

        public DFA39(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 39;
            this.eot = DFA39_eot;
            this.eof = DFA39_eof;
            this.min = DFA39_min;
            this.max = DFA39_max;
            this.accept = DFA39_accept;
            this.special = DFA39_special;
            this.transition = DFA39_transition;
        }
        public String getDescription() {
            return "429:1: classScopeDeclarations : ( block -> ^( CLASS_INSTANCE_INITIALIZER block ) | STATIC block -> ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block ) | modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration | SEMI );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA39_2 = input.LA(1);

                         
                        int index39_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_JamlAttrHash()) ) {s = 22;}

                        else if ( (synpred53_JamlAttrHash()) ) {s = 14;}

                        else if ( (synpred54_JamlAttrHash()) ) {s = 18;}

                         
                        input.seek(index39_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA39_3 = input.LA(1);

                         
                        int index39_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_JamlAttrHash()) ) {s = 14;}

                        else if ( (synpred54_JamlAttrHash()) ) {s = 18;}

                         
                        input.seek(index39_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA39_4 = input.LA(1);

                         
                        int index39_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_JamlAttrHash()) ) {s = 14;}

                        else if ( (synpred54_JamlAttrHash()) ) {s = 18;}

                         
                        input.seek(index39_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA39_5 = input.LA(1);

                         
                        int index39_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_JamlAttrHash()) ) {s = 14;}

                        else if ( (synpred54_JamlAttrHash()) ) {s = 18;}

                         
                        input.seek(index39_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA39_6 = input.LA(1);

                         
                        int index39_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_JamlAttrHash()) ) {s = 14;}

                        else if ( (synpred54_JamlAttrHash()) ) {s = 18;}

                         
                        input.seek(index39_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA39_7 = input.LA(1);

                         
                        int index39_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_JamlAttrHash()) ) {s = 14;}

                        else if ( (synpred54_JamlAttrHash()) ) {s = 18;}

                         
                        input.seek(index39_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA39_8 = input.LA(1);

                         
                        int index39_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_JamlAttrHash()) ) {s = 14;}

                        else if ( (synpred54_JamlAttrHash()) ) {s = 18;}

                         
                        input.seek(index39_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA39_9 = input.LA(1);

                         
                        int index39_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_JamlAttrHash()) ) {s = 14;}

                        else if ( (synpred54_JamlAttrHash()) ) {s = 18;}

                         
                        input.seek(index39_9);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA39_10 = input.LA(1);

                         
                        int index39_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_JamlAttrHash()) ) {s = 14;}

                        else if ( (synpred54_JamlAttrHash()) ) {s = 18;}

                         
                        input.seek(index39_10);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA39_11 = input.LA(1);

                         
                        int index39_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_JamlAttrHash()) ) {s = 14;}

                        else if ( (synpred54_JamlAttrHash()) ) {s = 18;}

                         
                        input.seek(index39_11);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA39_12 = input.LA(1);

                         
                        int index39_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_JamlAttrHash()) ) {s = 14;}

                        else if ( (synpred54_JamlAttrHash()) ) {s = 18;}

                         
                        input.seek(index39_12);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA39_13 = input.LA(1);

                         
                        int index39_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_JamlAttrHash()) ) {s = 14;}

                        else if ( (synpred54_JamlAttrHash()) ) {s = 18;}

                         
                        input.seek(index39_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 39, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA46_eotS =
        "\25\uffff";
    static final String DFA46_eofS =
        "\25\uffff";
    static final String DFA46_minS =
        "\1\7\14\0\10\uffff";
    static final String DFA46_maxS =
        "\1\u00a4\14\0\10\uffff";
    static final String DFA46_acceptS =
        "\15\uffff\1\1\3\uffff\1\2\2\uffff\1\3";
    static final String DFA46_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\10"+
        "\uffff}>";
    static final String[] DFA46_transitionS = {
            "\1\14\21\uffff\1\15\22\uffff\1\24\10\uffff\1\5\1\uffff\1\15"+
            "\1\uffff\1\15\2\uffff\1\15\1\21\3\uffff\1\15\1\uffff\1\21\2"+
            "\uffff\1\13\1\uffff\1\15\4\uffff\1\21\1\uffff\2\15\1\6\3\uffff"+
            "\1\3\1\2\1\1\1\uffff\1\15\1\4\1\12\2\uffff\1\7\3\uffff\1\10"+
            "\2\uffff\1\15\1\11\75\uffff\1\15",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA46_eot = DFA.unpackEncodedString(DFA46_eotS);
    static final short[] DFA46_eof = DFA.unpackEncodedString(DFA46_eofS);
    static final char[] DFA46_min = DFA.unpackEncodedStringToUnsignedChars(DFA46_minS);
    static final char[] DFA46_max = DFA.unpackEncodedStringToUnsignedChars(DFA46_maxS);
    static final short[] DFA46_accept = DFA.unpackEncodedString(DFA46_acceptS);
    static final short[] DFA46_special = DFA.unpackEncodedString(DFA46_specialS);
    static final short[][] DFA46_transition;

    static {
        int numStates = DFA46_transitionS.length;
        DFA46_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA46_transition[i] = DFA.unpackEncodedString(DFA46_transitionS[i]);
        }
    }

    class DFA46 extends DFA {

        public DFA46(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 46;
            this.eot = DFA46_eot;
            this.eof = DFA46_eof;
            this.min = DFA46_min;
            this.max = DFA46_max;
            this.accept = DFA46_accept;
            this.special = DFA46_special;
            this.transition = DFA46_transition;
        }
        public String getDescription() {
            return "448:1: interfaceScopeDeclarations : ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) ) | typeDeclaration | SEMI );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA46_1 = input.LA(1);

                         
                        int index46_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_JamlAttrHash()) ) {s = 13;}

                        else if ( (synpred62_JamlAttrHash()) ) {s = 17;}

                         
                        input.seek(index46_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA46_2 = input.LA(1);

                         
                        int index46_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_JamlAttrHash()) ) {s = 13;}

                        else if ( (synpred62_JamlAttrHash()) ) {s = 17;}

                         
                        input.seek(index46_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA46_3 = input.LA(1);

                         
                        int index46_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_JamlAttrHash()) ) {s = 13;}

                        else if ( (synpred62_JamlAttrHash()) ) {s = 17;}

                         
                        input.seek(index46_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA46_4 = input.LA(1);

                         
                        int index46_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_JamlAttrHash()) ) {s = 13;}

                        else if ( (synpred62_JamlAttrHash()) ) {s = 17;}

                         
                        input.seek(index46_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA46_5 = input.LA(1);

                         
                        int index46_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_JamlAttrHash()) ) {s = 13;}

                        else if ( (synpred62_JamlAttrHash()) ) {s = 17;}

                         
                        input.seek(index46_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA46_6 = input.LA(1);

                         
                        int index46_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_JamlAttrHash()) ) {s = 13;}

                        else if ( (synpred62_JamlAttrHash()) ) {s = 17;}

                         
                        input.seek(index46_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA46_7 = input.LA(1);

                         
                        int index46_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_JamlAttrHash()) ) {s = 13;}

                        else if ( (synpred62_JamlAttrHash()) ) {s = 17;}

                         
                        input.seek(index46_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA46_8 = input.LA(1);

                         
                        int index46_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_JamlAttrHash()) ) {s = 13;}

                        else if ( (synpred62_JamlAttrHash()) ) {s = 17;}

                         
                        input.seek(index46_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA46_9 = input.LA(1);

                         
                        int index46_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_JamlAttrHash()) ) {s = 13;}

                        else if ( (synpred62_JamlAttrHash()) ) {s = 17;}

                         
                        input.seek(index46_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA46_10 = input.LA(1);

                         
                        int index46_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_JamlAttrHash()) ) {s = 13;}

                        else if ( (synpred62_JamlAttrHash()) ) {s = 17;}

                         
                        input.seek(index46_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA46_11 = input.LA(1);

                         
                        int index46_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_JamlAttrHash()) ) {s = 13;}

                        else if ( (synpred62_JamlAttrHash()) ) {s = 17;}

                         
                        input.seek(index46_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA46_12 = input.LA(1);

                         
                        int index46_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_JamlAttrHash()) ) {s = 13;}

                        else if ( (synpred62_JamlAttrHash()) ) {s = 17;}

                         
                        input.seek(index46_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 46, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA89_eotS =
        "\22\uffff";
    static final String DFA89_eofS =
        "\22\uffff";
    static final String DFA89_minS =
        "\1\7\14\0\5\uffff";
    static final String DFA89_maxS =
        "\1\u00a4\14\0\5\uffff";
    static final String DFA89_acceptS =
        "\15\uffff\1\1\1\uffff\1\2\2\uffff";
    static final String DFA89_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\5\uffff}>";
    static final String[] DFA89_transitionS = {
            "\1\14\55\uffff\1\5\1\uffff\1\15\1\uffff\1\15\2\uffff\1\15\1"+
            "\17\3\uffff\1\15\1\uffff\1\17\2\uffff\1\13\1\uffff\1\15\4\uffff"+
            "\1\17\1\uffff\2\15\1\6\3\uffff\1\3\1\2\1\1\1\uffff\1\15\1\4"+
            "\1\12\2\uffff\1\7\3\uffff\1\10\3\uffff\1\11\75\uffff\1\15",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA89_eot = DFA.unpackEncodedString(DFA89_eotS);
    static final short[] DFA89_eof = DFA.unpackEncodedString(DFA89_eofS);
    static final char[] DFA89_min = DFA.unpackEncodedStringToUnsignedChars(DFA89_minS);
    static final char[] DFA89_max = DFA.unpackEncodedStringToUnsignedChars(DFA89_maxS);
    static final short[] DFA89_accept = DFA.unpackEncodedString(DFA89_acceptS);
    static final short[] DFA89_special = DFA.unpackEncodedString(DFA89_specialS);
    static final short[][] DFA89_transition;

    static {
        int numStates = DFA89_transitionS.length;
        DFA89_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA89_transition[i] = DFA.unpackEncodedString(DFA89_transitionS[i]);
        }
    }

    class DFA89 extends DFA {

        public DFA89(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 89;
            this.eot = DFA89_eot;
            this.eof = DFA89_eof;
            this.min = DFA89_min;
            this.max = DFA89_max;
            this.accept = DFA89_accept;
            this.special = DFA89_special;
            this.transition = DFA89_transition;
        }
        public String getDescription() {
            return "703:1: annotationScopeDeclarations : ( modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA89_1 = input.LA(1);

                         
                        int index89_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_JamlAttrHash()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index89_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA89_2 = input.LA(1);

                         
                        int index89_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_JamlAttrHash()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index89_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA89_3 = input.LA(1);

                         
                        int index89_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_JamlAttrHash()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index89_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA89_4 = input.LA(1);

                         
                        int index89_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_JamlAttrHash()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index89_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA89_5 = input.LA(1);

                         
                        int index89_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_JamlAttrHash()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index89_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA89_6 = input.LA(1);

                         
                        int index89_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_JamlAttrHash()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index89_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA89_7 = input.LA(1);

                         
                        int index89_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_JamlAttrHash()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index89_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA89_8 = input.LA(1);

                         
                        int index89_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_JamlAttrHash()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index89_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA89_9 = input.LA(1);

                         
                        int index89_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_JamlAttrHash()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index89_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA89_10 = input.LA(1);

                         
                        int index89_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_JamlAttrHash()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index89_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA89_11 = input.LA(1);

                         
                        int index89_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_JamlAttrHash()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index89_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA89_12 = input.LA(1);

                         
                        int index89_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_JamlAttrHash()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index89_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 89, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA91_eotS =
        "\61\uffff";
    static final String DFA91_eofS =
        "\61\uffff";
    static final String DFA91_minS =
        "\1\7\4\0\6\uffff\1\0\45\uffff";
    static final String DFA91_maxS =
        "\1\u00aa\4\0\6\uffff\1\0\45\uffff";
    static final String DFA91_acceptS =
        "\5\uffff\1\2\14\uffff\1\3\35\uffff\1\1";
    static final String DFA91_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\6\uffff\1\4\45\uffff}>";
    static final String[] DFA91_transitionS = {
            "\1\2\4\uffff\1\22\10\uffff\1\22\1\uffff\1\22\1\uffff\1\22\1"+
            "\uffff\1\22\1\uffff\2\22\3\uffff\1\22\3\uffff\1\22\5\uffff\1"+
            "\22\10\uffff\1\5\1\22\1\3\1\22\1\3\2\uffff\1\3\1\5\1\22\1\uffff"+
            "\1\22\1\3\1\uffff\1\5\1\uffff\1\22\1\1\1\uffff\1\3\2\22\2\uffff"+
            "\1\5\1\uffff\2\3\1\5\2\22\1\uffff\3\5\1\22\1\3\2\5\2\22\1\13"+
            "\2\22\1\uffff\1\5\3\22\1\5\1\22\74\uffff\1\4\6\22",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA91_eot = DFA.unpackEncodedString(DFA91_eotS);
    static final short[] DFA91_eof = DFA.unpackEncodedString(DFA91_eofS);
    static final char[] DFA91_min = DFA.unpackEncodedStringToUnsignedChars(DFA91_minS);
    static final char[] DFA91_max = DFA.unpackEncodedStringToUnsignedChars(DFA91_maxS);
    static final short[] DFA91_accept = DFA.unpackEncodedString(DFA91_acceptS);
    static final short[] DFA91_special = DFA.unpackEncodedString(DFA91_specialS);
    static final short[][] DFA91_transition;

    static {
        int numStates = DFA91_transitionS.length;
        DFA91_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA91_transition[i] = DFA.unpackEncodedString(DFA91_transitionS[i]);
        }
    }

    class DFA91 extends DFA {

        public DFA91(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 91;
            this.eot = DFA91_eot;
            this.eof = DFA91_eof;
            this.min = DFA91_min;
            this.max = DFA91_max;
            this.accept = DFA91_accept;
            this.special = DFA91_special;
            this.transition = DFA91_transition;
        }
        public String getDescription() {
            return "724:1: blockStatement : ( localVariableDeclaration SEMI | typeDeclaration | statement );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA91_1 = input.LA(1);

                         
                        int index91_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_JamlAttrHash()) ) {s = 48;}

                        else if ( (synpred127_JamlAttrHash()) ) {s = 5;}

                         
                        input.seek(index91_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA91_2 = input.LA(1);

                         
                        int index91_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_JamlAttrHash()) ) {s = 48;}

                        else if ( (synpred127_JamlAttrHash()) ) {s = 5;}

                         
                        input.seek(index91_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA91_3 = input.LA(1);

                         
                        int index91_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_JamlAttrHash()) ) {s = 48;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index91_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA91_4 = input.LA(1);

                         
                        int index91_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_JamlAttrHash()) ) {s = 48;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index91_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA91_11 = input.LA(1);

                         
                        int index91_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_JamlAttrHash()) ) {s = 5;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index91_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 91, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA100_eotS =
        "\22\uffff";
    static final String DFA100_eofS =
        "\22\uffff";
    static final String DFA100_minS =
        "\1\14\15\uffff\1\4\3\uffff";
    static final String DFA100_maxS =
        "\1\u00aa\15\uffff\1\114\3\uffff";
    static final String DFA100_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15\1\uffff\1\17\1\20\1\16";
    static final String DFA100_specialS =
        "\22\uffff}>";
    static final String[] DFA100_transitionS = {
            "\1\17\10\uffff\1\17\1\uffff\1\1\1\uffff\1\17\1\uffff\1\17\1"+
            "\uffff\2\17\3\uffff\1\17\3\uffff\1\17\5\uffff\1\20\11\uffff"+
            "\1\2\1\17\1\14\1\17\2\uffff\1\17\1\uffff\1\15\1\uffff\1\6\1"+
            "\17\3\uffff\1\17\2\uffff\1\17\1\4\1\3\4\uffff\2\17\1\uffff\2"+
            "\17\4\uffff\1\12\1\17\2\uffff\1\17\1\10\1\11\1\17\1\13\2\uffff"+
            "\1\17\1\7\1\17\1\uffff\1\5\74\uffff\1\16\6\17",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\3\17\1\uffff\2\17\1\21\1\uffff\4\17\2\uffff\5\17\1\uffff\3"+
            "\17\1\uffff\6\17\1\uffff\6\17\3\uffff\11\17\27\uffff\1\17",
            "",
            "",
            ""
    };

    static final short[] DFA100_eot = DFA.unpackEncodedString(DFA100_eotS);
    static final short[] DFA100_eof = DFA.unpackEncodedString(DFA100_eofS);
    static final char[] DFA100_min = DFA.unpackEncodedStringToUnsignedChars(DFA100_minS);
    static final char[] DFA100_max = DFA.unpackEncodedStringToUnsignedChars(DFA100_maxS);
    static final short[] DFA100_accept = DFA.unpackEncodedString(DFA100_acceptS);
    static final short[] DFA100_special = DFA.unpackEncodedString(DFA100_specialS);
    static final short[][] DFA100_transition;

    static {
        int numStates = DFA100_transitionS.length;
        DFA100_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA100_transition[i] = DFA.unpackEncodedString(DFA100_transitionS[i]);
        }
    }

    class DFA100 extends DFA {

        public DFA100(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 100;
            this.eot = DFA100_eot;
            this.eof = DFA100_eof;
            this.min = DFA100_min;
            this.max = DFA100_max;
            this.accept = DFA100_accept;
            this.special = DFA100_special;
            this.transition = DFA100_transition;
        }
        public String getDescription() {
            return "736:1: statement : ( block | ASSERT expr1= expression ( COLON expr2= expression SEMI -> ^( ASSERT $expr1 $expr2) | SEMI -> ^( ASSERT $expr1) ) | IF parenthesizedExpression ifStat= statement ( ELSE elseStat= statement -> ^( IF parenthesizedExpression $ifStat $elseStat) | -> ^( IF parenthesizedExpression $ifStat) ) | FOR LPAREN ( forInit SEMI forCondition SEMI forUpdater RPAREN statement -> ^( FOR forInit forCondition forUpdater statement ) | localModifierList type IDENT COLON expression RPAREN statement -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement ) ) | WHILE parenthesizedExpression statement -> ^( WHILE parenthesizedExpression statement ) | DO statement WHILE parenthesizedExpression SEMI -> ^( DO statement parenthesizedExpression ) | TRY block ( catches ( finallyClause )? | finallyClause ) -> ^( TRY block ( catches )? ( finallyClause )? ) | SWITCH parenthesizedExpression LCURLY switchBlockLabels RCURLY -> ^( SWITCH parenthesizedExpression switchBlockLabels ) | SYNCHRONIZED parenthesizedExpression block -> ^( SYNCHRONIZED parenthesizedExpression block ) | RETURN ( expression )? SEMI -> ^( RETURN ( expression )? ) | THROW expression SEMI -> ^( THROW expression ) | BREAK ( IDENT )? SEMI -> ^( BREAK ( IDENT )? ) | CONTINUE ( IDENT )? SEMI -> ^( CONTINUE ( IDENT )? ) | IDENT COLON statement -> ^( LABELED_STATEMENT IDENT statement ) | expression SEMI | SEMI );";
        }
    }
    static final String DFA94_eotS =
        "\30\uffff";
    static final String DFA94_eofS =
        "\30\uffff";
    static final String DFA94_minS =
        "\1\7\4\0\23\uffff";
    static final String DFA94_maxS =
        "\1\u00aa\4\0\23\uffff";
    static final String DFA94_acceptS =
        "\5\uffff\1\1\21\uffff\1\2";
    static final String DFA94_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\23\uffff}>";
    static final String[] DFA94_transitionS = {
            "\1\2\4\uffff\1\5\10\uffff\1\5\3\uffff\1\5\1\uffff\1\5\1\uffff"+
            "\2\5\3\uffff\1\5\3\uffff\1\5\5\uffff\1\5\12\uffff\1\3\1\uffff"+
            "\1\3\2\uffff\1\3\4\uffff\1\3\3\uffff\1\5\1\1\1\uffff\1\3\6\uffff"+
            "\2\3\1\uffff\2\5\5\uffff\1\3\2\uffff\1\5\2\uffff\1\5\3\uffff"+
            "\1\5\1\uffff\1\5\76\uffff\1\4\6\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA94_eot = DFA.unpackEncodedString(DFA94_eotS);
    static final short[] DFA94_eof = DFA.unpackEncodedString(DFA94_eofS);
    static final char[] DFA94_min = DFA.unpackEncodedStringToUnsignedChars(DFA94_minS);
    static final char[] DFA94_max = DFA.unpackEncodedStringToUnsignedChars(DFA94_maxS);
    static final short[] DFA94_accept = DFA.unpackEncodedString(DFA94_acceptS);
    static final short[] DFA94_special = DFA.unpackEncodedString(DFA94_specialS);
    static final short[][] DFA94_transition;

    static {
        int numStates = DFA94_transitionS.length;
        DFA94_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA94_transition[i] = DFA.unpackEncodedString(DFA94_transitionS[i]);
        }
    }

    class DFA94 extends DFA {

        public DFA94(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 94;
            this.eot = DFA94_eot;
            this.eof = DFA94_eof;
            this.min = DFA94_min;
            this.max = DFA94_max;
            this.accept = DFA94_accept;
            this.special = DFA94_special;
            this.transition = DFA94_transition;
        }
        public String getDescription() {
            return "747:9: ( forInit SEMI forCondition SEMI forUpdater RPAREN statement -> ^( FOR forInit forCondition forUpdater statement ) | localModifierList type IDENT COLON expression RPAREN statement -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA94_1 = input.LA(1);

                         
                        int index94_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred133_JamlAttrHash()) ) {s = 5;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index94_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA94_2 = input.LA(1);

                         
                        int index94_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred133_JamlAttrHash()) ) {s = 5;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index94_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA94_3 = input.LA(1);

                         
                        int index94_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred133_JamlAttrHash()) ) {s = 5;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index94_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA94_4 = input.LA(1);

                         
                        int index94_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred133_JamlAttrHash()) ) {s = 5;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index94_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 94, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA106_eotS =
        "\27\uffff";
    static final String DFA106_eofS =
        "\27\uffff";
    static final String DFA106_minS =
        "\1\7\2\uffff\2\0\22\uffff";
    static final String DFA106_maxS =
        "\1\u00aa\2\uffff\2\0\22\uffff";
    static final String DFA106_acceptS =
        "\1\uffff\1\1\3\uffff\1\2\20\uffff\1\3";
    static final String DFA106_specialS =
        "\3\uffff\1\0\1\1\22\uffff}>";
    static final String[] DFA106_transitionS = {
            "\1\1\4\uffff\1\5\10\uffff\1\5\3\uffff\1\5\1\uffff\1\5\1\uffff"+
            "\2\5\3\uffff\1\5\3\uffff\1\5\5\uffff\1\26\12\uffff\1\3\1\uffff"+
            "\1\3\2\uffff\1\3\4\uffff\1\3\3\uffff\1\5\1\1\1\uffff\1\3\6\uffff"+
            "\2\3\1\uffff\2\5\5\uffff\1\3\2\uffff\1\5\2\uffff\1\5\3\uffff"+
            "\1\5\1\uffff\1\5\76\uffff\1\4\6\5",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA106_eot = DFA.unpackEncodedString(DFA106_eotS);
    static final short[] DFA106_eof = DFA.unpackEncodedString(DFA106_eofS);
    static final char[] DFA106_min = DFA.unpackEncodedStringToUnsignedChars(DFA106_minS);
    static final char[] DFA106_max = DFA.unpackEncodedStringToUnsignedChars(DFA106_maxS);
    static final short[] DFA106_accept = DFA.unpackEncodedString(DFA106_acceptS);
    static final short[] DFA106_special = DFA.unpackEncodedString(DFA106_specialS);
    static final short[][] DFA106_transition;

    static {
        int numStates = DFA106_transitionS.length;
        DFA106_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA106_transition[i] = DFA.unpackEncodedString(DFA106_transitionS[i]);
        }
    }

    class DFA106 extends DFA {

        public DFA106(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 106;
            this.eot = DFA106_eot;
            this.eof = DFA106_eof;
            this.min = DFA106_min;
            this.max = DFA106_max;
            this.accept = DFA106_accept;
            this.special = DFA106_special;
            this.transition = DFA106_transition;
        }
        public String getDescription() {
            return "796:1: forInit : ( localVariableDeclaration -> ^( FOR_INIT localVariableDeclaration ) | expressionList -> ^( FOR_INIT expressionList ) | -> ^( FOR_INIT ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA106_3 = input.LA(1);

                         
                        int index106_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred156_JamlAttrHash()) ) {s = 1;}

                        else if ( (synpred157_JamlAttrHash()) ) {s = 5;}

                         
                        input.seek(index106_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA106_4 = input.LA(1);

                         
                        int index106_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred156_JamlAttrHash()) ) {s = 1;}

                        else if ( (synpred157_JamlAttrHash()) ) {s = 5;}

                         
                        input.seek(index106_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 106, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA130_eotS =
        "\21\uffff";
    static final String DFA130_eofS =
        "\21\uffff";
    static final String DFA130_minS =
        "\1\31\2\uffff\1\0\15\uffff";
    static final String DFA130_maxS =
        "\1\u00aa\2\uffff\1\0\15\uffff";
    static final String DFA130_acceptS =
        "\1\uffff\1\1\1\2\1\uffff\1\4\13\uffff\1\3";
    static final String DFA130_specialS =
        "\3\uffff\1\0\15\uffff}>";
    static final String[] DFA130_transitionS = {
            "\1\4\1\uffff\1\2\1\uffff\1\3\4\uffff\1\1\24\uffff\1\4\1\uffff"+
            "\1\4\2\uffff\1\4\4\uffff\1\4\3\uffff\1\4\2\uffff\1\4\6\uffff"+
            "\2\4\1\uffff\2\4\5\uffff\1\4\2\uffff\1\4\2\uffff\1\4\3\uffff"+
            "\1\4\1\uffff\1\4\76\uffff\7\4",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA130_eot = DFA.unpackEncodedString(DFA130_eotS);
    static final short[] DFA130_eof = DFA.unpackEncodedString(DFA130_eofS);
    static final char[] DFA130_min = DFA.unpackEncodedStringToUnsignedChars(DFA130_minS);
    static final char[] DFA130_max = DFA.unpackEncodedStringToUnsignedChars(DFA130_maxS);
    static final short[] DFA130_accept = DFA.unpackEncodedString(DFA130_acceptS);
    static final short[] DFA130_special = DFA.unpackEncodedString(DFA130_specialS);
    static final short[][] DFA130_transition;

    static {
        int numStates = DFA130_transitionS.length;
        DFA130_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA130_transition[i] = DFA.unpackEncodedString(DFA130_transitionS[i]);
        }
    }

    class DFA130 extends DFA {

        public DFA130(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 130;
            this.eot = DFA130_eot;
            this.eof = DFA130_eof;
            this.min = DFA130_min;
            this.max = DFA130_max;
            this.accept = DFA130_accept;
            this.special = DFA130_special;
            this.transition = DFA130_transition;
        }
        public String getDescription() {
            return "931:1: unaryExpressionNotPlusMinus : ( NOT unaryExpression -> ^( NOT unaryExpression ) | LOGICAL_NOT unaryExpression -> ^( LOGICAL_NOT unaryExpression ) | LPAREN type RPAREN unaryExpression -> ^( CAST_EXPR[$LPAREN, \"CAST_EXPR\"] type unaryExpression ) | postfixedExpression );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA130_3 = input.LA(1);

                         
                        int index130_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred200_JamlAttrHash()) ) {s = 16;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index130_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 130, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA142_eotS =
        "\14\uffff";
    static final String DFA142_eofS =
        "\14\uffff";
    static final String DFA142_minS =
        "\1\31\6\uffff\1\17\4\uffff";
    static final String DFA142_maxS =
        "\1\u00aa\6\uffff\1\35\4\uffff";
    static final String DFA142_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\uffff\1\11\1\12\1\10\1\7";
    static final String DFA142_specialS =
        "\14\uffff}>";
    static final String[] DFA142_transitionS = {
            "\1\5\3\uffff\1\1\31\uffff\1\10\1\uffff\1\10\2\uffff\1\10\4\uffff"+
            "\1\10\3\uffff\1\2\2\uffff\1\10\6\uffff\2\10\1\uffff\1\3\1\2"+
            "\5\uffff\1\10\2\uffff\1\7\2\uffff\1\6\3\uffff\1\2\1\uffff\1"+
            "\11\76\uffff\1\4\6\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\12\15\uffff\1\13",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA142_eot = DFA.unpackEncodedString(DFA142_eotS);
    static final short[] DFA142_eof = DFA.unpackEncodedString(DFA142_eofS);
    static final char[] DFA142_min = DFA.unpackEncodedStringToUnsignedChars(DFA142_minS);
    static final char[] DFA142_max = DFA.unpackEncodedStringToUnsignedChars(DFA142_maxS);
    static final short[] DFA142_accept = DFA.unpackEncodedString(DFA142_acceptS);
    static final short[] DFA142_special = DFA.unpackEncodedString(DFA142_specialS);
    static final short[][] DFA142_transition;

    static {
        int numStates = DFA142_transitionS.length;
        DFA142_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA142_transition[i] = DFA.unpackEncodedString(DFA142_transitionS[i]);
        }
    }

    class DFA142 extends DFA {

        public DFA142(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 142;
            this.eot = DFA142_eot;
            this.eof = DFA142_eof;
            this.min = DFA142_min;
            this.max = DFA142_max;
            this.accept = DFA142_accept;
            this.special = DFA142_special;
            this.transition = DFA142_transition;
        }
        public String getDescription() {
            return "966:1: primaryExpression : ( parenthesizedExpression | literal | newExpression | qualifiedIdentExpression | genericTypeArgumentListSimplified ( SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) ) | IDENT arguments -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments ) | THIS arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) ) | ( THIS -> THIS ) ( arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments ) )? | SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] arguments ) | ( SUPER DOT IDENT ) ( arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) ) | ( primitiveType -> primitiveType ) ( arrayDeclarator -> ^( arrayDeclarator $primaryExpression) )* DOT CLASS -> ^( DOT $primaryExpression CLASS ) | VOID DOT CLASS -> ^( DOT VOID CLASS ) );";
        }
    }
    static final String DFA146_eotS =
        "\60\uffff";
    static final String DFA146_eofS =
        "\1\4\57\uffff";
    static final String DFA146_minS =
        "\1\4\1\0\1\uffff\1\0\54\uffff";
    static final String DFA146_maxS =
        "\1\114\1\0\1\uffff\1\0\54\uffff";
    static final String DFA146_acceptS =
        "\2\uffff\1\2\1\uffff\1\4\51\uffff\1\1\1\3";
    static final String DFA146_specialS =
        "\1\uffff\1\0\1\uffff\1\1\54\uffff}>";
    static final String[] DFA146_transitionS = {
            "\3\4\1\uffff\7\4\1\3\2\uffff\4\4\1\1\1\uffff\3\4\1\uffff\1\4"+
            "\1\2\4\4\1\uffff\22\4\27\uffff\1\4",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA146_eot = DFA.unpackEncodedString(DFA146_eotS);
    static final short[] DFA146_eof = DFA.unpackEncodedString(DFA146_eofS);
    static final char[] DFA146_min = DFA.unpackEncodedStringToUnsignedChars(DFA146_minS);
    static final char[] DFA146_max = DFA.unpackEncodedStringToUnsignedChars(DFA146_maxS);
    static final short[] DFA146_accept = DFA.unpackEncodedString(DFA146_acceptS);
    static final short[] DFA146_special = DFA.unpackEncodedString(DFA146_specialS);
    static final short[][] DFA146_transition;

    static {
        int numStates = DFA146_transitionS.length;
        DFA146_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA146_transition[i] = DFA.unpackEncodedString(DFA146_transitionS[i]);
        }
    }

    class DFA146 extends DFA {

        public DFA146(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 146;
            this.eot = DFA146_eot;
            this.eof = DFA146_eof;
            this.min = DFA146_min;
            this.max = DFA146_max;
            this.accept = DFA146_accept;
            this.special = DFA146_special;
            this.transition = DFA146_transition;
        }
        public String getDescription() {
            return "1002:9: ( ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) ) | arguments -> ^( METHOD_CALL qualifiedIdentifier arguments ) | outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA146_1 = input.LA(1);

                         
                        int index146_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_JamlAttrHash()) ) {s = 46;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index146_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA146_3 = input.LA(1);

                         
                        int index146_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred236_JamlAttrHash()) ) {s = 47;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index146_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 146, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA153_eotS =
        "\56\uffff";
    static final String DFA153_eofS =
        "\1\2\55\uffff";
    static final String DFA153_minS =
        "\1\4\1\0\54\uffff";
    static final String DFA153_maxS =
        "\1\114\1\0\54\uffff";
    static final String DFA153_acceptS =
        "\2\uffff\1\2\52\uffff\1\1";
    static final String DFA153_specialS =
        "\1\uffff\1\0\54\uffff}>";
    static final String[] DFA153_transitionS = {
            "\3\2\1\uffff\10\2\2\uffff\4\2\1\1\1\uffff\3\2\1\uffff\1\2\1"+
            "\uffff\4\2\1\uffff\22\2\27\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA153_eot = DFA.unpackEncodedString(DFA153_eotS);
    static final short[] DFA153_eof = DFA.unpackEncodedString(DFA153_eofS);
    static final char[] DFA153_min = DFA.unpackEncodedStringToUnsignedChars(DFA153_minS);
    static final char[] DFA153_max = DFA.unpackEncodedStringToUnsignedChars(DFA153_maxS);
    static final short[] DFA153_accept = DFA.unpackEncodedString(DFA153_acceptS);
    static final short[] DFA153_special = DFA.unpackEncodedString(DFA153_specialS);
    static final short[][] DFA153_transition;

    static {
        int numStates = DFA153_transitionS.length;
        DFA153_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA153_transition[i] = DFA.unpackEncodedString(DFA153_transitionS[i]);
        }
    }

    class DFA153 extends DFA {

        public DFA153(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 153;
            this.eot = DFA153_eot;
            this.eof = DFA153_eof;
            this.min = DFA153_min;
            this.max = DFA153_max;
            this.accept = DFA153_accept;
            this.special = DFA153_special;
            this.transition = DFA153_transition;
        }
        public String getDescription() {
            return "()* loopback of 1041:36: ( LBRACK expression RBRACK )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA153_1 = input.LA(1);

                         
                        int index153_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_JamlAttrHash()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index153_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 153, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_attrMapping_in_attrMappings4526 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_attrMappings4537 = new BitSet(new long[]{0x0000000000000400L,0x0000000800080020L,0x000007E000000000L});
    public static final BitSet FOLLOW_attrMapping_in_attrMappings4541 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_attribute_in_attrMapping4561 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_ASSIGN_in_attrMapping4568 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_GREATER_THAN_in_attrMapping4570 = new BitSet(new long[]{0x0000000000000400L,0x0000000800080020L,0x000007E000000000L});
    public static final BitSet FOLLOW_attributeValue_in_attrMapping4575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_attribute4589 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_attribute4591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_attribute4597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_attributeValue4611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_literal4630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLOATING_POINT_LITERAL_in_literal4646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARACTER_LITERAL_in_literal4656 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_literal4666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_literal4676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compilationUnit_in_javaSource4701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationList_in_compilationUnit4737 = new BitSet(new long[]{0x2020100000000082L,0x000000444CF26048L});
    public static final BitSet FOLLOW_packageDeclaration_in_compilationUnit4748 = new BitSet(new long[]{0x2020100000000082L,0x000000444CE26048L});
    public static final BitSet FOLLOW_importDeclaration_in_compilationUnit4760 = new BitSet(new long[]{0x2020100000000082L,0x000000444CE26048L});
    public static final BitSet FOLLOW_typeDecls_in_compilationUnit4772 = new BitSet(new long[]{0x2020100000000082L,0x000000444CE22048L});
    public static final BitSet FOLLOW_typeDeclaration_in_typeDecls4792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_typeDecls4802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PACKAGE_in_packageDeclaration4822 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_qualifiedIdentifier_in_packageDeclaration4825 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_packageDeclaration4827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_importDeclaration4853 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_STATIC_in_importDeclaration4856 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_qualifiedIdentifier_in_importDeclaration4859 = new BitSet(new long[]{0x0000100000010000L});
    public static final BitSet FOLLOW_DOTSTAR_in_importDeclaration4861 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_importDeclaration4864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifierList_in_typeDeclaration4888 = new BitSet(new long[]{0x2020000000000080L,0x000000444CE22048L});
    public static final BitSet FOLLOW_classTypeDeclaration_in_typeDeclaration4903 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceTypeDeclaration_in_typeDeclaration4918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumTypeDeclaration_in_typeDeclaration4933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeDeclaration_in_typeDeclaration4948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CLASS_in_classTypeDeclaration4983 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_classTypeDeclaration4985 = new BitSet(new long[]{0x0000000002800000L,0x0000000000000810L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_classTypeDeclaration4987 = new BitSet(new long[]{0x0000000002800000L,0x0000000000000810L});
    public static final BitSet FOLLOW_classExtendsClause_in_classTypeDeclaration4990 = new BitSet(new long[]{0x0000000002800000L,0x0000000000000810L});
    public static final BitSet FOLLOW_implementsClause_in_classTypeDeclaration4993 = new BitSet(new long[]{0x0000000002800000L,0x0000000000000810L});
    public static final BitSet FOLLOW_classBody_in_classTypeDeclaration4996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTENDS_in_classExtendsClause5049 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_classExtendsClause5051 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTENDS_in_interfaceExtendsClause5095 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_typeList_in_interfaceExtendsClause5097 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPLEMENTS_in_implementsClause5141 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_typeList_in_implementsClause5143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_THAN_in_genericTypeParameterList5188 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeParameter_in_genericTypeParameterList5190 = new BitSet(new long[]{0x0000800000100900L});
    public static final BitSet FOLLOW_COMMA_in_genericTypeParameterList5193 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeParameter_in_genericTypeParameterList5195 = new BitSet(new long[]{0x0000800000100900L});
    public static final BitSet FOLLOW_genericTypeListClosing_in_genericTypeParameterList5199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATER_THAN_in_genericTypeListClosing5314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHIFT_RIGHT_in_genericTypeListClosing5324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BIT_SHIFT_RIGHT_in_genericTypeListClosing5334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_genericTypeParameter5362 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_bound_in_genericTypeParameter5364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTENDS_in_bound5410 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_bound5412 = new BitSet(new long[]{0x0000000000000012L});
    public static final BitSet FOLLOW_AND_in_bound5415 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_bound5417 = new BitSet(new long[]{0x0000000000000012L});
    public static final BitSet FOLLOW_ENUM_in_enumTypeDeclaration5458 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_enumTypeDeclaration5460 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000800L});
    public static final BitSet FOLLOW_implementsClause_in_enumTypeDeclaration5462 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000800L});
    public static final BitSet FOLLOW_enumBody_in_enumTypeDeclaration5465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_enumBody5512 = new BitSet(new long[]{0x0020000000000080L,0x000000444CE20040L,0x0000001000000000L});
    public static final BitSet FOLLOW_enumScopeDeclarations_in_enumBody5514 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_RCURLY_in_enumBody5516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumConstants_in_enumScopeDeclarations5553 = new BitSet(new long[]{0x0000100000000802L});
    public static final BitSet FOLLOW_COMMA_in_enumScopeDeclarations5556 = new BitSet(new long[]{0x0000100000000002L});
    public static final BitSet FOLLOW_enumClassScopeDeclarations_in_enumScopeDeclarations5561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_enumClassScopeDeclarations5581 = new BitSet(new long[]{0x32A0100002800082L,0x000000644EE3A14AL,0x0000001000000000L});
    public static final BitSet FOLLOW_classScopeDeclarations_in_enumClassScopeDeclarations5583 = new BitSet(new long[]{0x32A0100002800082L,0x000000644EE3A14AL,0x0000001000000000L});
    public static final BitSet FOLLOW_enumConstant_in_enumConstants5622 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_enumConstants5625 = new BitSet(new long[]{0x0020000000000080L,0x000000444CE20040L,0x0000001000000000L});
    public static final BitSet FOLLOW_enumConstant_in_enumConstants5628 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_annotationList_in_enumConstant5653 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_enumConstant5655 = new BitSet(new long[]{0x0000000022800002L,0x0000000000000810L});
    public static final BitSet FOLLOW_arguments_in_enumConstant5658 = new BitSet(new long[]{0x0000000002800002L,0x0000000000000810L});
    public static final BitSet FOLLOW_classBody_in_enumConstant5661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERFACE_in_interfaceTypeDeclaration5686 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_interfaceTypeDeclaration5688 = new BitSet(new long[]{0x0000000002800000L,0x0000000000000010L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_interfaceTypeDeclaration5690 = new BitSet(new long[]{0x0000000002800000L,0x0000000000000010L});
    public static final BitSet FOLLOW_interfaceExtendsClause_in_interfaceTypeDeclaration5693 = new BitSet(new long[]{0x0000000002800000L,0x0000000000000010L});
    public static final BitSet FOLLOW_interfaceBody_in_interfaceTypeDeclaration5696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeList5746 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_typeList5749 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_typeList5752 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_LCURLY_in_classBody5777 = new BitSet(new long[]{0x32A0140002800080L,0x000000644EE3A14AL,0x0000001000000000L});
    public static final BitSet FOLLOW_classScopeDeclarations_in_classBody5779 = new BitSet(new long[]{0x32A0140002800080L,0x000000644EE3A14AL,0x0000001000000000L});
    public static final BitSet FOLLOW_RCURLY_in_classBody5782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_interfaceBody5824 = new BitSet(new long[]{0x32A0140002000080L,0x000000644EE3A14AL,0x0000001000000000L});
    public static final BitSet FOLLOW_interfaceScopeDeclarations_in_interfaceBody5826 = new BitSet(new long[]{0x32A0140002000080L,0x000000644EE3A14AL,0x0000001000000000L});
    public static final BitSet FOLLOW_RCURLY_in_interfaceBody5829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_classScopeDeclarations5867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_in_classScopeDeclarations5896 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_block_in_classScopeDeclarations5898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifierList_in_classScopeDeclarations5921 = new BitSet(new long[]{0x1280000002000000L,0x0000002002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_classScopeDeclarations5935 = new BitSet(new long[]{0x1280000000000000L,0x0000002002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_classScopeDeclarations5954 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_classScopeDeclarations5956 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_classScopeDeclarations5958 = new BitSet(new long[]{0x0000100000C00000L,0x0000000200000000L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_classScopeDeclarations5960 = new BitSet(new long[]{0x0000100000800000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_classScopeDeclarations5963 = new BitSet(new long[]{0x0000100000800000L});
    public static final BitSet FOLLOW_block_in_classScopeDeclarations5967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_classScopeDeclarations5971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_classScopeDeclarations6033 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_classScopeDeclarations6035 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_classScopeDeclarations6037 = new BitSet(new long[]{0x0000100000800000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_classScopeDeclarations6039 = new BitSet(new long[]{0x0000100000800000L});
    public static final BitSet FOLLOW_block_in_classScopeDeclarations6043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_classScopeDeclarations6047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_classScopeDeclarations6106 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_classScopeDeclarations6108 = new BitSet(new long[]{0x0000000000800000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_classScopeDeclarations6110 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_block_in_classScopeDeclarations6113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_classScopeDeclarations6177 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_classFieldDeclaratorList_in_classScopeDeclarations6179 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_classScopeDeclarations6181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_classScopeDeclarations6226 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_classScopeDeclarations6236 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifierList_in_interfaceScopeDeclarations6268 = new BitSet(new long[]{0x1280000002000000L,0x0000002002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_interfaceScopeDeclarations6282 = new BitSet(new long[]{0x1280000000000000L,0x0000002002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_interfaceScopeDeclarations6301 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_interfaceScopeDeclarations6303 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_interfaceScopeDeclarations6305 = new BitSet(new long[]{0x0000100000400000L,0x0000000200000000L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_interfaceScopeDeclarations6307 = new BitSet(new long[]{0x0000100000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_interfaceScopeDeclarations6310 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_interfaceScopeDeclarations6313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_interfaceScopeDeclarations6371 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_interfaceScopeDeclarations6373 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_interfaceScopeDeclarations6375 = new BitSet(new long[]{0x0000100000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_interfaceScopeDeclarations6377 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_interfaceScopeDeclarations6380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_interfaceScopeDeclarations6443 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_interfaceFieldDeclaratorList_in_interfaceScopeDeclarations6445 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_interfaceScopeDeclarations6447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_interfaceScopeDeclarations6492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_interfaceScopeDeclarations6502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classFieldDeclarator_in_classFieldDeclaratorList6522 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_classFieldDeclaratorList6525 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_classFieldDeclarator_in_classFieldDeclaratorList6527 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_classFieldDeclarator6566 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_ASSIGN_in_classFieldDeclarator6569 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_variableInitializer_in_classFieldDeclarator6571 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceFieldDeclarator_in_interfaceFieldDeclaratorList6616 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_interfaceFieldDeclaratorList6619 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_interfaceFieldDeclarator_in_interfaceFieldDeclaratorList6621 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_interfaceFieldDeclarator6660 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_ASSIGN_in_interfaceFieldDeclarator6662 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_variableInitializer_in_interfaceFieldDeclarator6664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_variableDeclaratorId6706 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_variableDeclaratorId6709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayInitializer_in_variableInitializer6729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_variableInitializer6739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_arrayDeclarator6758 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_RBRACK_in_arrayDeclarator6760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayDeclarator_in_arrayDeclaratorList6794 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_LCURLY_in_arrayInitializer6839 = new BitSet(new long[]{0x128004446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_variableInitializer_in_arrayInitializer6842 = new BitSet(new long[]{0x0000040000000800L});
    public static final BitSet FOLLOW_COMMA_in_arrayInitializer6845 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_variableInitializer_in_arrayInitializer6847 = new BitSet(new long[]{0x0000040000000800L});
    public static final BitSet FOLLOW_COMMA_in_arrayInitializer6851 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_RCURLY_in_arrayInitializer6856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THROWS_in_throwsClause6894 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_qualifiedIdentList_in_throwsClause6896 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_modifierList6933 = new BitSet(new long[]{0x0020000000000082L,0x000000444CE20040L});
    public static final BitSet FOLLOW_PUBLIC_in_modifier6974 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROTECTED_in_modifier6984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIVATE_in_modifier6994 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_in_modifier7004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ABSTRACT_in_modifier7014 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NATIVE_in_modifier7024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SYNCHRONIZED_in_modifier7034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRANSIENT_in_modifier7044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOLATILE_in_modifier7054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRICTFP_in_modifier7064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localModifier_in_modifier7074 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localModifier_in_localModifierList7093 = new BitSet(new long[]{0x0020000000000082L,0x000000444CE20040L});
    public static final BitSet FOLLOW_FINAL_in_localModifier7134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_localModifier7144 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simpleType_in_type7163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_objectType_in_type7173 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitiveType_in_simpleType7193 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_simpleType7195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedTypeIdent_in_objectType7242 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_objectType7244 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedTypeIdentSimplified_in_objectTypeSimplified7284 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_objectTypeSimplified7286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeIdent_in_qualifiedTypeIdent7326 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_DOT_in_qualifiedTypeIdent7329 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_typeIdent_in_qualifiedTypeIdent7331 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_typeIdentSimplified_in_qualifiedTypeIdentSimplified7371 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_DOT_in_qualifiedTypeIdentSimplified7374 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_typeIdentSimplified_in_qualifiedTypeIdentSimplified7376 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_IDENT_in_typeIdent7416 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_genericTypeArgumentList_in_typeIdent7419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_typeIdentSimplified7439 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_genericTypeArgumentListSimplified_in_typeIdentSimplified7442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_primitiveType0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_THAN_in_genericTypeArgumentList7551 = new BitSet(new long[]{0x1280010000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeArgument_in_genericTypeArgumentList7553 = new BitSet(new long[]{0x0000800000100900L});
    public static final BitSet FOLLOW_COMMA_in_genericTypeArgumentList7556 = new BitSet(new long[]{0x1280010000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeArgument_in_genericTypeArgumentList7558 = new BitSet(new long[]{0x0000800000100900L});
    public static final BitSet FOLLOW_genericTypeListClosing_in_genericTypeArgumentList7562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_genericTypeArgument7600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_genericTypeArgument7610 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000010L});
    public static final BitSet FOLLOW_genericWildcardBoundType_in_genericTypeArgument7612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_genericWildcardBoundType7654 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_genericWildcardBoundType7663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_THAN_in_genericTypeArgumentListSimplified7682 = new BitSet(new long[]{0x1280010000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeArgumentSimplified_in_genericTypeArgumentListSimplified7684 = new BitSet(new long[]{0x0000800000100900L});
    public static final BitSet FOLLOW_COMMA_in_genericTypeArgumentListSimplified7687 = new BitSet(new long[]{0x1280010000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeArgumentSimplified_in_genericTypeArgumentListSimplified7689 = new BitSet(new long[]{0x0000800000100900L});
    public static final BitSet FOLLOW_genericTypeListClosing_in_genericTypeArgumentListSimplified7693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_genericTypeArgumentSimplified7735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_genericTypeArgumentSimplified7745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedIdentifier_in_qualifiedIdentList7768 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_qualifiedIdentList7771 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_qualifiedIdentifier_in_qualifiedIdentList7774 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_LPAREN_in_formalParameterList7799 = new BitSet(new long[]{0x12A0080000000080L,0x000000444EE38142L,0x0000001000000000L});
    public static final BitSet FOLLOW_formalParameterStandardDecl_in_formalParameterList7827 = new BitSet(new long[]{0x0000080000000800L});
    public static final BitSet FOLLOW_COMMA_in_formalParameterList7830 = new BitSet(new long[]{0x12A0000000000080L,0x000000444EE38142L,0x0000001000000000L});
    public static final BitSet FOLLOW_formalParameterStandardDecl_in_formalParameterList7832 = new BitSet(new long[]{0x0000080000000800L});
    public static final BitSet FOLLOW_COMMA_in_formalParameterList7837 = new BitSet(new long[]{0x12A0000000000080L,0x000000444EE38142L,0x0000001000000000L});
    public static final BitSet FOLLOW_formalParameterVarArgDecl_in_formalParameterList7839 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_formalParameterVarArgDecl_in_formalParameterList7896 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_formalParameterList7973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localModifierList_in_formalParameterStandardDecl7996 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_formalParameterStandardDecl7998 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameterStandardDecl8000 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localModifierList_in_formalParameterVarArgDecl8044 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_formalParameterVarArgDecl8046 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_ELLIPSIS_in_formalParameterVarArgDecl8048 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameterVarArgDecl8050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_qualifiedIdentifier8098 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_DOT_in_qualifiedIdentifier8141 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_qualifiedIdentifier8145 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_annotation_in_annotationList8198 = new BitSet(new long[]{0x0020000000000082L,0x000000444CE20040L});
    public static final BitSet FOLLOW_AT_in_annotation8236 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_qualifiedIdentifier_in_annotation8239 = new BitSet(new long[]{0x0000000020000002L});
    public static final BitSet FOLLOW_annotationInit_in_annotation8241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_annotationInit8265 = new BitSet(new long[]{0x12A000446AA01480L,0x0000006CDEEF8162L,0x000007F000000000L});
    public static final BitSet FOLLOW_annotationInitializers_in_annotationInit8267 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationInit8269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationInitializer_in_annotationInitializers8306 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_annotationInitializers8309 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_annotationInitializer_in_annotationInitializers8311 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_annotationElementValue_in_annotationInitializers8341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_annotationInitializer8382 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_ASSIGN_in_annotationInitializer8385 = new BitSet(new long[]{0x12A000446AA01480L,0x0000006CDEEF8162L,0x000007F000000000L});
    public static final BitSet FOLLOW_annotationElementValue_in_annotationInitializer8388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationElementValueExpression_in_annotationElementValue8411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_annotationElementValue8421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationElementValueArrayInitializer_in_annotationElementValue8431 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_annotationElementValueExpression8454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_annotationElementValueArrayInitializer8494 = new BitSet(new long[]{0x12A004446AA01C80L,0x0000006CDEEF8162L,0x000007F000000000L});
    public static final BitSet FOLLOW_annotationElementValue_in_annotationElementValueArrayInitializer8497 = new BitSet(new long[]{0x0000040000000800L});
    public static final BitSet FOLLOW_COMMA_in_annotationElementValueArrayInitializer8500 = new BitSet(new long[]{0x12A000446AA01480L,0x0000006CDEEF8162L,0x000007F000000000L});
    public static final BitSet FOLLOW_annotationElementValue_in_annotationElementValueArrayInitializer8502 = new BitSet(new long[]{0x0000040000000800L});
    public static final BitSet FOLLOW_COMMA_in_annotationElementValueArrayInitializer8509 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_RCURLY_in_annotationElementValueArrayInitializer8513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_annotationTypeDeclaration8556 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_INTERFACE_in_annotationTypeDeclaration8558 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_annotationTypeDeclaration8560 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_annotationBody_in_annotationTypeDeclaration8562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_annotationBody8605 = new BitSet(new long[]{0x32A0040000000080L,0x000000444EE3A14AL,0x0000001000000000L});
    public static final BitSet FOLLOW_annotationScopeDeclarations_in_annotationBody8607 = new BitSet(new long[]{0x32A0040000000080L,0x000000444EE3A14AL,0x0000001000000000L});
    public static final BitSet FOLLOW_RCURLY_in_annotationBody8610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifierList_in_annotationScopeDeclarations8652 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_annotationScopeDeclarations8654 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_annotationScopeDeclarations8668 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_LPAREN_in_annotationScopeDeclarations8670 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationScopeDeclarations8672 = new BitSet(new long[]{0x8000100000000000L});
    public static final BitSet FOLLOW_annotationDefaultValue_in_annotationScopeDeclarations8674 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_annotationScopeDeclarations8677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classFieldDeclaratorList_in_annotationScopeDeclarations8719 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_annotationScopeDeclarations8721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_annotationScopeDeclarations8766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_annotationDefaultValue8789 = new BitSet(new long[]{0x12A000446AA01480L,0x0000006CDEEF8162L,0x000007F000000000L});
    public static final BitSet FOLLOW_annotationElementValue_in_annotationDefaultValue8792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_block8813 = new BitSet(new long[]{0x73E014446AA01480L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_blockStatement_in_block8815 = new BitSet(new long[]{0x73E014446AA01480L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_RCURLY_in_block8818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_blockStatement8856 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_blockStatement8858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_blockStatement8869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_blockStatement8879 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localModifierList_in_localVariableDeclaration8902 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_localVariableDeclaration8904 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_classFieldDeclaratorList_in_localVariableDeclaration8906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_statement8959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSERT_in_statement8969 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_statement8973 = new BitSet(new long[]{0x0000100000000400L});
    public static final BitSet FOLLOW_COLON_in_statement8988 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_statement8992 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement8994 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_statement9057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_statement9146 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_parenthesizedExpression_in_statement9148 = new BitSet(new long[]{0x73E010446AA01480L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_statement_in_statement9152 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_ELSE_in_statement9167 = new BitSet(new long[]{0x73E010446AA01480L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_statement_in_statement9171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_statement9337 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_LPAREN_in_statement9339 = new BitSet(new long[]{0x12A010446AA01480L,0x0000006CDEEF8162L,0x000007F000000000L});
    public static final BitSet FOLLOW_forInit_in_statement9354 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement9356 = new BitSet(new long[]{0x128010446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_forCondition_in_statement9358 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement9360 = new BitSet(new long[]{0x128008446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_forUpdater_in_statement9362 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_statement9364 = new BitSet(new long[]{0x73E010446AA01480L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_statement_in_statement9366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localModifierList_in_statement9401 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_statement9403 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_statement9405 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_statement9407 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_statement9409 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_statement9411 = new BitSet(new long[]{0x73E010446AA01480L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_statement_in_statement9413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_statement9528 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_parenthesizedExpression_in_statement9530 = new BitSet(new long[]{0x73E010446AA01480L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_statement_in_statement9532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DO_in_statement9581 = new BitSet(new long[]{0x73E010446AA01480L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_statement_in_statement9583 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_WHILE_in_statement9585 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_parenthesizedExpression_in_statement9587 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement9589 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRY_in_statement9630 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_block_in_statement9632 = new BitSet(new long[]{0x0800000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_catches_in_statement9635 = new BitSet(new long[]{0x0800000000000002L,0x0000000000000080L});
    public static final BitSet FOLLOW_finallyClause_in_statement9637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_finallyClause_in_statement9642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SWITCH_in_statement9685 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_parenthesizedExpression_in_statement9687 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_LCURLY_in_statement9689 = new BitSet(new long[]{0x8400000000000000L});
    public static final BitSet FOLLOW_switchBlockLabels_in_statement9691 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_RCURLY_in_statement9693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SYNCHRONIZED_in_statement9719 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_parenthesizedExpression_in_statement9721 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_block_in_statement9723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETURN_in_statement9769 = new BitSet(new long[]{0x128010446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_statement9771 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement9774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THROW_in_statement9838 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_statement9840 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement9842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BREAK_in_statement9907 = new BitSet(new long[]{0x0000100000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_statement9909 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement9912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONTINUE_in_statement9982 = new BitSet(new long[]{0x0000100000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_statement9984 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement9987 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_statement10054 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_statement10056 = new BitSet(new long[]{0x73E010446AA01480L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_statement_in_statement10058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_statement10125 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement10127 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_statement10138 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catchClause_in_catches10177 = new BitSet(new long[]{0x0800000000000002L});
    public static final BitSet FOLLOW_CATCH_in_catchClause10219 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_LPAREN_in_catchClause10222 = new BitSet(new long[]{0x12A0000000000080L,0x000000444EE38142L,0x0000001000000000L});
    public static final BitSet FOLLOW_formalParameterStandardDecl_in_catchClause10225 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_catchClause10227 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_block_in_catchClause10230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FINALLY_in_finallyClause10249 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_block_in_finallyClause10251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchCaseLabels_in_switchBlockLabels10283 = new BitSet(new long[]{0x8400000000000000L});
    public static final BitSet FOLLOW_switchDefaultLabel_in_switchBlockLabels10285 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_switchCaseLabels_in_switchBlockLabels10288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchCaseLabel_in_switchCaseLabels10333 = new BitSet(new long[]{0x0400000000000002L});
    public static final BitSet FOLLOW_CASE_in_switchCaseLabel10361 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_switchCaseLabel10364 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_switchCaseLabel10366 = new BitSet(new long[]{0x73E010446AA01482L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_blockStatement_in_switchCaseLabel10369 = new BitSet(new long[]{0x73E010446AA01482L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_DEFAULT_in_switchDefaultLabel10393 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_switchDefaultLabel10396 = new BitSet(new long[]{0x73E010446AA01482L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_blockStatement_in_switchDefaultLabel10399 = new BitSet(new long[]{0x73E010446AA01482L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_forInit10423 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_forInit10445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_forCondition10533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_forUpdater10575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_parenthesizedExpression10615 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_parenthesizedExpression10617 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_parenthesizedExpression10619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionList10660 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_expressionList10663 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_expressionList10666 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_assignmentExpression_in_expression10687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_assignmentExpression10723 = new BitSet(new long[]{0x001540A280004262L});
    public static final BitSet FOLLOW_ASSIGN_in_assignmentExpression10742 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_PLUS_ASSIGN_in_assignmentExpression10761 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_MINUS_ASSIGN_in_assignmentExpression10780 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_STAR_ASSIGN_in_assignmentExpression10799 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_DIV_ASSIGN_in_assignmentExpression10818 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_AND_ASSIGN_in_assignmentExpression10837 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_OR_ASSIGN_in_assignmentExpression10856 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_XOR_ASSIGN_in_assignmentExpression10875 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_MOD_ASSIGN_in_assignmentExpression10894 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_SHIFT_LEFT_ASSIGN_in_assignmentExpression10913 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_SHIFT_RIGHT_ASSIGN_in_assignmentExpression10932 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_BIT_SHIFT_RIGHT_ASSIGN_in_assignmentExpression10951 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_assignmentExpression_in_assignmentExpression10973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_logicalOrExpression_in_conditionalExpression10998 = new BitSet(new long[]{0x0000010000000002L});
    public static final BitSet FOLLOW_QUESTION_in_conditionalExpression11001 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_assignmentExpression_in_conditionalExpression11004 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_conditionalExpression11006 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_conditionalExpression_in_conditionalExpression11009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_logicalAndExpression_in_logicalOrExpression11030 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_LOGICAL_OR_in_logicalOrExpression11033 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_logicalAndExpression_in_logicalOrExpression11036 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_inclusiveOrExpression_in_logicalAndExpression11057 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_LOGICAL_AND_in_logicalAndExpression11060 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_inclusiveOrExpression_in_logicalAndExpression11063 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression11084 = new BitSet(new long[]{0x0000001000000002L});
    public static final BitSet FOLLOW_OR_in_inclusiveOrExpression11087 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression11090 = new BitSet(new long[]{0x0000001000000002L});
    public static final BitSet FOLLOW_andExpression_in_exclusiveOrExpression11111 = new BitSet(new long[]{0x0008000000000002L});
    public static final BitSet FOLLOW_XOR_in_exclusiveOrExpression11114 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_andExpression_in_exclusiveOrExpression11117 = new BitSet(new long[]{0x0008000000000002L});
    public static final BitSet FOLLOW_equalityExpression_in_andExpression11138 = new BitSet(new long[]{0x0000000000000012L});
    public static final BitSet FOLLOW_AND_in_andExpression11141 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_equalityExpression_in_andExpression11144 = new BitSet(new long[]{0x0000000000000012L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression11165 = new BitSet(new long[]{0x0000000800040002L});
    public static final BitSet FOLLOW_EQUAL_in_equalityExpression11184 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_NOT_EQUAL_in_equalityExpression11203 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression11233 = new BitSet(new long[]{0x0000000800040002L});
    public static final BitSet FOLLOW_relationalExpression_in_instanceOfExpression11263 = new BitSet(new long[]{0x0000000000000002L,0x0000000000001000L});
    public static final BitSet FOLLOW_INSTANCEOF_in_instanceOfExpression11266 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_instanceOfExpression11269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression11290 = new BitSet(new long[]{0x0000000003180002L});
    public static final BitSet FOLLOW_LESS_OR_EQUAL_in_relationalExpression11309 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_GREATER_OR_EQUAL_in_relationalExpression11328 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_LESS_THAN_in_relationalExpression11347 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_GREATER_THAN_in_relationalExpression11366 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression11395 = new BitSet(new long[]{0x0000000003180002L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression11429 = new BitSet(new long[]{0x0000A00000000102L});
    public static final BitSet FOLLOW_BIT_SHIFT_RIGHT_in_shiftExpression11447 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_SHIFT_RIGHT_in_shiftExpression11466 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_SHIFT_LEFT_in_shiftExpression11485 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression11514 = new BitSet(new long[]{0x0000A00000000102L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression11544 = new BitSet(new long[]{0x0000004040000002L});
    public static final BitSet FOLLOW_PLUS_in_additiveExpression11562 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_MINUS_in_additiveExpression11581 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression11610 = new BitSet(new long[]{0x0000004040000002L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression11640 = new BitSet(new long[]{0x0002000100002002L});
    public static final BitSet FOLLOW_STAR_in_multiplicativeExpression11659 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_DIV_in_multiplicativeExpression11678 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_MOD_in_multiplicativeExpression11697 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression11726 = new BitSet(new long[]{0x0002000100002002L});
    public static final BitSet FOLLOW_PLUS_in_unaryExpression11760 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression11762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_unaryExpression11789 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression11791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INC_in_unaryExpression11817 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_postfixedExpression_in_unaryExpression11819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEC_in_unaryExpression11843 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_postfixedExpression_in_unaryExpression11845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression11869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_unaryExpressionNotPlusMinus11888 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus11890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOGICAL_NOT_in_unaryExpressionNotPlusMinus11937 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus11939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_unaryExpressionNotPlusMinus11978 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_unaryExpressionNotPlusMinus11980 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_unaryExpressionNotPlusMinus11982 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus11984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_postfixedExpression_in_unaryExpressionNotPlusMinus12019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primaryExpression_in_postfixedExpression12055 = new BitSet(new long[]{0x0000000000609002L});
    public static final BitSet FOLLOW_DOT_in_postfixedExpression12117 = new BitSet(new long[]{0x0000000002000000L,0x0000000090040000L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeArgumentListSimplified_in_postfixedExpression12167 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_postfixedExpression12249 = new BitSet(new long[]{0x0000000020609002L});
    public static final BitSet FOLLOW_arguments_in_postfixedExpression12328 = new BitSet(new long[]{0x0000000000609002L});
    public static final BitSet FOLLOW_THIS_in_postfixedExpression12402 = new BitSet(new long[]{0x0000000000609002L});
    public static final BitSet FOLLOW_SUPER_in_postfixedExpression12465 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_postfixedExpression12467 = new BitSet(new long[]{0x0000000000609002L});
    public static final BitSet FOLLOW_SUPER_in_postfixedExpression12520 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_DOT_in_postfixedExpression12524 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_postfixedExpression12526 = new BitSet(new long[]{0x0000000020609002L});
    public static final BitSet FOLLOW_arguments_in_postfixedExpression12593 = new BitSet(new long[]{0x0000000000609002L});
    public static final BitSet FOLLOW_innerNewExpression_in_postfixedExpression12664 = new BitSet(new long[]{0x0000000000609002L});
    public static final BitSet FOLLOW_LBRACK_in_postfixedExpression12721 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_postfixedExpression12723 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_RBRACK_in_postfixedExpression12725 = new BitSet(new long[]{0x0000000000609002L});
    public static final BitSet FOLLOW_INC_in_postfixedExpression12786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEC_in_postfixedExpression12810 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parenthesizedExpression_in_primaryExpression12858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_primaryExpression12868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_newExpression_in_primaryExpression12878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedIdentExpression_in_primaryExpression12888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericTypeArgumentListSimplified_in_primaryExpression12898 = new BitSet(new long[]{0x0000000000000000L,0x0000000090000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_SUPER_in_primaryExpression12913 = new BitSet(new long[]{0x0000000020008000L});
    public static final BitSet FOLLOW_arguments_in_primaryExpression12931 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_primaryExpression12991 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_primaryExpression12993 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_primaryExpression12995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_primaryExpression13062 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_primaryExpression13064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THIS_in_primaryExpression13119 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_primaryExpression13121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THIS_in_primaryExpression13186 = new BitSet(new long[]{0x0000000020000002L});
    public static final BitSet FOLLOW_arguments_in_primaryExpression13254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUPER_in_primaryExpression13319 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_primaryExpression13321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUPER_in_primaryExpression13377 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_DOT_in_primaryExpression13379 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_primaryExpression13381 = new BitSet(new long[]{0x0000000020000002L});
    public static final BitSet FOLLOW_arguments_in_primaryExpression13405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitiveType_in_primaryExpression13547 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_arrayDeclarator_in_primaryExpression13606 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_DOT_in_primaryExpression13669 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_CLASS_in_primaryExpression13671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_primaryExpression13731 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_DOT_in_primaryExpression13733 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_CLASS_in_primaryExpression13735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedIdentifier_in_qualifiedIdentExpression13815 = new BitSet(new long[]{0x0000000020408002L});
    public static final BitSet FOLLOW_arrayDeclarator_in_qualifiedIdentExpression13885 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_DOT_in_qualifiedIdentExpression13953 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_CLASS_in_qualifiedIdentExpression13955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_qualifiedIdentExpression14025 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_qualifiedIdentExpression14086 = new BitSet(new long[]{0x2000000002000000L,0x0000000090040000L,0x0000001000000000L});
    public static final BitSet FOLLOW_CLASS_in_qualifiedIdentExpression14104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericTypeArgumentListSimplified_in_qualifiedIdentExpression14167 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_SUPER_in_qualifiedIdentExpression14192 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_qualifiedIdentExpression14194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUPER_in_qualifiedIdentExpression14244 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_DOT_in_qualifiedIdentExpression14248 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_qualifiedIdentExpression14250 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_qualifiedIdentExpression14252 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_qualifiedIdentExpression14302 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_qualifiedIdentExpression14304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THIS_in_qualifiedIdentExpression14379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUPER_in_qualifiedIdentExpression14445 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_qualifiedIdentExpression14447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_innerNewExpression_in_qualifiedIdentExpression14495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_newExpression14571 = new BitSet(new long[]{0x1280000002000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_primitiveType_in_newExpression14587 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_newArrayConstruction_in_newExpression14589 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericTypeArgumentListSimplified_in_newExpression14633 = new BitSet(new long[]{0x1280000002000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_qualifiedTypeIdentSimplified_in_newExpression14636 = new BitSet(new long[]{0x0000000020400000L});
    public static final BitSet FOLLOW_newArrayConstruction_in_newExpression14654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_newExpression14719 = new BitSet(new long[]{0x0000000002800002L,0x0000000000000810L});
    public static final BitSet FOLLOW_classBody_in_newExpression14721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_innerNewExpression14820 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeArgumentListSimplified_in_innerNewExpression14822 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_innerNewExpression14825 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_innerNewExpression14827 = new BitSet(new long[]{0x0000000002800002L,0x0000000000000810L});
    public static final BitSet FOLLOW_classBody_in_innerNewExpression14829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_newArrayConstruction14875 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_arrayInitializer_in_newArrayConstruction14877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_newArrayConstruction14887 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_newArrayConstruction14890 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_RBRACK_in_newArrayConstruction14892 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_LBRACK_in_newArrayConstruction14896 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_newArrayConstruction14899 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_RBRACK_in_newArrayConstruction14901 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_newArrayConstruction14906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_arguments14926 = new BitSet(new long[]{0x128008446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expressionList_in_arguments14928 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_arguments14931 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATER_THAN_in_synpred24_JamlAttrHash5314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHIFT_RIGHT_in_synpred25_JamlAttrHash5324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BIT_SHIFT_RIGHT_in_synpred26_JamlAttrHash5334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bound_in_synpred27_JamlAttrHash5364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_in_synpred42_JamlAttrHash5896 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_block_in_synpred42_JamlAttrHash5898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_synpred52_JamlAttrHash5935 = new BitSet(new long[]{0x1280000000000000L,0x0000002002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_synpred52_JamlAttrHash5954 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred52_JamlAttrHash5956 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred52_JamlAttrHash5958 = new BitSet(new long[]{0x0000100000C00000L,0x0000000200000000L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_synpred52_JamlAttrHash5960 = new BitSet(new long[]{0x0000100000800000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred52_JamlAttrHash5963 = new BitSet(new long[]{0x0000100000800000L});
    public static final BitSet FOLLOW_block_in_synpred52_JamlAttrHash5967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_synpred52_JamlAttrHash5971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_synpred52_JamlAttrHash6033 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred52_JamlAttrHash6035 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred52_JamlAttrHash6037 = new BitSet(new long[]{0x0000100000800000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred52_JamlAttrHash6039 = new BitSet(new long[]{0x0000100000800000L});
    public static final BitSet FOLLOW_block_in_synpred52_JamlAttrHash6043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_synpred52_JamlAttrHash6047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred52_JamlAttrHash6106 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred52_JamlAttrHash6108 = new BitSet(new long[]{0x0000000000800000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred52_JamlAttrHash6110 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_block_in_synpred52_JamlAttrHash6113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifierList_in_synpred53_JamlAttrHash5921 = new BitSet(new long[]{0x1280000002000000L,0x0000002002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_synpred53_JamlAttrHash5935 = new BitSet(new long[]{0x1280000000000000L,0x0000002002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_synpred53_JamlAttrHash5954 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred53_JamlAttrHash5956 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred53_JamlAttrHash5958 = new BitSet(new long[]{0x0000100000C00000L,0x0000000200000000L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_synpred53_JamlAttrHash5960 = new BitSet(new long[]{0x0000100000800000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred53_JamlAttrHash5963 = new BitSet(new long[]{0x0000100000800000L});
    public static final BitSet FOLLOW_block_in_synpred53_JamlAttrHash5967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_synpred53_JamlAttrHash5971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_synpred53_JamlAttrHash6033 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred53_JamlAttrHash6035 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred53_JamlAttrHash6037 = new BitSet(new long[]{0x0000100000800000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred53_JamlAttrHash6039 = new BitSet(new long[]{0x0000100000800000L});
    public static final BitSet FOLLOW_block_in_synpred53_JamlAttrHash6043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_synpred53_JamlAttrHash6047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred53_JamlAttrHash6106 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred53_JamlAttrHash6108 = new BitSet(new long[]{0x0000000000800000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred53_JamlAttrHash6110 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_block_in_synpred53_JamlAttrHash6113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_synpred53_JamlAttrHash6177 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_classFieldDeclaratorList_in_synpred53_JamlAttrHash6179 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred53_JamlAttrHash6181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_synpred54_JamlAttrHash6226 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_synpred60_JamlAttrHash6282 = new BitSet(new long[]{0x1280000000000000L,0x0000002002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_synpred60_JamlAttrHash6301 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred60_JamlAttrHash6303 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred60_JamlAttrHash6305 = new BitSet(new long[]{0x0000100000400000L,0x0000000200000000L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_synpred60_JamlAttrHash6307 = new BitSet(new long[]{0x0000100000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred60_JamlAttrHash6310 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred60_JamlAttrHash6313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_synpred60_JamlAttrHash6371 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred60_JamlAttrHash6373 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred60_JamlAttrHash6375 = new BitSet(new long[]{0x0000100000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred60_JamlAttrHash6377 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred60_JamlAttrHash6380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifierList_in_synpred61_JamlAttrHash6268 = new BitSet(new long[]{0x1280000002000000L,0x0000002002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_synpred61_JamlAttrHash6282 = new BitSet(new long[]{0x1280000000000000L,0x0000002002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_synpred61_JamlAttrHash6301 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred61_JamlAttrHash6303 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred61_JamlAttrHash6305 = new BitSet(new long[]{0x0000100000400000L,0x0000000200000000L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_synpred61_JamlAttrHash6307 = new BitSet(new long[]{0x0000100000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred61_JamlAttrHash6310 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred61_JamlAttrHash6313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_synpred61_JamlAttrHash6371 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred61_JamlAttrHash6373 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred61_JamlAttrHash6375 = new BitSet(new long[]{0x0000100000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred61_JamlAttrHash6377 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred61_JamlAttrHash6380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_synpred61_JamlAttrHash6443 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_interfaceFieldDeclaratorList_in_synpred61_JamlAttrHash6445 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred61_JamlAttrHash6447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_synpred62_JamlAttrHash6492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayDeclarator_in_synpred68_JamlAttrHash6794 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_synpred86_JamlAttrHash7195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_synpred87_JamlAttrHash7244 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred89_JamlAttrHash7329 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_typeIdent_in_synpred89_JamlAttrHash7331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred100_JamlAttrHash7556 = new BitSet(new long[]{0x1280010000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeArgument_in_synpred100_JamlAttrHash7558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericWildcardBoundType_in_synpred102_JamlAttrHash7612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred107_JamlAttrHash7830 = new BitSet(new long[]{0x12A0000000000080L,0x000000444EE38142L,0x0000001000000000L});
    public static final BitSet FOLLOW_formalParameterStandardDecl_in_synpred107_JamlAttrHash7832 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameterStandardDecl_in_synpred109_JamlAttrHash7827 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_synpred109_JamlAttrHash7830 = new BitSet(new long[]{0x12A0000000000080L,0x000000444EE38142L,0x0000001000000000L});
    public static final BitSet FOLLOW_formalParameterStandardDecl_in_synpred109_JamlAttrHash7832 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_synpred109_JamlAttrHash7837 = new BitSet(new long[]{0x12A0000000000080L,0x000000444EE38142L,0x0000001000000000L});
    public static final BitSet FOLLOW_formalParameterVarArgDecl_in_synpred109_JamlAttrHash7839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameterVarArgDecl_in_synpred110_JamlAttrHash7896 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred111_JamlAttrHash8141 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred111_JamlAttrHash8145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_synpred112_JamlAttrHash8198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifierList_in_synpred124_JamlAttrHash8652 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_synpred124_JamlAttrHash8654 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred124_JamlAttrHash8668 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred124_JamlAttrHash8670 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred124_JamlAttrHash8672 = new BitSet(new long[]{0x8000100000000000L});
    public static final BitSet FOLLOW_annotationDefaultValue_in_synpred124_JamlAttrHash8674 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred124_JamlAttrHash8677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classFieldDeclaratorList_in_synpred124_JamlAttrHash8719 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred124_JamlAttrHash8721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_synpred126_JamlAttrHash8856 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred126_JamlAttrHash8858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_synpred127_JamlAttrHash8869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_in_synpred131_JamlAttrHash9167 = new BitSet(new long[]{0x73E010446AA01480L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_statement_in_synpred131_JamlAttrHash9171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forInit_in_synpred133_JamlAttrHash9354 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred133_JamlAttrHash9356 = new BitSet(new long[]{0x128010446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_forCondition_in_synpred133_JamlAttrHash9358 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred133_JamlAttrHash9360 = new BitSet(new long[]{0x128008446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_forUpdater_in_synpred133_JamlAttrHash9362 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred133_JamlAttrHash9364 = new BitSet(new long[]{0x73E010446AA01480L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_statement_in_synpred133_JamlAttrHash9366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchCaseLabel_in_synpred153_JamlAttrHash10333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_synpred156_JamlAttrHash10423 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_synpred157_JamlAttrHash10445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred200_JamlAttrHash11978 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_synpred200_JamlAttrHash11980 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred200_JamlAttrHash11982 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_synpred200_JamlAttrHash11984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayDeclarator_in_synpred228_JamlAttrHash13885 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_DOT_in_synpred228_JamlAttrHash13953 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_CLASS_in_synpred228_JamlAttrHash13955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred236_JamlAttrHash14086 = new BitSet(new long[]{0x2000000002000000L,0x0000000090040000L,0x0000001000000000L});
    public static final BitSet FOLLOW_CLASS_in_synpred236_JamlAttrHash14104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericTypeArgumentListSimplified_in_synpred236_JamlAttrHash14167 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_SUPER_in_synpred236_JamlAttrHash14192 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_synpred236_JamlAttrHash14194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUPER_in_synpred236_JamlAttrHash14244 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_DOT_in_synpred236_JamlAttrHash14248 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred236_JamlAttrHash14250 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_synpred236_JamlAttrHash14252 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred236_JamlAttrHash14302 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_synpred236_JamlAttrHash14304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THIS_in_synpred236_JamlAttrHash14379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUPER_in_synpred236_JamlAttrHash14445 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_synpred236_JamlAttrHash14447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_innerNewExpression_in_synpred236_JamlAttrHash14495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_synpred244_JamlAttrHash14896 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_synpred244_JamlAttrHash14899 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_RBRACK_in_synpred244_JamlAttrHash14901 = new BitSet(new long[]{0x0000000000000002L});

}
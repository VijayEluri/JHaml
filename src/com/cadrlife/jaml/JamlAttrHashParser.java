// $ANTLR 3.2 Sep 23, 2009 12:02:23 ../etc/JamlAttrHash.g 2010-02-26 20:19:42

package com.cadrlife.jaml;
import java.util.LinkedHashMap;
import java.util.Map;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class JamlAttrHashParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "AND", "AND_ASSIGN", "ASSIGN", "AT", "BIT_SHIFT_RIGHT", "BIT_SHIFT_RIGHT_ASSIGN", "COLON", "COMMA", "DEC", "DIV", "DIV_ASSIGN", "DOT", "DOTSTAR", "ELLIPSIS", "EQUAL", "GREATER_OR_EQUAL", "GREATER_THAN", "INC", "LBRACK", "LCURLY", "LESS_OR_EQUAL", "LESS_THAN", "LOGICAL_AND", "LOGICAL_NOT", "LOGICAL_OR", "LPAREN", "MINUS", "MINUS_ASSIGN", "MOD", "MOD_ASSIGN", "NOT", "NOT_EQUAL", "OR", "OR_ASSIGN", "PLUS", "PLUS_ASSIGN", "QUESTION", "RBRACK", "RCURLY", "RPAREN", "SEMI", "SHIFT_LEFT", "SHIFT_LEFT_ASSIGN", "SHIFT_RIGHT", "SHIFT_RIGHT_ASSIGN", "STAR", "STAR_ASSIGN", "XOR", "XOR_ASSIGN", "ABSTRACT", "ASSERT", "BOOLEAN", "BREAK", "BYTE", "CASE", "CATCH", "CHAR", "CLASS", "CONTINUE", "DEFAULT", "DO", "DOUBLE", "ELSE", "ENUM", "EXTENDS", "FALSE", "FINAL", "FINALLY", "FLOAT", "FOR", "IF", "IMPLEMENTS", "INSTANCEOF", "INTERFACE", "IMPORT", "INT", "LONG", "NATIVE", "NEW", "NULL", "PACKAGE", "PRIVATE", "PROTECTED", "PUBLIC", "RETURN", "SHORT", "STATIC", "STRICTFP", "SUPER", "SWITCH", "SYNCHRONIZED", "THIS", "THROW", "THROWS", "TRANSIENT", "TRUE", "TRY", "VOID", "VOLATILE", "WHILE", "ANNOTATION_INIT_ARRAY_ELEMENT", "ANNOTATION_INIT_BLOCK", "ANNOTATION_INIT_DEFAULT_KEY", "ANNOTATION_INIT_KEY_LIST", "ANNOTATION_LIST", "ANNOTATION_METHOD_DECL", "ANNOTATION_SCOPE", "ANNOTATION_TOP_LEVEL_SCOPE", "ARGUMENT_LIST", "ARRAY_DECLARATOR", "ARRAY_DECLARATOR_LIST", "ARRAY_ELEMENT_ACCESS", "ARRAY_INITIALIZER", "BLOCK_SCOPE", "CAST_EXPR", "CATCH_CLAUSE_LIST", "CLASS_CONSTRUCTOR_CALL", "CLASS_INSTANCE_INITIALIZER", "CLASS_STATIC_INITIALIZER", "CLASS_TOP_LEVEL_SCOPE", "CONSTRUCTOR_DECL", "ENUM_TOP_LEVEL_SCOPE", "EXPR", "EXTENDS_BOUND_LIST", "EXTENDS_CLAUSE", "FOR_CONDITION", "FOR_EACH", "FOR_INIT", "FOR_UPDATE", "FORMAL_PARAM_LIST", "FORMAL_PARAM_STD_DECL", "FORMAL_PARAM_VARARG_DECL", "FUNCTION_METHOD_DECL", "GENERIC_TYPE_ARG_LIST", "GENERIC_TYPE_PARAM_LIST", "INTERFACE_TOP_LEVEL_SCOPE", "IMPLEMENTS_CLAUSE", "LABELED_STATEMENT", "LOCAL_MODIFIER_LIST", "JAVA_SOURCE", "METHOD_CALL", "MODIFIER_LIST", "PARENTESIZED_EXPR", "POST_DEC", "POST_INC", "PRE_DEC", "PRE_INC", "QUALIFIED_TYPE_IDENT", "STATIC_ARRAY_CREATOR", "SUPER_CONSTRUCTOR_CALL", "SWITCH_BLOCK_LABEL_LIST", "THIS_CONSTRUCTOR_CALL", "THROWS_CLAUSE", "TYPE", "UNARY_MINUS", "UNARY_PLUS", "VAR_DECLARATION", "VAR_DECLARATOR", "VAR_DECLARATOR_LIST", "VOID_METHOD_DECL", "IDENT", "HEX_LITERAL", "OCTAL_LITERAL", "DECIMAL_LITERAL", "FLOATING_POINT_LITERAL", "CHARACTER_LITERAL", "STRING_LITERAL", "HEX_DIGIT", "INTEGER_TYPE_SUFFIX", "EXPONENT", "FLOAT_TYPE_SUFFIX", "ESCAPE_SEQUENCE", "UNICODE_ESCAPE", "OCTAL_ESCAPE", "JAVA_ID_START", "JAVA_ID_PART", "WS", "COMMENT", "LINE_COMMENT"
    };
    public static final int PACKAGE=84;
    public static final int EXPONENT=173;
    public static final int STAR=49;
    public static final int WHILE=103;
    public static final int MOD=32;
    public static final int MOD_ASSIGN=33;
    public static final int CASE=58;
    public static final int CHAR=60;
    public static final int NEW=82;
    public static final int DO=64;
    public static final int GENERIC_TYPE_PARAM_LIST=138;
    public static final int CLASS_INSTANCE_INITIALIZER=121;
    public static final int ARRAY_ELEMENT_ACCESS=115;
    public static final int FOR_CONDITION=129;
    public static final int NOT=34;
    public static final int VAR_DECLARATION=160;
    public static final int ANNOTATION_METHOD_DECL=109;
    public static final int EOF=-1;
    public static final int DIV_ASSIGN=14;
    public static final int LOGICAL_AND=26;
    public static final int BREAK=56;
    public static final int UNARY_PLUS=159;
    public static final int BIT_SHIFT_RIGHT_ASSIGN=9;
    public static final int TYPE=157;
    public static final int RPAREN=43;
    public static final int INC=21;
    public static final int FINAL=70;
    public static final int IMPORT=78;
    public static final int STRING_LITERAL=170;
    public static final int FOR_UPDATE=132;
    public static final int FLOATING_POINT_LITERAL=168;
    public static final int CAST_EXPR=118;
    public static final int NOT_EQUAL=35;
    public static final int VOID_METHOD_DECL=163;
    public static final int THIS=95;
    public static final int RETURN=88;
    public static final int DOUBLE=65;
    public static final int ENUM_TOP_LEVEL_SCOPE=125;
    public static final int VOID=101;
    public static final int SUPER=92;
    public static final int COMMENT=181;
    public static final int ANNOTATION_INIT_KEY_LIST=107;
    public static final int JAVA_ID_START=178;
    public static final int FLOAT_TYPE_SUFFIX=174;
    public static final int PRE_DEC=149;
    public static final int RBRACK=41;
    public static final int IMPLEMENTS_CLAUSE=140;
    public static final int SWITCH_BLOCK_LABEL_LIST=154;
    public static final int LINE_COMMENT=182;
    public static final int PRIVATE=85;
    public static final int STATIC=90;
    public static final int BLOCK_SCOPE=117;
    public static final int ANNOTATION_INIT_DEFAULT_KEY=106;
    public static final int SWITCH=93;
    public static final int NULL=83;
    public static final int VAR_DECLARATOR=161;
    public static final int MINUS_ASSIGN=31;
    public static final int ELSE=66;
    public static final int STRICTFP=91;
    public static final int CHARACTER_LITERAL=169;
    public static final int PRE_INC=150;
    public static final int ANNOTATION_LIST=108;
    public static final int ELLIPSIS=17;
    public static final int NATIVE=81;
    public static final int OCTAL_ESCAPE=177;
    public static final int UNARY_MINUS=158;
    public static final int THROWS=97;
    public static final int LCURLY=23;
    public static final int INT=79;
    public static final int FORMAL_PARAM_VARARG_DECL=135;
    public static final int METHOD_CALL=144;
    public static final int ASSERT=54;
    public static final int TRY=100;
    public static final int INTERFACE_TOP_LEVEL_SCOPE=139;
    public static final int SHIFT_LEFT=45;
    public static final int WS=180;
    public static final int SHIFT_RIGHT=47;
    public static final int FORMAL_PARAM_STD_DECL=134;
    public static final int LOCAL_MODIFIER_LIST=142;
    public static final int OR=36;
    public static final int LESS_THAN=25;
    public static final int SHIFT_RIGHT_ASSIGN=48;
    public static final int EXTENDS_BOUND_LIST=127;
    public static final int JAVA_SOURCE=143;
    public static final int CATCH=59;
    public static final int FALSE=69;
    public static final int INTEGER_TYPE_SUFFIX=172;
    public static final int DECIMAL_LITERAL=167;
    public static final int THROW=96;
    public static final int FOR_INIT=131;
    public static final int DEC=12;
    public static final int PROTECTED=86;
    public static final int CLASS=61;
    public static final int LBRACK=22;
    public static final int BIT_SHIFT_RIGHT=8;
    public static final int THROWS_CLAUSE=156;
    public static final int GREATER_OR_EQUAL=19;
    public static final int FOR=73;
    public static final int THIS_CONSTRUCTOR_CALL=155;
    public static final int LOGICAL_NOT=27;
    public static final int FLOAT=72;
    public static final int ABSTRACT=53;
    public static final int AND=4;
    public static final int POST_DEC=147;
    public static final int AND_ASSIGN=5;
    public static final int STATIC_ARRAY_CREATOR=152;
    public static final int MODIFIER_LIST=145;
    public static final int ANNOTATION_SCOPE=110;
    public static final int LPAREN=29;
    public static final int IF=74;
    public static final int AT=7;
    public static final int ESCAPE_SEQUENCE=175;
    public static final int CONSTRUCTOR_DECL=124;
    public static final int LABELED_STATEMENT=141;
    public static final int UNICODE_ESCAPE=176;
    public static final int EXPR=126;
    public static final int SYNCHRONIZED=94;
    public static final int BOOLEAN=55;
    public static final int CLASS_TOP_LEVEL_SCOPE=123;
    public static final int IMPLEMENTS=75;
    public static final int CONTINUE=62;
    public static final int COMMA=11;
    public static final int TRANSIENT=98;
    public static final int EQUAL=18;
    public static final int XOR_ASSIGN=52;
    public static final int LOGICAL_OR=28;
    public static final int IDENT=164;
    public static final int QUALIFIED_TYPE_IDENT=151;
    public static final int ARGUMENT_LIST=112;
    public static final int PLUS=38;
    public static final int HEX_LITERAL=165;
    public static final int ANNOTATION_INIT_BLOCK=105;
    public static final int DOT=15;
    public static final int SHIFT_LEFT_ASSIGN=46;
    public static final int FORMAL_PARAM_LIST=133;
    public static final int GENERIC_TYPE_ARG_LIST=137;
    public static final int ANNOTATION_TOP_LEVEL_SCOPE=111;
    public static final int DOTSTAR=16;
    public static final int BYTE=57;
    public static final int XOR=51;
    public static final int JAVA_ID_PART=179;
    public static final int GREATER_THAN=20;
    public static final int VOLATILE=102;
    public static final int PARENTESIZED_EXPR=146;
    public static final int CLASS_STATIC_INITIALIZER=122;
    public static final int ARRAY_DECLARATOR_LIST=114;
    public static final int LESS_OR_EQUAL=24;
    public static final int DEFAULT=63;
    public static final int OCTAL_LITERAL=166;
    public static final int HEX_DIGIT=171;
    public static final int SHORT=89;
    public static final int INSTANCEOF=76;
    public static final int MINUS=30;
    public static final int EXTENDS_CLAUSE=128;
    public static final int TRUE=99;
    public static final int SEMI=44;
    public static final int STAR_ASSIGN=50;
    public static final int VAR_DECLARATOR_LIST=162;
    public static final int ARRAY_DECLARATOR=113;
    public static final int COLON=10;
    public static final int OR_ASSIGN=37;
    public static final int ENUM=67;
    public static final int QUESTION=40;
    public static final int FINALLY=71;
    public static final int RCURLY=42;
    public static final int PLUS_ASSIGN=39;
    public static final int ASSIGN=6;
    public static final int ANNOTATION_INIT_ARRAY_ELEMENT=104;
    public static final int FUNCTION_METHOD_DECL=136;
    public static final int INTERFACE=77;
    public static final int POST_INC=148;
    public static final int DIV=13;
    public static final int CLASS_CONSTRUCTOR_CALL=120;
    public static final int LONG=80;
    public static final int FOR_EACH=130;
    public static final int EXTENDS=68;
    public static final int PUBLIC=87;
    public static final int ARRAY_INITIALIZER=116;
    public static final int CATCH_CLAUSE_LIST=119;
    public static final int SUPER_CONSTRUCTOR_CALL=153;

    // delegates
    // delegators


        public JamlAttrHashParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public JamlAttrHashParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
            this.state.ruleMemo = new HashMap[363+1];
             
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return JamlAttrHashParser.tokenNames; }
    public String getGrammarFileName() { return "../etc/JamlAttrHash.g"; }


        
        private boolean mMessageCollectionEnabled = false;
        private boolean mHasErrors = false;
        private List<String> mMessages;

        /**
         *  Switches error message collection on or of.
         *
         *  The standard destination for parser error messages is <code>System.err</code>.
         *  However, if <code>true</code> gets passed to this method this default
         *  behaviour will be switched off and all error messages will be collected
         *  instead of written to anywhere.
         *
         *  The default value is <code>false</code>.
         *
         *  @param pNewState  <code>true</code> if error messages should be collected.
         */
        public void enableErrorMessageCollection(boolean pNewState) {
            mMessageCollectionEnabled = pNewState;
            if (mMessages == null && mMessageCollectionEnabled) {
                mMessages = new ArrayList<String>();
            }
        }
        
        /**
         *  Collects an error message or passes the error message to <code>
         *  super.emitErrorMessage(...)</code>.
         *
         *  The actual behaviour depends on whether collecting error messages
         *  has been enabled or not.
         *
         *  @param pMessage  The error message.
         */
         @Override
        public void emitErrorMessage(String pMessage) {
            if (mMessageCollectionEnabled) {
                mMessages.add(pMessage);
            } else {
                super.emitErrorMessage(pMessage);
            }
        }
        
        /**
         *  Returns collected error messages.
         *
         *  @return  A list holding collected error messages or <code>null</code> if
         *           collecting error messages hasn't been enabled. Of course, this
         *           list may be empty if no error message has been emited.
         */
        public List<String> getMessages() {
            return mMessages;
        }
        
        /**
         *  Tells if parsing a Java source has caused any error messages.
         *
         *  @return  <code>true</code> if parsing a Java source has caused at least one error message.
         */
        public boolean hasErrors() {
            return mHasErrors;
        }


    public static class attrMappings_return extends ParserRuleReturnScope {
        public Map<String,String> attrMap;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attrMappings"
    // ../etc/JamlAttrHash.g:279:1: attrMappings returns [Map<String,String> attrMap] : (am= attrMapping ( ',' am= attrMapping )* ) ;
    public final JamlAttrHashParser.attrMappings_return attrMappings() throws RecognitionException {
    traceIn("attrMappings", 1);
        JamlAttrHashParser.attrMappings_return retval = new JamlAttrHashParser.attrMappings_return();
        retval.start = input.LT(1);
        int attrMappings_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal1=null;
        JamlAttrHashParser.attrMapping_return am = null;


        CommonTree char_literal1_tree=null;

        retval.attrMap = new LinkedHashMap<String,String>();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }
            // ../etc/JamlAttrHash.g:280:57: ( (am= attrMapping ( ',' am= attrMapping )* ) )
            // ../etc/JamlAttrHash.g:282:3: (am= attrMapping ( ',' am= attrMapping )* )
            {
            root_0 = (CommonTree)adaptor.nil();

            // ../etc/JamlAttrHash.g:282:3: (am= attrMapping ( ',' am= attrMapping )* )
            // ../etc/JamlAttrHash.g:282:5: am= attrMapping ( ',' am= attrMapping )*
            {
            pushFollow(FOLLOW_attrMapping_in_attrMappings4526);
            am=attrMapping();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, am.getTree());
            if ( state.backtracking==0 ) {
              retval.attrMap.put((am!=null?am.attr:null),(am!=null?am.value:null));
            }
            // ../etc/JamlAttrHash.g:283:5: ( ',' am= attrMapping )*
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==COMMA) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:283:6: ',' am= attrMapping
            	    {
            	    char_literal1=(Token)match(input,COMMA,FOLLOW_COMMA_in_attrMappings4537); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal1_tree = (CommonTree)adaptor.create(char_literal1);
            	    adaptor.addChild(root_0, char_literal1_tree);
            	    }
            	    pushFollow(FOLLOW_attrMapping_in_attrMappings4541);
            	    am=attrMapping();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, am.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.attrMap.put((am!=null?am.attr:null),(am!=null?am.value:null));
            	    }

            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("attrMappings", 1);
            if ( state.backtracking>0 ) { memoize(input, 1, attrMappings_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attrMappings"

    public static class attrMapping_return extends ParserRuleReturnScope {
        public String attr;
        public String value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attrMapping"
    // ../etc/JamlAttrHash.g:285:1: attrMapping returns [String attr, String value] : attribute '=' '>' attributeValue ;
    public final JamlAttrHashParser.attrMapping_return attrMapping() throws RecognitionException {
    traceIn("attrMapping", 2);
        JamlAttrHashParser.attrMapping_return retval = new JamlAttrHashParser.attrMapping_return();
        retval.start = input.LT(1);
        int attrMapping_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal3=null;
        Token char_literal4=null;
        JamlAttrHashParser.attribute_return attribute2 = null;

        JamlAttrHashParser.attributeValue_return attributeValue5 = null;


        CommonTree char_literal3_tree=null;
        CommonTree char_literal4_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }
            // ../etc/JamlAttrHash.g:285:48: ( attribute '=' '>' attributeValue )
            // ../etc/JamlAttrHash.g:286:3: attribute '=' '>' attributeValue
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_attribute_in_attrMapping4561);
            attribute2=attribute();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute2.getTree());
            if ( state.backtracking==0 ) {
              retval.attr =(attribute2!=null?attribute2.value:null);
            }
            char_literal3=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_attrMapping4568); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal3_tree = (CommonTree)adaptor.create(char_literal3);
            adaptor.addChild(root_0, char_literal3_tree);
            }
            char_literal4=(Token)match(input,GREATER_THAN,FOLLOW_GREATER_THAN_in_attrMapping4570); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal4_tree = (CommonTree)adaptor.create(char_literal4);
            adaptor.addChild(root_0, char_literal4_tree);
            }
            pushFollow(FOLLOW_attributeValue_in_attrMapping4575);
            attributeValue5=attributeValue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, attributeValue5.getTree());
            if ( state.backtracking==0 ) {
              retval.value =(attributeValue5!=null?attributeValue5.value:null);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("attrMapping", 2);
            if ( state.backtracking>0 ) { memoize(input, 2, attrMapping_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attrMapping"

    public static class attribute_return extends ParserRuleReturnScope {
        public String value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute"
    // ../etc/JamlAttrHash.g:290:1: attribute returns [String value] : ( ':' IDENT | literal );
    public final JamlAttrHashParser.attribute_return attribute() throws RecognitionException {
    traceIn("attribute", 3);
        JamlAttrHashParser.attribute_return retval = new JamlAttrHashParser.attribute_return();
        retval.start = input.LT(1);
        int attribute_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal6=null;
        Token IDENT7=null;
        JamlAttrHashParser.literal_return literal8 = null;


        CommonTree char_literal6_tree=null;
        CommonTree IDENT7_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }
            // ../etc/JamlAttrHash.g:290:33: ( ':' IDENT | literal )
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==COLON) ) {
                alt2=1;
            }
            else if ( (LA2_0==FALSE||LA2_0==NULL||LA2_0==TRUE||(LA2_0>=HEX_LITERAL && LA2_0<=STRING_LITERAL)) ) {
                alt2=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 2, 0, input);

                throw nvae;
            }
            switch (alt2) {
                case 1 :
                    // ../etc/JamlAttrHash.g:291:1: ':' IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal6=(Token)match(input,COLON,FOLLOW_COLON_in_attribute4589); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal6_tree = (CommonTree)adaptor.create(char_literal6);
                    adaptor.addChild(root_0, char_literal6_tree);
                    }
                    IDENT7=(Token)match(input,IDENT,FOLLOW_IDENT_in_attribute4591); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENT7_tree = (CommonTree)adaptor.create(IDENT7);
                    adaptor.addChild(root_0, IDENT7_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = (IDENT7!=null?IDENT7.getText():null);
                    }

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:291:37: literal
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_literal_in_attribute4597);
                    literal8=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal8.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value =(literal8!=null?literal8.value:null);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("attribute", 3);
            if ( state.backtracking>0 ) { memoize(input, 3, attribute_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute"

    public static class attributeValue_return extends ParserRuleReturnScope {
        public String value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attributeValue"
    // ../etc/JamlAttrHash.g:294:1: attributeValue returns [String value] : ( ( literal ',' | literal EOF )=> literal | expression );
    public final JamlAttrHashParser.attributeValue_return attributeValue() throws RecognitionException {
    traceIn("attributeValue", 4);
        JamlAttrHashParser.attributeValue_return retval = new JamlAttrHashParser.attributeValue_return();
        retval.start = input.LT(1);
        int attributeValue_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.literal_return literal9 = null;

        JamlAttrHashParser.expression_return expression10 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }
            // ../etc/JamlAttrHash.g:294:38: ( ( literal ',' | literal EOF )=> literal | expression )
            int alt3=2;
            switch ( input.LA(1) ) {
            case HEX_LITERAL:
            case OCTAL_LITERAL:
            case DECIMAL_LITERAL:
                {
                int LA3_1 = input.LA(2);

                if ( (synpred4_JamlAttrHash()) ) {
                    alt3=1;
                }
                else if ( (true) ) {
                    alt3=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 3, 1, input);

                    throw nvae;
                }
                }
                break;
            case FLOATING_POINT_LITERAL:
                {
                int LA3_2 = input.LA(2);

                if ( (synpred4_JamlAttrHash()) ) {
                    alt3=1;
                }
                else if ( (true) ) {
                    alt3=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 3, 2, input);

                    throw nvae;
                }
                }
                break;
            case CHARACTER_LITERAL:
                {
                int LA3_3 = input.LA(2);

                if ( (synpred4_JamlAttrHash()) ) {
                    alt3=1;
                }
                else if ( (true) ) {
                    alt3=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 3, 3, input);

                    throw nvae;
                }
                }
                break;
            case STRING_LITERAL:
                {
                int LA3_4 = input.LA(2);

                if ( (synpred4_JamlAttrHash()) ) {
                    alt3=1;
                }
                else if ( (true) ) {
                    alt3=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 3, 4, input);

                    throw nvae;
                }
                }
                break;
            case FALSE:
            case NULL:
            case TRUE:
                {
                int LA3_5 = input.LA(2);

                if ( (synpred4_JamlAttrHash()) ) {
                    alt3=1;
                }
                else if ( (true) ) {
                    alt3=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 3, 5, input);

                    throw nvae;
                }
                }
                break;
            case DEC:
            case INC:
            case LESS_THAN:
            case LOGICAL_NOT:
            case LPAREN:
            case MINUS:
            case NOT:
            case PLUS:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case SHORT:
            case SUPER:
            case THIS:
            case VOID:
            case IDENT:
                {
                alt3=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 3, 0, input);

                throw nvae;
            }

            switch (alt3) {
                case 1 :
                    // ../etc/JamlAttrHash.g:295:1: ( literal ',' | literal EOF )=> literal
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_literal_in_attributeValue4626);
                    literal9=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal9.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value =(literal9!=null?literal9.value:null);
                    }

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:296:1: expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expression_in_attributeValue4633);
                    expression10=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression10.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = "<%= " + (expression10!=null?input.toString(expression10.start,expression10.stop):null) + " %>";
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("attributeValue", 4);
            if ( state.backtracking>0 ) { memoize(input, 4, attributeValue_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attributeValue"

    public static class literal_return extends ParserRuleReturnScope {
        public String value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "literal"
    // ../etc/JamlAttrHash.g:299:1: literal returns [String value] : (lit= ( HEX_LITERAL | OCTAL_LITERAL | DECIMAL_LITERAL ) | lit= FLOATING_POINT_LITERAL | lit= CHARACTER_LITERAL | lit= STRING_LITERAL | lit= ( TRUE | FALSE | NULL ) );
    public final JamlAttrHashParser.literal_return literal() throws RecognitionException {
    traceIn("literal", 5);
        JamlAttrHashParser.literal_return retval = new JamlAttrHashParser.literal_return();
        retval.start = input.LT(1);
        int literal_StartIndex = input.index();
        CommonTree root_0 = null;

        Token lit=null;

        CommonTree lit_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }
            // ../etc/JamlAttrHash.g:299:32: (lit= ( HEX_LITERAL | OCTAL_LITERAL | DECIMAL_LITERAL ) | lit= FLOATING_POINT_LITERAL | lit= CHARACTER_LITERAL | lit= STRING_LITERAL | lit= ( TRUE | FALSE | NULL ) )
            int alt4=5;
            switch ( input.LA(1) ) {
            case HEX_LITERAL:
            case OCTAL_LITERAL:
            case DECIMAL_LITERAL:
                {
                alt4=1;
                }
                break;
            case FLOATING_POINT_LITERAL:
                {
                alt4=2;
                }
                break;
            case CHARACTER_LITERAL:
                {
                alt4=3;
                }
                break;
            case STRING_LITERAL:
                {
                alt4=4;
                }
                break;
            case FALSE:
            case NULL:
            case TRUE:
                {
                alt4=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 4, 0, input);

                throw nvae;
            }

            switch (alt4) {
                case 1 :
                    // ../etc/JamlAttrHash.g:300:3: lit= ( HEX_LITERAL | OCTAL_LITERAL | DECIMAL_LITERAL )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    lit=(Token)input.LT(1);
                    if ( (input.LA(1)>=HEX_LITERAL && input.LA(1)<=DECIMAL_LITERAL) ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(lit));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }

                    if ( state.backtracking==0 ) {
                      retval.value = Util.parseIntegerLiteral((lit!=null?lit.getText():null));
                    }

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:301:3: lit= FLOATING_POINT_LITERAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    lit=(Token)match(input,FLOATING_POINT_LITERAL,FOLLOW_FLOATING_POINT_LITERAL_in_literal4670); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    lit_tree = (CommonTree)adaptor.create(lit);
                    adaptor.addChild(root_0, lit_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = Util.parseFloatLiteral((lit!=null?lit.getText():null));
                    }

                    }
                    break;
                case 3 :
                    // ../etc/JamlAttrHash.g:302:3: lit= CHARACTER_LITERAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    lit=(Token)match(input,CHARACTER_LITERAL,FOLLOW_CHARACTER_LITERAL_in_literal4680); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    lit_tree = (CommonTree)adaptor.create(lit);
                    adaptor.addChild(root_0, lit_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = Util.parseCharLiteral((lit!=null?lit.getText():null));
                    }

                    }
                    break;
                case 4 :
                    // ../etc/JamlAttrHash.g:303:3: lit= STRING_LITERAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    lit=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_literal4690); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    lit_tree = (CommonTree)adaptor.create(lit);
                    adaptor.addChild(root_0, lit_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = Util.parseStringLiteral((lit!=null?lit.getText():null));
                    }

                    }
                    break;
                case 5 :
                    // ../etc/JamlAttrHash.g:304:3: lit= ( TRUE | FALSE | NULL )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    lit=(Token)input.LT(1);
                    if ( input.LA(1)==FALSE||input.LA(1)==NULL||input.LA(1)==TRUE ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(lit));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }

                    if ( state.backtracking==0 ) {
                      retval.value = (lit!=null?lit.getText():null);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("literal", 5);
            if ( state.backtracking>0 ) { memoize(input, 5, literal_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "literal"

    public static class javaSource_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "javaSource"
    // ../etc/JamlAttrHash.g:307:1: javaSource : compilationUnit -> ^( JAVA_SOURCE compilationUnit ) ;
    public final JamlAttrHashParser.javaSource_return javaSource() throws RecognitionException {
    traceIn("javaSource", 6);
        JamlAttrHashParser.javaSource_return retval = new JamlAttrHashParser.javaSource_return();
        retval.start = input.LT(1);
        int javaSource_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.compilationUnit_return compilationUnit11 = null;


        RewriteRuleSubtreeStream stream_compilationUnit=new RewriteRuleSubtreeStream(adaptor,"rule compilationUnit");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }
            // ../etc/JamlAttrHash.g:308:5: ( compilationUnit -> ^( JAVA_SOURCE compilationUnit ) )
            // ../etc/JamlAttrHash.g:308:9: compilationUnit
            {
            pushFollow(FOLLOW_compilationUnit_in_javaSource4725);
            compilationUnit11=compilationUnit();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_compilationUnit.add(compilationUnit11.getTree());


            // AST REWRITE
            // elements: compilationUnit
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 309:9: -> ^( JAVA_SOURCE compilationUnit )
            {
                // ../etc/JamlAttrHash.g:309:13: ^( JAVA_SOURCE compilationUnit )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(JAVA_SOURCE, "JAVA_SOURCE"), root_1);

                adaptor.addChild(root_1, stream_compilationUnit.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("javaSource", 6);
            if ( state.backtracking>0 ) { memoize(input, 6, javaSource_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "javaSource"

    public static class compilationUnit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compilationUnit"
    // ../etc/JamlAttrHash.g:312:1: compilationUnit : annotationList ( packageDeclaration )? ( importDeclaration )* ( typeDecls )* ;
    public final JamlAttrHashParser.compilationUnit_return compilationUnit() throws RecognitionException {
    traceIn("compilationUnit", 7);
        JamlAttrHashParser.compilationUnit_return retval = new JamlAttrHashParser.compilationUnit_return();
        retval.start = input.LT(1);
        int compilationUnit_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.annotationList_return annotationList12 = null;

        JamlAttrHashParser.packageDeclaration_return packageDeclaration13 = null;

        JamlAttrHashParser.importDeclaration_return importDeclaration14 = null;

        JamlAttrHashParser.typeDecls_return typeDecls15 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }
            // ../etc/JamlAttrHash.g:313:5: ( annotationList ( packageDeclaration )? ( importDeclaration )* ( typeDecls )* )
            // ../etc/JamlAttrHash.g:313:9: annotationList ( packageDeclaration )? ( importDeclaration )* ( typeDecls )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_annotationList_in_compilationUnit4761);
            annotationList12=annotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationList12.getTree());
            // ../etc/JamlAttrHash.g:314:9: ( packageDeclaration )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==PACKAGE) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: packageDeclaration
                    {
                    pushFollow(FOLLOW_packageDeclaration_in_compilationUnit4772);
                    packageDeclaration13=packageDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, packageDeclaration13.getTree());

                    }
                    break;

            }

            // ../etc/JamlAttrHash.g:315:9: ( importDeclaration )*
            loop6:
            do {
                int alt6=2;
                int LA6_0 = input.LA(1);

                if ( (LA6_0==IMPORT) ) {
                    alt6=1;
                }


                switch (alt6) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:0:0: importDeclaration
            	    {
            	    pushFollow(FOLLOW_importDeclaration_in_compilationUnit4784);
            	    importDeclaration14=importDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, importDeclaration14.getTree());

            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);

            // ../etc/JamlAttrHash.g:316:9: ( typeDecls )*
            loop7:
            do {
                int alt7=2;
                int LA7_0 = input.LA(1);

                if ( (LA7_0==AT||LA7_0==LESS_THAN||LA7_0==SEMI||LA7_0==ABSTRACT||LA7_0==BOOLEAN||LA7_0==BYTE||(LA7_0>=CHAR && LA7_0<=CLASS)||LA7_0==DOUBLE||LA7_0==ENUM||LA7_0==FINAL||LA7_0==FLOAT||LA7_0==INTERFACE||(LA7_0>=INT && LA7_0<=NATIVE)||(LA7_0>=PRIVATE && LA7_0<=PUBLIC)||(LA7_0>=SHORT && LA7_0<=STRICTFP)||LA7_0==SYNCHRONIZED||LA7_0==TRANSIENT||(LA7_0>=VOID && LA7_0<=VOLATILE)||LA7_0==IDENT) ) {
                    alt7=1;
                }


                switch (alt7) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:0:0: typeDecls
            	    {
            	    pushFollow(FOLLOW_typeDecls_in_compilationUnit4796);
            	    typeDecls15=typeDecls();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDecls15.getTree());

            	    }
            	    break;

            	default :
            	    break loop7;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("compilationUnit", 7);
            if ( state.backtracking>0 ) { memoize(input, 7, compilationUnit_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "compilationUnit"

    public static class typeDecls_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeDecls"
    // ../etc/JamlAttrHash.g:319:1: typeDecls : ( typeDeclaration | SEMI );
    public final JamlAttrHashParser.typeDecls_return typeDecls() throws RecognitionException {
    traceIn("typeDecls", 8);
        JamlAttrHashParser.typeDecls_return retval = new JamlAttrHashParser.typeDecls_return();
        retval.start = input.LT(1);
        int typeDecls_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SEMI17=null;
        JamlAttrHashParser.typeDeclaration_return typeDeclaration16 = null;


        CommonTree SEMI17_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }
            // ../etc/JamlAttrHash.g:320:5: ( typeDeclaration | SEMI )
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==AT||LA8_0==LESS_THAN||LA8_0==ABSTRACT||LA8_0==BOOLEAN||LA8_0==BYTE||(LA8_0>=CHAR && LA8_0<=CLASS)||LA8_0==DOUBLE||LA8_0==ENUM||LA8_0==FINAL||LA8_0==FLOAT||LA8_0==INTERFACE||(LA8_0>=INT && LA8_0<=NATIVE)||(LA8_0>=PRIVATE && LA8_0<=PUBLIC)||(LA8_0>=SHORT && LA8_0<=STRICTFP)||LA8_0==SYNCHRONIZED||LA8_0==TRANSIENT||(LA8_0>=VOID && LA8_0<=VOLATILE)||LA8_0==IDENT) ) {
                alt8=1;
            }
            else if ( (LA8_0==SEMI) ) {
                alt8=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 8, 0, input);

                throw nvae;
            }
            switch (alt8) {
                case 1 :
                    // ../etc/JamlAttrHash.g:320:9: typeDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_typeDeclaration_in_typeDecls4816);
                    typeDeclaration16=typeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDeclaration16.getTree());

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:321:9: SEMI
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SEMI17=(Token)match(input,SEMI,FOLLOW_SEMI_in_typeDecls4826); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("typeDecls", 8);
            if ( state.backtracking>0 ) { memoize(input, 8, typeDecls_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeDecls"

    public static class packageDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "packageDeclaration"
    // ../etc/JamlAttrHash.g:324:1: packageDeclaration : PACKAGE qualifiedIdentifier SEMI ;
    public final JamlAttrHashParser.packageDeclaration_return packageDeclaration() throws RecognitionException {
    traceIn("packageDeclaration", 9);
        JamlAttrHashParser.packageDeclaration_return retval = new JamlAttrHashParser.packageDeclaration_return();
        retval.start = input.LT(1);
        int packageDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token PACKAGE18=null;
        Token SEMI20=null;
        JamlAttrHashParser.qualifiedIdentifier_return qualifiedIdentifier19 = null;


        CommonTree PACKAGE18_tree=null;
        CommonTree SEMI20_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }
            // ../etc/JamlAttrHash.g:325:5: ( PACKAGE qualifiedIdentifier SEMI )
            // ../etc/JamlAttrHash.g:325:9: PACKAGE qualifiedIdentifier SEMI
            {
            root_0 = (CommonTree)adaptor.nil();

            PACKAGE18=(Token)match(input,PACKAGE,FOLLOW_PACKAGE_in_packageDeclaration4846); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PACKAGE18_tree = (CommonTree)adaptor.create(PACKAGE18);
            root_0 = (CommonTree)adaptor.becomeRoot(PACKAGE18_tree, root_0);
            }
            pushFollow(FOLLOW_qualifiedIdentifier_in_packageDeclaration4849);
            qualifiedIdentifier19=qualifiedIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedIdentifier19.getTree());
            SEMI20=(Token)match(input,SEMI,FOLLOW_SEMI_in_packageDeclaration4851); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("packageDeclaration", 9);
            if ( state.backtracking>0 ) { memoize(input, 9, packageDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "packageDeclaration"

    public static class importDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "importDeclaration"
    // ../etc/JamlAttrHash.g:328:1: importDeclaration : IMPORT ( STATIC )? qualifiedIdentifier ( DOTSTAR )? SEMI ;
    public final JamlAttrHashParser.importDeclaration_return importDeclaration() throws RecognitionException {
    traceIn("importDeclaration", 10);
        JamlAttrHashParser.importDeclaration_return retval = new JamlAttrHashParser.importDeclaration_return();
        retval.start = input.LT(1);
        int importDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IMPORT21=null;
        Token STATIC22=null;
        Token DOTSTAR24=null;
        Token SEMI25=null;
        JamlAttrHashParser.qualifiedIdentifier_return qualifiedIdentifier23 = null;


        CommonTree IMPORT21_tree=null;
        CommonTree STATIC22_tree=null;
        CommonTree DOTSTAR24_tree=null;
        CommonTree SEMI25_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }
            // ../etc/JamlAttrHash.g:329:5: ( IMPORT ( STATIC )? qualifiedIdentifier ( DOTSTAR )? SEMI )
            // ../etc/JamlAttrHash.g:329:9: IMPORT ( STATIC )? qualifiedIdentifier ( DOTSTAR )? SEMI
            {
            root_0 = (CommonTree)adaptor.nil();

            IMPORT21=(Token)match(input,IMPORT,FOLLOW_IMPORT_in_importDeclaration4877); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IMPORT21_tree = (CommonTree)adaptor.create(IMPORT21);
            root_0 = (CommonTree)adaptor.becomeRoot(IMPORT21_tree, root_0);
            }
            // ../etc/JamlAttrHash.g:329:17: ( STATIC )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==STATIC) ) {
                alt9=1;
            }
            switch (alt9) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: STATIC
                    {
                    STATIC22=(Token)match(input,STATIC,FOLLOW_STATIC_in_importDeclaration4880); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STATIC22_tree = (CommonTree)adaptor.create(STATIC22);
                    adaptor.addChild(root_0, STATIC22_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_qualifiedIdentifier_in_importDeclaration4883);
            qualifiedIdentifier23=qualifiedIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedIdentifier23.getTree());
            // ../etc/JamlAttrHash.g:329:45: ( DOTSTAR )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==DOTSTAR) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: DOTSTAR
                    {
                    DOTSTAR24=(Token)match(input,DOTSTAR,FOLLOW_DOTSTAR_in_importDeclaration4885); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOTSTAR24_tree = (CommonTree)adaptor.create(DOTSTAR24);
                    adaptor.addChild(root_0, DOTSTAR24_tree);
                    }

                    }
                    break;

            }

            SEMI25=(Token)match(input,SEMI,FOLLOW_SEMI_in_importDeclaration4888); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("importDeclaration", 10);
            if ( state.backtracking>0 ) { memoize(input, 10, importDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "importDeclaration"

    public static class typeDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeDeclaration"
    // ../etc/JamlAttrHash.g:332:1: typeDeclaration : modifierList ( classTypeDeclaration[$modifierList.tree] | interfaceTypeDeclaration[$modifierList.tree] | enumTypeDeclaration[$modifierList.tree] | annotationTypeDeclaration[$modifierList.tree] ) ;
    public final JamlAttrHashParser.typeDeclaration_return typeDeclaration() throws RecognitionException {
    traceIn("typeDeclaration", 11);
        JamlAttrHashParser.typeDeclaration_return retval = new JamlAttrHashParser.typeDeclaration_return();
        retval.start = input.LT(1);
        int typeDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.modifierList_return modifierList26 = null;

        JamlAttrHashParser.classTypeDeclaration_return classTypeDeclaration27 = null;

        JamlAttrHashParser.interfaceTypeDeclaration_return interfaceTypeDeclaration28 = null;

        JamlAttrHashParser.enumTypeDeclaration_return enumTypeDeclaration29 = null;

        JamlAttrHashParser.annotationTypeDeclaration_return annotationTypeDeclaration30 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }
            // ../etc/JamlAttrHash.g:333:5: ( modifierList ( classTypeDeclaration[$modifierList.tree] | interfaceTypeDeclaration[$modifierList.tree] | enumTypeDeclaration[$modifierList.tree] | annotationTypeDeclaration[$modifierList.tree] ) )
            // ../etc/JamlAttrHash.g:333:9: modifierList ( classTypeDeclaration[$modifierList.tree] | interfaceTypeDeclaration[$modifierList.tree] | enumTypeDeclaration[$modifierList.tree] | annotationTypeDeclaration[$modifierList.tree] )
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_modifierList_in_typeDeclaration4912);
            modifierList26=modifierList();

            state._fsp--;
            if (state.failed) return retval;
            // ../etc/JamlAttrHash.g:334:9: ( classTypeDeclaration[$modifierList.tree] | interfaceTypeDeclaration[$modifierList.tree] | enumTypeDeclaration[$modifierList.tree] | annotationTypeDeclaration[$modifierList.tree] )
            int alt11=4;
            switch ( input.LA(1) ) {
            case CLASS:
                {
                alt11=1;
                }
                break;
            case INTERFACE:
                {
                alt11=2;
                }
                break;
            case ENUM:
                {
                alt11=3;
                }
                break;
            case AT:
                {
                alt11=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 11, 0, input);

                throw nvae;
            }

            switch (alt11) {
                case 1 :
                    // ../etc/JamlAttrHash.g:334:13: classTypeDeclaration[$modifierList.tree]
                    {
                    pushFollow(FOLLOW_classTypeDeclaration_in_typeDeclaration4927);
                    classTypeDeclaration27=classTypeDeclaration((modifierList26!=null?((CommonTree)modifierList26.tree):null));

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classTypeDeclaration27.getTree());

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:335:13: interfaceTypeDeclaration[$modifierList.tree]
                    {
                    pushFollow(FOLLOW_interfaceTypeDeclaration_in_typeDeclaration4942);
                    interfaceTypeDeclaration28=interfaceTypeDeclaration((modifierList26!=null?((CommonTree)modifierList26.tree):null));

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceTypeDeclaration28.getTree());

                    }
                    break;
                case 3 :
                    // ../etc/JamlAttrHash.g:336:13: enumTypeDeclaration[$modifierList.tree]
                    {
                    pushFollow(FOLLOW_enumTypeDeclaration_in_typeDeclaration4957);
                    enumTypeDeclaration29=enumTypeDeclaration((modifierList26!=null?((CommonTree)modifierList26.tree):null));

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumTypeDeclaration29.getTree());

                    }
                    break;
                case 4 :
                    // ../etc/JamlAttrHash.g:337:13: annotationTypeDeclaration[$modifierList.tree]
                    {
                    pushFollow(FOLLOW_annotationTypeDeclaration_in_typeDeclaration4972);
                    annotationTypeDeclaration30=annotationTypeDeclaration((modifierList26!=null?((CommonTree)modifierList26.tree):null));

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeDeclaration30.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("typeDeclaration", 11);
            if ( state.backtracking>0 ) { memoize(input, 11, typeDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeDeclaration"

    public static class classTypeDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classTypeDeclaration"
    // ../etc/JamlAttrHash.g:341:1: classTypeDeclaration[CommonTree modifiers] : CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody -> ^( CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody ) ;
    public final JamlAttrHashParser.classTypeDeclaration_return classTypeDeclaration(CommonTree modifiers) throws RecognitionException {
    traceIn("classTypeDeclaration", 12);
        JamlAttrHashParser.classTypeDeclaration_return retval = new JamlAttrHashParser.classTypeDeclaration_return();
        retval.start = input.LT(1);
        int classTypeDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token CLASS31=null;
        Token IDENT32=null;
        JamlAttrHashParser.genericTypeParameterList_return genericTypeParameterList33 = null;

        JamlAttrHashParser.classExtendsClause_return classExtendsClause34 = null;

        JamlAttrHashParser.implementsClause_return implementsClause35 = null;

        JamlAttrHashParser.classBody_return classBody36 = null;


        CommonTree CLASS31_tree=null;
        CommonTree IDENT32_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
        RewriteRuleSubtreeStream stream_genericTypeParameterList=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeParameterList");
        RewriteRuleSubtreeStream stream_classExtendsClause=new RewriteRuleSubtreeStream(adaptor,"rule classExtendsClause");
        RewriteRuleSubtreeStream stream_implementsClause=new RewriteRuleSubtreeStream(adaptor,"rule implementsClause");
        RewriteRuleSubtreeStream stream_classBody=new RewriteRuleSubtreeStream(adaptor,"rule classBody");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }
            // ../etc/JamlAttrHash.g:342:5: ( CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody -> ^( CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody ) )
            // ../etc/JamlAttrHash.g:342:9: CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody
            {
            CLASS31=(Token)match(input,CLASS,FOLLOW_CLASS_in_classTypeDeclaration5007); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLASS.add(CLASS31);

            IDENT32=(Token)match(input,IDENT,FOLLOW_IDENT_in_classTypeDeclaration5009); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT32);

            // ../etc/JamlAttrHash.g:342:21: ( genericTypeParameterList )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==LESS_THAN) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: genericTypeParameterList
                    {
                    pushFollow(FOLLOW_genericTypeParameterList_in_classTypeDeclaration5011);
                    genericTypeParameterList33=genericTypeParameterList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_genericTypeParameterList.add(genericTypeParameterList33.getTree());

                    }
                    break;

            }

            // ../etc/JamlAttrHash.g:342:47: ( classExtendsClause )?
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==EXTENDS) ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: classExtendsClause
                    {
                    pushFollow(FOLLOW_classExtendsClause_in_classTypeDeclaration5014);
                    classExtendsClause34=classExtendsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classExtendsClause.add(classExtendsClause34.getTree());

                    }
                    break;

            }

            // ../etc/JamlAttrHash.g:342:67: ( implementsClause )?
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==IMPLEMENTS) ) {
                alt14=1;
            }
            switch (alt14) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: implementsClause
                    {
                    pushFollow(FOLLOW_implementsClause_in_classTypeDeclaration5017);
                    implementsClause35=implementsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_implementsClause.add(implementsClause35.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_classBody_in_classTypeDeclaration5020);
            classBody36=classBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classBody.add(classBody36.getTree());


            // AST REWRITE
            // elements: CLASS, classBody, implementsClause, classExtendsClause, IDENT, genericTypeParameterList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 343:9: -> ^( CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody )
            {
                // ../etc/JamlAttrHash.g:343:13: ^( CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_CLASS.nextNode(), root_1);

                adaptor.addChild(root_1, modifiers);
                adaptor.addChild(root_1, stream_IDENT.nextNode());
                // ../etc/JamlAttrHash.g:343:40: ( genericTypeParameterList )?
                if ( stream_genericTypeParameterList.hasNext() ) {
                    adaptor.addChild(root_1, stream_genericTypeParameterList.nextTree());

                }
                stream_genericTypeParameterList.reset();
                // ../etc/JamlAttrHash.g:343:66: ( classExtendsClause )?
                if ( stream_classExtendsClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_classExtendsClause.nextTree());

                }
                stream_classExtendsClause.reset();
                // ../etc/JamlAttrHash.g:343:86: ( implementsClause )?
                if ( stream_implementsClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_implementsClause.nextTree());

                }
                stream_implementsClause.reset();
                adaptor.addChild(root_1, stream_classBody.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("classTypeDeclaration", 12);
            if ( state.backtracking>0 ) { memoize(input, 12, classTypeDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classTypeDeclaration"

    public static class classExtendsClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classExtendsClause"
    // ../etc/JamlAttrHash.g:346:1: classExtendsClause : EXTENDS type -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] type ) ;
    public final JamlAttrHashParser.classExtendsClause_return classExtendsClause() throws RecognitionException {
    traceIn("classExtendsClause", 13);
        JamlAttrHashParser.classExtendsClause_return retval = new JamlAttrHashParser.classExtendsClause_return();
        retval.start = input.LT(1);
        int classExtendsClause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token EXTENDS37=null;
        JamlAttrHashParser.type_return type38 = null;


        CommonTree EXTENDS37_tree=null;
        RewriteRuleTokenStream stream_EXTENDS=new RewriteRuleTokenStream(adaptor,"token EXTENDS");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }
            // ../etc/JamlAttrHash.g:347:5: ( EXTENDS type -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] type ) )
            // ../etc/JamlAttrHash.g:347:9: EXTENDS type
            {
            EXTENDS37=(Token)match(input,EXTENDS,FOLLOW_EXTENDS_in_classExtendsClause5073); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXTENDS.add(EXTENDS37);

            pushFollow(FOLLOW_type_in_classExtendsClause5075);
            type38=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type38.getTree());


            // AST REWRITE
            // elements: type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 348:9: -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] type )
            {
                // ../etc/JamlAttrHash.g:348:13: ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] type )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXTENDS_CLAUSE, EXTENDS37, "EXTENDS_CLAUSE"), root_1);

                adaptor.addChild(root_1, stream_type.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("classExtendsClause", 13);
            if ( state.backtracking>0 ) { memoize(input, 13, classExtendsClause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classExtendsClause"

    public static class interfaceExtendsClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceExtendsClause"
    // ../etc/JamlAttrHash.g:351:1: interfaceExtendsClause : EXTENDS typeList -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] typeList ) ;
    public final JamlAttrHashParser.interfaceExtendsClause_return interfaceExtendsClause() throws RecognitionException {
    traceIn("interfaceExtendsClause", 14);
        JamlAttrHashParser.interfaceExtendsClause_return retval = new JamlAttrHashParser.interfaceExtendsClause_return();
        retval.start = input.LT(1);
        int interfaceExtendsClause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token EXTENDS39=null;
        JamlAttrHashParser.typeList_return typeList40 = null;


        CommonTree EXTENDS39_tree=null;
        RewriteRuleTokenStream stream_EXTENDS=new RewriteRuleTokenStream(adaptor,"token EXTENDS");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }
            // ../etc/JamlAttrHash.g:352:5: ( EXTENDS typeList -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] typeList ) )
            // ../etc/JamlAttrHash.g:352:9: EXTENDS typeList
            {
            EXTENDS39=(Token)match(input,EXTENDS,FOLLOW_EXTENDS_in_interfaceExtendsClause5119); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXTENDS.add(EXTENDS39);

            pushFollow(FOLLOW_typeList_in_interfaceExtendsClause5121);
            typeList40=typeList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeList.add(typeList40.getTree());


            // AST REWRITE
            // elements: typeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 353:9: -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] typeList )
            {
                // ../etc/JamlAttrHash.g:353:13: ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] typeList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXTENDS_CLAUSE, EXTENDS39, "EXTENDS_CLAUSE"), root_1);

                adaptor.addChild(root_1, stream_typeList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("interfaceExtendsClause", 14);
            if ( state.backtracking>0 ) { memoize(input, 14, interfaceExtendsClause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceExtendsClause"

    public static class implementsClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "implementsClause"
    // ../etc/JamlAttrHash.g:356:1: implementsClause : IMPLEMENTS typeList -> ^( IMPLEMENTS_CLAUSE[$IMPLEMENTS, \"IMPLEMENTS_CLAUSE\"] typeList ) ;
    public final JamlAttrHashParser.implementsClause_return implementsClause() throws RecognitionException {
    traceIn("implementsClause", 15);
        JamlAttrHashParser.implementsClause_return retval = new JamlAttrHashParser.implementsClause_return();
        retval.start = input.LT(1);
        int implementsClause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IMPLEMENTS41=null;
        JamlAttrHashParser.typeList_return typeList42 = null;


        CommonTree IMPLEMENTS41_tree=null;
        RewriteRuleTokenStream stream_IMPLEMENTS=new RewriteRuleTokenStream(adaptor,"token IMPLEMENTS");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }
            // ../etc/JamlAttrHash.g:357:5: ( IMPLEMENTS typeList -> ^( IMPLEMENTS_CLAUSE[$IMPLEMENTS, \"IMPLEMENTS_CLAUSE\"] typeList ) )
            // ../etc/JamlAttrHash.g:357:9: IMPLEMENTS typeList
            {
            IMPLEMENTS41=(Token)match(input,IMPLEMENTS,FOLLOW_IMPLEMENTS_in_implementsClause5165); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IMPLEMENTS.add(IMPLEMENTS41);

            pushFollow(FOLLOW_typeList_in_implementsClause5167);
            typeList42=typeList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeList.add(typeList42.getTree());


            // AST REWRITE
            // elements: typeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 358:9: -> ^( IMPLEMENTS_CLAUSE[$IMPLEMENTS, \"IMPLEMENTS_CLAUSE\"] typeList )
            {
                // ../etc/JamlAttrHash.g:358:13: ^( IMPLEMENTS_CLAUSE[$IMPLEMENTS, \"IMPLEMENTS_CLAUSE\"] typeList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IMPLEMENTS_CLAUSE, IMPLEMENTS41, "IMPLEMENTS_CLAUSE"), root_1);

                adaptor.addChild(root_1, stream_typeList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("implementsClause", 15);
            if ( state.backtracking>0 ) { memoize(input, 15, implementsClause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "implementsClause"

    public static class genericTypeParameterList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericTypeParameterList"
    // ../etc/JamlAttrHash.g:361:1: genericTypeParameterList : LESS_THAN genericTypeParameter ( COMMA genericTypeParameter )* genericTypeListClosing -> ^( GENERIC_TYPE_PARAM_LIST[$LESS_THAN, \"GENERIC_TYPE_PARAM_LIST\"] ( genericTypeParameter )+ ) ;
    public final JamlAttrHashParser.genericTypeParameterList_return genericTypeParameterList() throws RecognitionException {
    traceIn("genericTypeParameterList", 16);
        JamlAttrHashParser.genericTypeParameterList_return retval = new JamlAttrHashParser.genericTypeParameterList_return();
        retval.start = input.LT(1);
        int genericTypeParameterList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LESS_THAN43=null;
        Token COMMA45=null;
        JamlAttrHashParser.genericTypeParameter_return genericTypeParameter44 = null;

        JamlAttrHashParser.genericTypeParameter_return genericTypeParameter46 = null;

        JamlAttrHashParser.genericTypeListClosing_return genericTypeListClosing47 = null;


        CommonTree LESS_THAN43_tree=null;
        CommonTree COMMA45_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LESS_THAN=new RewriteRuleTokenStream(adaptor,"token LESS_THAN");
        RewriteRuleSubtreeStream stream_genericTypeParameter=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeParameter");
        RewriteRuleSubtreeStream stream_genericTypeListClosing=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeListClosing");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }
            // ../etc/JamlAttrHash.g:362:5: ( LESS_THAN genericTypeParameter ( COMMA genericTypeParameter )* genericTypeListClosing -> ^( GENERIC_TYPE_PARAM_LIST[$LESS_THAN, \"GENERIC_TYPE_PARAM_LIST\"] ( genericTypeParameter )+ ) )
            // ../etc/JamlAttrHash.g:362:9: LESS_THAN genericTypeParameter ( COMMA genericTypeParameter )* genericTypeListClosing
            {
            LESS_THAN43=(Token)match(input,LESS_THAN,FOLLOW_LESS_THAN_in_genericTypeParameterList5212); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LESS_THAN.add(LESS_THAN43);

            pushFollow(FOLLOW_genericTypeParameter_in_genericTypeParameterList5214);
            genericTypeParameter44=genericTypeParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_genericTypeParameter.add(genericTypeParameter44.getTree());
            // ../etc/JamlAttrHash.g:362:40: ( COMMA genericTypeParameter )*
            loop15:
            do {
                int alt15=2;
                int LA15_0 = input.LA(1);

                if ( (LA15_0==COMMA) ) {
                    alt15=1;
                }


                switch (alt15) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:362:41: COMMA genericTypeParameter
            	    {
            	    COMMA45=(Token)match(input,COMMA,FOLLOW_COMMA_in_genericTypeParameterList5217); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA45);

            	    pushFollow(FOLLOW_genericTypeParameter_in_genericTypeParameterList5219);
            	    genericTypeParameter46=genericTypeParameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_genericTypeParameter.add(genericTypeParameter46.getTree());

            	    }
            	    break;

            	default :
            	    break loop15;
                }
            } while (true);

            pushFollow(FOLLOW_genericTypeListClosing_in_genericTypeParameterList5223);
            genericTypeListClosing47=genericTypeListClosing();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_genericTypeListClosing.add(genericTypeListClosing47.getTree());


            // AST REWRITE
            // elements: genericTypeParameter
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 363:9: -> ^( GENERIC_TYPE_PARAM_LIST[$LESS_THAN, \"GENERIC_TYPE_PARAM_LIST\"] ( genericTypeParameter )+ )
            {
                // ../etc/JamlAttrHash.g:363:13: ^( GENERIC_TYPE_PARAM_LIST[$LESS_THAN, \"GENERIC_TYPE_PARAM_LIST\"] ( genericTypeParameter )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GENERIC_TYPE_PARAM_LIST, LESS_THAN43, "GENERIC_TYPE_PARAM_LIST"), root_1);

                if ( !(stream_genericTypeParameter.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_genericTypeParameter.hasNext() ) {
                    adaptor.addChild(root_1, stream_genericTypeParameter.nextTree());

                }
                stream_genericTypeParameter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("genericTypeParameterList", 16);
            if ( state.backtracking>0 ) { memoize(input, 16, genericTypeParameterList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "genericTypeParameterList"

    public static class genericTypeListClosing_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericTypeListClosing"
    // ../etc/JamlAttrHash.g:366:1: genericTypeListClosing : ( GREATER_THAN | SHIFT_RIGHT | BIT_SHIFT_RIGHT | );
    public final JamlAttrHashParser.genericTypeListClosing_return genericTypeListClosing() throws RecognitionException {
    traceIn("genericTypeListClosing", 17);
        JamlAttrHashParser.genericTypeListClosing_return retval = new JamlAttrHashParser.genericTypeListClosing_return();
        retval.start = input.LT(1);
        int genericTypeListClosing_StartIndex = input.index();
        CommonTree root_0 = null;

        Token GREATER_THAN48=null;
        Token SHIFT_RIGHT49=null;
        Token BIT_SHIFT_RIGHT50=null;

        CommonTree GREATER_THAN48_tree=null;
        CommonTree SHIFT_RIGHT49_tree=null;
        CommonTree BIT_SHIFT_RIGHT50_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }
            // ../etc/JamlAttrHash.g:370:5: ( GREATER_THAN | SHIFT_RIGHT | BIT_SHIFT_RIGHT | )
            int alt16=4;
            switch ( input.LA(1) ) {
            case GREATER_THAN:
                {
                int LA16_1 = input.LA(2);

                if ( (synpred26_JamlAttrHash()) ) {
                    alt16=1;
                }
                else if ( (true) ) {
                    alt16=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 16, 1, input);

                    throw nvae;
                }
                }
                break;
            case SHIFT_RIGHT:
                {
                int LA16_2 = input.LA(2);

                if ( (synpred27_JamlAttrHash()) ) {
                    alt16=2;
                }
                else if ( (true) ) {
                    alt16=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 16, 2, input);

                    throw nvae;
                }
                }
                break;
            case BIT_SHIFT_RIGHT:
                {
                int LA16_3 = input.LA(2);

                if ( (synpred28_JamlAttrHash()) ) {
                    alt16=3;
                }
                else if ( (true) ) {
                    alt16=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 16, 3, input);

                    throw nvae;
                }
                }
                break;
            case EOF:
            case AND:
            case AND_ASSIGN:
            case ASSIGN:
            case BIT_SHIFT_RIGHT_ASSIGN:
            case COLON:
            case COMMA:
            case DIV_ASSIGN:
            case DOT:
            case ELLIPSIS:
            case EQUAL:
            case LBRACK:
            case LCURLY:
            case LOGICAL_AND:
            case LOGICAL_OR:
            case LPAREN:
            case MINUS_ASSIGN:
            case MOD_ASSIGN:
            case NOT_EQUAL:
            case OR:
            case OR_ASSIGN:
            case PLUS_ASSIGN:
            case QUESTION:
            case RBRACK:
            case RCURLY:
            case RPAREN:
            case SEMI:
            case SHIFT_LEFT_ASSIGN:
            case SHIFT_RIGHT_ASSIGN:
            case STAR_ASSIGN:
            case XOR:
            case XOR_ASSIGN:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case EXTENDS:
            case FLOAT:
            case IMPLEMENTS:
            case INT:
            case LONG:
            case SHORT:
            case SUPER:
            case THIS:
            case VOID:
            case IDENT:
                {
                alt16=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;
            }

            switch (alt16) {
                case 1 :
                    // ../etc/JamlAttrHash.g:370:9: GREATER_THAN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    GREATER_THAN48=(Token)match(input,GREATER_THAN,FOLLOW_GREATER_THAN_in_genericTypeListClosing5338); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GREATER_THAN48_tree = (CommonTree)adaptor.create(GREATER_THAN48);
                    adaptor.addChild(root_0, GREATER_THAN48_tree);
                    }

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:371:9: SHIFT_RIGHT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SHIFT_RIGHT49=(Token)match(input,SHIFT_RIGHT,FOLLOW_SHIFT_RIGHT_in_genericTypeListClosing5348); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SHIFT_RIGHT49_tree = (CommonTree)adaptor.create(SHIFT_RIGHT49);
                    adaptor.addChild(root_0, SHIFT_RIGHT49_tree);
                    }

                    }
                    break;
                case 3 :
                    // ../etc/JamlAttrHash.g:372:9: BIT_SHIFT_RIGHT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    BIT_SHIFT_RIGHT50=(Token)match(input,BIT_SHIFT_RIGHT,FOLLOW_BIT_SHIFT_RIGHT_in_genericTypeListClosing5358); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BIT_SHIFT_RIGHT50_tree = (CommonTree)adaptor.create(BIT_SHIFT_RIGHT50);
                    adaptor.addChild(root_0, BIT_SHIFT_RIGHT50_tree);
                    }

                    }
                    break;
                case 4 :
                    // ../etc/JamlAttrHash.g:374:5: 
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("genericTypeListClosing", 17);
            if ( state.backtracking>0 ) { memoize(input, 17, genericTypeListClosing_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "genericTypeListClosing"

    public static class genericTypeParameter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericTypeParameter"
    // ../etc/JamlAttrHash.g:376:1: genericTypeParameter : IDENT ( bound )? -> ^( IDENT ( bound )? ) ;
    public final JamlAttrHashParser.genericTypeParameter_return genericTypeParameter() throws RecognitionException {
    traceIn("genericTypeParameter", 18);
        JamlAttrHashParser.genericTypeParameter_return retval = new JamlAttrHashParser.genericTypeParameter_return();
        retval.start = input.LT(1);
        int genericTypeParameter_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT51=null;
        JamlAttrHashParser.bound_return bound52 = null;


        CommonTree IDENT51_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_bound=new RewriteRuleSubtreeStream(adaptor,"rule bound");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }
            // ../etc/JamlAttrHash.g:377:5: ( IDENT ( bound )? -> ^( IDENT ( bound )? ) )
            // ../etc/JamlAttrHash.g:377:9: IDENT ( bound )?
            {
            IDENT51=(Token)match(input,IDENT,FOLLOW_IDENT_in_genericTypeParameter5386); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT51);

            // ../etc/JamlAttrHash.g:377:15: ( bound )?
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==EXTENDS) ) {
                int LA17_1 = input.LA(2);

                if ( (LA17_1==BOOLEAN||LA17_1==BYTE||LA17_1==CHAR||LA17_1==DOUBLE||LA17_1==FLOAT||(LA17_1>=INT && LA17_1<=LONG)||LA17_1==SHORT) ) {
                    int LA17_3 = input.LA(3);

                    if ( (synpred29_JamlAttrHash()) ) {
                        alt17=1;
                    }
                }
                else if ( (LA17_1==IDENT) ) {
                    int LA17_4 = input.LA(3);

                    if ( (synpred29_JamlAttrHash()) ) {
                        alt17=1;
                    }
                }
            }
            switch (alt17) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: bound
                    {
                    pushFollow(FOLLOW_bound_in_genericTypeParameter5388);
                    bound52=bound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bound.add(bound52.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: bound, IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 378:9: -> ^( IDENT ( bound )? )
            {
                // ../etc/JamlAttrHash.g:378:13: ^( IDENT ( bound )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_IDENT.nextNode(), root_1);

                // ../etc/JamlAttrHash.g:378:21: ( bound )?
                if ( stream_bound.hasNext() ) {
                    adaptor.addChild(root_1, stream_bound.nextTree());

                }
                stream_bound.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("genericTypeParameter", 18);
            if ( state.backtracking>0 ) { memoize(input, 18, genericTypeParameter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "genericTypeParameter"

    public static class bound_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bound"
    // ../etc/JamlAttrHash.g:381:1: bound : EXTENDS type ( AND type )* -> ^( EXTENDS_BOUND_LIST[$EXTENDS, \"EXTENDS_BOUND_LIST\"] ( type )+ ) ;
    public final JamlAttrHashParser.bound_return bound() throws RecognitionException {
    traceIn("bound", 19);
        JamlAttrHashParser.bound_return retval = new JamlAttrHashParser.bound_return();
        retval.start = input.LT(1);
        int bound_StartIndex = input.index();
        CommonTree root_0 = null;

        Token EXTENDS53=null;
        Token AND55=null;
        JamlAttrHashParser.type_return type54 = null;

        JamlAttrHashParser.type_return type56 = null;


        CommonTree EXTENDS53_tree=null;
        CommonTree AND55_tree=null;
        RewriteRuleTokenStream stream_AND=new RewriteRuleTokenStream(adaptor,"token AND");
        RewriteRuleTokenStream stream_EXTENDS=new RewriteRuleTokenStream(adaptor,"token EXTENDS");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }
            // ../etc/JamlAttrHash.g:382:5: ( EXTENDS type ( AND type )* -> ^( EXTENDS_BOUND_LIST[$EXTENDS, \"EXTENDS_BOUND_LIST\"] ( type )+ ) )
            // ../etc/JamlAttrHash.g:382:9: EXTENDS type ( AND type )*
            {
            EXTENDS53=(Token)match(input,EXTENDS,FOLLOW_EXTENDS_in_bound5434); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXTENDS.add(EXTENDS53);

            pushFollow(FOLLOW_type_in_bound5436);
            type54=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type54.getTree());
            // ../etc/JamlAttrHash.g:382:22: ( AND type )*
            loop18:
            do {
                int alt18=2;
                int LA18_0 = input.LA(1);

                if ( (LA18_0==AND) ) {
                    alt18=1;
                }


                switch (alt18) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:382:23: AND type
            	    {
            	    AND55=(Token)match(input,AND,FOLLOW_AND_in_bound5439); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND.add(AND55);

            	    pushFollow(FOLLOW_type_in_bound5441);
            	    type56=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_type.add(type56.getTree());

            	    }
            	    break;

            	default :
            	    break loop18;
                }
            } while (true);



            // AST REWRITE
            // elements: type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 383:9: -> ^( EXTENDS_BOUND_LIST[$EXTENDS, \"EXTENDS_BOUND_LIST\"] ( type )+ )
            {
                // ../etc/JamlAttrHash.g:383:13: ^( EXTENDS_BOUND_LIST[$EXTENDS, \"EXTENDS_BOUND_LIST\"] ( type )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXTENDS_BOUND_LIST, EXTENDS53, "EXTENDS_BOUND_LIST"), root_1);

                if ( !(stream_type.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_type.hasNext() ) {
                    adaptor.addChild(root_1, stream_type.nextTree());

                }
                stream_type.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("bound", 19);
            if ( state.backtracking>0 ) { memoize(input, 19, bound_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bound"

    public static class enumTypeDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumTypeDeclaration"
    // ../etc/JamlAttrHash.g:386:1: enumTypeDeclaration[CommonTree modifiers] : ENUM IDENT ( implementsClause )? enumBody -> ^( ENUM IDENT ( implementsClause )? enumBody ) ;
    public final JamlAttrHashParser.enumTypeDeclaration_return enumTypeDeclaration(CommonTree modifiers) throws RecognitionException {
    traceIn("enumTypeDeclaration", 20);
        JamlAttrHashParser.enumTypeDeclaration_return retval = new JamlAttrHashParser.enumTypeDeclaration_return();
        retval.start = input.LT(1);
        int enumTypeDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ENUM57=null;
        Token IDENT58=null;
        JamlAttrHashParser.implementsClause_return implementsClause59 = null;

        JamlAttrHashParser.enumBody_return enumBody60 = null;


        CommonTree ENUM57_tree=null;
        CommonTree IDENT58_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_ENUM=new RewriteRuleTokenStream(adaptor,"token ENUM");
        RewriteRuleSubtreeStream stream_implementsClause=new RewriteRuleSubtreeStream(adaptor,"rule implementsClause");
        RewriteRuleSubtreeStream stream_enumBody=new RewriteRuleSubtreeStream(adaptor,"rule enumBody");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }
            // ../etc/JamlAttrHash.g:387:5: ( ENUM IDENT ( implementsClause )? enumBody -> ^( ENUM IDENT ( implementsClause )? enumBody ) )
            // ../etc/JamlAttrHash.g:387:9: ENUM IDENT ( implementsClause )? enumBody
            {
            ENUM57=(Token)match(input,ENUM,FOLLOW_ENUM_in_enumTypeDeclaration5482); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ENUM.add(ENUM57);

            IDENT58=(Token)match(input,IDENT,FOLLOW_IDENT_in_enumTypeDeclaration5484); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT58);

            // ../etc/JamlAttrHash.g:387:20: ( implementsClause )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==IMPLEMENTS) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: implementsClause
                    {
                    pushFollow(FOLLOW_implementsClause_in_enumTypeDeclaration5486);
                    implementsClause59=implementsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_implementsClause.add(implementsClause59.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_enumBody_in_enumTypeDeclaration5489);
            enumBody60=enumBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_enumBody.add(enumBody60.getTree());


            // AST REWRITE
            // elements: IDENT, implementsClause, enumBody, ENUM
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 388:9: -> ^( ENUM IDENT ( implementsClause )? enumBody )
            {
                // ../etc/JamlAttrHash.g:388:13: ^( ENUM IDENT ( implementsClause )? enumBody )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_ENUM.nextNode(), root_1);

                adaptor.addChild(root_1, modifiers);
                adaptor.addChild(root_1, stream_IDENT.nextNode());
                // ../etc/JamlAttrHash.g:388:39: ( implementsClause )?
                if ( stream_implementsClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_implementsClause.nextTree());

                }
                stream_implementsClause.reset();
                adaptor.addChild(root_1, stream_enumBody.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("enumTypeDeclaration", 20);
            if ( state.backtracking>0 ) { memoize(input, 20, enumTypeDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumTypeDeclaration"

    public static class enumBody_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumBody"
    // ../etc/JamlAttrHash.g:391:1: enumBody : LCURLY enumScopeDeclarations RCURLY -> ^( ENUM_TOP_LEVEL_SCOPE[$LCURLY, \"ENUM_TOP_LEVEL_SCOPE\"] enumScopeDeclarations ) ;
    public final JamlAttrHashParser.enumBody_return enumBody() throws RecognitionException {
    traceIn("enumBody", 21);
        JamlAttrHashParser.enumBody_return retval = new JamlAttrHashParser.enumBody_return();
        retval.start = input.LT(1);
        int enumBody_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LCURLY61=null;
        Token RCURLY63=null;
        JamlAttrHashParser.enumScopeDeclarations_return enumScopeDeclarations62 = null;


        CommonTree LCURLY61_tree=null;
        CommonTree RCURLY63_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_enumScopeDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule enumScopeDeclarations");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }
            // ../etc/JamlAttrHash.g:392:5: ( LCURLY enumScopeDeclarations RCURLY -> ^( ENUM_TOP_LEVEL_SCOPE[$LCURLY, \"ENUM_TOP_LEVEL_SCOPE\"] enumScopeDeclarations ) )
            // ../etc/JamlAttrHash.g:392:9: LCURLY enumScopeDeclarations RCURLY
            {
            LCURLY61=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_enumBody5536); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY61);

            pushFollow(FOLLOW_enumScopeDeclarations_in_enumBody5538);
            enumScopeDeclarations62=enumScopeDeclarations();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_enumScopeDeclarations.add(enumScopeDeclarations62.getTree());
            RCURLY63=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_enumBody5540); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY63);



            // AST REWRITE
            // elements: enumScopeDeclarations
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 393:9: -> ^( ENUM_TOP_LEVEL_SCOPE[$LCURLY, \"ENUM_TOP_LEVEL_SCOPE\"] enumScopeDeclarations )
            {
                // ../etc/JamlAttrHash.g:393:13: ^( ENUM_TOP_LEVEL_SCOPE[$LCURLY, \"ENUM_TOP_LEVEL_SCOPE\"] enumScopeDeclarations )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ENUM_TOP_LEVEL_SCOPE, LCURLY61, "ENUM_TOP_LEVEL_SCOPE"), root_1);

                adaptor.addChild(root_1, stream_enumScopeDeclarations.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("enumBody", 21);
            if ( state.backtracking>0 ) { memoize(input, 21, enumBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumBody"

    public static class enumScopeDeclarations_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumScopeDeclarations"
    // ../etc/JamlAttrHash.g:396:1: enumScopeDeclarations : enumConstants ( COMMA )? ( enumClassScopeDeclarations )? ;
    public final JamlAttrHashParser.enumScopeDeclarations_return enumScopeDeclarations() throws RecognitionException {
    traceIn("enumScopeDeclarations", 22);
        JamlAttrHashParser.enumScopeDeclarations_return retval = new JamlAttrHashParser.enumScopeDeclarations_return();
        retval.start = input.LT(1);
        int enumScopeDeclarations_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA65=null;
        JamlAttrHashParser.enumConstants_return enumConstants64 = null;

        JamlAttrHashParser.enumClassScopeDeclarations_return enumClassScopeDeclarations66 = null;


        CommonTree COMMA65_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }
            // ../etc/JamlAttrHash.g:397:5: ( enumConstants ( COMMA )? ( enumClassScopeDeclarations )? )
            // ../etc/JamlAttrHash.g:397:9: enumConstants ( COMMA )? ( enumClassScopeDeclarations )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_enumConstants_in_enumScopeDeclarations5577);
            enumConstants64=enumConstants();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, enumConstants64.getTree());
            // ../etc/JamlAttrHash.g:397:23: ( COMMA )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==COMMA) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // ../etc/JamlAttrHash.g:397:24: COMMA
                    {
                    COMMA65=(Token)match(input,COMMA,FOLLOW_COMMA_in_enumScopeDeclarations5580); if (state.failed) return retval;

                    }
                    break;

            }

            // ../etc/JamlAttrHash.g:397:33: ( enumClassScopeDeclarations )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==SEMI) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: enumClassScopeDeclarations
                    {
                    pushFollow(FOLLOW_enumClassScopeDeclarations_in_enumScopeDeclarations5585);
                    enumClassScopeDeclarations66=enumClassScopeDeclarations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumClassScopeDeclarations66.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("enumScopeDeclarations", 22);
            if ( state.backtracking>0 ) { memoize(input, 22, enumScopeDeclarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumScopeDeclarations"

    public static class enumClassScopeDeclarations_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumClassScopeDeclarations"
    // ../etc/JamlAttrHash.g:400:1: enumClassScopeDeclarations : SEMI ( classScopeDeclarations )* -> ^( CLASS_TOP_LEVEL_SCOPE[$SEMI, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* ) ;
    public final JamlAttrHashParser.enumClassScopeDeclarations_return enumClassScopeDeclarations() throws RecognitionException {
    traceIn("enumClassScopeDeclarations", 23);
        JamlAttrHashParser.enumClassScopeDeclarations_return retval = new JamlAttrHashParser.enumClassScopeDeclarations_return();
        retval.start = input.LT(1);
        int enumClassScopeDeclarations_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SEMI67=null;
        JamlAttrHashParser.classScopeDeclarations_return classScopeDeclarations68 = null;


        CommonTree SEMI67_tree=null;
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleSubtreeStream stream_classScopeDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule classScopeDeclarations");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }
            // ../etc/JamlAttrHash.g:401:5: ( SEMI ( classScopeDeclarations )* -> ^( CLASS_TOP_LEVEL_SCOPE[$SEMI, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* ) )
            // ../etc/JamlAttrHash.g:401:9: SEMI ( classScopeDeclarations )*
            {
            SEMI67=(Token)match(input,SEMI,FOLLOW_SEMI_in_enumClassScopeDeclarations5605); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(SEMI67);

            // ../etc/JamlAttrHash.g:401:14: ( classScopeDeclarations )*
            loop22:
            do {
                int alt22=2;
                int LA22_0 = input.LA(1);

                if ( (LA22_0==AT||LA22_0==LCURLY||LA22_0==LESS_THAN||LA22_0==SEMI||LA22_0==ABSTRACT||LA22_0==BOOLEAN||LA22_0==BYTE||(LA22_0>=CHAR && LA22_0<=CLASS)||LA22_0==DOUBLE||LA22_0==ENUM||LA22_0==FINAL||LA22_0==FLOAT||LA22_0==INTERFACE||(LA22_0>=INT && LA22_0<=NATIVE)||(LA22_0>=PRIVATE && LA22_0<=PUBLIC)||(LA22_0>=SHORT && LA22_0<=STRICTFP)||LA22_0==SYNCHRONIZED||LA22_0==TRANSIENT||(LA22_0>=VOID && LA22_0<=VOLATILE)||LA22_0==IDENT) ) {
                    alt22=1;
                }


                switch (alt22) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:0:0: classScopeDeclarations
            	    {
            	    pushFollow(FOLLOW_classScopeDeclarations_in_enumClassScopeDeclarations5607);
            	    classScopeDeclarations68=classScopeDeclarations();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_classScopeDeclarations.add(classScopeDeclarations68.getTree());

            	    }
            	    break;

            	default :
            	    break loop22;
                }
            } while (true);



            // AST REWRITE
            // elements: classScopeDeclarations
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 402:9: -> ^( CLASS_TOP_LEVEL_SCOPE[$SEMI, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* )
            {
                // ../etc/JamlAttrHash.g:402:13: ^( CLASS_TOP_LEVEL_SCOPE[$SEMI, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_TOP_LEVEL_SCOPE, SEMI67, "CLASS_TOP_LEVEL_SCOPE"), root_1);

                // ../etc/JamlAttrHash.g:402:69: ( classScopeDeclarations )*
                while ( stream_classScopeDeclarations.hasNext() ) {
                    adaptor.addChild(root_1, stream_classScopeDeclarations.nextTree());

                }
                stream_classScopeDeclarations.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("enumClassScopeDeclarations", 23);
            if ( state.backtracking>0 ) { memoize(input, 23, enumClassScopeDeclarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumClassScopeDeclarations"

    public static class enumConstants_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumConstants"
    // ../etc/JamlAttrHash.g:405:1: enumConstants : enumConstant ( COMMA enumConstant )* ;
    public final JamlAttrHashParser.enumConstants_return enumConstants() throws RecognitionException {
    traceIn("enumConstants", 24);
        JamlAttrHashParser.enumConstants_return retval = new JamlAttrHashParser.enumConstants_return();
        retval.start = input.LT(1);
        int enumConstants_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA70=null;
        JamlAttrHashParser.enumConstant_return enumConstant69 = null;

        JamlAttrHashParser.enumConstant_return enumConstant71 = null;


        CommonTree COMMA70_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }
            // ../etc/JamlAttrHash.g:406:5: ( enumConstant ( COMMA enumConstant )* )
            // ../etc/JamlAttrHash.g:406:9: enumConstant ( COMMA enumConstant )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_enumConstant_in_enumConstants5646);
            enumConstant69=enumConstant();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, enumConstant69.getTree());
            // ../etc/JamlAttrHash.g:406:22: ( COMMA enumConstant )*
            loop23:
            do {
                int alt23=2;
                int LA23_0 = input.LA(1);

                if ( (LA23_0==COMMA) ) {
                    int LA23_1 = input.LA(2);

                    if ( (LA23_1==AT||LA23_1==IDENT) ) {
                        alt23=1;
                    }


                }


                switch (alt23) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:406:23: COMMA enumConstant
            	    {
            	    COMMA70=(Token)match(input,COMMA,FOLLOW_COMMA_in_enumConstants5649); if (state.failed) return retval;
            	    pushFollow(FOLLOW_enumConstant_in_enumConstants5652);
            	    enumConstant71=enumConstant();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumConstant71.getTree());

            	    }
            	    break;

            	default :
            	    break loop23;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("enumConstants", 24);
            if ( state.backtracking>0 ) { memoize(input, 24, enumConstants_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumConstants"

    public static class enumConstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumConstant"
    // ../etc/JamlAttrHash.g:409:1: enumConstant : annotationList IDENT ( arguments )? ( classBody )? ;
    public final JamlAttrHashParser.enumConstant_return enumConstant() throws RecognitionException {
    traceIn("enumConstant", 25);
        JamlAttrHashParser.enumConstant_return retval = new JamlAttrHashParser.enumConstant_return();
        retval.start = input.LT(1);
        int enumConstant_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT73=null;
        JamlAttrHashParser.annotationList_return annotationList72 = null;

        JamlAttrHashParser.arguments_return arguments74 = null;

        JamlAttrHashParser.classBody_return classBody75 = null;


        CommonTree IDENT73_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }
            // ../etc/JamlAttrHash.g:410:5: ( annotationList IDENT ( arguments )? ( classBody )? )
            // ../etc/JamlAttrHash.g:410:9: annotationList IDENT ( arguments )? ( classBody )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_annotationList_in_enumConstant5677);
            annotationList72=annotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationList72.getTree());
            IDENT73=(Token)match(input,IDENT,FOLLOW_IDENT_in_enumConstant5679); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT73_tree = (CommonTree)adaptor.create(IDENT73);
            root_0 = (CommonTree)adaptor.becomeRoot(IDENT73_tree, root_0);
            }
            // ../etc/JamlAttrHash.g:410:31: ( arguments )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==LPAREN) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: arguments
                    {
                    pushFollow(FOLLOW_arguments_in_enumConstant5682);
                    arguments74=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments74.getTree());

                    }
                    break;

            }

            // ../etc/JamlAttrHash.g:410:42: ( classBody )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==LCURLY) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: classBody
                    {
                    pushFollow(FOLLOW_classBody_in_enumConstant5685);
                    classBody75=classBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classBody75.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("enumConstant", 25);
            if ( state.backtracking>0 ) { memoize(input, 25, enumConstant_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumConstant"

    public static class interfaceTypeDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceTypeDeclaration"
    // ../etc/JamlAttrHash.g:413:1: interfaceTypeDeclaration[CommonTree modifiers] : INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody -> ^( INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody ) ;
    public final JamlAttrHashParser.interfaceTypeDeclaration_return interfaceTypeDeclaration(CommonTree modifiers) throws RecognitionException {
    traceIn("interfaceTypeDeclaration", 26);
        JamlAttrHashParser.interfaceTypeDeclaration_return retval = new JamlAttrHashParser.interfaceTypeDeclaration_return();
        retval.start = input.LT(1);
        int interfaceTypeDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token INTERFACE76=null;
        Token IDENT77=null;
        JamlAttrHashParser.genericTypeParameterList_return genericTypeParameterList78 = null;

        JamlAttrHashParser.interfaceExtendsClause_return interfaceExtendsClause79 = null;

        JamlAttrHashParser.interfaceBody_return interfaceBody80 = null;


        CommonTree INTERFACE76_tree=null;
        CommonTree IDENT77_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_INTERFACE=new RewriteRuleTokenStream(adaptor,"token INTERFACE");
        RewriteRuleSubtreeStream stream_genericTypeParameterList=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeParameterList");
        RewriteRuleSubtreeStream stream_interfaceBody=new RewriteRuleSubtreeStream(adaptor,"rule interfaceBody");
        RewriteRuleSubtreeStream stream_interfaceExtendsClause=new RewriteRuleSubtreeStream(adaptor,"rule interfaceExtendsClause");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }
            // ../etc/JamlAttrHash.g:414:5: ( INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody -> ^( INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody ) )
            // ../etc/JamlAttrHash.g:414:9: INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody
            {
            INTERFACE76=(Token)match(input,INTERFACE,FOLLOW_INTERFACE_in_interfaceTypeDeclaration5710); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTERFACE.add(INTERFACE76);

            IDENT77=(Token)match(input,IDENT,FOLLOW_IDENT_in_interfaceTypeDeclaration5712); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT77);

            // ../etc/JamlAttrHash.g:414:25: ( genericTypeParameterList )?
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==LESS_THAN) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: genericTypeParameterList
                    {
                    pushFollow(FOLLOW_genericTypeParameterList_in_interfaceTypeDeclaration5714);
                    genericTypeParameterList78=genericTypeParameterList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_genericTypeParameterList.add(genericTypeParameterList78.getTree());

                    }
                    break;

            }

            // ../etc/JamlAttrHash.g:414:51: ( interfaceExtendsClause )?
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==EXTENDS) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: interfaceExtendsClause
                    {
                    pushFollow(FOLLOW_interfaceExtendsClause_in_interfaceTypeDeclaration5717);
                    interfaceExtendsClause79=interfaceExtendsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_interfaceExtendsClause.add(interfaceExtendsClause79.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_interfaceBody_in_interfaceTypeDeclaration5720);
            interfaceBody80=interfaceBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_interfaceBody.add(interfaceBody80.getTree());


            // AST REWRITE
            // elements: IDENT, interfaceBody, INTERFACE, genericTypeParameterList, interfaceExtendsClause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 415:9: -> ^( INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody )
            {
                // ../etc/JamlAttrHash.g:415:13: ^( INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_INTERFACE.nextNode(), root_1);

                adaptor.addChild(root_1, modifiers);
                adaptor.addChild(root_1, stream_IDENT.nextNode());
                // ../etc/JamlAttrHash.g:415:44: ( genericTypeParameterList )?
                if ( stream_genericTypeParameterList.hasNext() ) {
                    adaptor.addChild(root_1, stream_genericTypeParameterList.nextTree());

                }
                stream_genericTypeParameterList.reset();
                // ../etc/JamlAttrHash.g:415:70: ( interfaceExtendsClause )?
                if ( stream_interfaceExtendsClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_interfaceExtendsClause.nextTree());

                }
                stream_interfaceExtendsClause.reset();
                adaptor.addChild(root_1, stream_interfaceBody.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("interfaceTypeDeclaration", 26);
            if ( state.backtracking>0 ) { memoize(input, 26, interfaceTypeDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceTypeDeclaration"

    public static class typeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeList"
    // ../etc/JamlAttrHash.g:418:1: typeList : type ( COMMA type )* ;
    public final JamlAttrHashParser.typeList_return typeList() throws RecognitionException {
    traceIn("typeList", 27);
        JamlAttrHashParser.typeList_return retval = new JamlAttrHashParser.typeList_return();
        retval.start = input.LT(1);
        int typeList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA82=null;
        JamlAttrHashParser.type_return type81 = null;

        JamlAttrHashParser.type_return type83 = null;


        CommonTree COMMA82_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }
            // ../etc/JamlAttrHash.g:419:5: ( type ( COMMA type )* )
            // ../etc/JamlAttrHash.g:419:9: type ( COMMA type )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_type_in_typeList5770);
            type81=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type81.getTree());
            // ../etc/JamlAttrHash.g:419:14: ( COMMA type )*
            loop28:
            do {
                int alt28=2;
                int LA28_0 = input.LA(1);

                if ( (LA28_0==COMMA) ) {
                    alt28=1;
                }


                switch (alt28) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:419:15: COMMA type
            	    {
            	    COMMA82=(Token)match(input,COMMA,FOLLOW_COMMA_in_typeList5773); if (state.failed) return retval;
            	    pushFollow(FOLLOW_type_in_typeList5776);
            	    type83=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, type83.getTree());

            	    }
            	    break;

            	default :
            	    break loop28;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("typeList", 27);
            if ( state.backtracking>0 ) { memoize(input, 27, typeList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeList"

    public static class classBody_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classBody"
    // ../etc/JamlAttrHash.g:422:1: classBody : LCURLY ( classScopeDeclarations )* RCURLY -> ^( CLASS_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* ) ;
    public final JamlAttrHashParser.classBody_return classBody() throws RecognitionException {
    traceIn("classBody", 28);
        JamlAttrHashParser.classBody_return retval = new JamlAttrHashParser.classBody_return();
        retval.start = input.LT(1);
        int classBody_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LCURLY84=null;
        Token RCURLY86=null;
        JamlAttrHashParser.classScopeDeclarations_return classScopeDeclarations85 = null;


        CommonTree LCURLY84_tree=null;
        CommonTree RCURLY86_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_classScopeDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule classScopeDeclarations");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }
            // ../etc/JamlAttrHash.g:423:5: ( LCURLY ( classScopeDeclarations )* RCURLY -> ^( CLASS_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* ) )
            // ../etc/JamlAttrHash.g:423:9: LCURLY ( classScopeDeclarations )* RCURLY
            {
            LCURLY84=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_classBody5801); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY84);

            // ../etc/JamlAttrHash.g:423:16: ( classScopeDeclarations )*
            loop29:
            do {
                int alt29=2;
                int LA29_0 = input.LA(1);

                if ( (LA29_0==AT||LA29_0==LCURLY||LA29_0==LESS_THAN||LA29_0==SEMI||LA29_0==ABSTRACT||LA29_0==BOOLEAN||LA29_0==BYTE||(LA29_0>=CHAR && LA29_0<=CLASS)||LA29_0==DOUBLE||LA29_0==ENUM||LA29_0==FINAL||LA29_0==FLOAT||LA29_0==INTERFACE||(LA29_0>=INT && LA29_0<=NATIVE)||(LA29_0>=PRIVATE && LA29_0<=PUBLIC)||(LA29_0>=SHORT && LA29_0<=STRICTFP)||LA29_0==SYNCHRONIZED||LA29_0==TRANSIENT||(LA29_0>=VOID && LA29_0<=VOLATILE)||LA29_0==IDENT) ) {
                    alt29=1;
                }


                switch (alt29) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:0:0: classScopeDeclarations
            	    {
            	    pushFollow(FOLLOW_classScopeDeclarations_in_classBody5803);
            	    classScopeDeclarations85=classScopeDeclarations();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_classScopeDeclarations.add(classScopeDeclarations85.getTree());

            	    }
            	    break;

            	default :
            	    break loop29;
                }
            } while (true);

            RCURLY86=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_classBody5806); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY86);



            // AST REWRITE
            // elements: classScopeDeclarations
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 424:9: -> ^( CLASS_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* )
            {
                // ../etc/JamlAttrHash.g:424:13: ^( CLASS_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_TOP_LEVEL_SCOPE, LCURLY84, "CLASS_TOP_LEVEL_SCOPE"), root_1);

                // ../etc/JamlAttrHash.g:424:71: ( classScopeDeclarations )*
                while ( stream_classScopeDeclarations.hasNext() ) {
                    adaptor.addChild(root_1, stream_classScopeDeclarations.nextTree());

                }
                stream_classScopeDeclarations.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("classBody", 28);
            if ( state.backtracking>0 ) { memoize(input, 28, classBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classBody"

    public static class interfaceBody_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceBody"
    // ../etc/JamlAttrHash.g:427:1: interfaceBody : LCURLY ( interfaceScopeDeclarations )* RCURLY -> ^( INTERFACE_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( interfaceScopeDeclarations )* ) ;
    public final JamlAttrHashParser.interfaceBody_return interfaceBody() throws RecognitionException {
    traceIn("interfaceBody", 29);
        JamlAttrHashParser.interfaceBody_return retval = new JamlAttrHashParser.interfaceBody_return();
        retval.start = input.LT(1);
        int interfaceBody_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LCURLY87=null;
        Token RCURLY89=null;
        JamlAttrHashParser.interfaceScopeDeclarations_return interfaceScopeDeclarations88 = null;


        CommonTree LCURLY87_tree=null;
        CommonTree RCURLY89_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_interfaceScopeDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule interfaceScopeDeclarations");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }
            // ../etc/JamlAttrHash.g:428:5: ( LCURLY ( interfaceScopeDeclarations )* RCURLY -> ^( INTERFACE_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( interfaceScopeDeclarations )* ) )
            // ../etc/JamlAttrHash.g:428:9: LCURLY ( interfaceScopeDeclarations )* RCURLY
            {
            LCURLY87=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_interfaceBody5848); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY87);

            // ../etc/JamlAttrHash.g:428:16: ( interfaceScopeDeclarations )*
            loop30:
            do {
                int alt30=2;
                int LA30_0 = input.LA(1);

                if ( (LA30_0==AT||LA30_0==LESS_THAN||LA30_0==SEMI||LA30_0==ABSTRACT||LA30_0==BOOLEAN||LA30_0==BYTE||(LA30_0>=CHAR && LA30_0<=CLASS)||LA30_0==DOUBLE||LA30_0==ENUM||LA30_0==FINAL||LA30_0==FLOAT||LA30_0==INTERFACE||(LA30_0>=INT && LA30_0<=NATIVE)||(LA30_0>=PRIVATE && LA30_0<=PUBLIC)||(LA30_0>=SHORT && LA30_0<=STRICTFP)||LA30_0==SYNCHRONIZED||LA30_0==TRANSIENT||(LA30_0>=VOID && LA30_0<=VOLATILE)||LA30_0==IDENT) ) {
                    alt30=1;
                }


                switch (alt30) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:0:0: interfaceScopeDeclarations
            	    {
            	    pushFollow(FOLLOW_interfaceScopeDeclarations_in_interfaceBody5850);
            	    interfaceScopeDeclarations88=interfaceScopeDeclarations();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_interfaceScopeDeclarations.add(interfaceScopeDeclarations88.getTree());

            	    }
            	    break;

            	default :
            	    break loop30;
                }
            } while (true);

            RCURLY89=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_interfaceBody5853); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY89);



            // AST REWRITE
            // elements: interfaceScopeDeclarations
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 429:9: -> ^( INTERFACE_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( interfaceScopeDeclarations )* )
            {
                // ../etc/JamlAttrHash.g:429:13: ^( INTERFACE_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( interfaceScopeDeclarations )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INTERFACE_TOP_LEVEL_SCOPE, LCURLY87, "CLASS_TOP_LEVEL_SCOPE"), root_1);

                // ../etc/JamlAttrHash.g:429:75: ( interfaceScopeDeclarations )*
                while ( stream_interfaceScopeDeclarations.hasNext() ) {
                    adaptor.addChild(root_1, stream_interfaceScopeDeclarations.nextTree());

                }
                stream_interfaceScopeDeclarations.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("interfaceBody", 29);
            if ( state.backtracking>0 ) { memoize(input, 29, interfaceBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceBody"

    public static class classScopeDeclarations_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classScopeDeclarations"
    // ../etc/JamlAttrHash.g:432:1: classScopeDeclarations : ( block -> ^( CLASS_INSTANCE_INITIALIZER block ) | STATIC block -> ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block ) | modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration | SEMI );
    public final JamlAttrHashParser.classScopeDeclarations_return classScopeDeclarations() throws RecognitionException {
    traceIn("classScopeDeclarations", 30);
        JamlAttrHashParser.classScopeDeclarations_return retval = new JamlAttrHashParser.classScopeDeclarations_return();
        retval.start = input.LT(1);
        int classScopeDeclarations_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ident=null;
        Token STATIC91=null;
        Token IDENT96=null;
        Token SEMI101=null;
        Token VOID102=null;
        Token IDENT103=null;
        Token SEMI107=null;
        Token SEMI113=null;
        Token SEMI115=null;
        JamlAttrHashParser.block_return block90 = null;

        JamlAttrHashParser.block_return block92 = null;

        JamlAttrHashParser.modifierList_return modifierList93 = null;

        JamlAttrHashParser.genericTypeParameterList_return genericTypeParameterList94 = null;

        JamlAttrHashParser.type_return type95 = null;

        JamlAttrHashParser.formalParameterList_return formalParameterList97 = null;

        JamlAttrHashParser.arrayDeclaratorList_return arrayDeclaratorList98 = null;

        JamlAttrHashParser.throwsClause_return throwsClause99 = null;

        JamlAttrHashParser.block_return block100 = null;

        JamlAttrHashParser.formalParameterList_return formalParameterList104 = null;

        JamlAttrHashParser.throwsClause_return throwsClause105 = null;

        JamlAttrHashParser.block_return block106 = null;

        JamlAttrHashParser.formalParameterList_return formalParameterList108 = null;

        JamlAttrHashParser.throwsClause_return throwsClause109 = null;

        JamlAttrHashParser.block_return block110 = null;

        JamlAttrHashParser.type_return type111 = null;

        JamlAttrHashParser.classFieldDeclaratorList_return classFieldDeclaratorList112 = null;

        JamlAttrHashParser.typeDeclaration_return typeDeclaration114 = null;


        CommonTree ident_tree=null;
        CommonTree STATIC91_tree=null;
        CommonTree IDENT96_tree=null;
        CommonTree SEMI101_tree=null;
        CommonTree VOID102_tree=null;
        CommonTree IDENT103_tree=null;
        CommonTree SEMI107_tree=null;
        CommonTree SEMI113_tree=null;
        CommonTree SEMI115_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_VOID=new RewriteRuleTokenStream(adaptor,"token VOID");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_STATIC=new RewriteRuleTokenStream(adaptor,"token STATIC");
        RewriteRuleSubtreeStream stream_arrayDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclaratorList");
        RewriteRuleSubtreeStream stream_throwsClause=new RewriteRuleSubtreeStream(adaptor,"rule throwsClause");
        RewriteRuleSubtreeStream stream_modifierList=new RewriteRuleSubtreeStream(adaptor,"rule modifierList");
        RewriteRuleSubtreeStream stream_genericTypeParameterList=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeParameterList");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_classFieldDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule classFieldDeclaratorList");
        RewriteRuleSubtreeStream stream_formalParameterList=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }
            // ../etc/JamlAttrHash.g:433:5: ( block -> ^( CLASS_INSTANCE_INITIALIZER block ) | STATIC block -> ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block ) | modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration | SEMI )
            int alt40=5;
            alt40 = dfa40.predict(input);
            switch (alt40) {
                case 1 :
                    // ../etc/JamlAttrHash.g:433:9: block
                    {
                    pushFollow(FOLLOW_block_in_classScopeDeclarations5891);
                    block90=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block90.getTree());


                    // AST REWRITE
                    // elements: block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 433:25: -> ^( CLASS_INSTANCE_INITIALIZER block )
                    {
                        // ../etc/JamlAttrHash.g:433:29: ^( CLASS_INSTANCE_INITIALIZER block )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_INSTANCE_INITIALIZER, "CLASS_INSTANCE_INITIALIZER"), root_1);

                        adaptor.addChild(root_1, stream_block.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:434:9: STATIC block
                    {
                    STATIC91=(Token)match(input,STATIC,FOLLOW_STATIC_in_classScopeDeclarations5920); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STATIC.add(STATIC91);

                    pushFollow(FOLLOW_block_in_classScopeDeclarations5922);
                    block92=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block92.getTree());


                    // AST REWRITE
                    // elements: block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 434:25: -> ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block )
                    {
                        // ../etc/JamlAttrHash.g:434:29: ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_STATIC_INITIALIZER, STATIC91, "CLASS_STATIC_INITIALIZER"), root_1);

                        adaptor.addChild(root_1, stream_block.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // ../etc/JamlAttrHash.g:435:9: modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) )
                    {
                    pushFollow(FOLLOW_modifierList_in_classScopeDeclarations5945);
                    modifierList93=modifierList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_modifierList.add(modifierList93.getTree());
                    // ../etc/JamlAttrHash.g:436:9: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) )
                    int alt39=2;
                    switch ( input.LA(1) ) {
                    case LESS_THAN:
                    case VOID:
                        {
                        alt39=1;
                        }
                        break;
                    case BOOLEAN:
                    case BYTE:
                    case CHAR:
                    case DOUBLE:
                    case FLOAT:
                    case INT:
                    case LONG:
                    case SHORT:
                        {
                        int LA39_2 = input.LA(2);

                        if ( (synpred54_JamlAttrHash()) ) {
                            alt39=1;
                        }
                        else if ( (true) ) {
                            alt39=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 39, 2, input);

                            throw nvae;
                        }
                        }
                        break;
                    case IDENT:
                        {
                        int LA39_3 = input.LA(2);

                        if ( (synpred54_JamlAttrHash()) ) {
                            alt39=1;
                        }
                        else if ( (true) ) {
                            alt39=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 39, 3, input);

                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 39, 0, input);

                        throw nvae;
                    }

                    switch (alt39) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:436:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) )
                            {
                            // ../etc/JamlAttrHash.g:436:13: ( genericTypeParameterList )?
                            int alt31=2;
                            int LA31_0 = input.LA(1);

                            if ( (LA31_0==LESS_THAN) ) {
                                alt31=1;
                            }
                            switch (alt31) {
                                case 1 :
                                    // ../etc/JamlAttrHash.g:0:0: genericTypeParameterList
                                    {
                                    pushFollow(FOLLOW_genericTypeParameterList_in_classScopeDeclarations5959);
                                    genericTypeParameterList94=genericTypeParameterList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_genericTypeParameterList.add(genericTypeParameterList94.getTree());

                                    }
                                    break;

                            }

                            // ../etc/JamlAttrHash.g:437:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) )
                            int alt38=3;
                            switch ( input.LA(1) ) {
                            case BOOLEAN:
                            case BYTE:
                            case CHAR:
                            case DOUBLE:
                            case FLOAT:
                            case INT:
                            case LONG:
                            case SHORT:
                                {
                                alt38=1;
                                }
                                break;
                            case IDENT:
                                {
                                int LA38_2 = input.LA(2);

                                if ( (LA38_2==DOT||LA38_2==LBRACK||LA38_2==LESS_THAN||LA38_2==IDENT) ) {
                                    alt38=1;
                                }
                                else if ( (LA38_2==LPAREN) ) {
                                    alt38=3;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 38, 2, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case VOID:
                                {
                                alt38=2;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 38, 0, input);

                                throw nvae;
                            }

                            switch (alt38) {
                                case 1 :
                                    // ../etc/JamlAttrHash.g:437:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI )
                                    {
                                    pushFollow(FOLLOW_type_in_classScopeDeclarations5978);
                                    type95=type();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_type.add(type95.getTree());
                                    IDENT96=(Token)match(input,IDENT,FOLLOW_IDENT_in_classScopeDeclarations5980); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT96);

                                    pushFollow(FOLLOW_formalParameterList_in_classScopeDeclarations5982);
                                    formalParameterList97=formalParameterList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_formalParameterList.add(formalParameterList97.getTree());
                                    // ../etc/JamlAttrHash.g:437:48: ( arrayDeclaratorList )?
                                    int alt32=2;
                                    int LA32_0 = input.LA(1);

                                    if ( (LA32_0==LBRACK) ) {
                                        alt32=1;
                                    }
                                    switch (alt32) {
                                        case 1 :
                                            // ../etc/JamlAttrHash.g:0:0: arrayDeclaratorList
                                            {
                                            pushFollow(FOLLOW_arrayDeclaratorList_in_classScopeDeclarations5984);
                                            arrayDeclaratorList98=arrayDeclaratorList();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) stream_arrayDeclaratorList.add(arrayDeclaratorList98.getTree());

                                            }
                                            break;

                                    }

                                    // ../etc/JamlAttrHash.g:437:69: ( throwsClause )?
                                    int alt33=2;
                                    int LA33_0 = input.LA(1);

                                    if ( (LA33_0==THROWS) ) {
                                        alt33=1;
                                    }
                                    switch (alt33) {
                                        case 1 :
                                            // ../etc/JamlAttrHash.g:0:0: throwsClause
                                            {
                                            pushFollow(FOLLOW_throwsClause_in_classScopeDeclarations5987);
                                            throwsClause99=throwsClause();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) stream_throwsClause.add(throwsClause99.getTree());

                                            }
                                            break;

                                    }

                                    // ../etc/JamlAttrHash.g:437:83: ( block | SEMI )
                                    int alt34=2;
                                    int LA34_0 = input.LA(1);

                                    if ( (LA34_0==LCURLY) ) {
                                        alt34=1;
                                    }
                                    else if ( (LA34_0==SEMI) ) {
                                        alt34=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 34, 0, input);

                                        throw nvae;
                                    }
                                    switch (alt34) {
                                        case 1 :
                                            // ../etc/JamlAttrHash.g:437:84: block
                                            {
                                            pushFollow(FOLLOW_block_in_classScopeDeclarations5991);
                                            block100=block();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) stream_block.add(block100.getTree());

                                            }
                                            break;
                                        case 2 :
                                            // ../etc/JamlAttrHash.g:437:92: SEMI
                                            {
                                            SEMI101=(Token)match(input,SEMI,FOLLOW_SEMI_in_classScopeDeclarations5995); if (state.failed) return retval; 
                                            if ( state.backtracking==0 ) stream_SEMI.add(SEMI101);


                                            }
                                            break;

                                    }



                                    // AST REWRITE
                                    // elements: type, genericTypeParameterList, formalParameterList, throwsClause, block, modifierList, arrayDeclaratorList, IDENT
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 438:17: -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? )
                                    {
                                        // ../etc/JamlAttrHash.g:438:21: ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FUNCTION_METHOD_DECL, "FUNCTION_METHOD_DECL"), root_1);

                                        adaptor.addChild(root_1, stream_modifierList.nextTree());
                                        // ../etc/JamlAttrHash.g:438:57: ( genericTypeParameterList )?
                                        if ( stream_genericTypeParameterList.hasNext() ) {
                                            adaptor.addChild(root_1, stream_genericTypeParameterList.nextTree());

                                        }
                                        stream_genericTypeParameterList.reset();
                                        adaptor.addChild(root_1, stream_type.nextTree());
                                        adaptor.addChild(root_1, stream_IDENT.nextNode());
                                        adaptor.addChild(root_1, stream_formalParameterList.nextTree());
                                        // ../etc/JamlAttrHash.g:438:114: ( arrayDeclaratorList )?
                                        if ( stream_arrayDeclaratorList.hasNext() ) {
                                            adaptor.addChild(root_1, stream_arrayDeclaratorList.nextTree());

                                        }
                                        stream_arrayDeclaratorList.reset();
                                        // ../etc/JamlAttrHash.g:438:135: ( throwsClause )?
                                        if ( stream_throwsClause.hasNext() ) {
                                            adaptor.addChild(root_1, stream_throwsClause.nextTree());

                                        }
                                        stream_throwsClause.reset();
                                        // ../etc/JamlAttrHash.g:438:149: ( block )?
                                        if ( stream_block.hasNext() ) {
                                            adaptor.addChild(root_1, stream_block.nextTree());

                                        }
                                        stream_block.reset();

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;
                                case 2 :
                                    // ../etc/JamlAttrHash.g:439:17: VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI )
                                    {
                                    VOID102=(Token)match(input,VOID,FOLLOW_VOID_in_classScopeDeclarations6057); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_VOID.add(VOID102);

                                    IDENT103=(Token)match(input,IDENT,FOLLOW_IDENT_in_classScopeDeclarations6059); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT103);

                                    pushFollow(FOLLOW_formalParameterList_in_classScopeDeclarations6061);
                                    formalParameterList104=formalParameterList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_formalParameterList.add(formalParameterList104.getTree());
                                    // ../etc/JamlAttrHash.g:439:48: ( throwsClause )?
                                    int alt35=2;
                                    int LA35_0 = input.LA(1);

                                    if ( (LA35_0==THROWS) ) {
                                        alt35=1;
                                    }
                                    switch (alt35) {
                                        case 1 :
                                            // ../etc/JamlAttrHash.g:0:0: throwsClause
                                            {
                                            pushFollow(FOLLOW_throwsClause_in_classScopeDeclarations6063);
                                            throwsClause105=throwsClause();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) stream_throwsClause.add(throwsClause105.getTree());

                                            }
                                            break;

                                    }

                                    // ../etc/JamlAttrHash.g:439:62: ( block | SEMI )
                                    int alt36=2;
                                    int LA36_0 = input.LA(1);

                                    if ( (LA36_0==LCURLY) ) {
                                        alt36=1;
                                    }
                                    else if ( (LA36_0==SEMI) ) {
                                        alt36=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 36, 0, input);

                                        throw nvae;
                                    }
                                    switch (alt36) {
                                        case 1 :
                                            // ../etc/JamlAttrHash.g:439:63: block
                                            {
                                            pushFollow(FOLLOW_block_in_classScopeDeclarations6067);
                                            block106=block();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) stream_block.add(block106.getTree());

                                            }
                                            break;
                                        case 2 :
                                            // ../etc/JamlAttrHash.g:439:71: SEMI
                                            {
                                            SEMI107=(Token)match(input,SEMI,FOLLOW_SEMI_in_classScopeDeclarations6071); if (state.failed) return retval; 
                                            if ( state.backtracking==0 ) stream_SEMI.add(SEMI107);


                                            }
                                            break;

                                    }



                                    // AST REWRITE
                                    // elements: modifierList, throwsClause, formalParameterList, IDENT, block, genericTypeParameterList
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 440:17: -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? )
                                    {
                                        // ../etc/JamlAttrHash.g:440:21: ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VOID_METHOD_DECL, "VOID_METHOD_DECL"), root_1);

                                        adaptor.addChild(root_1, stream_modifierList.nextTree());
                                        // ../etc/JamlAttrHash.g:440:53: ( genericTypeParameterList )?
                                        if ( stream_genericTypeParameterList.hasNext() ) {
                                            adaptor.addChild(root_1, stream_genericTypeParameterList.nextTree());

                                        }
                                        stream_genericTypeParameterList.reset();
                                        adaptor.addChild(root_1, stream_IDENT.nextNode());
                                        adaptor.addChild(root_1, stream_formalParameterList.nextTree());
                                        // ../etc/JamlAttrHash.g:440:105: ( throwsClause )?
                                        if ( stream_throwsClause.hasNext() ) {
                                            adaptor.addChild(root_1, stream_throwsClause.nextTree());

                                        }
                                        stream_throwsClause.reset();
                                        // ../etc/JamlAttrHash.g:440:119: ( block )?
                                        if ( stream_block.hasNext() ) {
                                            adaptor.addChild(root_1, stream_block.nextTree());

                                        }
                                        stream_block.reset();

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;
                                case 3 :
                                    // ../etc/JamlAttrHash.g:441:17: ident= IDENT formalParameterList ( throwsClause )? block
                                    {
                                    ident=(Token)match(input,IDENT,FOLLOW_IDENT_in_classScopeDeclarations6130); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(ident);

                                    pushFollow(FOLLOW_formalParameterList_in_classScopeDeclarations6132);
                                    formalParameterList108=formalParameterList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_formalParameterList.add(formalParameterList108.getTree());
                                    // ../etc/JamlAttrHash.g:441:49: ( throwsClause )?
                                    int alt37=2;
                                    int LA37_0 = input.LA(1);

                                    if ( (LA37_0==THROWS) ) {
                                        alt37=1;
                                    }
                                    switch (alt37) {
                                        case 1 :
                                            // ../etc/JamlAttrHash.g:0:0: throwsClause
                                            {
                                            pushFollow(FOLLOW_throwsClause_in_classScopeDeclarations6134);
                                            throwsClause109=throwsClause();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) stream_throwsClause.add(throwsClause109.getTree());

                                            }
                                            break;

                                    }

                                    pushFollow(FOLLOW_block_in_classScopeDeclarations6137);
                                    block110=block();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_block.add(block110.getTree());


                                    // AST REWRITE
                                    // elements: block, genericTypeParameterList, modifierList, throwsClause, formalParameterList
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 442:17: -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block )
                                    {
                                        // ../etc/JamlAttrHash.g:442:21: ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONSTRUCTOR_DECL, ident, "CONSTRUCTOR_DECL"), root_1);

                                        adaptor.addChild(root_1, stream_modifierList.nextTree());
                                        // ../etc/JamlAttrHash.g:442:81: ( genericTypeParameterList )?
                                        if ( stream_genericTypeParameterList.hasNext() ) {
                                            adaptor.addChild(root_1, stream_genericTypeParameterList.nextTree());

                                        }
                                        stream_genericTypeParameterList.reset();
                                        adaptor.addChild(root_1, stream_formalParameterList.nextTree());
                                        // ../etc/JamlAttrHash.g:442:127: ( throwsClause )?
                                        if ( stream_throwsClause.hasNext() ) {
                                            adaptor.addChild(root_1, stream_throwsClause.nextTree());

                                        }
                                        stream_throwsClause.reset();
                                        adaptor.addChild(root_1, stream_block.nextTree());

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // ../etc/JamlAttrHash.g:444:13: type classFieldDeclaratorList SEMI
                            {
                            pushFollow(FOLLOW_type_in_classScopeDeclarations6201);
                            type111=type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_type.add(type111.getTree());
                            pushFollow(FOLLOW_classFieldDeclaratorList_in_classScopeDeclarations6203);
                            classFieldDeclaratorList112=classFieldDeclaratorList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_classFieldDeclaratorList.add(classFieldDeclaratorList112.getTree());
                            SEMI113=(Token)match(input,SEMI,FOLLOW_SEMI_in_classScopeDeclarations6205); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMI.add(SEMI113);



                            // AST REWRITE
                            // elements: modifierList, classFieldDeclaratorList, type
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 445:13: -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList )
                            {
                                // ../etc/JamlAttrHash.g:445:17: ^( VAR_DECLARATION modifierList type classFieldDeclaratorList )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_DECLARATION, "VAR_DECLARATION"), root_1);

                                adaptor.addChild(root_1, stream_modifierList.nextTree());
                                adaptor.addChild(root_1, stream_type.nextTree());
                                adaptor.addChild(root_1, stream_classFieldDeclaratorList.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // ../etc/JamlAttrHash.g:447:9: typeDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_typeDeclaration_in_classScopeDeclarations6250);
                    typeDeclaration114=typeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDeclaration114.getTree());

                    }
                    break;
                case 5 :
                    // ../etc/JamlAttrHash.g:448:9: SEMI
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SEMI115=(Token)match(input,SEMI,FOLLOW_SEMI_in_classScopeDeclarations6260); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("classScopeDeclarations", 30);
            if ( state.backtracking>0 ) { memoize(input, 30, classScopeDeclarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classScopeDeclarations"

    public static class interfaceScopeDeclarations_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceScopeDeclarations"
    // ../etc/JamlAttrHash.g:451:1: interfaceScopeDeclarations : ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) ) | typeDeclaration | SEMI );
    public final JamlAttrHashParser.interfaceScopeDeclarations_return interfaceScopeDeclarations() throws RecognitionException {
    traceIn("interfaceScopeDeclarations", 31);
        JamlAttrHashParser.interfaceScopeDeclarations_return retval = new JamlAttrHashParser.interfaceScopeDeclarations_return();
        retval.start = input.LT(1);
        int interfaceScopeDeclarations_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT119=null;
        Token SEMI123=null;
        Token VOID124=null;
        Token IDENT125=null;
        Token SEMI128=null;
        Token SEMI131=null;
        Token SEMI133=null;
        JamlAttrHashParser.modifierList_return modifierList116 = null;

        JamlAttrHashParser.genericTypeParameterList_return genericTypeParameterList117 = null;

        JamlAttrHashParser.type_return type118 = null;

        JamlAttrHashParser.formalParameterList_return formalParameterList120 = null;

        JamlAttrHashParser.arrayDeclaratorList_return arrayDeclaratorList121 = null;

        JamlAttrHashParser.throwsClause_return throwsClause122 = null;

        JamlAttrHashParser.formalParameterList_return formalParameterList126 = null;

        JamlAttrHashParser.throwsClause_return throwsClause127 = null;

        JamlAttrHashParser.type_return type129 = null;

        JamlAttrHashParser.interfaceFieldDeclaratorList_return interfaceFieldDeclaratorList130 = null;

        JamlAttrHashParser.typeDeclaration_return typeDeclaration132 = null;


        CommonTree IDENT119_tree=null;
        CommonTree SEMI123_tree=null;
        CommonTree VOID124_tree=null;
        CommonTree IDENT125_tree=null;
        CommonTree SEMI128_tree=null;
        CommonTree SEMI131_tree=null;
        CommonTree SEMI133_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_VOID=new RewriteRuleTokenStream(adaptor,"token VOID");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleSubtreeStream stream_arrayDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclaratorList");
        RewriteRuleSubtreeStream stream_throwsClause=new RewriteRuleSubtreeStream(adaptor,"rule throwsClause");
        RewriteRuleSubtreeStream stream_modifierList=new RewriteRuleSubtreeStream(adaptor,"rule modifierList");
        RewriteRuleSubtreeStream stream_genericTypeParameterList=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeParameterList");
        RewriteRuleSubtreeStream stream_interfaceFieldDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule interfaceFieldDeclaratorList");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_formalParameterList=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }
            // ../etc/JamlAttrHash.g:452:5: ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) ) | typeDeclaration | SEMI )
            int alt47=3;
            alt47 = dfa47.predict(input);
            switch (alt47) {
                case 1 :
                    // ../etc/JamlAttrHash.g:452:9: modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) )
                    {
                    pushFollow(FOLLOW_modifierList_in_interfaceScopeDeclarations6292);
                    modifierList116=modifierList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_modifierList.add(modifierList116.getTree());
                    // ../etc/JamlAttrHash.g:453:9: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) )
                    int alt46=2;
                    switch ( input.LA(1) ) {
                    case LESS_THAN:
                    case VOID:
                        {
                        alt46=1;
                        }
                        break;
                    case BOOLEAN:
                    case BYTE:
                    case CHAR:
                    case DOUBLE:
                    case FLOAT:
                    case INT:
                    case LONG:
                    case SHORT:
                        {
                        int LA46_2 = input.LA(2);

                        if ( (synpred62_JamlAttrHash()) ) {
                            alt46=1;
                        }
                        else if ( (true) ) {
                            alt46=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 46, 2, input);

                            throw nvae;
                        }
                        }
                        break;
                    case IDENT:
                        {
                        int LA46_3 = input.LA(2);

                        if ( (synpred62_JamlAttrHash()) ) {
                            alt46=1;
                        }
                        else if ( (true) ) {
                            alt46=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 46, 3, input);

                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 46, 0, input);

                        throw nvae;
                    }

                    switch (alt46) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:453:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) )
                            {
                            // ../etc/JamlAttrHash.g:453:13: ( genericTypeParameterList )?
                            int alt41=2;
                            int LA41_0 = input.LA(1);

                            if ( (LA41_0==LESS_THAN) ) {
                                alt41=1;
                            }
                            switch (alt41) {
                                case 1 :
                                    // ../etc/JamlAttrHash.g:0:0: genericTypeParameterList
                                    {
                                    pushFollow(FOLLOW_genericTypeParameterList_in_interfaceScopeDeclarations6306);
                                    genericTypeParameterList117=genericTypeParameterList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_genericTypeParameterList.add(genericTypeParameterList117.getTree());

                                    }
                                    break;

                            }

                            // ../etc/JamlAttrHash.g:454:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) )
                            int alt45=2;
                            int LA45_0 = input.LA(1);

                            if ( (LA45_0==BOOLEAN||LA45_0==BYTE||LA45_0==CHAR||LA45_0==DOUBLE||LA45_0==FLOAT||(LA45_0>=INT && LA45_0<=LONG)||LA45_0==SHORT||LA45_0==IDENT) ) {
                                alt45=1;
                            }
                            else if ( (LA45_0==VOID) ) {
                                alt45=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 45, 0, input);

                                throw nvae;
                            }
                            switch (alt45) {
                                case 1 :
                                    // ../etc/JamlAttrHash.g:454:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI
                                    {
                                    pushFollow(FOLLOW_type_in_interfaceScopeDeclarations6325);
                                    type118=type();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_type.add(type118.getTree());
                                    IDENT119=(Token)match(input,IDENT,FOLLOW_IDENT_in_interfaceScopeDeclarations6327); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT119);

                                    pushFollow(FOLLOW_formalParameterList_in_interfaceScopeDeclarations6329);
                                    formalParameterList120=formalParameterList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_formalParameterList.add(formalParameterList120.getTree());
                                    // ../etc/JamlAttrHash.g:454:48: ( arrayDeclaratorList )?
                                    int alt42=2;
                                    int LA42_0 = input.LA(1);

                                    if ( (LA42_0==LBRACK) ) {
                                        alt42=1;
                                    }
                                    switch (alt42) {
                                        case 1 :
                                            // ../etc/JamlAttrHash.g:0:0: arrayDeclaratorList
                                            {
                                            pushFollow(FOLLOW_arrayDeclaratorList_in_interfaceScopeDeclarations6331);
                                            arrayDeclaratorList121=arrayDeclaratorList();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) stream_arrayDeclaratorList.add(arrayDeclaratorList121.getTree());

                                            }
                                            break;

                                    }

                                    // ../etc/JamlAttrHash.g:454:69: ( throwsClause )?
                                    int alt43=2;
                                    int LA43_0 = input.LA(1);

                                    if ( (LA43_0==THROWS) ) {
                                        alt43=1;
                                    }
                                    switch (alt43) {
                                        case 1 :
                                            // ../etc/JamlAttrHash.g:0:0: throwsClause
                                            {
                                            pushFollow(FOLLOW_throwsClause_in_interfaceScopeDeclarations6334);
                                            throwsClause122=throwsClause();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) stream_throwsClause.add(throwsClause122.getTree());

                                            }
                                            break;

                                    }

                                    SEMI123=(Token)match(input,SEMI,FOLLOW_SEMI_in_interfaceScopeDeclarations6337); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI123);



                                    // AST REWRITE
                                    // elements: genericTypeParameterList, type, formalParameterList, arrayDeclaratorList, IDENT, modifierList, throwsClause
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 455:17: -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? )
                                    {
                                        // ../etc/JamlAttrHash.g:455:21: ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FUNCTION_METHOD_DECL, "FUNCTION_METHOD_DECL"), root_1);

                                        adaptor.addChild(root_1, stream_modifierList.nextTree());
                                        // ../etc/JamlAttrHash.g:455:57: ( genericTypeParameterList )?
                                        if ( stream_genericTypeParameterList.hasNext() ) {
                                            adaptor.addChild(root_1, stream_genericTypeParameterList.nextTree());

                                        }
                                        stream_genericTypeParameterList.reset();
                                        adaptor.addChild(root_1, stream_type.nextTree());
                                        adaptor.addChild(root_1, stream_IDENT.nextNode());
                                        adaptor.addChild(root_1, stream_formalParameterList.nextTree());
                                        // ../etc/JamlAttrHash.g:455:114: ( arrayDeclaratorList )?
                                        if ( stream_arrayDeclaratorList.hasNext() ) {
                                            adaptor.addChild(root_1, stream_arrayDeclaratorList.nextTree());

                                        }
                                        stream_arrayDeclaratorList.reset();
                                        // ../etc/JamlAttrHash.g:455:135: ( throwsClause )?
                                        if ( stream_throwsClause.hasNext() ) {
                                            adaptor.addChild(root_1, stream_throwsClause.nextTree());

                                        }
                                        stream_throwsClause.reset();

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;
                                case 2 :
                                    // ../etc/JamlAttrHash.g:456:17: VOID IDENT formalParameterList ( throwsClause )? SEMI
                                    {
                                    VOID124=(Token)match(input,VOID,FOLLOW_VOID_in_interfaceScopeDeclarations6395); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_VOID.add(VOID124);

                                    IDENT125=(Token)match(input,IDENT,FOLLOW_IDENT_in_interfaceScopeDeclarations6397); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT125);

                                    pushFollow(FOLLOW_formalParameterList_in_interfaceScopeDeclarations6399);
                                    formalParameterList126=formalParameterList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_formalParameterList.add(formalParameterList126.getTree());
                                    // ../etc/JamlAttrHash.g:456:48: ( throwsClause )?
                                    int alt44=2;
                                    int LA44_0 = input.LA(1);

                                    if ( (LA44_0==THROWS) ) {
                                        alt44=1;
                                    }
                                    switch (alt44) {
                                        case 1 :
                                            // ../etc/JamlAttrHash.g:0:0: throwsClause
                                            {
                                            pushFollow(FOLLOW_throwsClause_in_interfaceScopeDeclarations6401);
                                            throwsClause127=throwsClause();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) stream_throwsClause.add(throwsClause127.getTree());

                                            }
                                            break;

                                    }

                                    SEMI128=(Token)match(input,SEMI,FOLLOW_SEMI_in_interfaceScopeDeclarations6404); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI128);



                                    // AST REWRITE
                                    // elements: modifierList, throwsClause, formalParameterList, genericTypeParameterList, IDENT
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 457:17: -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? )
                                    {
                                        // ../etc/JamlAttrHash.g:457:21: ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VOID_METHOD_DECL, "VOID_METHOD_DECL"), root_1);

                                        adaptor.addChild(root_1, stream_modifierList.nextTree());
                                        // ../etc/JamlAttrHash.g:457:53: ( genericTypeParameterList )?
                                        if ( stream_genericTypeParameterList.hasNext() ) {
                                            adaptor.addChild(root_1, stream_genericTypeParameterList.nextTree());

                                        }
                                        stream_genericTypeParameterList.reset();
                                        adaptor.addChild(root_1, stream_IDENT.nextNode());
                                        adaptor.addChild(root_1, stream_formalParameterList.nextTree());
                                        // ../etc/JamlAttrHash.g:457:105: ( throwsClause )?
                                        if ( stream_throwsClause.hasNext() ) {
                                            adaptor.addChild(root_1, stream_throwsClause.nextTree());

                                        }
                                        stream_throwsClause.reset();

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // ../etc/JamlAttrHash.g:459:13: type interfaceFieldDeclaratorList SEMI
                            {
                            pushFollow(FOLLOW_type_in_interfaceScopeDeclarations6467);
                            type129=type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_type.add(type129.getTree());
                            pushFollow(FOLLOW_interfaceFieldDeclaratorList_in_interfaceScopeDeclarations6469);
                            interfaceFieldDeclaratorList130=interfaceFieldDeclaratorList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_interfaceFieldDeclaratorList.add(interfaceFieldDeclaratorList130.getTree());
                            SEMI131=(Token)match(input,SEMI,FOLLOW_SEMI_in_interfaceScopeDeclarations6471); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMI.add(SEMI131);



                            // AST REWRITE
                            // elements: modifierList, type, interfaceFieldDeclaratorList
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 460:13: -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList )
                            {
                                // ../etc/JamlAttrHash.g:460:17: ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_DECLARATION, "VAR_DECLARATION"), root_1);

                                adaptor.addChild(root_1, stream_modifierList.nextTree());
                                adaptor.addChild(root_1, stream_type.nextTree());
                                adaptor.addChild(root_1, stream_interfaceFieldDeclaratorList.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:462:9: typeDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_typeDeclaration_in_interfaceScopeDeclarations6516);
                    typeDeclaration132=typeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDeclaration132.getTree());

                    }
                    break;
                case 3 :
                    // ../etc/JamlAttrHash.g:463:9: SEMI
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SEMI133=(Token)match(input,SEMI,FOLLOW_SEMI_in_interfaceScopeDeclarations6526); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("interfaceScopeDeclarations", 31);
            if ( state.backtracking>0 ) { memoize(input, 31, interfaceScopeDeclarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceScopeDeclarations"

    public static class classFieldDeclaratorList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classFieldDeclaratorList"
    // ../etc/JamlAttrHash.g:466:1: classFieldDeclaratorList : classFieldDeclarator ( COMMA classFieldDeclarator )* -> ^( VAR_DECLARATOR_LIST ( classFieldDeclarator )+ ) ;
    public final JamlAttrHashParser.classFieldDeclaratorList_return classFieldDeclaratorList() throws RecognitionException {
    traceIn("classFieldDeclaratorList", 32);
        JamlAttrHashParser.classFieldDeclaratorList_return retval = new JamlAttrHashParser.classFieldDeclaratorList_return();
        retval.start = input.LT(1);
        int classFieldDeclaratorList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA135=null;
        JamlAttrHashParser.classFieldDeclarator_return classFieldDeclarator134 = null;

        JamlAttrHashParser.classFieldDeclarator_return classFieldDeclarator136 = null;


        CommonTree COMMA135_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_classFieldDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule classFieldDeclarator");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }
            // ../etc/JamlAttrHash.g:467:5: ( classFieldDeclarator ( COMMA classFieldDeclarator )* -> ^( VAR_DECLARATOR_LIST ( classFieldDeclarator )+ ) )
            // ../etc/JamlAttrHash.g:467:9: classFieldDeclarator ( COMMA classFieldDeclarator )*
            {
            pushFollow(FOLLOW_classFieldDeclarator_in_classFieldDeclaratorList6546);
            classFieldDeclarator134=classFieldDeclarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classFieldDeclarator.add(classFieldDeclarator134.getTree());
            // ../etc/JamlAttrHash.g:467:30: ( COMMA classFieldDeclarator )*
            loop48:
            do {
                int alt48=2;
                int LA48_0 = input.LA(1);

                if ( (LA48_0==COMMA) ) {
                    alt48=1;
                }


                switch (alt48) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:467:31: COMMA classFieldDeclarator
            	    {
            	    COMMA135=(Token)match(input,COMMA,FOLLOW_COMMA_in_classFieldDeclaratorList6549); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA135);

            	    pushFollow(FOLLOW_classFieldDeclarator_in_classFieldDeclaratorList6551);
            	    classFieldDeclarator136=classFieldDeclarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_classFieldDeclarator.add(classFieldDeclarator136.getTree());

            	    }
            	    break;

            	default :
            	    break loop48;
                }
            } while (true);



            // AST REWRITE
            // elements: classFieldDeclarator
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 468:9: -> ^( VAR_DECLARATOR_LIST ( classFieldDeclarator )+ )
            {
                // ../etc/JamlAttrHash.g:468:13: ^( VAR_DECLARATOR_LIST ( classFieldDeclarator )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_DECLARATOR_LIST, "VAR_DECLARATOR_LIST"), root_1);

                if ( !(stream_classFieldDeclarator.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_classFieldDeclarator.hasNext() ) {
                    adaptor.addChild(root_1, stream_classFieldDeclarator.nextTree());

                }
                stream_classFieldDeclarator.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("classFieldDeclaratorList", 32);
            if ( state.backtracking>0 ) { memoize(input, 32, classFieldDeclaratorList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classFieldDeclaratorList"

    public static class classFieldDeclarator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classFieldDeclarator"
    // ../etc/JamlAttrHash.g:471:1: classFieldDeclarator : variableDeclaratorId ( ASSIGN variableInitializer )? -> ^( VAR_DECLARATOR variableDeclaratorId ( variableInitializer )? ) ;
    public final JamlAttrHashParser.classFieldDeclarator_return classFieldDeclarator() throws RecognitionException {
    traceIn("classFieldDeclarator", 33);
        JamlAttrHashParser.classFieldDeclarator_return retval = new JamlAttrHashParser.classFieldDeclarator_return();
        retval.start = input.LT(1);
        int classFieldDeclarator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ASSIGN138=null;
        JamlAttrHashParser.variableDeclaratorId_return variableDeclaratorId137 = null;

        JamlAttrHashParser.variableInitializer_return variableInitializer139 = null;


        CommonTree ASSIGN138_tree=null;
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_variableDeclaratorId=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorId");
        RewriteRuleSubtreeStream stream_variableInitializer=new RewriteRuleSubtreeStream(adaptor,"rule variableInitializer");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }
            // ../etc/JamlAttrHash.g:472:5: ( variableDeclaratorId ( ASSIGN variableInitializer )? -> ^( VAR_DECLARATOR variableDeclaratorId ( variableInitializer )? ) )
            // ../etc/JamlAttrHash.g:472:9: variableDeclaratorId ( ASSIGN variableInitializer )?
            {
            pushFollow(FOLLOW_variableDeclaratorId_in_classFieldDeclarator6590);
            variableDeclaratorId137=variableDeclaratorId();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableDeclaratorId.add(variableDeclaratorId137.getTree());
            // ../etc/JamlAttrHash.g:472:30: ( ASSIGN variableInitializer )?
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==ASSIGN) ) {
                alt49=1;
            }
            switch (alt49) {
                case 1 :
                    // ../etc/JamlAttrHash.g:472:31: ASSIGN variableInitializer
                    {
                    ASSIGN138=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_classFieldDeclarator6593); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN138);

                    pushFollow(FOLLOW_variableInitializer_in_classFieldDeclarator6595);
                    variableInitializer139=variableInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variableInitializer.add(variableInitializer139.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: variableInitializer, variableDeclaratorId
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 473:9: -> ^( VAR_DECLARATOR variableDeclaratorId ( variableInitializer )? )
            {
                // ../etc/JamlAttrHash.g:473:13: ^( VAR_DECLARATOR variableDeclaratorId ( variableInitializer )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_DECLARATOR, "VAR_DECLARATOR"), root_1);

                adaptor.addChild(root_1, stream_variableDeclaratorId.nextTree());
                // ../etc/JamlAttrHash.g:473:51: ( variableInitializer )?
                if ( stream_variableInitializer.hasNext() ) {
                    adaptor.addChild(root_1, stream_variableInitializer.nextTree());

                }
                stream_variableInitializer.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("classFieldDeclarator", 33);
            if ( state.backtracking>0 ) { memoize(input, 33, classFieldDeclarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classFieldDeclarator"

    public static class interfaceFieldDeclaratorList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceFieldDeclaratorList"
    // ../etc/JamlAttrHash.g:476:1: interfaceFieldDeclaratorList : interfaceFieldDeclarator ( COMMA interfaceFieldDeclarator )* -> ^( VAR_DECLARATOR_LIST ( interfaceFieldDeclarator )+ ) ;
    public final JamlAttrHashParser.interfaceFieldDeclaratorList_return interfaceFieldDeclaratorList() throws RecognitionException {
    traceIn("interfaceFieldDeclaratorList", 34);
        JamlAttrHashParser.interfaceFieldDeclaratorList_return retval = new JamlAttrHashParser.interfaceFieldDeclaratorList_return();
        retval.start = input.LT(1);
        int interfaceFieldDeclaratorList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA141=null;
        JamlAttrHashParser.interfaceFieldDeclarator_return interfaceFieldDeclarator140 = null;

        JamlAttrHashParser.interfaceFieldDeclarator_return interfaceFieldDeclarator142 = null;


        CommonTree COMMA141_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_interfaceFieldDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule interfaceFieldDeclarator");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }
            // ../etc/JamlAttrHash.g:477:5: ( interfaceFieldDeclarator ( COMMA interfaceFieldDeclarator )* -> ^( VAR_DECLARATOR_LIST ( interfaceFieldDeclarator )+ ) )
            // ../etc/JamlAttrHash.g:477:9: interfaceFieldDeclarator ( COMMA interfaceFieldDeclarator )*
            {
            pushFollow(FOLLOW_interfaceFieldDeclarator_in_interfaceFieldDeclaratorList6640);
            interfaceFieldDeclarator140=interfaceFieldDeclarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_interfaceFieldDeclarator.add(interfaceFieldDeclarator140.getTree());
            // ../etc/JamlAttrHash.g:477:34: ( COMMA interfaceFieldDeclarator )*
            loop50:
            do {
                int alt50=2;
                int LA50_0 = input.LA(1);

                if ( (LA50_0==COMMA) ) {
                    alt50=1;
                }


                switch (alt50) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:477:35: COMMA interfaceFieldDeclarator
            	    {
            	    COMMA141=(Token)match(input,COMMA,FOLLOW_COMMA_in_interfaceFieldDeclaratorList6643); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA141);

            	    pushFollow(FOLLOW_interfaceFieldDeclarator_in_interfaceFieldDeclaratorList6645);
            	    interfaceFieldDeclarator142=interfaceFieldDeclarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_interfaceFieldDeclarator.add(interfaceFieldDeclarator142.getTree());

            	    }
            	    break;

            	default :
            	    break loop50;
                }
            } while (true);



            // AST REWRITE
            // elements: interfaceFieldDeclarator
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 478:9: -> ^( VAR_DECLARATOR_LIST ( interfaceFieldDeclarator )+ )
            {
                // ../etc/JamlAttrHash.g:478:13: ^( VAR_DECLARATOR_LIST ( interfaceFieldDeclarator )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_DECLARATOR_LIST, "VAR_DECLARATOR_LIST"), root_1);

                if ( !(stream_interfaceFieldDeclarator.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_interfaceFieldDeclarator.hasNext() ) {
                    adaptor.addChild(root_1, stream_interfaceFieldDeclarator.nextTree());

                }
                stream_interfaceFieldDeclarator.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("interfaceFieldDeclaratorList", 34);
            if ( state.backtracking>0 ) { memoize(input, 34, interfaceFieldDeclaratorList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceFieldDeclaratorList"

    public static class interfaceFieldDeclarator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceFieldDeclarator"
    // ../etc/JamlAttrHash.g:481:1: interfaceFieldDeclarator : variableDeclaratorId ASSIGN variableInitializer -> ^( VAR_DECLARATOR variableDeclaratorId variableInitializer ) ;
    public final JamlAttrHashParser.interfaceFieldDeclarator_return interfaceFieldDeclarator() throws RecognitionException {
    traceIn("interfaceFieldDeclarator", 35);
        JamlAttrHashParser.interfaceFieldDeclarator_return retval = new JamlAttrHashParser.interfaceFieldDeclarator_return();
        retval.start = input.LT(1);
        int interfaceFieldDeclarator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ASSIGN144=null;
        JamlAttrHashParser.variableDeclaratorId_return variableDeclaratorId143 = null;

        JamlAttrHashParser.variableInitializer_return variableInitializer145 = null;


        CommonTree ASSIGN144_tree=null;
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_variableDeclaratorId=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorId");
        RewriteRuleSubtreeStream stream_variableInitializer=new RewriteRuleSubtreeStream(adaptor,"rule variableInitializer");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }
            // ../etc/JamlAttrHash.g:482:5: ( variableDeclaratorId ASSIGN variableInitializer -> ^( VAR_DECLARATOR variableDeclaratorId variableInitializer ) )
            // ../etc/JamlAttrHash.g:482:9: variableDeclaratorId ASSIGN variableInitializer
            {
            pushFollow(FOLLOW_variableDeclaratorId_in_interfaceFieldDeclarator6684);
            variableDeclaratorId143=variableDeclaratorId();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableDeclaratorId.add(variableDeclaratorId143.getTree());
            ASSIGN144=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_interfaceFieldDeclarator6686); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN144);

            pushFollow(FOLLOW_variableInitializer_in_interfaceFieldDeclarator6688);
            variableInitializer145=variableInitializer();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableInitializer.add(variableInitializer145.getTree());


            // AST REWRITE
            // elements: variableInitializer, variableDeclaratorId
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 483:9: -> ^( VAR_DECLARATOR variableDeclaratorId variableInitializer )
            {
                // ../etc/JamlAttrHash.g:483:13: ^( VAR_DECLARATOR variableDeclaratorId variableInitializer )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_DECLARATOR, "VAR_DECLARATOR"), root_1);

                adaptor.addChild(root_1, stream_variableDeclaratorId.nextTree());
                adaptor.addChild(root_1, stream_variableInitializer.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("interfaceFieldDeclarator", 35);
            if ( state.backtracking>0 ) { memoize(input, 35, interfaceFieldDeclarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceFieldDeclarator"

    public static class variableDeclaratorId_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclaratorId"
    // ../etc/JamlAttrHash.g:486:1: variableDeclaratorId : IDENT ( arrayDeclaratorList )? ;
    public final JamlAttrHashParser.variableDeclaratorId_return variableDeclaratorId() throws RecognitionException {
    traceIn("variableDeclaratorId", 36);
        JamlAttrHashParser.variableDeclaratorId_return retval = new JamlAttrHashParser.variableDeclaratorId_return();
        retval.start = input.LT(1);
        int variableDeclaratorId_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT146=null;
        JamlAttrHashParser.arrayDeclaratorList_return arrayDeclaratorList147 = null;


        CommonTree IDENT146_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }
            // ../etc/JamlAttrHash.g:487:5: ( IDENT ( arrayDeclaratorList )? )
            // ../etc/JamlAttrHash.g:487:9: IDENT ( arrayDeclaratorList )?
            {
            root_0 = (CommonTree)adaptor.nil();

            IDENT146=(Token)match(input,IDENT,FOLLOW_IDENT_in_variableDeclaratorId6730); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT146_tree = (CommonTree)adaptor.create(IDENT146);
            root_0 = (CommonTree)adaptor.becomeRoot(IDENT146_tree, root_0);
            }
            // ../etc/JamlAttrHash.g:487:16: ( arrayDeclaratorList )?
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==LBRACK) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: arrayDeclaratorList
                    {
                    pushFollow(FOLLOW_arrayDeclaratorList_in_variableDeclaratorId6733);
                    arrayDeclaratorList147=arrayDeclaratorList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayDeclaratorList147.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("variableDeclaratorId", 36);
            if ( state.backtracking>0 ) { memoize(input, 36, variableDeclaratorId_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableDeclaratorId"

    public static class variableInitializer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableInitializer"
    // ../etc/JamlAttrHash.g:490:1: variableInitializer : ( arrayInitializer | expression );
    public final JamlAttrHashParser.variableInitializer_return variableInitializer() throws RecognitionException {
    traceIn("variableInitializer", 37);
        JamlAttrHashParser.variableInitializer_return retval = new JamlAttrHashParser.variableInitializer_return();
        retval.start = input.LT(1);
        int variableInitializer_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.arrayInitializer_return arrayInitializer148 = null;

        JamlAttrHashParser.expression_return expression149 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }
            // ../etc/JamlAttrHash.g:491:5: ( arrayInitializer | expression )
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==LCURLY) ) {
                alt52=1;
            }
            else if ( (LA52_0==DEC||LA52_0==INC||LA52_0==LESS_THAN||LA52_0==LOGICAL_NOT||(LA52_0>=LPAREN && LA52_0<=MINUS)||LA52_0==NOT||LA52_0==PLUS||LA52_0==BOOLEAN||LA52_0==BYTE||LA52_0==CHAR||LA52_0==DOUBLE||LA52_0==FALSE||LA52_0==FLOAT||(LA52_0>=INT && LA52_0<=LONG)||(LA52_0>=NEW && LA52_0<=NULL)||LA52_0==SHORT||LA52_0==SUPER||LA52_0==THIS||LA52_0==TRUE||LA52_0==VOID||(LA52_0>=IDENT && LA52_0<=STRING_LITERAL)) ) {
                alt52=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 52, 0, input);

                throw nvae;
            }
            switch (alt52) {
                case 1 :
                    // ../etc/JamlAttrHash.g:491:9: arrayInitializer
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_arrayInitializer_in_variableInitializer6753);
                    arrayInitializer148=arrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayInitializer148.getTree());

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:492:9: expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expression_in_variableInitializer6763);
                    expression149=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression149.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("variableInitializer", 37);
            if ( state.backtracking>0 ) { memoize(input, 37, variableInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableInitializer"

    public static class arrayDeclarator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayDeclarator"
    // ../etc/JamlAttrHash.g:495:1: arrayDeclarator : LBRACK RBRACK -> ^( ARRAY_DECLARATOR ) ;
    public final JamlAttrHashParser.arrayDeclarator_return arrayDeclarator() throws RecognitionException {
    traceIn("arrayDeclarator", 38);
        JamlAttrHashParser.arrayDeclarator_return retval = new JamlAttrHashParser.arrayDeclarator_return();
        retval.start = input.LT(1);
        int arrayDeclarator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LBRACK150=null;
        Token RBRACK151=null;

        CommonTree LBRACK150_tree=null;
        CommonTree RBRACK151_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }
            // ../etc/JamlAttrHash.g:496:5: ( LBRACK RBRACK -> ^( ARRAY_DECLARATOR ) )
            // ../etc/JamlAttrHash.g:496:9: LBRACK RBRACK
            {
            LBRACK150=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_arrayDeclarator6782); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK150);

            RBRACK151=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_arrayDeclarator6784); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK151);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 497:9: -> ^( ARRAY_DECLARATOR )
            {
                // ../etc/JamlAttrHash.g:497:13: ^( ARRAY_DECLARATOR )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_DECLARATOR, "ARRAY_DECLARATOR"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("arrayDeclarator", 38);
            if ( state.backtracking>0 ) { memoize(input, 38, arrayDeclarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arrayDeclarator"

    public static class arrayDeclaratorList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayDeclaratorList"
    // ../etc/JamlAttrHash.g:500:1: arrayDeclaratorList : ( arrayDeclarator )+ -> ^( ARRAY_DECLARATOR_LIST ( arrayDeclarator )+ ) ;
    public final JamlAttrHashParser.arrayDeclaratorList_return arrayDeclaratorList() throws RecognitionException {
    traceIn("arrayDeclaratorList", 39);
        JamlAttrHashParser.arrayDeclaratorList_return retval = new JamlAttrHashParser.arrayDeclaratorList_return();
        retval.start = input.LT(1);
        int arrayDeclaratorList_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.arrayDeclarator_return arrayDeclarator152 = null;


        RewriteRuleSubtreeStream stream_arrayDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclarator");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }
            // ../etc/JamlAttrHash.g:501:5: ( ( arrayDeclarator )+ -> ^( ARRAY_DECLARATOR_LIST ( arrayDeclarator )+ ) )
            // ../etc/JamlAttrHash.g:501:9: ( arrayDeclarator )+
            {
            // ../etc/JamlAttrHash.g:501:9: ( arrayDeclarator )+
            int cnt53=0;
            loop53:
            do {
                int alt53=2;
                int LA53_0 = input.LA(1);

                if ( (LA53_0==LBRACK) ) {
                    int LA53_2 = input.LA(2);

                    if ( (synpred70_JamlAttrHash()) ) {
                        alt53=1;
                    }


                }


                switch (alt53) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:0:0: arrayDeclarator
            	    {
            	    pushFollow(FOLLOW_arrayDeclarator_in_arrayDeclaratorList6818);
            	    arrayDeclarator152=arrayDeclarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_arrayDeclarator.add(arrayDeclarator152.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt53 >= 1 ) break loop53;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(53, input);
                        throw eee;
                }
                cnt53++;
            } while (true);



            // AST REWRITE
            // elements: arrayDeclarator
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 502:9: -> ^( ARRAY_DECLARATOR_LIST ( arrayDeclarator )+ )
            {
                // ../etc/JamlAttrHash.g:502:13: ^( ARRAY_DECLARATOR_LIST ( arrayDeclarator )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_DECLARATOR_LIST, "ARRAY_DECLARATOR_LIST"), root_1);

                if ( !(stream_arrayDeclarator.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_arrayDeclarator.hasNext() ) {
                    adaptor.addChild(root_1, stream_arrayDeclarator.nextTree());

                }
                stream_arrayDeclarator.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("arrayDeclaratorList", 39);
            if ( state.backtracking>0 ) { memoize(input, 39, arrayDeclaratorList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arrayDeclaratorList"

    public static class arrayInitializer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayInitializer"
    // ../etc/JamlAttrHash.g:505:1: arrayInitializer : LCURLY ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )? RCURLY -> ^( ARRAY_INITIALIZER[$LCURLY, \"ARRAY_INITIALIZER\"] ( variableInitializer )* ) ;
    public final JamlAttrHashParser.arrayInitializer_return arrayInitializer() throws RecognitionException {
    traceIn("arrayInitializer", 40);
        JamlAttrHashParser.arrayInitializer_return retval = new JamlAttrHashParser.arrayInitializer_return();
        retval.start = input.LT(1);
        int arrayInitializer_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LCURLY153=null;
        Token COMMA155=null;
        Token COMMA157=null;
        Token RCURLY158=null;
        JamlAttrHashParser.variableInitializer_return variableInitializer154 = null;

        JamlAttrHashParser.variableInitializer_return variableInitializer156 = null;


        CommonTree LCURLY153_tree=null;
        CommonTree COMMA155_tree=null;
        CommonTree COMMA157_tree=null;
        CommonTree RCURLY158_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_variableInitializer=new RewriteRuleSubtreeStream(adaptor,"rule variableInitializer");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }
            // ../etc/JamlAttrHash.g:506:5: ( LCURLY ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )? RCURLY -> ^( ARRAY_INITIALIZER[$LCURLY, \"ARRAY_INITIALIZER\"] ( variableInitializer )* ) )
            // ../etc/JamlAttrHash.g:506:9: LCURLY ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )? RCURLY
            {
            LCURLY153=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_arrayInitializer6863); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY153);

            // ../etc/JamlAttrHash.g:506:16: ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )?
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==DEC||LA56_0==INC||LA56_0==LCURLY||LA56_0==LESS_THAN||LA56_0==LOGICAL_NOT||(LA56_0>=LPAREN && LA56_0<=MINUS)||LA56_0==NOT||LA56_0==PLUS||LA56_0==BOOLEAN||LA56_0==BYTE||LA56_0==CHAR||LA56_0==DOUBLE||LA56_0==FALSE||LA56_0==FLOAT||(LA56_0>=INT && LA56_0<=LONG)||(LA56_0>=NEW && LA56_0<=NULL)||LA56_0==SHORT||LA56_0==SUPER||LA56_0==THIS||LA56_0==TRUE||LA56_0==VOID||(LA56_0>=IDENT && LA56_0<=STRING_LITERAL)) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    // ../etc/JamlAttrHash.g:506:17: variableInitializer ( COMMA variableInitializer )* ( COMMA )?
                    {
                    pushFollow(FOLLOW_variableInitializer_in_arrayInitializer6866);
                    variableInitializer154=variableInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variableInitializer.add(variableInitializer154.getTree());
                    // ../etc/JamlAttrHash.g:506:37: ( COMMA variableInitializer )*
                    loop54:
                    do {
                        int alt54=2;
                        int LA54_0 = input.LA(1);

                        if ( (LA54_0==COMMA) ) {
                            int LA54_1 = input.LA(2);

                            if ( (LA54_1==DEC||LA54_1==INC||LA54_1==LCURLY||LA54_1==LESS_THAN||LA54_1==LOGICAL_NOT||(LA54_1>=LPAREN && LA54_1<=MINUS)||LA54_1==NOT||LA54_1==PLUS||LA54_1==BOOLEAN||LA54_1==BYTE||LA54_1==CHAR||LA54_1==DOUBLE||LA54_1==FALSE||LA54_1==FLOAT||(LA54_1>=INT && LA54_1<=LONG)||(LA54_1>=NEW && LA54_1<=NULL)||LA54_1==SHORT||LA54_1==SUPER||LA54_1==THIS||LA54_1==TRUE||LA54_1==VOID||(LA54_1>=IDENT && LA54_1<=STRING_LITERAL)) ) {
                                alt54=1;
                            }


                        }


                        switch (alt54) {
                    	case 1 :
                    	    // ../etc/JamlAttrHash.g:506:38: COMMA variableInitializer
                    	    {
                    	    COMMA155=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer6869); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA155);

                    	    pushFollow(FOLLOW_variableInitializer_in_arrayInitializer6871);
                    	    variableInitializer156=variableInitializer();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_variableInitializer.add(variableInitializer156.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop54;
                        }
                    } while (true);

                    // ../etc/JamlAttrHash.g:506:66: ( COMMA )?
                    int alt55=2;
                    int LA55_0 = input.LA(1);

                    if ( (LA55_0==COMMA) ) {
                        alt55=1;
                    }
                    switch (alt55) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:0:0: COMMA
                            {
                            COMMA157=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer6875); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA157);


                            }
                            break;

                    }


                    }
                    break;

            }

            RCURLY158=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_arrayInitializer6880); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY158);



            // AST REWRITE
            // elements: variableInitializer
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 507:9: -> ^( ARRAY_INITIALIZER[$LCURLY, \"ARRAY_INITIALIZER\"] ( variableInitializer )* )
            {
                // ../etc/JamlAttrHash.g:507:13: ^( ARRAY_INITIALIZER[$LCURLY, \"ARRAY_INITIALIZER\"] ( variableInitializer )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_INITIALIZER, LCURLY153, "ARRAY_INITIALIZER"), root_1);

                // ../etc/JamlAttrHash.g:507:63: ( variableInitializer )*
                while ( stream_variableInitializer.hasNext() ) {
                    adaptor.addChild(root_1, stream_variableInitializer.nextTree());

                }
                stream_variableInitializer.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("arrayInitializer", 40);
            if ( state.backtracking>0 ) { memoize(input, 40, arrayInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arrayInitializer"

    public static class throwsClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "throwsClause"
    // ../etc/JamlAttrHash.g:510:1: throwsClause : THROWS qualifiedIdentList -> ^( THROWS_CLAUSE[$THROWS, \"THROWS_CLAUSE\"] qualifiedIdentList ) ;
    public final JamlAttrHashParser.throwsClause_return throwsClause() throws RecognitionException {
    traceIn("throwsClause", 41);
        JamlAttrHashParser.throwsClause_return retval = new JamlAttrHashParser.throwsClause_return();
        retval.start = input.LT(1);
        int throwsClause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token THROWS159=null;
        JamlAttrHashParser.qualifiedIdentList_return qualifiedIdentList160 = null;


        CommonTree THROWS159_tree=null;
        RewriteRuleTokenStream stream_THROWS=new RewriteRuleTokenStream(adaptor,"token THROWS");
        RewriteRuleSubtreeStream stream_qualifiedIdentList=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedIdentList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }
            // ../etc/JamlAttrHash.g:511:5: ( THROWS qualifiedIdentList -> ^( THROWS_CLAUSE[$THROWS, \"THROWS_CLAUSE\"] qualifiedIdentList ) )
            // ../etc/JamlAttrHash.g:511:9: THROWS qualifiedIdentList
            {
            THROWS159=(Token)match(input,THROWS,FOLLOW_THROWS_in_throwsClause6918); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_THROWS.add(THROWS159);

            pushFollow(FOLLOW_qualifiedIdentList_in_throwsClause6920);
            qualifiedIdentList160=qualifiedIdentList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifiedIdentList.add(qualifiedIdentList160.getTree());


            // AST REWRITE
            // elements: qualifiedIdentList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 512:9: -> ^( THROWS_CLAUSE[$THROWS, \"THROWS_CLAUSE\"] qualifiedIdentList )
            {
                // ../etc/JamlAttrHash.g:512:13: ^( THROWS_CLAUSE[$THROWS, \"THROWS_CLAUSE\"] qualifiedIdentList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(THROWS_CLAUSE, THROWS159, "THROWS_CLAUSE"), root_1);

                adaptor.addChild(root_1, stream_qualifiedIdentList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("throwsClause", 41);
            if ( state.backtracking>0 ) { memoize(input, 41, throwsClause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "throwsClause"

    public static class modifierList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "modifierList"
    // ../etc/JamlAttrHash.g:515:1: modifierList : ( modifier )* -> ^( MODIFIER_LIST ( modifier )* ) ;
    public final JamlAttrHashParser.modifierList_return modifierList() throws RecognitionException {
    traceIn("modifierList", 42);
        JamlAttrHashParser.modifierList_return retval = new JamlAttrHashParser.modifierList_return();
        retval.start = input.LT(1);
        int modifierList_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.modifier_return modifier161 = null;


        RewriteRuleSubtreeStream stream_modifier=new RewriteRuleSubtreeStream(adaptor,"rule modifier");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }
            // ../etc/JamlAttrHash.g:516:5: ( ( modifier )* -> ^( MODIFIER_LIST ( modifier )* ) )
            // ../etc/JamlAttrHash.g:516:9: ( modifier )*
            {
            // ../etc/JamlAttrHash.g:516:9: ( modifier )*
            loop57:
            do {
                int alt57=2;
                int LA57_0 = input.LA(1);

                if ( (LA57_0==AT) ) {
                    int LA57_2 = input.LA(2);

                    if ( (LA57_2==IDENT) ) {
                        alt57=1;
                    }


                }
                else if ( (LA57_0==ABSTRACT||LA57_0==FINAL||LA57_0==NATIVE||(LA57_0>=PRIVATE && LA57_0<=PUBLIC)||(LA57_0>=STATIC && LA57_0<=STRICTFP)||LA57_0==SYNCHRONIZED||LA57_0==TRANSIENT||LA57_0==VOLATILE) ) {
                    alt57=1;
                }


                switch (alt57) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:0:0: modifier
            	    {
            	    pushFollow(FOLLOW_modifier_in_modifierList6957);
            	    modifier161=modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_modifier.add(modifier161.getTree());

            	    }
            	    break;

            	default :
            	    break loop57;
                }
            } while (true);



            // AST REWRITE
            // elements: modifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 517:9: -> ^( MODIFIER_LIST ( modifier )* )
            {
                // ../etc/JamlAttrHash.g:517:13: ^( MODIFIER_LIST ( modifier )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MODIFIER_LIST, "MODIFIER_LIST"), root_1);

                // ../etc/JamlAttrHash.g:517:29: ( modifier )*
                while ( stream_modifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_modifier.nextTree());

                }
                stream_modifier.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("modifierList", 42);
            if ( state.backtracking>0 ) { memoize(input, 42, modifierList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "modifierList"

    public static class modifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "modifier"
    // ../etc/JamlAttrHash.g:520:1: modifier : ( PUBLIC | PROTECTED | PRIVATE | STATIC | ABSTRACT | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | localModifier );
    public final JamlAttrHashParser.modifier_return modifier() throws RecognitionException {
    traceIn("modifier", 43);
        JamlAttrHashParser.modifier_return retval = new JamlAttrHashParser.modifier_return();
        retval.start = input.LT(1);
        int modifier_StartIndex = input.index();
        CommonTree root_0 = null;

        Token PUBLIC162=null;
        Token PROTECTED163=null;
        Token PRIVATE164=null;
        Token STATIC165=null;
        Token ABSTRACT166=null;
        Token NATIVE167=null;
        Token SYNCHRONIZED168=null;
        Token TRANSIENT169=null;
        Token VOLATILE170=null;
        Token STRICTFP171=null;
        JamlAttrHashParser.localModifier_return localModifier172 = null;


        CommonTree PUBLIC162_tree=null;
        CommonTree PROTECTED163_tree=null;
        CommonTree PRIVATE164_tree=null;
        CommonTree STATIC165_tree=null;
        CommonTree ABSTRACT166_tree=null;
        CommonTree NATIVE167_tree=null;
        CommonTree SYNCHRONIZED168_tree=null;
        CommonTree TRANSIENT169_tree=null;
        CommonTree VOLATILE170_tree=null;
        CommonTree STRICTFP171_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }
            // ../etc/JamlAttrHash.g:521:5: ( PUBLIC | PROTECTED | PRIVATE | STATIC | ABSTRACT | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | localModifier )
            int alt58=11;
            switch ( input.LA(1) ) {
            case PUBLIC:
                {
                alt58=1;
                }
                break;
            case PROTECTED:
                {
                alt58=2;
                }
                break;
            case PRIVATE:
                {
                alt58=3;
                }
                break;
            case STATIC:
                {
                alt58=4;
                }
                break;
            case ABSTRACT:
                {
                alt58=5;
                }
                break;
            case NATIVE:
                {
                alt58=6;
                }
                break;
            case SYNCHRONIZED:
                {
                alt58=7;
                }
                break;
            case TRANSIENT:
                {
                alt58=8;
                }
                break;
            case VOLATILE:
                {
                alt58=9;
                }
                break;
            case STRICTFP:
                {
                alt58=10;
                }
                break;
            case AT:
            case FINAL:
                {
                alt58=11;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 58, 0, input);

                throw nvae;
            }

            switch (alt58) {
                case 1 :
                    // ../etc/JamlAttrHash.g:521:9: PUBLIC
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PUBLIC162=(Token)match(input,PUBLIC,FOLLOW_PUBLIC_in_modifier6998); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PUBLIC162_tree = (CommonTree)adaptor.create(PUBLIC162);
                    adaptor.addChild(root_0, PUBLIC162_tree);
                    }

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:522:9: PROTECTED
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PROTECTED163=(Token)match(input,PROTECTED,FOLLOW_PROTECTED_in_modifier7008); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PROTECTED163_tree = (CommonTree)adaptor.create(PROTECTED163);
                    adaptor.addChild(root_0, PROTECTED163_tree);
                    }

                    }
                    break;
                case 3 :
                    // ../etc/JamlAttrHash.g:523:9: PRIVATE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PRIVATE164=(Token)match(input,PRIVATE,FOLLOW_PRIVATE_in_modifier7018); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIVATE164_tree = (CommonTree)adaptor.create(PRIVATE164);
                    adaptor.addChild(root_0, PRIVATE164_tree);
                    }

                    }
                    break;
                case 4 :
                    // ../etc/JamlAttrHash.g:524:9: STATIC
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STATIC165=(Token)match(input,STATIC,FOLLOW_STATIC_in_modifier7028); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STATIC165_tree = (CommonTree)adaptor.create(STATIC165);
                    adaptor.addChild(root_0, STATIC165_tree);
                    }

                    }
                    break;
                case 5 :
                    // ../etc/JamlAttrHash.g:525:9: ABSTRACT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ABSTRACT166=(Token)match(input,ABSTRACT,FOLLOW_ABSTRACT_in_modifier7038); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ABSTRACT166_tree = (CommonTree)adaptor.create(ABSTRACT166);
                    adaptor.addChild(root_0, ABSTRACT166_tree);
                    }

                    }
                    break;
                case 6 :
                    // ../etc/JamlAttrHash.g:526:9: NATIVE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    NATIVE167=(Token)match(input,NATIVE,FOLLOW_NATIVE_in_modifier7048); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NATIVE167_tree = (CommonTree)adaptor.create(NATIVE167);
                    adaptor.addChild(root_0, NATIVE167_tree);
                    }

                    }
                    break;
                case 7 :
                    // ../etc/JamlAttrHash.g:527:9: SYNCHRONIZED
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SYNCHRONIZED168=(Token)match(input,SYNCHRONIZED,FOLLOW_SYNCHRONIZED_in_modifier7058); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SYNCHRONIZED168_tree = (CommonTree)adaptor.create(SYNCHRONIZED168);
                    adaptor.addChild(root_0, SYNCHRONIZED168_tree);
                    }

                    }
                    break;
                case 8 :
                    // ../etc/JamlAttrHash.g:528:9: TRANSIENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    TRANSIENT169=(Token)match(input,TRANSIENT,FOLLOW_TRANSIENT_in_modifier7068); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TRANSIENT169_tree = (CommonTree)adaptor.create(TRANSIENT169);
                    adaptor.addChild(root_0, TRANSIENT169_tree);
                    }

                    }
                    break;
                case 9 :
                    // ../etc/JamlAttrHash.g:529:9: VOLATILE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    VOLATILE170=(Token)match(input,VOLATILE,FOLLOW_VOLATILE_in_modifier7078); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VOLATILE170_tree = (CommonTree)adaptor.create(VOLATILE170);
                    adaptor.addChild(root_0, VOLATILE170_tree);
                    }

                    }
                    break;
                case 10 :
                    // ../etc/JamlAttrHash.g:530:9: STRICTFP
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STRICTFP171=(Token)match(input,STRICTFP,FOLLOW_STRICTFP_in_modifier7088); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STRICTFP171_tree = (CommonTree)adaptor.create(STRICTFP171);
                    adaptor.addChild(root_0, STRICTFP171_tree);
                    }

                    }
                    break;
                case 11 :
                    // ../etc/JamlAttrHash.g:531:9: localModifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_localModifier_in_modifier7098);
                    localModifier172=localModifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, localModifier172.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("modifier", 43);
            if ( state.backtracking>0 ) { memoize(input, 43, modifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "modifier"

    public static class localModifierList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "localModifierList"
    // ../etc/JamlAttrHash.g:534:1: localModifierList : ( localModifier )* -> ^( LOCAL_MODIFIER_LIST ( localModifier )* ) ;
    public final JamlAttrHashParser.localModifierList_return localModifierList() throws RecognitionException {
    traceIn("localModifierList", 44);
        JamlAttrHashParser.localModifierList_return retval = new JamlAttrHashParser.localModifierList_return();
        retval.start = input.LT(1);
        int localModifierList_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.localModifier_return localModifier173 = null;


        RewriteRuleSubtreeStream stream_localModifier=new RewriteRuleSubtreeStream(adaptor,"rule localModifier");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }
            // ../etc/JamlAttrHash.g:535:5: ( ( localModifier )* -> ^( LOCAL_MODIFIER_LIST ( localModifier )* ) )
            // ../etc/JamlAttrHash.g:535:9: ( localModifier )*
            {
            // ../etc/JamlAttrHash.g:535:9: ( localModifier )*
            loop59:
            do {
                int alt59=2;
                int LA59_0 = input.LA(1);

                if ( (LA59_0==AT||LA59_0==FINAL) ) {
                    alt59=1;
                }


                switch (alt59) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:0:0: localModifier
            	    {
            	    pushFollow(FOLLOW_localModifier_in_localModifierList7117);
            	    localModifier173=localModifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_localModifier.add(localModifier173.getTree());

            	    }
            	    break;

            	default :
            	    break loop59;
                }
            } while (true);



            // AST REWRITE
            // elements: localModifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 536:9: -> ^( LOCAL_MODIFIER_LIST ( localModifier )* )
            {
                // ../etc/JamlAttrHash.g:536:12: ^( LOCAL_MODIFIER_LIST ( localModifier )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LOCAL_MODIFIER_LIST, "LOCAL_MODIFIER_LIST"), root_1);

                // ../etc/JamlAttrHash.g:536:34: ( localModifier )*
                while ( stream_localModifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_localModifier.nextTree());

                }
                stream_localModifier.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("localModifierList", 44);
            if ( state.backtracking>0 ) { memoize(input, 44, localModifierList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "localModifierList"

    public static class localModifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "localModifier"
    // ../etc/JamlAttrHash.g:539:1: localModifier : ( FINAL | annotation );
    public final JamlAttrHashParser.localModifier_return localModifier() throws RecognitionException {
    traceIn("localModifier", 45);
        JamlAttrHashParser.localModifier_return retval = new JamlAttrHashParser.localModifier_return();
        retval.start = input.LT(1);
        int localModifier_StartIndex = input.index();
        CommonTree root_0 = null;

        Token FINAL174=null;
        JamlAttrHashParser.annotation_return annotation175 = null;


        CommonTree FINAL174_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }
            // ../etc/JamlAttrHash.g:540:5: ( FINAL | annotation )
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==FINAL) ) {
                alt60=1;
            }
            else if ( (LA60_0==AT) ) {
                alt60=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 60, 0, input);

                throw nvae;
            }
            switch (alt60) {
                case 1 :
                    // ../etc/JamlAttrHash.g:540:9: FINAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    FINAL174=(Token)match(input,FINAL,FOLLOW_FINAL_in_localModifier7158); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FINAL174_tree = (CommonTree)adaptor.create(FINAL174);
                    adaptor.addChild(root_0, FINAL174_tree);
                    }

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:541:9: annotation
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_annotation_in_localModifier7168);
                    annotation175=annotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotation175.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("localModifier", 45);
            if ( state.backtracking>0 ) { memoize(input, 45, localModifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "localModifier"

    public static class type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type"
    // ../etc/JamlAttrHash.g:544:1: type : ( simpleType | objectType );
    public final JamlAttrHashParser.type_return type() throws RecognitionException {
    traceIn("type", 46);
        JamlAttrHashParser.type_return retval = new JamlAttrHashParser.type_return();
        retval.start = input.LT(1);
        int type_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.simpleType_return simpleType176 = null;

        JamlAttrHashParser.objectType_return objectType177 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }
            // ../etc/JamlAttrHash.g:545:5: ( simpleType | objectType )
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==BOOLEAN||LA61_0==BYTE||LA61_0==CHAR||LA61_0==DOUBLE||LA61_0==FLOAT||(LA61_0>=INT && LA61_0<=LONG)||LA61_0==SHORT) ) {
                alt61=1;
            }
            else if ( (LA61_0==IDENT) ) {
                alt61=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 61, 0, input);

                throw nvae;
            }
            switch (alt61) {
                case 1 :
                    // ../etc/JamlAttrHash.g:545:9: simpleType
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_simpleType_in_type7187);
                    simpleType176=simpleType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleType176.getTree());

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:546:9: objectType
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_objectType_in_type7197);
                    objectType177=objectType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, objectType177.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("type", 46);
            if ( state.backtracking>0 ) { memoize(input, 46, type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type"

    public static class simpleType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "simpleType"
    // ../etc/JamlAttrHash.g:549:1: simpleType : primitiveType ( arrayDeclaratorList )? -> ^( TYPE primitiveType ( arrayDeclaratorList )? ) ;
    public final JamlAttrHashParser.simpleType_return simpleType() throws RecognitionException {
    traceIn("simpleType", 47);
        JamlAttrHashParser.simpleType_return retval = new JamlAttrHashParser.simpleType_return();
        retval.start = input.LT(1);
        int simpleType_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.primitiveType_return primitiveType178 = null;

        JamlAttrHashParser.arrayDeclaratorList_return arrayDeclaratorList179 = null;


        RewriteRuleSubtreeStream stream_arrayDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclaratorList");
        RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }
            // ../etc/JamlAttrHash.g:550:5: ( primitiveType ( arrayDeclaratorList )? -> ^( TYPE primitiveType ( arrayDeclaratorList )? ) )
            // ../etc/JamlAttrHash.g:550:9: primitiveType ( arrayDeclaratorList )?
            {
            pushFollow(FOLLOW_primitiveType_in_simpleType7217);
            primitiveType178=primitiveType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_primitiveType.add(primitiveType178.getTree());
            // ../etc/JamlAttrHash.g:550:23: ( arrayDeclaratorList )?
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==LBRACK) ) {
                int LA62_1 = input.LA(2);

                if ( (LA62_1==RBRACK) ) {
                    int LA62_3 = input.LA(3);

                    if ( (synpred88_JamlAttrHash()) ) {
                        alt62=1;
                    }
                }
            }
            switch (alt62) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: arrayDeclaratorList
                    {
                    pushFollow(FOLLOW_arrayDeclaratorList_in_simpleType7219);
                    arrayDeclaratorList179=arrayDeclaratorList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arrayDeclaratorList.add(arrayDeclaratorList179.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: arrayDeclaratorList, primitiveType
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 551:9: -> ^( TYPE primitiveType ( arrayDeclaratorList )? )
            {
                // ../etc/JamlAttrHash.g:551:13: ^( TYPE primitiveType ( arrayDeclaratorList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE, "TYPE"), root_1);

                adaptor.addChild(root_1, stream_primitiveType.nextTree());
                // ../etc/JamlAttrHash.g:551:34: ( arrayDeclaratorList )?
                if ( stream_arrayDeclaratorList.hasNext() ) {
                    adaptor.addChild(root_1, stream_arrayDeclaratorList.nextTree());

                }
                stream_arrayDeclaratorList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("simpleType", 47);
            if ( state.backtracking>0 ) { memoize(input, 47, simpleType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "simpleType"

    public static class objectType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "objectType"
    // ../etc/JamlAttrHash.g:554:1: objectType : qualifiedTypeIdent ( arrayDeclaratorList )? -> ^( TYPE qualifiedTypeIdent ( arrayDeclaratorList )? ) ;
    public final JamlAttrHashParser.objectType_return objectType() throws RecognitionException {
    traceIn("objectType", 48);
        JamlAttrHashParser.objectType_return retval = new JamlAttrHashParser.objectType_return();
        retval.start = input.LT(1);
        int objectType_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.qualifiedTypeIdent_return qualifiedTypeIdent180 = null;

        JamlAttrHashParser.arrayDeclaratorList_return arrayDeclaratorList181 = null;


        RewriteRuleSubtreeStream stream_arrayDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclaratorList");
        RewriteRuleSubtreeStream stream_qualifiedTypeIdent=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedTypeIdent");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }
            // ../etc/JamlAttrHash.g:555:5: ( qualifiedTypeIdent ( arrayDeclaratorList )? -> ^( TYPE qualifiedTypeIdent ( arrayDeclaratorList )? ) )
            // ../etc/JamlAttrHash.g:555:9: qualifiedTypeIdent ( arrayDeclaratorList )?
            {
            pushFollow(FOLLOW_qualifiedTypeIdent_in_objectType7266);
            qualifiedTypeIdent180=qualifiedTypeIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifiedTypeIdent.add(qualifiedTypeIdent180.getTree());
            // ../etc/JamlAttrHash.g:555:28: ( arrayDeclaratorList )?
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==LBRACK) ) {
                int LA63_1 = input.LA(2);

                if ( (synpred89_JamlAttrHash()) ) {
                    alt63=1;
                }
            }
            switch (alt63) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: arrayDeclaratorList
                    {
                    pushFollow(FOLLOW_arrayDeclaratorList_in_objectType7268);
                    arrayDeclaratorList181=arrayDeclaratorList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arrayDeclaratorList.add(arrayDeclaratorList181.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: arrayDeclaratorList, qualifiedTypeIdent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 556:9: -> ^( TYPE qualifiedTypeIdent ( arrayDeclaratorList )? )
            {
                // ../etc/JamlAttrHash.g:556:13: ^( TYPE qualifiedTypeIdent ( arrayDeclaratorList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE, "TYPE"), root_1);

                adaptor.addChild(root_1, stream_qualifiedTypeIdent.nextTree());
                // ../etc/JamlAttrHash.g:556:39: ( arrayDeclaratorList )?
                if ( stream_arrayDeclaratorList.hasNext() ) {
                    adaptor.addChild(root_1, stream_arrayDeclaratorList.nextTree());

                }
                stream_arrayDeclaratorList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("objectType", 48);
            if ( state.backtracking>0 ) { memoize(input, 48, objectType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "objectType"

    public static class objectTypeSimplified_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "objectTypeSimplified"
    // ../etc/JamlAttrHash.g:559:1: objectTypeSimplified : qualifiedTypeIdentSimplified ( arrayDeclaratorList )? -> ^( TYPE qualifiedTypeIdentSimplified ( arrayDeclaratorList )? ) ;
    public final JamlAttrHashParser.objectTypeSimplified_return objectTypeSimplified() throws RecognitionException {
    traceIn("objectTypeSimplified", 49);
        JamlAttrHashParser.objectTypeSimplified_return retval = new JamlAttrHashParser.objectTypeSimplified_return();
        retval.start = input.LT(1);
        int objectTypeSimplified_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.qualifiedTypeIdentSimplified_return qualifiedTypeIdentSimplified182 = null;

        JamlAttrHashParser.arrayDeclaratorList_return arrayDeclaratorList183 = null;


        RewriteRuleSubtreeStream stream_arrayDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclaratorList");
        RewriteRuleSubtreeStream stream_qualifiedTypeIdentSimplified=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedTypeIdentSimplified");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }
            // ../etc/JamlAttrHash.g:560:5: ( qualifiedTypeIdentSimplified ( arrayDeclaratorList )? -> ^( TYPE qualifiedTypeIdentSimplified ( arrayDeclaratorList )? ) )
            // ../etc/JamlAttrHash.g:560:9: qualifiedTypeIdentSimplified ( arrayDeclaratorList )?
            {
            pushFollow(FOLLOW_qualifiedTypeIdentSimplified_in_objectTypeSimplified7308);
            qualifiedTypeIdentSimplified182=qualifiedTypeIdentSimplified();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifiedTypeIdentSimplified.add(qualifiedTypeIdentSimplified182.getTree());
            // ../etc/JamlAttrHash.g:560:38: ( arrayDeclaratorList )?
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==LBRACK) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: arrayDeclaratorList
                    {
                    pushFollow(FOLLOW_arrayDeclaratorList_in_objectTypeSimplified7310);
                    arrayDeclaratorList183=arrayDeclaratorList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arrayDeclaratorList.add(arrayDeclaratorList183.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: qualifiedTypeIdentSimplified, arrayDeclaratorList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 561:9: -> ^( TYPE qualifiedTypeIdentSimplified ( arrayDeclaratorList )? )
            {
                // ../etc/JamlAttrHash.g:561:13: ^( TYPE qualifiedTypeIdentSimplified ( arrayDeclaratorList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE, "TYPE"), root_1);

                adaptor.addChild(root_1, stream_qualifiedTypeIdentSimplified.nextTree());
                // ../etc/JamlAttrHash.g:561:49: ( arrayDeclaratorList )?
                if ( stream_arrayDeclaratorList.hasNext() ) {
                    adaptor.addChild(root_1, stream_arrayDeclaratorList.nextTree());

                }
                stream_arrayDeclaratorList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("objectTypeSimplified", 49);
            if ( state.backtracking>0 ) { memoize(input, 49, objectTypeSimplified_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "objectTypeSimplified"

    public static class qualifiedTypeIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedTypeIdent"
    // ../etc/JamlAttrHash.g:564:1: qualifiedTypeIdent : typeIdent ( DOT typeIdent )* -> ^( QUALIFIED_TYPE_IDENT ( typeIdent )+ ) ;
    public final JamlAttrHashParser.qualifiedTypeIdent_return qualifiedTypeIdent() throws RecognitionException {
    traceIn("qualifiedTypeIdent", 50);
        JamlAttrHashParser.qualifiedTypeIdent_return retval = new JamlAttrHashParser.qualifiedTypeIdent_return();
        retval.start = input.LT(1);
        int qualifiedTypeIdent_StartIndex = input.index();
        CommonTree root_0 = null;

        Token DOT185=null;
        JamlAttrHashParser.typeIdent_return typeIdent184 = null;

        JamlAttrHashParser.typeIdent_return typeIdent186 = null;


        CommonTree DOT185_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_typeIdent=new RewriteRuleSubtreeStream(adaptor,"rule typeIdent");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }
            // ../etc/JamlAttrHash.g:565:5: ( typeIdent ( DOT typeIdent )* -> ^( QUALIFIED_TYPE_IDENT ( typeIdent )+ ) )
            // ../etc/JamlAttrHash.g:565:9: typeIdent ( DOT typeIdent )*
            {
            pushFollow(FOLLOW_typeIdent_in_qualifiedTypeIdent7350);
            typeIdent184=typeIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeIdent.add(typeIdent184.getTree());
            // ../etc/JamlAttrHash.g:565:19: ( DOT typeIdent )*
            loop65:
            do {
                int alt65=2;
                int LA65_0 = input.LA(1);

                if ( (LA65_0==DOT) ) {
                    int LA65_2 = input.LA(2);

                    if ( (synpred91_JamlAttrHash()) ) {
                        alt65=1;
                    }


                }


                switch (alt65) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:565:20: DOT typeIdent
            	    {
            	    DOT185=(Token)match(input,DOT,FOLLOW_DOT_in_qualifiedTypeIdent7353); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT185);

            	    pushFollow(FOLLOW_typeIdent_in_qualifiedTypeIdent7355);
            	    typeIdent186=typeIdent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_typeIdent.add(typeIdent186.getTree());

            	    }
            	    break;

            	default :
            	    break loop65;
                }
            } while (true);



            // AST REWRITE
            // elements: typeIdent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 566:9: -> ^( QUALIFIED_TYPE_IDENT ( typeIdent )+ )
            {
                // ../etc/JamlAttrHash.g:566:13: ^( QUALIFIED_TYPE_IDENT ( typeIdent )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(QUALIFIED_TYPE_IDENT, "QUALIFIED_TYPE_IDENT"), root_1);

                if ( !(stream_typeIdent.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_typeIdent.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeIdent.nextTree());

                }
                stream_typeIdent.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("qualifiedTypeIdent", 50);
            if ( state.backtracking>0 ) { memoize(input, 50, qualifiedTypeIdent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedTypeIdent"

    public static class qualifiedTypeIdentSimplified_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedTypeIdentSimplified"
    // ../etc/JamlAttrHash.g:569:1: qualifiedTypeIdentSimplified : typeIdentSimplified ( DOT typeIdentSimplified )* -> ^( QUALIFIED_TYPE_IDENT ( typeIdentSimplified )+ ) ;
    public final JamlAttrHashParser.qualifiedTypeIdentSimplified_return qualifiedTypeIdentSimplified() throws RecognitionException {
    traceIn("qualifiedTypeIdentSimplified", 51);
        JamlAttrHashParser.qualifiedTypeIdentSimplified_return retval = new JamlAttrHashParser.qualifiedTypeIdentSimplified_return();
        retval.start = input.LT(1);
        int qualifiedTypeIdentSimplified_StartIndex = input.index();
        CommonTree root_0 = null;

        Token DOT188=null;
        JamlAttrHashParser.typeIdentSimplified_return typeIdentSimplified187 = null;

        JamlAttrHashParser.typeIdentSimplified_return typeIdentSimplified189 = null;


        CommonTree DOT188_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_typeIdentSimplified=new RewriteRuleSubtreeStream(adaptor,"rule typeIdentSimplified");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }
            // ../etc/JamlAttrHash.g:570:5: ( typeIdentSimplified ( DOT typeIdentSimplified )* -> ^( QUALIFIED_TYPE_IDENT ( typeIdentSimplified )+ ) )
            // ../etc/JamlAttrHash.g:570:9: typeIdentSimplified ( DOT typeIdentSimplified )*
            {
            pushFollow(FOLLOW_typeIdentSimplified_in_qualifiedTypeIdentSimplified7395);
            typeIdentSimplified187=typeIdentSimplified();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeIdentSimplified.add(typeIdentSimplified187.getTree());
            // ../etc/JamlAttrHash.g:570:29: ( DOT typeIdentSimplified )*
            loop66:
            do {
                int alt66=2;
                int LA66_0 = input.LA(1);

                if ( (LA66_0==DOT) ) {
                    alt66=1;
                }


                switch (alt66) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:570:30: DOT typeIdentSimplified
            	    {
            	    DOT188=(Token)match(input,DOT,FOLLOW_DOT_in_qualifiedTypeIdentSimplified7398); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT188);

            	    pushFollow(FOLLOW_typeIdentSimplified_in_qualifiedTypeIdentSimplified7400);
            	    typeIdentSimplified189=typeIdentSimplified();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_typeIdentSimplified.add(typeIdentSimplified189.getTree());

            	    }
            	    break;

            	default :
            	    break loop66;
                }
            } while (true);



            // AST REWRITE
            // elements: typeIdentSimplified
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 571:9: -> ^( QUALIFIED_TYPE_IDENT ( typeIdentSimplified )+ )
            {
                // ../etc/JamlAttrHash.g:571:13: ^( QUALIFIED_TYPE_IDENT ( typeIdentSimplified )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(QUALIFIED_TYPE_IDENT, "QUALIFIED_TYPE_IDENT"), root_1);

                if ( !(stream_typeIdentSimplified.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_typeIdentSimplified.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeIdentSimplified.nextTree());

                }
                stream_typeIdentSimplified.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("qualifiedTypeIdentSimplified", 51);
            if ( state.backtracking>0 ) { memoize(input, 51, qualifiedTypeIdentSimplified_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedTypeIdentSimplified"

    public static class typeIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeIdent"
    // ../etc/JamlAttrHash.g:574:1: typeIdent : IDENT ( genericTypeArgumentList )? ;
    public final JamlAttrHashParser.typeIdent_return typeIdent() throws RecognitionException {
    traceIn("typeIdent", 52);
        JamlAttrHashParser.typeIdent_return retval = new JamlAttrHashParser.typeIdent_return();
        retval.start = input.LT(1);
        int typeIdent_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT190=null;
        JamlAttrHashParser.genericTypeArgumentList_return genericTypeArgumentList191 = null;


        CommonTree IDENT190_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }
            // ../etc/JamlAttrHash.g:575:5: ( IDENT ( genericTypeArgumentList )? )
            // ../etc/JamlAttrHash.g:575:9: IDENT ( genericTypeArgumentList )?
            {
            root_0 = (CommonTree)adaptor.nil();

            IDENT190=(Token)match(input,IDENT,FOLLOW_IDENT_in_typeIdent7440); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT190_tree = (CommonTree)adaptor.create(IDENT190);
            root_0 = (CommonTree)adaptor.becomeRoot(IDENT190_tree, root_0);
            }
            // ../etc/JamlAttrHash.g:575:16: ( genericTypeArgumentList )?
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==LESS_THAN) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: genericTypeArgumentList
                    {
                    pushFollow(FOLLOW_genericTypeArgumentList_in_typeIdent7443);
                    genericTypeArgumentList191=genericTypeArgumentList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, genericTypeArgumentList191.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("typeIdent", 52);
            if ( state.backtracking>0 ) { memoize(input, 52, typeIdent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeIdent"

    public static class typeIdentSimplified_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeIdentSimplified"
    // ../etc/JamlAttrHash.g:578:1: typeIdentSimplified : IDENT ( genericTypeArgumentListSimplified )? ;
    public final JamlAttrHashParser.typeIdentSimplified_return typeIdentSimplified() throws RecognitionException {
    traceIn("typeIdentSimplified", 53);
        JamlAttrHashParser.typeIdentSimplified_return retval = new JamlAttrHashParser.typeIdentSimplified_return();
        retval.start = input.LT(1);
        int typeIdentSimplified_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT192=null;
        JamlAttrHashParser.genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified193 = null;


        CommonTree IDENT192_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }
            // ../etc/JamlAttrHash.g:579:5: ( IDENT ( genericTypeArgumentListSimplified )? )
            // ../etc/JamlAttrHash.g:579:9: IDENT ( genericTypeArgumentListSimplified )?
            {
            root_0 = (CommonTree)adaptor.nil();

            IDENT192=(Token)match(input,IDENT,FOLLOW_IDENT_in_typeIdentSimplified7463); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT192_tree = (CommonTree)adaptor.create(IDENT192);
            root_0 = (CommonTree)adaptor.becomeRoot(IDENT192_tree, root_0);
            }
            // ../etc/JamlAttrHash.g:579:16: ( genericTypeArgumentListSimplified )?
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==LESS_THAN) ) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: genericTypeArgumentListSimplified
                    {
                    pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_typeIdentSimplified7466);
                    genericTypeArgumentListSimplified193=genericTypeArgumentListSimplified();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, genericTypeArgumentListSimplified193.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("typeIdentSimplified", 53);
            if ( state.backtracking>0 ) { memoize(input, 53, typeIdentSimplified_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeIdentSimplified"

    public static class primitiveType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primitiveType"
    // ../etc/JamlAttrHash.g:582:1: primitiveType : ( BOOLEAN | CHAR | BYTE | SHORT | INT | LONG | FLOAT | DOUBLE );
    public final JamlAttrHashParser.primitiveType_return primitiveType() throws RecognitionException {
    traceIn("primitiveType", 54);
        JamlAttrHashParser.primitiveType_return retval = new JamlAttrHashParser.primitiveType_return();
        retval.start = input.LT(1);
        int primitiveType_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set194=null;

        CommonTree set194_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }
            // ../etc/JamlAttrHash.g:583:5: ( BOOLEAN | CHAR | BYTE | SHORT | INT | LONG | FLOAT | DOUBLE )
            // ../etc/JamlAttrHash.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set194=(Token)input.LT(1);
            if ( input.LA(1)==BOOLEAN||input.LA(1)==BYTE||input.LA(1)==CHAR||input.LA(1)==DOUBLE||input.LA(1)==FLOAT||(input.LA(1)>=INT && input.LA(1)<=LONG)||input.LA(1)==SHORT ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set194));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("primitiveType", 54);
            if ( state.backtracking>0 ) { memoize(input, 54, primitiveType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "primitiveType"

    public static class genericTypeArgumentList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericTypeArgumentList"
    // ../etc/JamlAttrHash.g:593:1: genericTypeArgumentList : LESS_THAN genericTypeArgument ( COMMA genericTypeArgument )* genericTypeListClosing -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgument )+ ) ;
    public final JamlAttrHashParser.genericTypeArgumentList_return genericTypeArgumentList() throws RecognitionException {
    traceIn("genericTypeArgumentList", 55);
        JamlAttrHashParser.genericTypeArgumentList_return retval = new JamlAttrHashParser.genericTypeArgumentList_return();
        retval.start = input.LT(1);
        int genericTypeArgumentList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LESS_THAN195=null;
        Token COMMA197=null;
        JamlAttrHashParser.genericTypeArgument_return genericTypeArgument196 = null;

        JamlAttrHashParser.genericTypeArgument_return genericTypeArgument198 = null;

        JamlAttrHashParser.genericTypeListClosing_return genericTypeListClosing199 = null;


        CommonTree LESS_THAN195_tree=null;
        CommonTree COMMA197_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LESS_THAN=new RewriteRuleTokenStream(adaptor,"token LESS_THAN");
        RewriteRuleSubtreeStream stream_genericTypeArgument=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgument");
        RewriteRuleSubtreeStream stream_genericTypeListClosing=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeListClosing");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }
            // ../etc/JamlAttrHash.g:594:5: ( LESS_THAN genericTypeArgument ( COMMA genericTypeArgument )* genericTypeListClosing -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgument )+ ) )
            // ../etc/JamlAttrHash.g:594:9: LESS_THAN genericTypeArgument ( COMMA genericTypeArgument )* genericTypeListClosing
            {
            LESS_THAN195=(Token)match(input,LESS_THAN,FOLLOW_LESS_THAN_in_genericTypeArgumentList7575); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LESS_THAN.add(LESS_THAN195);

            pushFollow(FOLLOW_genericTypeArgument_in_genericTypeArgumentList7577);
            genericTypeArgument196=genericTypeArgument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_genericTypeArgument.add(genericTypeArgument196.getTree());
            // ../etc/JamlAttrHash.g:594:39: ( COMMA genericTypeArgument )*
            loop69:
            do {
                int alt69=2;
                int LA69_0 = input.LA(1);

                if ( (LA69_0==COMMA) ) {
                    int LA69_2 = input.LA(2);

                    if ( (synpred102_JamlAttrHash()) ) {
                        alt69=1;
                    }


                }


                switch (alt69) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:594:40: COMMA genericTypeArgument
            	    {
            	    COMMA197=(Token)match(input,COMMA,FOLLOW_COMMA_in_genericTypeArgumentList7580); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA197);

            	    pushFollow(FOLLOW_genericTypeArgument_in_genericTypeArgumentList7582);
            	    genericTypeArgument198=genericTypeArgument();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_genericTypeArgument.add(genericTypeArgument198.getTree());

            	    }
            	    break;

            	default :
            	    break loop69;
                }
            } while (true);

            pushFollow(FOLLOW_genericTypeListClosing_in_genericTypeArgumentList7586);
            genericTypeListClosing199=genericTypeListClosing();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_genericTypeListClosing.add(genericTypeListClosing199.getTree());


            // AST REWRITE
            // elements: genericTypeArgument
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 595:9: -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgument )+ )
            {
                // ../etc/JamlAttrHash.g:595:13: ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgument )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GENERIC_TYPE_ARG_LIST, LESS_THAN195, "GENERIC_TYPE_ARG_LIST"), root_1);

                if ( !(stream_genericTypeArgument.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_genericTypeArgument.hasNext() ) {
                    adaptor.addChild(root_1, stream_genericTypeArgument.nextTree());

                }
                stream_genericTypeArgument.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("genericTypeArgumentList", 55);
            if ( state.backtracking>0 ) { memoize(input, 55, genericTypeArgumentList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "genericTypeArgumentList"

    public static class genericTypeArgument_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericTypeArgument"
    // ../etc/JamlAttrHash.g:598:1: genericTypeArgument : ( type | QUESTION ( genericWildcardBoundType )? -> ^( QUESTION ( genericWildcardBoundType )? ) );
    public final JamlAttrHashParser.genericTypeArgument_return genericTypeArgument() throws RecognitionException {
    traceIn("genericTypeArgument", 56);
        JamlAttrHashParser.genericTypeArgument_return retval = new JamlAttrHashParser.genericTypeArgument_return();
        retval.start = input.LT(1);
        int genericTypeArgument_StartIndex = input.index();
        CommonTree root_0 = null;

        Token QUESTION201=null;
        JamlAttrHashParser.type_return type200 = null;

        JamlAttrHashParser.genericWildcardBoundType_return genericWildcardBoundType202 = null;


        CommonTree QUESTION201_tree=null;
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleSubtreeStream stream_genericWildcardBoundType=new RewriteRuleSubtreeStream(adaptor,"rule genericWildcardBoundType");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }
            // ../etc/JamlAttrHash.g:599:5: ( type | QUESTION ( genericWildcardBoundType )? -> ^( QUESTION ( genericWildcardBoundType )? ) )
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( (LA71_0==BOOLEAN||LA71_0==BYTE||LA71_0==CHAR||LA71_0==DOUBLE||LA71_0==FLOAT||(LA71_0>=INT && LA71_0<=LONG)||LA71_0==SHORT||LA71_0==IDENT) ) {
                alt71=1;
            }
            else if ( (LA71_0==QUESTION) ) {
                alt71=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 71, 0, input);

                throw nvae;
            }
            switch (alt71) {
                case 1 :
                    // ../etc/JamlAttrHash.g:599:9: type
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_type_in_genericTypeArgument7624);
                    type200=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type200.getTree());

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:600:9: QUESTION ( genericWildcardBoundType )?
                    {
                    QUESTION201=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_genericTypeArgument7634); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(QUESTION201);

                    // ../etc/JamlAttrHash.g:600:18: ( genericWildcardBoundType )?
                    int alt70=2;
                    int LA70_0 = input.LA(1);

                    if ( (LA70_0==EXTENDS) ) {
                        int LA70_1 = input.LA(2);

                        if ( (LA70_1==BOOLEAN||LA70_1==BYTE||LA70_1==CHAR||LA70_1==DOUBLE||LA70_1==FLOAT||(LA70_1>=INT && LA70_1<=LONG)||LA70_1==SHORT) ) {
                            int LA70_4 = input.LA(3);

                            if ( (synpred104_JamlAttrHash()) ) {
                                alt70=1;
                            }
                        }
                        else if ( (LA70_1==IDENT) ) {
                            int LA70_5 = input.LA(3);

                            if ( (synpred104_JamlAttrHash()) ) {
                                alt70=1;
                            }
                        }
                    }
                    else if ( (LA70_0==SUPER) ) {
                        int LA70_3 = input.LA(2);

                        if ( (LA70_3==BOOLEAN||LA70_3==BYTE||LA70_3==CHAR||LA70_3==DOUBLE||LA70_3==FLOAT||(LA70_3>=INT && LA70_3<=LONG)||LA70_3==SHORT||LA70_3==IDENT) ) {
                            alt70=1;
                        }
                    }
                    switch (alt70) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:0:0: genericWildcardBoundType
                            {
                            pushFollow(FOLLOW_genericWildcardBoundType_in_genericTypeArgument7636);
                            genericWildcardBoundType202=genericWildcardBoundType();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_genericWildcardBoundType.add(genericWildcardBoundType202.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: genericWildcardBoundType, QUESTION
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 601:9: -> ^( QUESTION ( genericWildcardBoundType )? )
                    {
                        // ../etc/JamlAttrHash.g:601:13: ^( QUESTION ( genericWildcardBoundType )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_QUESTION.nextNode(), root_1);

                        // ../etc/JamlAttrHash.g:601:24: ( genericWildcardBoundType )?
                        if ( stream_genericWildcardBoundType.hasNext() ) {
                            adaptor.addChild(root_1, stream_genericWildcardBoundType.nextTree());

                        }
                        stream_genericWildcardBoundType.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("genericTypeArgument", 56);
            if ( state.backtracking>0 ) { memoize(input, 56, genericTypeArgument_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "genericTypeArgument"

    public static class genericWildcardBoundType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericWildcardBoundType"
    // ../etc/JamlAttrHash.g:604:1: genericWildcardBoundType : ( EXTENDS | SUPER ) type ;
    public final JamlAttrHashParser.genericWildcardBoundType_return genericWildcardBoundType() throws RecognitionException {
    traceIn("genericWildcardBoundType", 57);
        JamlAttrHashParser.genericWildcardBoundType_return retval = new JamlAttrHashParser.genericWildcardBoundType_return();
        retval.start = input.LT(1);
        int genericWildcardBoundType_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set203=null;
        JamlAttrHashParser.type_return type204 = null;


        CommonTree set203_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }
            // ../etc/JamlAttrHash.g:605:5: ( ( EXTENDS | SUPER ) type )
            // ../etc/JamlAttrHash.g:605:9: ( EXTENDS | SUPER ) type
            {
            root_0 = (CommonTree)adaptor.nil();

            set203=(Token)input.LT(1);
            set203=(Token)input.LT(1);
            if ( input.LA(1)==EXTENDS||input.LA(1)==SUPER ) {
                input.consume();
                if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(set203), root_0);
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            pushFollow(FOLLOW_type_in_genericWildcardBoundType7687);
            type204=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type204.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("genericWildcardBoundType", 57);
            if ( state.backtracking>0 ) { memoize(input, 57, genericWildcardBoundType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "genericWildcardBoundType"

    public static class genericTypeArgumentListSimplified_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericTypeArgumentListSimplified"
    // ../etc/JamlAttrHash.g:608:1: genericTypeArgumentListSimplified : LESS_THAN genericTypeArgumentSimplified ( COMMA genericTypeArgumentSimplified )* genericTypeListClosing -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgumentSimplified )+ ) ;
    public final JamlAttrHashParser.genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified() throws RecognitionException {
    traceIn("genericTypeArgumentListSimplified", 58);
        JamlAttrHashParser.genericTypeArgumentListSimplified_return retval = new JamlAttrHashParser.genericTypeArgumentListSimplified_return();
        retval.start = input.LT(1);
        int genericTypeArgumentListSimplified_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LESS_THAN205=null;
        Token COMMA207=null;
        JamlAttrHashParser.genericTypeArgumentSimplified_return genericTypeArgumentSimplified206 = null;

        JamlAttrHashParser.genericTypeArgumentSimplified_return genericTypeArgumentSimplified208 = null;

        JamlAttrHashParser.genericTypeListClosing_return genericTypeListClosing209 = null;


        CommonTree LESS_THAN205_tree=null;
        CommonTree COMMA207_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LESS_THAN=new RewriteRuleTokenStream(adaptor,"token LESS_THAN");
        RewriteRuleSubtreeStream stream_genericTypeArgumentSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentSimplified");
        RewriteRuleSubtreeStream stream_genericTypeListClosing=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeListClosing");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }
            // ../etc/JamlAttrHash.g:609:5: ( LESS_THAN genericTypeArgumentSimplified ( COMMA genericTypeArgumentSimplified )* genericTypeListClosing -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgumentSimplified )+ ) )
            // ../etc/JamlAttrHash.g:609:9: LESS_THAN genericTypeArgumentSimplified ( COMMA genericTypeArgumentSimplified )* genericTypeListClosing
            {
            LESS_THAN205=(Token)match(input,LESS_THAN,FOLLOW_LESS_THAN_in_genericTypeArgumentListSimplified7706); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LESS_THAN.add(LESS_THAN205);

            pushFollow(FOLLOW_genericTypeArgumentSimplified_in_genericTypeArgumentListSimplified7708);
            genericTypeArgumentSimplified206=genericTypeArgumentSimplified();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_genericTypeArgumentSimplified.add(genericTypeArgumentSimplified206.getTree());
            // ../etc/JamlAttrHash.g:609:49: ( COMMA genericTypeArgumentSimplified )*
            loop72:
            do {
                int alt72=2;
                int LA72_0 = input.LA(1);

                if ( (LA72_0==COMMA) ) {
                    alt72=1;
                }


                switch (alt72) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:609:50: COMMA genericTypeArgumentSimplified
            	    {
            	    COMMA207=(Token)match(input,COMMA,FOLLOW_COMMA_in_genericTypeArgumentListSimplified7711); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA207);

            	    pushFollow(FOLLOW_genericTypeArgumentSimplified_in_genericTypeArgumentListSimplified7713);
            	    genericTypeArgumentSimplified208=genericTypeArgumentSimplified();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_genericTypeArgumentSimplified.add(genericTypeArgumentSimplified208.getTree());

            	    }
            	    break;

            	default :
            	    break loop72;
                }
            } while (true);

            pushFollow(FOLLOW_genericTypeListClosing_in_genericTypeArgumentListSimplified7717);
            genericTypeListClosing209=genericTypeListClosing();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_genericTypeListClosing.add(genericTypeListClosing209.getTree());


            // AST REWRITE
            // elements: genericTypeArgumentSimplified
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 610:9: -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgumentSimplified )+ )
            {
                // ../etc/JamlAttrHash.g:610:13: ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgumentSimplified )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GENERIC_TYPE_ARG_LIST, LESS_THAN205, "GENERIC_TYPE_ARG_LIST"), root_1);

                if ( !(stream_genericTypeArgumentSimplified.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_genericTypeArgumentSimplified.hasNext() ) {
                    adaptor.addChild(root_1, stream_genericTypeArgumentSimplified.nextTree());

                }
                stream_genericTypeArgumentSimplified.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("genericTypeArgumentListSimplified", 58);
            if ( state.backtracking>0 ) { memoize(input, 58, genericTypeArgumentListSimplified_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "genericTypeArgumentListSimplified"

    public static class genericTypeArgumentSimplified_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericTypeArgumentSimplified"
    // ../etc/JamlAttrHash.g:613:1: genericTypeArgumentSimplified : ( type | QUESTION );
    public final JamlAttrHashParser.genericTypeArgumentSimplified_return genericTypeArgumentSimplified() throws RecognitionException {
    traceIn("genericTypeArgumentSimplified", 59);
        JamlAttrHashParser.genericTypeArgumentSimplified_return retval = new JamlAttrHashParser.genericTypeArgumentSimplified_return();
        retval.start = input.LT(1);
        int genericTypeArgumentSimplified_StartIndex = input.index();
        CommonTree root_0 = null;

        Token QUESTION211=null;
        JamlAttrHashParser.type_return type210 = null;


        CommonTree QUESTION211_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }
            // ../etc/JamlAttrHash.g:614:5: ( type | QUESTION )
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==BOOLEAN||LA73_0==BYTE||LA73_0==CHAR||LA73_0==DOUBLE||LA73_0==FLOAT||(LA73_0>=INT && LA73_0<=LONG)||LA73_0==SHORT||LA73_0==IDENT) ) {
                alt73=1;
            }
            else if ( (LA73_0==QUESTION) ) {
                alt73=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 73, 0, input);

                throw nvae;
            }
            switch (alt73) {
                case 1 :
                    // ../etc/JamlAttrHash.g:614:9: type
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_type_in_genericTypeArgumentSimplified7759);
                    type210=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type210.getTree());

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:615:9: QUESTION
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    QUESTION211=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_genericTypeArgumentSimplified7769); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUESTION211_tree = (CommonTree)adaptor.create(QUESTION211);
                    adaptor.addChild(root_0, QUESTION211_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("genericTypeArgumentSimplified", 59);
            if ( state.backtracking>0 ) { memoize(input, 59, genericTypeArgumentSimplified_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "genericTypeArgumentSimplified"

    public static class qualifiedIdentList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedIdentList"
    // ../etc/JamlAttrHash.g:618:1: qualifiedIdentList : qualifiedIdentifier ( COMMA qualifiedIdentifier )* ;
    public final JamlAttrHashParser.qualifiedIdentList_return qualifiedIdentList() throws RecognitionException {
    traceIn("qualifiedIdentList", 60);
        JamlAttrHashParser.qualifiedIdentList_return retval = new JamlAttrHashParser.qualifiedIdentList_return();
        retval.start = input.LT(1);
        int qualifiedIdentList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA213=null;
        JamlAttrHashParser.qualifiedIdentifier_return qualifiedIdentifier212 = null;

        JamlAttrHashParser.qualifiedIdentifier_return qualifiedIdentifier214 = null;


        CommonTree COMMA213_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }
            // ../etc/JamlAttrHash.g:619:5: ( qualifiedIdentifier ( COMMA qualifiedIdentifier )* )
            // ../etc/JamlAttrHash.g:619:9: qualifiedIdentifier ( COMMA qualifiedIdentifier )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_qualifiedIdentifier_in_qualifiedIdentList7792);
            qualifiedIdentifier212=qualifiedIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedIdentifier212.getTree());
            // ../etc/JamlAttrHash.g:619:29: ( COMMA qualifiedIdentifier )*
            loop74:
            do {
                int alt74=2;
                int LA74_0 = input.LA(1);

                if ( (LA74_0==COMMA) ) {
                    alt74=1;
                }


                switch (alt74) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:619:30: COMMA qualifiedIdentifier
            	    {
            	    COMMA213=(Token)match(input,COMMA,FOLLOW_COMMA_in_qualifiedIdentList7795); if (state.failed) return retval;
            	    pushFollow(FOLLOW_qualifiedIdentifier_in_qualifiedIdentList7798);
            	    qualifiedIdentifier214=qualifiedIdentifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedIdentifier214.getTree());

            	    }
            	    break;

            	default :
            	    break loop74;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("qualifiedIdentList", 60);
            if ( state.backtracking>0 ) { memoize(input, 60, qualifiedIdentList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedIdentList"

    public static class formalParameterList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formalParameterList"
    // ../etc/JamlAttrHash.g:622:1: formalParameterList : LPAREN ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? ) | formalParameterVarArgDecl -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl ) | -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ) ) RPAREN ;
    public final JamlAttrHashParser.formalParameterList_return formalParameterList() throws RecognitionException {
    traceIn("formalParameterList", 61);
        JamlAttrHashParser.formalParameterList_return retval = new JamlAttrHashParser.formalParameterList_return();
        retval.start = input.LT(1);
        int formalParameterList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LPAREN215=null;
        Token COMMA217=null;
        Token COMMA219=null;
        Token RPAREN222=null;
        JamlAttrHashParser.formalParameterStandardDecl_return formalParameterStandardDecl216 = null;

        JamlAttrHashParser.formalParameterStandardDecl_return formalParameterStandardDecl218 = null;

        JamlAttrHashParser.formalParameterVarArgDecl_return formalParameterVarArgDecl220 = null;

        JamlAttrHashParser.formalParameterVarArgDecl_return formalParameterVarArgDecl221 = null;


        CommonTree LPAREN215_tree=null;
        CommonTree COMMA217_tree=null;
        CommonTree COMMA219_tree=null;
        CommonTree RPAREN222_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_formalParameterVarArgDecl=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterVarArgDecl");
        RewriteRuleSubtreeStream stream_formalParameterStandardDecl=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterStandardDecl");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }
            // ../etc/JamlAttrHash.g:623:5: ( LPAREN ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? ) | formalParameterVarArgDecl -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl ) | -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ) ) RPAREN )
            // ../etc/JamlAttrHash.g:623:9: LPAREN ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? ) | formalParameterVarArgDecl -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl ) | -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ) ) RPAREN
            {
            LPAREN215=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_formalParameterList7823); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN215);

            // ../etc/JamlAttrHash.g:624:9: ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? ) | formalParameterVarArgDecl -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl ) | -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ) )
            int alt77=3;
            switch ( input.LA(1) ) {
            case FINAL:
                {
                int LA77_1 = input.LA(2);

                if ( (synpred111_JamlAttrHash()) ) {
                    alt77=1;
                }
                else if ( (synpred112_JamlAttrHash()) ) {
                    alt77=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 77, 1, input);

                    throw nvae;
                }
                }
                break;
            case AT:
                {
                int LA77_2 = input.LA(2);

                if ( (synpred111_JamlAttrHash()) ) {
                    alt77=1;
                }
                else if ( (synpred112_JamlAttrHash()) ) {
                    alt77=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 77, 2, input);

                    throw nvae;
                }
                }
                break;
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
                {
                int LA77_3 = input.LA(2);

                if ( (synpred111_JamlAttrHash()) ) {
                    alt77=1;
                }
                else if ( (synpred112_JamlAttrHash()) ) {
                    alt77=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 77, 3, input);

                    throw nvae;
                }
                }
                break;
            case IDENT:
                {
                int LA77_4 = input.LA(2);

                if ( (synpred111_JamlAttrHash()) ) {
                    alt77=1;
                }
                else if ( (synpred112_JamlAttrHash()) ) {
                    alt77=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 77, 4, input);

                    throw nvae;
                }
                }
                break;
            case RPAREN:
                {
                alt77=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 77, 0, input);

                throw nvae;
            }

            switch (alt77) {
                case 1 :
                    // ../etc/JamlAttrHash.g:625:13: formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )?
                    {
                    pushFollow(FOLLOW_formalParameterStandardDecl_in_formalParameterList7851);
                    formalParameterStandardDecl216=formalParameterStandardDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_formalParameterStandardDecl.add(formalParameterStandardDecl216.getTree());
                    // ../etc/JamlAttrHash.g:625:41: ( COMMA formalParameterStandardDecl )*
                    loop75:
                    do {
                        int alt75=2;
                        int LA75_0 = input.LA(1);

                        if ( (LA75_0==COMMA) ) {
                            int LA75_1 = input.LA(2);

                            if ( (synpred109_JamlAttrHash()) ) {
                                alt75=1;
                            }


                        }


                        switch (alt75) {
                    	case 1 :
                    	    // ../etc/JamlAttrHash.g:625:42: COMMA formalParameterStandardDecl
                    	    {
                    	    COMMA217=(Token)match(input,COMMA,FOLLOW_COMMA_in_formalParameterList7854); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA217);

                    	    pushFollow(FOLLOW_formalParameterStandardDecl_in_formalParameterList7856);
                    	    formalParameterStandardDecl218=formalParameterStandardDecl();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_formalParameterStandardDecl.add(formalParameterStandardDecl218.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop75;
                        }
                    } while (true);

                    // ../etc/JamlAttrHash.g:625:78: ( COMMA formalParameterVarArgDecl )?
                    int alt76=2;
                    int LA76_0 = input.LA(1);

                    if ( (LA76_0==COMMA) ) {
                        alt76=1;
                    }
                    switch (alt76) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:625:79: COMMA formalParameterVarArgDecl
                            {
                            COMMA219=(Token)match(input,COMMA,FOLLOW_COMMA_in_formalParameterList7861); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA219);

                            pushFollow(FOLLOW_formalParameterVarArgDecl_in_formalParameterList7863);
                            formalParameterVarArgDecl220=formalParameterVarArgDecl();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_formalParameterVarArgDecl.add(formalParameterVarArgDecl220.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: formalParameterStandardDecl, formalParameterVarArgDecl
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 626:13: -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? )
                    {
                        // ../etc/JamlAttrHash.g:626:17: ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FORMAL_PARAM_LIST, LPAREN215, "FORMAL_PARAM_LIST"), root_1);

                        if ( !(stream_formalParameterStandardDecl.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_formalParameterStandardDecl.hasNext() ) {
                            adaptor.addChild(root_1, stream_formalParameterStandardDecl.nextTree());

                        }
                        stream_formalParameterStandardDecl.reset();
                        // ../etc/JamlAttrHash.g:626:96: ( formalParameterVarArgDecl )?
                        if ( stream_formalParameterVarArgDecl.hasNext() ) {
                            adaptor.addChild(root_1, stream_formalParameterVarArgDecl.nextTree());

                        }
                        stream_formalParameterVarArgDecl.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:628:13: formalParameterVarArgDecl
                    {
                    pushFollow(FOLLOW_formalParameterVarArgDecl_in_formalParameterList7920);
                    formalParameterVarArgDecl221=formalParameterVarArgDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_formalParameterVarArgDecl.add(formalParameterVarArgDecl221.getTree());


                    // AST REWRITE
                    // elements: formalParameterVarArgDecl
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 629:13: -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl )
                    {
                        // ../etc/JamlAttrHash.g:629:17: ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FORMAL_PARAM_LIST, LPAREN215, "FORMAL_PARAM_LIST"), root_1);

                        adaptor.addChild(root_1, stream_formalParameterVarArgDecl.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // ../etc/JamlAttrHash.g:631:13: 
                    {

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 631:13: -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] )
                    {
                        // ../etc/JamlAttrHash.g:631:17: ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FORMAL_PARAM_LIST, LPAREN215, "FORMAL_PARAM_LIST"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }

            RPAREN222=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_formalParameterList7997); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN222);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("formalParameterList", 61);
            if ( state.backtracking>0 ) { memoize(input, 61, formalParameterList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formalParameterList"

    public static class formalParameterStandardDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formalParameterStandardDecl"
    // ../etc/JamlAttrHash.g:636:1: formalParameterStandardDecl : localModifierList type variableDeclaratorId -> ^( FORMAL_PARAM_STD_DECL localModifierList type variableDeclaratorId ) ;
    public final JamlAttrHashParser.formalParameterStandardDecl_return formalParameterStandardDecl() throws RecognitionException {
    traceIn("formalParameterStandardDecl", 62);
        JamlAttrHashParser.formalParameterStandardDecl_return retval = new JamlAttrHashParser.formalParameterStandardDecl_return();
        retval.start = input.LT(1);
        int formalParameterStandardDecl_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.localModifierList_return localModifierList223 = null;

        JamlAttrHashParser.type_return type224 = null;

        JamlAttrHashParser.variableDeclaratorId_return variableDeclaratorId225 = null;


        RewriteRuleSubtreeStream stream_variableDeclaratorId=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorId");
        RewriteRuleSubtreeStream stream_localModifierList=new RewriteRuleSubtreeStream(adaptor,"rule localModifierList");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }
            // ../etc/JamlAttrHash.g:637:5: ( localModifierList type variableDeclaratorId -> ^( FORMAL_PARAM_STD_DECL localModifierList type variableDeclaratorId ) )
            // ../etc/JamlAttrHash.g:637:9: localModifierList type variableDeclaratorId
            {
            pushFollow(FOLLOW_localModifierList_in_formalParameterStandardDecl8020);
            localModifierList223=localModifierList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_localModifierList.add(localModifierList223.getTree());
            pushFollow(FOLLOW_type_in_formalParameterStandardDecl8022);
            type224=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type224.getTree());
            pushFollow(FOLLOW_variableDeclaratorId_in_formalParameterStandardDecl8024);
            variableDeclaratorId225=variableDeclaratorId();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableDeclaratorId.add(variableDeclaratorId225.getTree());


            // AST REWRITE
            // elements: variableDeclaratorId, localModifierList, type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 638:9: -> ^( FORMAL_PARAM_STD_DECL localModifierList type variableDeclaratorId )
            {
                // ../etc/JamlAttrHash.g:638:13: ^( FORMAL_PARAM_STD_DECL localModifierList type variableDeclaratorId )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FORMAL_PARAM_STD_DECL, "FORMAL_PARAM_STD_DECL"), root_1);

                adaptor.addChild(root_1, stream_localModifierList.nextTree());
                adaptor.addChild(root_1, stream_type.nextTree());
                adaptor.addChild(root_1, stream_variableDeclaratorId.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("formalParameterStandardDecl", 62);
            if ( state.backtracking>0 ) { memoize(input, 62, formalParameterStandardDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formalParameterStandardDecl"

    public static class formalParameterVarArgDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formalParameterVarArgDecl"
    // ../etc/JamlAttrHash.g:641:1: formalParameterVarArgDecl : localModifierList type ELLIPSIS variableDeclaratorId -> ^( FORMAL_PARAM_VARARG_DECL localModifierList type variableDeclaratorId ) ;
    public final JamlAttrHashParser.formalParameterVarArgDecl_return formalParameterVarArgDecl() throws RecognitionException {
    traceIn("formalParameterVarArgDecl", 63);
        JamlAttrHashParser.formalParameterVarArgDecl_return retval = new JamlAttrHashParser.formalParameterVarArgDecl_return();
        retval.start = input.LT(1);
        int formalParameterVarArgDecl_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ELLIPSIS228=null;
        JamlAttrHashParser.localModifierList_return localModifierList226 = null;

        JamlAttrHashParser.type_return type227 = null;

        JamlAttrHashParser.variableDeclaratorId_return variableDeclaratorId229 = null;


        CommonTree ELLIPSIS228_tree=null;
        RewriteRuleTokenStream stream_ELLIPSIS=new RewriteRuleTokenStream(adaptor,"token ELLIPSIS");
        RewriteRuleSubtreeStream stream_variableDeclaratorId=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorId");
        RewriteRuleSubtreeStream stream_localModifierList=new RewriteRuleSubtreeStream(adaptor,"rule localModifierList");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }
            // ../etc/JamlAttrHash.g:642:5: ( localModifierList type ELLIPSIS variableDeclaratorId -> ^( FORMAL_PARAM_VARARG_DECL localModifierList type variableDeclaratorId ) )
            // ../etc/JamlAttrHash.g:642:9: localModifierList type ELLIPSIS variableDeclaratorId
            {
            pushFollow(FOLLOW_localModifierList_in_formalParameterVarArgDecl8068);
            localModifierList226=localModifierList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_localModifierList.add(localModifierList226.getTree());
            pushFollow(FOLLOW_type_in_formalParameterVarArgDecl8070);
            type227=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type227.getTree());
            ELLIPSIS228=(Token)match(input,ELLIPSIS,FOLLOW_ELLIPSIS_in_formalParameterVarArgDecl8072); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ELLIPSIS.add(ELLIPSIS228);

            pushFollow(FOLLOW_variableDeclaratorId_in_formalParameterVarArgDecl8074);
            variableDeclaratorId229=variableDeclaratorId();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableDeclaratorId.add(variableDeclaratorId229.getTree());


            // AST REWRITE
            // elements: localModifierList, variableDeclaratorId, type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 643:9: -> ^( FORMAL_PARAM_VARARG_DECL localModifierList type variableDeclaratorId )
            {
                // ../etc/JamlAttrHash.g:643:13: ^( FORMAL_PARAM_VARARG_DECL localModifierList type variableDeclaratorId )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FORMAL_PARAM_VARARG_DECL, "FORMAL_PARAM_VARARG_DECL"), root_1);

                adaptor.addChild(root_1, stream_localModifierList.nextTree());
                adaptor.addChild(root_1, stream_type.nextTree());
                adaptor.addChild(root_1, stream_variableDeclaratorId.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("formalParameterVarArgDecl", 63);
            if ( state.backtracking>0 ) { memoize(input, 63, formalParameterVarArgDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formalParameterVarArgDecl"

    public static class qualifiedIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedIdentifier"
    // ../etc/JamlAttrHash.g:646:1: qualifiedIdentifier : ( IDENT -> IDENT ) ( DOT ident= IDENT -> ^( DOT $qualifiedIdentifier $ident) )* ;
    public final JamlAttrHashParser.qualifiedIdentifier_return qualifiedIdentifier() throws RecognitionException {
    traceIn("qualifiedIdentifier", 64);
        JamlAttrHashParser.qualifiedIdentifier_return retval = new JamlAttrHashParser.qualifiedIdentifier_return();
        retval.start = input.LT(1);
        int qualifiedIdentifier_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ident=null;
        Token IDENT230=null;
        Token DOT231=null;

        CommonTree ident_tree=null;
        CommonTree IDENT230_tree=null;
        CommonTree DOT231_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }
            // ../etc/JamlAttrHash.g:647:5: ( ( IDENT -> IDENT ) ( DOT ident= IDENT -> ^( DOT $qualifiedIdentifier $ident) )* )
            // ../etc/JamlAttrHash.g:647:9: ( IDENT -> IDENT ) ( DOT ident= IDENT -> ^( DOT $qualifiedIdentifier $ident) )*
            {
            // ../etc/JamlAttrHash.g:647:9: ( IDENT -> IDENT )
            // ../etc/JamlAttrHash.g:647:13: IDENT
            {
            IDENT230=(Token)match(input,IDENT,FOLLOW_IDENT_in_qualifiedIdentifier8122); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT230);



            // AST REWRITE
            // elements: IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 647:33: -> IDENT
            {
                adaptor.addChild(root_0, stream_IDENT.nextNode());

            }

            retval.tree = root_0;}
            }

            // ../etc/JamlAttrHash.g:649:9: ( DOT ident= IDENT -> ^( DOT $qualifiedIdentifier $ident) )*
            loop78:
            do {
                int alt78=2;
                int LA78_0 = input.LA(1);

                if ( (LA78_0==DOT) ) {
                    int LA78_2 = input.LA(2);

                    if ( (LA78_2==IDENT) ) {
                        int LA78_3 = input.LA(3);

                        if ( (synpred113_JamlAttrHash()) ) {
                            alt78=1;
                        }


                    }


                }


                switch (alt78) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:649:13: DOT ident= IDENT
            	    {
            	    DOT231=(Token)match(input,DOT,FOLLOW_DOT_in_qualifiedIdentifier8165); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT231);

            	    ident=(Token)match(input,IDENT,FOLLOW_IDENT_in_qualifiedIdentifier8169); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_IDENT.add(ident);



            	    // AST REWRITE
            	    // elements: ident, DOT, qualifiedIdentifier
            	    // token labels: ident
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {
            	    retval.tree = root_0;
            	    RewriteRuleTokenStream stream_ident=new RewriteRuleTokenStream(adaptor,"token ident",ident);
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (CommonTree)adaptor.nil();
            	    // 649:33: -> ^( DOT $qualifiedIdentifier $ident)
            	    {
            	        // ../etc/JamlAttrHash.g:649:37: ^( DOT $qualifiedIdentifier $ident)
            	        {
            	        CommonTree root_1 = (CommonTree)adaptor.nil();
            	        root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

            	        adaptor.addChild(root_1, stream_retval.nextTree());
            	        adaptor.addChild(root_1, stream_ident.nextNode());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }

            	    retval.tree = root_0;}
            	    }
            	    break;

            	default :
            	    break loop78;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("qualifiedIdentifier", 64);
            if ( state.backtracking>0 ) { memoize(input, 64, qualifiedIdentifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedIdentifier"

    public static class annotationList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationList"
    // ../etc/JamlAttrHash.g:655:1: annotationList : ( annotation )* -> ^( ANNOTATION_LIST ( annotation )* ) ;
    public final JamlAttrHashParser.annotationList_return annotationList() throws RecognitionException {
    traceIn("annotationList", 65);
        JamlAttrHashParser.annotationList_return retval = new JamlAttrHashParser.annotationList_return();
        retval.start = input.LT(1);
        int annotationList_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.annotation_return annotation232 = null;


        RewriteRuleSubtreeStream stream_annotation=new RewriteRuleSubtreeStream(adaptor,"rule annotation");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }
            // ../etc/JamlAttrHash.g:656:5: ( ( annotation )* -> ^( ANNOTATION_LIST ( annotation )* ) )
            // ../etc/JamlAttrHash.g:656:9: ( annotation )*
            {
            // ../etc/JamlAttrHash.g:656:9: ( annotation )*
            loop79:
            do {
                int alt79=2;
                int LA79_0 = input.LA(1);

                if ( (LA79_0==AT) ) {
                    int LA79_2 = input.LA(2);

                    if ( (LA79_2==IDENT) ) {
                        int LA79_3 = input.LA(3);

                        if ( (synpred114_JamlAttrHash()) ) {
                            alt79=1;
                        }


                    }


                }


                switch (alt79) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:0:0: annotation
            	    {
            	    pushFollow(FOLLOW_annotation_in_annotationList8222);
            	    annotation232=annotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_annotation.add(annotation232.getTree());

            	    }
            	    break;

            	default :
            	    break loop79;
                }
            } while (true);



            // AST REWRITE
            // elements: annotation
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 657:9: -> ^( ANNOTATION_LIST ( annotation )* )
            {
                // ../etc/JamlAttrHash.g:657:13: ^( ANNOTATION_LIST ( annotation )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_LIST, "ANNOTATION_LIST"), root_1);

                // ../etc/JamlAttrHash.g:657:31: ( annotation )*
                while ( stream_annotation.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotation.nextTree());

                }
                stream_annotation.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("annotationList", 65);
            if ( state.backtracking>0 ) { memoize(input, 65, annotationList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationList"

    public static class annotation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotation"
    // ../etc/JamlAttrHash.g:660:1: annotation : AT qualifiedIdentifier ( annotationInit )? ;
    public final JamlAttrHashParser.annotation_return annotation() throws RecognitionException {
    traceIn("annotation", 66);
        JamlAttrHashParser.annotation_return retval = new JamlAttrHashParser.annotation_return();
        retval.start = input.LT(1);
        int annotation_StartIndex = input.index();
        CommonTree root_0 = null;

        Token AT233=null;
        JamlAttrHashParser.qualifiedIdentifier_return qualifiedIdentifier234 = null;

        JamlAttrHashParser.annotationInit_return annotationInit235 = null;


        CommonTree AT233_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }
            // ../etc/JamlAttrHash.g:661:5: ( AT qualifiedIdentifier ( annotationInit )? )
            // ../etc/JamlAttrHash.g:661:9: AT qualifiedIdentifier ( annotationInit )?
            {
            root_0 = (CommonTree)adaptor.nil();

            AT233=(Token)match(input,AT,FOLLOW_AT_in_annotation8260); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            AT233_tree = (CommonTree)adaptor.create(AT233);
            root_0 = (CommonTree)adaptor.becomeRoot(AT233_tree, root_0);
            }
            pushFollow(FOLLOW_qualifiedIdentifier_in_annotation8263);
            qualifiedIdentifier234=qualifiedIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedIdentifier234.getTree());
            // ../etc/JamlAttrHash.g:661:33: ( annotationInit )?
            int alt80=2;
            int LA80_0 = input.LA(1);

            if ( (LA80_0==LPAREN) ) {
                alt80=1;
            }
            switch (alt80) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: annotationInit
                    {
                    pushFollow(FOLLOW_annotationInit_in_annotation8265);
                    annotationInit235=annotationInit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationInit235.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("annotation", 66);
            if ( state.backtracking>0 ) { memoize(input, 66, annotation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotation"

    public static class annotationInit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationInit"
    // ../etc/JamlAttrHash.g:664:1: annotationInit : LPAREN annotationInitializers RPAREN -> ^( ANNOTATION_INIT_BLOCK[$LPAREN, \"ANNOTATION_INIT_BLOCK\"] annotationInitializers ) ;
    public final JamlAttrHashParser.annotationInit_return annotationInit() throws RecognitionException {
    traceIn("annotationInit", 67);
        JamlAttrHashParser.annotationInit_return retval = new JamlAttrHashParser.annotationInit_return();
        retval.start = input.LT(1);
        int annotationInit_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LPAREN236=null;
        Token RPAREN238=null;
        JamlAttrHashParser.annotationInitializers_return annotationInitializers237 = null;


        CommonTree LPAREN236_tree=null;
        CommonTree RPAREN238_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_annotationInitializers=new RewriteRuleSubtreeStream(adaptor,"rule annotationInitializers");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }
            // ../etc/JamlAttrHash.g:665:5: ( LPAREN annotationInitializers RPAREN -> ^( ANNOTATION_INIT_BLOCK[$LPAREN, \"ANNOTATION_INIT_BLOCK\"] annotationInitializers ) )
            // ../etc/JamlAttrHash.g:665:9: LPAREN annotationInitializers RPAREN
            {
            LPAREN236=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationInit8289); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN236);

            pushFollow(FOLLOW_annotationInitializers_in_annotationInit8291);
            annotationInitializers237=annotationInitializers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_annotationInitializers.add(annotationInitializers237.getTree());
            RPAREN238=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationInit8293); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN238);



            // AST REWRITE
            // elements: annotationInitializers
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 666:9: -> ^( ANNOTATION_INIT_BLOCK[$LPAREN, \"ANNOTATION_INIT_BLOCK\"] annotationInitializers )
            {
                // ../etc/JamlAttrHash.g:666:13: ^( ANNOTATION_INIT_BLOCK[$LPAREN, \"ANNOTATION_INIT_BLOCK\"] annotationInitializers )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_INIT_BLOCK, LPAREN236, "ANNOTATION_INIT_BLOCK"), root_1);

                adaptor.addChild(root_1, stream_annotationInitializers.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("annotationInit", 67);
            if ( state.backtracking>0 ) { memoize(input, 67, annotationInit_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationInit"

    public static class annotationInitializers_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationInitializers"
    // ../etc/JamlAttrHash.g:669:1: annotationInitializers : ( annotationInitializer ( COMMA annotationInitializer )* -> ^( ANNOTATION_INIT_KEY_LIST ( annotationInitializer )+ ) | annotationElementValue -> ^( ANNOTATION_INIT_DEFAULT_KEY annotationElementValue ) );
    public final JamlAttrHashParser.annotationInitializers_return annotationInitializers() throws RecognitionException {
    traceIn("annotationInitializers", 68);
        JamlAttrHashParser.annotationInitializers_return retval = new JamlAttrHashParser.annotationInitializers_return();
        retval.start = input.LT(1);
        int annotationInitializers_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA240=null;
        JamlAttrHashParser.annotationInitializer_return annotationInitializer239 = null;

        JamlAttrHashParser.annotationInitializer_return annotationInitializer241 = null;

        JamlAttrHashParser.annotationElementValue_return annotationElementValue242 = null;


        CommonTree COMMA240_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_annotationElementValue=new RewriteRuleSubtreeStream(adaptor,"rule annotationElementValue");
        RewriteRuleSubtreeStream stream_annotationInitializer=new RewriteRuleSubtreeStream(adaptor,"rule annotationInitializer");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }
            // ../etc/JamlAttrHash.g:670:5: ( annotationInitializer ( COMMA annotationInitializer )* -> ^( ANNOTATION_INIT_KEY_LIST ( annotationInitializer )+ ) | annotationElementValue -> ^( ANNOTATION_INIT_DEFAULT_KEY annotationElementValue ) )
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==IDENT) ) {
                int LA82_1 = input.LA(2);

                if ( (LA82_1==ASSIGN) ) {
                    alt82=1;
                }
                else if ( (LA82_1==AND||LA82_1==BIT_SHIFT_RIGHT||(LA82_1>=DEC && LA82_1<=DIV)||LA82_1==DOT||(LA82_1>=EQUAL && LA82_1<=LBRACK)||(LA82_1>=LESS_OR_EQUAL && LA82_1<=LOGICAL_AND)||(LA82_1>=LOGICAL_OR && LA82_1<=MINUS)||LA82_1==MOD||(LA82_1>=NOT_EQUAL && LA82_1<=OR)||LA82_1==PLUS||LA82_1==QUESTION||LA82_1==RPAREN||LA82_1==SHIFT_LEFT||LA82_1==SHIFT_RIGHT||LA82_1==STAR||LA82_1==XOR||LA82_1==INSTANCEOF) ) {
                    alt82=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 82, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA82_0==AT||LA82_0==DEC||LA82_0==INC||LA82_0==LCURLY||LA82_0==LESS_THAN||LA82_0==LOGICAL_NOT||(LA82_0>=LPAREN && LA82_0<=MINUS)||LA82_0==NOT||LA82_0==PLUS||LA82_0==BOOLEAN||LA82_0==BYTE||LA82_0==CHAR||LA82_0==DOUBLE||LA82_0==FALSE||LA82_0==FLOAT||(LA82_0>=INT && LA82_0<=LONG)||(LA82_0>=NEW && LA82_0<=NULL)||LA82_0==SHORT||LA82_0==SUPER||LA82_0==THIS||LA82_0==TRUE||LA82_0==VOID||(LA82_0>=HEX_LITERAL && LA82_0<=STRING_LITERAL)) ) {
                alt82=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 82, 0, input);

                throw nvae;
            }
            switch (alt82) {
                case 1 :
                    // ../etc/JamlAttrHash.g:670:9: annotationInitializer ( COMMA annotationInitializer )*
                    {
                    pushFollow(FOLLOW_annotationInitializer_in_annotationInitializers8330);
                    annotationInitializer239=annotationInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_annotationInitializer.add(annotationInitializer239.getTree());
                    // ../etc/JamlAttrHash.g:670:31: ( COMMA annotationInitializer )*
                    loop81:
                    do {
                        int alt81=2;
                        int LA81_0 = input.LA(1);

                        if ( (LA81_0==COMMA) ) {
                            alt81=1;
                        }


                        switch (alt81) {
                    	case 1 :
                    	    // ../etc/JamlAttrHash.g:670:32: COMMA annotationInitializer
                    	    {
                    	    COMMA240=(Token)match(input,COMMA,FOLLOW_COMMA_in_annotationInitializers8333); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA240);

                    	    pushFollow(FOLLOW_annotationInitializer_in_annotationInitializers8335);
                    	    annotationInitializer241=annotationInitializer();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_annotationInitializer.add(annotationInitializer241.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop81;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: annotationInitializer
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 671:9: -> ^( ANNOTATION_INIT_KEY_LIST ( annotationInitializer )+ )
                    {
                        // ../etc/JamlAttrHash.g:671:13: ^( ANNOTATION_INIT_KEY_LIST ( annotationInitializer )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_INIT_KEY_LIST, "ANNOTATION_INIT_KEY_LIST"), root_1);

                        if ( !(stream_annotationInitializer.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_annotationInitializer.hasNext() ) {
                            adaptor.addChild(root_1, stream_annotationInitializer.nextTree());

                        }
                        stream_annotationInitializer.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:672:9: annotationElementValue
                    {
                    pushFollow(FOLLOW_annotationElementValue_in_annotationInitializers8365);
                    annotationElementValue242=annotationElementValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_annotationElementValue.add(annotationElementValue242.getTree());


                    // AST REWRITE
                    // elements: annotationElementValue
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 673:9: -> ^( ANNOTATION_INIT_DEFAULT_KEY annotationElementValue )
                    {
                        // ../etc/JamlAttrHash.g:673:13: ^( ANNOTATION_INIT_DEFAULT_KEY annotationElementValue )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_INIT_DEFAULT_KEY, "ANNOTATION_INIT_DEFAULT_KEY"), root_1);

                        adaptor.addChild(root_1, stream_annotationElementValue.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("annotationInitializers", 68);
            if ( state.backtracking>0 ) { memoize(input, 68, annotationInitializers_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationInitializers"

    public static class annotationInitializer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationInitializer"
    // ../etc/JamlAttrHash.g:676:1: annotationInitializer : IDENT ASSIGN annotationElementValue ;
    public final JamlAttrHashParser.annotationInitializer_return annotationInitializer() throws RecognitionException {
    traceIn("annotationInitializer", 69);
        JamlAttrHashParser.annotationInitializer_return retval = new JamlAttrHashParser.annotationInitializer_return();
        retval.start = input.LT(1);
        int annotationInitializer_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT243=null;
        Token ASSIGN244=null;
        JamlAttrHashParser.annotationElementValue_return annotationElementValue245 = null;


        CommonTree IDENT243_tree=null;
        CommonTree ASSIGN244_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }
            // ../etc/JamlAttrHash.g:677:5: ( IDENT ASSIGN annotationElementValue )
            // ../etc/JamlAttrHash.g:677:9: IDENT ASSIGN annotationElementValue
            {
            root_0 = (CommonTree)adaptor.nil();

            IDENT243=(Token)match(input,IDENT,FOLLOW_IDENT_in_annotationInitializer8406); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT243_tree = (CommonTree)adaptor.create(IDENT243);
            root_0 = (CommonTree)adaptor.becomeRoot(IDENT243_tree, root_0);
            }
            ASSIGN244=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_annotationInitializer8409); if (state.failed) return retval;
            pushFollow(FOLLOW_annotationElementValue_in_annotationInitializer8412);
            annotationElementValue245=annotationElementValue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationElementValue245.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("annotationInitializer", 69);
            if ( state.backtracking>0 ) { memoize(input, 69, annotationInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationInitializer"

    public static class annotationElementValue_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationElementValue"
    // ../etc/JamlAttrHash.g:680:1: annotationElementValue : ( annotationElementValueExpression | annotation | annotationElementValueArrayInitializer );
    public final JamlAttrHashParser.annotationElementValue_return annotationElementValue() throws RecognitionException {
    traceIn("annotationElementValue", 70);
        JamlAttrHashParser.annotationElementValue_return retval = new JamlAttrHashParser.annotationElementValue_return();
        retval.start = input.LT(1);
        int annotationElementValue_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.annotationElementValueExpression_return annotationElementValueExpression246 = null;

        JamlAttrHashParser.annotation_return annotation247 = null;

        JamlAttrHashParser.annotationElementValueArrayInitializer_return annotationElementValueArrayInitializer248 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }
            // ../etc/JamlAttrHash.g:681:5: ( annotationElementValueExpression | annotation | annotationElementValueArrayInitializer )
            int alt83=3;
            switch ( input.LA(1) ) {
            case DEC:
            case INC:
            case LESS_THAN:
            case LOGICAL_NOT:
            case LPAREN:
            case MINUS:
            case NOT:
            case PLUS:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case SHORT:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
            case IDENT:
            case HEX_LITERAL:
            case OCTAL_LITERAL:
            case DECIMAL_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
                {
                alt83=1;
                }
                break;
            case AT:
                {
                alt83=2;
                }
                break;
            case LCURLY:
                {
                alt83=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 83, 0, input);

                throw nvae;
            }

            switch (alt83) {
                case 1 :
                    // ../etc/JamlAttrHash.g:681:9: annotationElementValueExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_annotationElementValueExpression_in_annotationElementValue8435);
                    annotationElementValueExpression246=annotationElementValueExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationElementValueExpression246.getTree());

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:682:9: annotation
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_annotation_in_annotationElementValue8445);
                    annotation247=annotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotation247.getTree());

                    }
                    break;
                case 3 :
                    // ../etc/JamlAttrHash.g:683:9: annotationElementValueArrayInitializer
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_annotationElementValueArrayInitializer_in_annotationElementValue8455);
                    annotationElementValueArrayInitializer248=annotationElementValueArrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationElementValueArrayInitializer248.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("annotationElementValue", 70);
            if ( state.backtracking>0 ) { memoize(input, 70, annotationElementValue_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationElementValue"

    public static class annotationElementValueExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationElementValueExpression"
    // ../etc/JamlAttrHash.g:686:1: annotationElementValueExpression : conditionalExpression -> ^( EXPR conditionalExpression ) ;
    public final JamlAttrHashParser.annotationElementValueExpression_return annotationElementValueExpression() throws RecognitionException {
    traceIn("annotationElementValueExpression", 71);
        JamlAttrHashParser.annotationElementValueExpression_return retval = new JamlAttrHashParser.annotationElementValueExpression_return();
        retval.start = input.LT(1);
        int annotationElementValueExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.conditionalExpression_return conditionalExpression249 = null;


        RewriteRuleSubtreeStream stream_conditionalExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }
            // ../etc/JamlAttrHash.g:687:5: ( conditionalExpression -> ^( EXPR conditionalExpression ) )
            // ../etc/JamlAttrHash.g:687:9: conditionalExpression
            {
            pushFollow(FOLLOW_conditionalExpression_in_annotationElementValueExpression8478);
            conditionalExpression249=conditionalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_conditionalExpression.add(conditionalExpression249.getTree());


            // AST REWRITE
            // elements: conditionalExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 688:9: -> ^( EXPR conditionalExpression )
            {
                // ../etc/JamlAttrHash.g:688:13: ^( EXPR conditionalExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXPR, "EXPR"), root_1);

                adaptor.addChild(root_1, stream_conditionalExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("annotationElementValueExpression", 71);
            if ( state.backtracking>0 ) { memoize(input, 71, annotationElementValueExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationElementValueExpression"

    public static class annotationElementValueArrayInitializer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationElementValueArrayInitializer"
    // ../etc/JamlAttrHash.g:691:1: annotationElementValueArrayInitializer : LCURLY ( annotationElementValue ( COMMA annotationElementValue )* )? ( COMMA )? RCURLY -> ^( ANNOTATION_INIT_ARRAY_ELEMENT[$LCURLY, \"ANNOTATION_ELEM_VALUE_ARRAY_INIT\"] ( annotationElementValue )* ) ;
    public final JamlAttrHashParser.annotationElementValueArrayInitializer_return annotationElementValueArrayInitializer() throws RecognitionException {
    traceIn("annotationElementValueArrayInitializer", 72);
        JamlAttrHashParser.annotationElementValueArrayInitializer_return retval = new JamlAttrHashParser.annotationElementValueArrayInitializer_return();
        retval.start = input.LT(1);
        int annotationElementValueArrayInitializer_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LCURLY250=null;
        Token COMMA252=null;
        Token COMMA254=null;
        Token RCURLY255=null;
        JamlAttrHashParser.annotationElementValue_return annotationElementValue251 = null;

        JamlAttrHashParser.annotationElementValue_return annotationElementValue253 = null;


        CommonTree LCURLY250_tree=null;
        CommonTree COMMA252_tree=null;
        CommonTree COMMA254_tree=null;
        CommonTree RCURLY255_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_annotationElementValue=new RewriteRuleSubtreeStream(adaptor,"rule annotationElementValue");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }
            // ../etc/JamlAttrHash.g:692:5: ( LCURLY ( annotationElementValue ( COMMA annotationElementValue )* )? ( COMMA )? RCURLY -> ^( ANNOTATION_INIT_ARRAY_ELEMENT[$LCURLY, \"ANNOTATION_ELEM_VALUE_ARRAY_INIT\"] ( annotationElementValue )* ) )
            // ../etc/JamlAttrHash.g:692:9: LCURLY ( annotationElementValue ( COMMA annotationElementValue )* )? ( COMMA )? RCURLY
            {
            LCURLY250=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_annotationElementValueArrayInitializer8518); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY250);

            // ../etc/JamlAttrHash.g:692:16: ( annotationElementValue ( COMMA annotationElementValue )* )?
            int alt85=2;
            int LA85_0 = input.LA(1);

            if ( (LA85_0==AT||LA85_0==DEC||LA85_0==INC||LA85_0==LCURLY||LA85_0==LESS_THAN||LA85_0==LOGICAL_NOT||(LA85_0>=LPAREN && LA85_0<=MINUS)||LA85_0==NOT||LA85_0==PLUS||LA85_0==BOOLEAN||LA85_0==BYTE||LA85_0==CHAR||LA85_0==DOUBLE||LA85_0==FALSE||LA85_0==FLOAT||(LA85_0>=INT && LA85_0<=LONG)||(LA85_0>=NEW && LA85_0<=NULL)||LA85_0==SHORT||LA85_0==SUPER||LA85_0==THIS||LA85_0==TRUE||LA85_0==VOID||(LA85_0>=IDENT && LA85_0<=STRING_LITERAL)) ) {
                alt85=1;
            }
            switch (alt85) {
                case 1 :
                    // ../etc/JamlAttrHash.g:692:17: annotationElementValue ( COMMA annotationElementValue )*
                    {
                    pushFollow(FOLLOW_annotationElementValue_in_annotationElementValueArrayInitializer8521);
                    annotationElementValue251=annotationElementValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_annotationElementValue.add(annotationElementValue251.getTree());
                    // ../etc/JamlAttrHash.g:692:40: ( COMMA annotationElementValue )*
                    loop84:
                    do {
                        int alt84=2;
                        int LA84_0 = input.LA(1);

                        if ( (LA84_0==COMMA) ) {
                            int LA84_1 = input.LA(2);

                            if ( (LA84_1==AT||LA84_1==DEC||LA84_1==INC||LA84_1==LCURLY||LA84_1==LESS_THAN||LA84_1==LOGICAL_NOT||(LA84_1>=LPAREN && LA84_1<=MINUS)||LA84_1==NOT||LA84_1==PLUS||LA84_1==BOOLEAN||LA84_1==BYTE||LA84_1==CHAR||LA84_1==DOUBLE||LA84_1==FALSE||LA84_1==FLOAT||(LA84_1>=INT && LA84_1<=LONG)||(LA84_1>=NEW && LA84_1<=NULL)||LA84_1==SHORT||LA84_1==SUPER||LA84_1==THIS||LA84_1==TRUE||LA84_1==VOID||(LA84_1>=IDENT && LA84_1<=STRING_LITERAL)) ) {
                                alt84=1;
                            }


                        }


                        switch (alt84) {
                    	case 1 :
                    	    // ../etc/JamlAttrHash.g:692:41: COMMA annotationElementValue
                    	    {
                    	    COMMA252=(Token)match(input,COMMA,FOLLOW_COMMA_in_annotationElementValueArrayInitializer8524); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA252);

                    	    pushFollow(FOLLOW_annotationElementValue_in_annotationElementValueArrayInitializer8526);
                    	    annotationElementValue253=annotationElementValue();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_annotationElementValue.add(annotationElementValue253.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop84;
                        }
                    } while (true);


                    }
                    break;

            }

            // ../etc/JamlAttrHash.g:692:74: ( COMMA )?
            int alt86=2;
            int LA86_0 = input.LA(1);

            if ( (LA86_0==COMMA) ) {
                alt86=1;
            }
            switch (alt86) {
                case 1 :
                    // ../etc/JamlAttrHash.g:692:75: COMMA
                    {
                    COMMA254=(Token)match(input,COMMA,FOLLOW_COMMA_in_annotationElementValueArrayInitializer8533); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA254);


                    }
                    break;

            }

            RCURLY255=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_annotationElementValueArrayInitializer8537); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY255);



            // AST REWRITE
            // elements: annotationElementValue
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 693:9: -> ^( ANNOTATION_INIT_ARRAY_ELEMENT[$LCURLY, \"ANNOTATION_ELEM_VALUE_ARRAY_INIT\"] ( annotationElementValue )* )
            {
                // ../etc/JamlAttrHash.g:693:13: ^( ANNOTATION_INIT_ARRAY_ELEMENT[$LCURLY, \"ANNOTATION_ELEM_VALUE_ARRAY_INIT\"] ( annotationElementValue )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_INIT_ARRAY_ELEMENT, LCURLY250, "ANNOTATION_ELEM_VALUE_ARRAY_INIT"), root_1);

                // ../etc/JamlAttrHash.g:693:90: ( annotationElementValue )*
                while ( stream_annotationElementValue.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotationElementValue.nextTree());

                }
                stream_annotationElementValue.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("annotationElementValueArrayInitializer", 72);
            if ( state.backtracking>0 ) { memoize(input, 72, annotationElementValueArrayInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationElementValueArrayInitializer"

    public static class annotationTypeDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeDeclaration"
    // ../etc/JamlAttrHash.g:696:1: annotationTypeDeclaration[CommonTree modifiers] : AT INTERFACE IDENT annotationBody -> ^( AT IDENT annotationBody ) ;
    public final JamlAttrHashParser.annotationTypeDeclaration_return annotationTypeDeclaration(CommonTree modifiers) throws RecognitionException {
    traceIn("annotationTypeDeclaration", 73);
        JamlAttrHashParser.annotationTypeDeclaration_return retval = new JamlAttrHashParser.annotationTypeDeclaration_return();
        retval.start = input.LT(1);
        int annotationTypeDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token AT256=null;
        Token INTERFACE257=null;
        Token IDENT258=null;
        JamlAttrHashParser.annotationBody_return annotationBody259 = null;


        CommonTree AT256_tree=null;
        CommonTree INTERFACE257_tree=null;
        CommonTree IDENT258_tree=null;
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_INTERFACE=new RewriteRuleTokenStream(adaptor,"token INTERFACE");
        RewriteRuleSubtreeStream stream_annotationBody=new RewriteRuleSubtreeStream(adaptor,"rule annotationBody");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }
            // ../etc/JamlAttrHash.g:697:5: ( AT INTERFACE IDENT annotationBody -> ^( AT IDENT annotationBody ) )
            // ../etc/JamlAttrHash.g:697:9: AT INTERFACE IDENT annotationBody
            {
            AT256=(Token)match(input,AT,FOLLOW_AT_in_annotationTypeDeclaration8580); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AT.add(AT256);

            INTERFACE257=(Token)match(input,INTERFACE,FOLLOW_INTERFACE_in_annotationTypeDeclaration8582); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTERFACE.add(INTERFACE257);

            IDENT258=(Token)match(input,IDENT,FOLLOW_IDENT_in_annotationTypeDeclaration8584); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT258);

            pushFollow(FOLLOW_annotationBody_in_annotationTypeDeclaration8586);
            annotationBody259=annotationBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_annotationBody.add(annotationBody259.getTree());


            // AST REWRITE
            // elements: AT, IDENT, annotationBody
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 698:9: -> ^( AT IDENT annotationBody )
            {
                // ../etc/JamlAttrHash.g:698:12: ^( AT IDENT annotationBody )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AT.nextNode(), root_1);

                adaptor.addChild(root_1, modifiers);
                adaptor.addChild(root_1, stream_IDENT.nextNode());
                adaptor.addChild(root_1, stream_annotationBody.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("annotationTypeDeclaration", 73);
            if ( state.backtracking>0 ) { memoize(input, 73, annotationTypeDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationTypeDeclaration"

    public static class annotationBody_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationBody"
    // ../etc/JamlAttrHash.g:701:1: annotationBody : LCURLY ( annotationScopeDeclarations )* RCURLY -> ^( ANNOTATION_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( annotationScopeDeclarations )* ) ;
    public final JamlAttrHashParser.annotationBody_return annotationBody() throws RecognitionException {
    traceIn("annotationBody", 74);
        JamlAttrHashParser.annotationBody_return retval = new JamlAttrHashParser.annotationBody_return();
        retval.start = input.LT(1);
        int annotationBody_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LCURLY260=null;
        Token RCURLY262=null;
        JamlAttrHashParser.annotationScopeDeclarations_return annotationScopeDeclarations261 = null;


        CommonTree LCURLY260_tree=null;
        CommonTree RCURLY262_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_annotationScopeDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule annotationScopeDeclarations");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }
            // ../etc/JamlAttrHash.g:702:5: ( LCURLY ( annotationScopeDeclarations )* RCURLY -> ^( ANNOTATION_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( annotationScopeDeclarations )* ) )
            // ../etc/JamlAttrHash.g:702:9: LCURLY ( annotationScopeDeclarations )* RCURLY
            {
            LCURLY260=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_annotationBody8629); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY260);

            // ../etc/JamlAttrHash.g:702:16: ( annotationScopeDeclarations )*
            loop87:
            do {
                int alt87=2;
                int LA87_0 = input.LA(1);

                if ( (LA87_0==AT||LA87_0==LESS_THAN||LA87_0==ABSTRACT||LA87_0==BOOLEAN||LA87_0==BYTE||(LA87_0>=CHAR && LA87_0<=CLASS)||LA87_0==DOUBLE||LA87_0==ENUM||LA87_0==FINAL||LA87_0==FLOAT||LA87_0==INTERFACE||(LA87_0>=INT && LA87_0<=NATIVE)||(LA87_0>=PRIVATE && LA87_0<=PUBLIC)||(LA87_0>=SHORT && LA87_0<=STRICTFP)||LA87_0==SYNCHRONIZED||LA87_0==TRANSIENT||(LA87_0>=VOID && LA87_0<=VOLATILE)||LA87_0==IDENT) ) {
                    alt87=1;
                }


                switch (alt87) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:0:0: annotationScopeDeclarations
            	    {
            	    pushFollow(FOLLOW_annotationScopeDeclarations_in_annotationBody8631);
            	    annotationScopeDeclarations261=annotationScopeDeclarations();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_annotationScopeDeclarations.add(annotationScopeDeclarations261.getTree());

            	    }
            	    break;

            	default :
            	    break loop87;
                }
            } while (true);

            RCURLY262=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_annotationBody8634); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY262);



            // AST REWRITE
            // elements: annotationScopeDeclarations
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 703:9: -> ^( ANNOTATION_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( annotationScopeDeclarations )* )
            {
                // ../etc/JamlAttrHash.g:703:13: ^( ANNOTATION_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( annotationScopeDeclarations )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_TOP_LEVEL_SCOPE, LCURLY260, "CLASS_TOP_LEVEL_SCOPE"), root_1);

                // ../etc/JamlAttrHash.g:703:76: ( annotationScopeDeclarations )*
                while ( stream_annotationScopeDeclarations.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotationScopeDeclarations.nextTree());

                }
                stream_annotationScopeDeclarations.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("annotationBody", 74);
            if ( state.backtracking>0 ) { memoize(input, 74, annotationBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationBody"

    public static class annotationScopeDeclarations_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationScopeDeclarations"
    // ../etc/JamlAttrHash.g:706:1: annotationScopeDeclarations : ( modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration );
    public final JamlAttrHashParser.annotationScopeDeclarations_return annotationScopeDeclarations() throws RecognitionException {
    traceIn("annotationScopeDeclarations", 75);
        JamlAttrHashParser.annotationScopeDeclarations_return retval = new JamlAttrHashParser.annotationScopeDeclarations_return();
        retval.start = input.LT(1);
        int annotationScopeDeclarations_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT265=null;
        Token LPAREN266=null;
        Token RPAREN267=null;
        Token SEMI269=null;
        Token SEMI271=null;
        JamlAttrHashParser.modifierList_return modifierList263 = null;

        JamlAttrHashParser.type_return type264 = null;

        JamlAttrHashParser.annotationDefaultValue_return annotationDefaultValue268 = null;

        JamlAttrHashParser.classFieldDeclaratorList_return classFieldDeclaratorList270 = null;

        JamlAttrHashParser.typeDeclaration_return typeDeclaration272 = null;


        CommonTree IDENT265_tree=null;
        CommonTree LPAREN266_tree=null;
        CommonTree RPAREN267_tree=null;
        CommonTree SEMI269_tree=null;
        CommonTree SEMI271_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_modifierList=new RewriteRuleSubtreeStream(adaptor,"rule modifierList");
        RewriteRuleSubtreeStream stream_annotationDefaultValue=new RewriteRuleSubtreeStream(adaptor,"rule annotationDefaultValue");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_classFieldDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule classFieldDeclaratorList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }
            // ../etc/JamlAttrHash.g:707:5: ( modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration )
            int alt90=2;
            alt90 = dfa90.predict(input);
            switch (alt90) {
                case 1 :
                    // ../etc/JamlAttrHash.g:707:9: modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) )
                    {
                    pushFollow(FOLLOW_modifierList_in_annotationScopeDeclarations8676);
                    modifierList263=modifierList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_modifierList.add(modifierList263.getTree());
                    pushFollow(FOLLOW_type_in_annotationScopeDeclarations8678);
                    type264=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type264.getTree());
                    // ../etc/JamlAttrHash.g:708:9: ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) )
                    int alt89=2;
                    int LA89_0 = input.LA(1);

                    if ( (LA89_0==IDENT) ) {
                        int LA89_1 = input.LA(2);

                        if ( (LA89_1==LPAREN) ) {
                            alt89=1;
                        }
                        else if ( (LA89_1==ASSIGN||LA89_1==COMMA||LA89_1==LBRACK||LA89_1==SEMI) ) {
                            alt89=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 89, 1, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 89, 0, input);

                        throw nvae;
                    }
                    switch (alt89) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:708:13: IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI
                            {
                            IDENT265=(Token)match(input,IDENT,FOLLOW_IDENT_in_annotationScopeDeclarations8692); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(IDENT265);

                            LPAREN266=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationScopeDeclarations8694); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN266);

                            RPAREN267=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationScopeDeclarations8696); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN267);

                            // ../etc/JamlAttrHash.g:708:33: ( annotationDefaultValue )?
                            int alt88=2;
                            int LA88_0 = input.LA(1);

                            if ( (LA88_0==DEFAULT) ) {
                                alt88=1;
                            }
                            switch (alt88) {
                                case 1 :
                                    // ../etc/JamlAttrHash.g:0:0: annotationDefaultValue
                                    {
                                    pushFollow(FOLLOW_annotationDefaultValue_in_annotationScopeDeclarations8698);
                                    annotationDefaultValue268=annotationDefaultValue();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_annotationDefaultValue.add(annotationDefaultValue268.getTree());

                                    }
                                    break;

                            }

                            SEMI269=(Token)match(input,SEMI,FOLLOW_SEMI_in_annotationScopeDeclarations8701); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMI.add(SEMI269);



                            // AST REWRITE
                            // elements: annotationDefaultValue, type, IDENT, modifierList
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 709:13: -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? )
                            {
                                // ../etc/JamlAttrHash.g:709:17: ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_METHOD_DECL, "ANNOTATION_METHOD_DECL"), root_1);

                                adaptor.addChild(root_1, stream_modifierList.nextTree());
                                adaptor.addChild(root_1, stream_type.nextTree());
                                adaptor.addChild(root_1, stream_IDENT.nextNode());
                                // ../etc/JamlAttrHash.g:709:66: ( annotationDefaultValue )?
                                if ( stream_annotationDefaultValue.hasNext() ) {
                                    adaptor.addChild(root_1, stream_annotationDefaultValue.nextTree());

                                }
                                stream_annotationDefaultValue.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // ../etc/JamlAttrHash.g:710:13: classFieldDeclaratorList SEMI
                            {
                            pushFollow(FOLLOW_classFieldDeclaratorList_in_annotationScopeDeclarations8743);
                            classFieldDeclaratorList270=classFieldDeclaratorList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_classFieldDeclaratorList.add(classFieldDeclaratorList270.getTree());
                            SEMI271=(Token)match(input,SEMI,FOLLOW_SEMI_in_annotationScopeDeclarations8745); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMI.add(SEMI271);



                            // AST REWRITE
                            // elements: classFieldDeclaratorList, type, modifierList
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 711:13: -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList )
                            {
                                // ../etc/JamlAttrHash.g:711:17: ^( VAR_DECLARATION modifierList type classFieldDeclaratorList )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_DECLARATION, "VAR_DECLARATION"), root_1);

                                adaptor.addChild(root_1, stream_modifierList.nextTree());
                                adaptor.addChild(root_1, stream_type.nextTree());
                                adaptor.addChild(root_1, stream_classFieldDeclaratorList.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:713:9: typeDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_typeDeclaration_in_annotationScopeDeclarations8790);
                    typeDeclaration272=typeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDeclaration272.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("annotationScopeDeclarations", 75);
            if ( state.backtracking>0 ) { memoize(input, 75, annotationScopeDeclarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationScopeDeclarations"

    public static class annotationDefaultValue_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationDefaultValue"
    // ../etc/JamlAttrHash.g:716:1: annotationDefaultValue : DEFAULT annotationElementValue ;
    public final JamlAttrHashParser.annotationDefaultValue_return annotationDefaultValue() throws RecognitionException {
    traceIn("annotationDefaultValue", 76);
        JamlAttrHashParser.annotationDefaultValue_return retval = new JamlAttrHashParser.annotationDefaultValue_return();
        retval.start = input.LT(1);
        int annotationDefaultValue_StartIndex = input.index();
        CommonTree root_0 = null;

        Token DEFAULT273=null;
        JamlAttrHashParser.annotationElementValue_return annotationElementValue274 = null;


        CommonTree DEFAULT273_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }
            // ../etc/JamlAttrHash.g:717:5: ( DEFAULT annotationElementValue )
            // ../etc/JamlAttrHash.g:717:9: DEFAULT annotationElementValue
            {
            root_0 = (CommonTree)adaptor.nil();

            DEFAULT273=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_annotationDefaultValue8813); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DEFAULT273_tree = (CommonTree)adaptor.create(DEFAULT273);
            root_0 = (CommonTree)adaptor.becomeRoot(DEFAULT273_tree, root_0);
            }
            pushFollow(FOLLOW_annotationElementValue_in_annotationDefaultValue8816);
            annotationElementValue274=annotationElementValue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationElementValue274.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("annotationDefaultValue", 76);
            if ( state.backtracking>0 ) { memoize(input, 76, annotationDefaultValue_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationDefaultValue"

    public static class block_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "block"
    // ../etc/JamlAttrHash.g:722:1: block : LCURLY ( blockStatement )* RCURLY -> ^( BLOCK_SCOPE[$LCURLY, \"BLOCK_SCOPE\"] ( blockStatement )* ) ;
    public final JamlAttrHashParser.block_return block() throws RecognitionException {
    traceIn("block", 77);
        JamlAttrHashParser.block_return retval = new JamlAttrHashParser.block_return();
        retval.start = input.LT(1);
        int block_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LCURLY275=null;
        Token RCURLY277=null;
        JamlAttrHashParser.blockStatement_return blockStatement276 = null;


        CommonTree LCURLY275_tree=null;
        CommonTree RCURLY277_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_blockStatement=new RewriteRuleSubtreeStream(adaptor,"rule blockStatement");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }
            // ../etc/JamlAttrHash.g:723:5: ( LCURLY ( blockStatement )* RCURLY -> ^( BLOCK_SCOPE[$LCURLY, \"BLOCK_SCOPE\"] ( blockStatement )* ) )
            // ../etc/JamlAttrHash.g:723:9: LCURLY ( blockStatement )* RCURLY
            {
            LCURLY275=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_block8837); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY275);

            // ../etc/JamlAttrHash.g:723:16: ( blockStatement )*
            loop91:
            do {
                int alt91=2;
                int LA91_0 = input.LA(1);

                if ( (LA91_0==AT||LA91_0==DEC||LA91_0==INC||LA91_0==LCURLY||LA91_0==LESS_THAN||LA91_0==LOGICAL_NOT||(LA91_0>=LPAREN && LA91_0<=MINUS)||LA91_0==NOT||LA91_0==PLUS||LA91_0==SEMI||(LA91_0>=ABSTRACT && LA91_0<=BYTE)||(LA91_0>=CHAR && LA91_0<=CONTINUE)||(LA91_0>=DO && LA91_0<=DOUBLE)||LA91_0==ENUM||(LA91_0>=FALSE && LA91_0<=FINAL)||(LA91_0>=FLOAT && LA91_0<=IF)||LA91_0==INTERFACE||(LA91_0>=INT && LA91_0<=NULL)||(LA91_0>=PRIVATE && LA91_0<=THROW)||(LA91_0>=TRANSIENT && LA91_0<=WHILE)||(LA91_0>=IDENT && LA91_0<=STRING_LITERAL)) ) {
                    alt91=1;
                }


                switch (alt91) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:0:0: blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_block8839);
            	    blockStatement276=blockStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_blockStatement.add(blockStatement276.getTree());

            	    }
            	    break;

            	default :
            	    break loop91;
                }
            } while (true);

            RCURLY277=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_block8842); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY277);



            // AST REWRITE
            // elements: blockStatement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 724:9: -> ^( BLOCK_SCOPE[$LCURLY, \"BLOCK_SCOPE\"] ( blockStatement )* )
            {
                // ../etc/JamlAttrHash.g:724:13: ^( BLOCK_SCOPE[$LCURLY, \"BLOCK_SCOPE\"] ( blockStatement )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BLOCK_SCOPE, LCURLY275, "BLOCK_SCOPE"), root_1);

                // ../etc/JamlAttrHash.g:724:51: ( blockStatement )*
                while ( stream_blockStatement.hasNext() ) {
                    adaptor.addChild(root_1, stream_blockStatement.nextTree());

                }
                stream_blockStatement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("block", 77);
            if ( state.backtracking>0 ) { memoize(input, 77, block_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "block"

    public static class blockStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "blockStatement"
    // ../etc/JamlAttrHash.g:727:1: blockStatement : ( localVariableDeclaration SEMI | typeDeclaration | statement );
    public final JamlAttrHashParser.blockStatement_return blockStatement() throws RecognitionException {
    traceIn("blockStatement", 78);
        JamlAttrHashParser.blockStatement_return retval = new JamlAttrHashParser.blockStatement_return();
        retval.start = input.LT(1);
        int blockStatement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SEMI279=null;
        JamlAttrHashParser.localVariableDeclaration_return localVariableDeclaration278 = null;

        JamlAttrHashParser.typeDeclaration_return typeDeclaration280 = null;

        JamlAttrHashParser.statement_return statement281 = null;


        CommonTree SEMI279_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }
            // ../etc/JamlAttrHash.g:728:5: ( localVariableDeclaration SEMI | typeDeclaration | statement )
            int alt92=3;
            alt92 = dfa92.predict(input);
            switch (alt92) {
                case 1 :
                    // ../etc/JamlAttrHash.g:728:9: localVariableDeclaration SEMI
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_localVariableDeclaration_in_blockStatement8880);
                    localVariableDeclaration278=localVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, localVariableDeclaration278.getTree());
                    SEMI279=(Token)match(input,SEMI,FOLLOW_SEMI_in_blockStatement8882); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:729:9: typeDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_typeDeclaration_in_blockStatement8893);
                    typeDeclaration280=typeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDeclaration280.getTree());

                    }
                    break;
                case 3 :
                    // ../etc/JamlAttrHash.g:730:9: statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_statement_in_blockStatement8903);
                    statement281=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, statement281.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("blockStatement", 78);
            if ( state.backtracking>0 ) { memoize(input, 78, blockStatement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "blockStatement"

    public static class localVariableDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "localVariableDeclaration"
    // ../etc/JamlAttrHash.g:733:1: localVariableDeclaration : localModifierList type classFieldDeclaratorList -> ^( VAR_DECLARATION localModifierList type classFieldDeclaratorList ) ;
    public final JamlAttrHashParser.localVariableDeclaration_return localVariableDeclaration() throws RecognitionException {
    traceIn("localVariableDeclaration", 79);
        JamlAttrHashParser.localVariableDeclaration_return retval = new JamlAttrHashParser.localVariableDeclaration_return();
        retval.start = input.LT(1);
        int localVariableDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.localModifierList_return localModifierList282 = null;

        JamlAttrHashParser.type_return type283 = null;

        JamlAttrHashParser.classFieldDeclaratorList_return classFieldDeclaratorList284 = null;


        RewriteRuleSubtreeStream stream_localModifierList=new RewriteRuleSubtreeStream(adaptor,"rule localModifierList");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_classFieldDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule classFieldDeclaratorList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }
            // ../etc/JamlAttrHash.g:734:5: ( localModifierList type classFieldDeclaratorList -> ^( VAR_DECLARATION localModifierList type classFieldDeclaratorList ) )
            // ../etc/JamlAttrHash.g:734:9: localModifierList type classFieldDeclaratorList
            {
            pushFollow(FOLLOW_localModifierList_in_localVariableDeclaration8926);
            localModifierList282=localModifierList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_localModifierList.add(localModifierList282.getTree());
            pushFollow(FOLLOW_type_in_localVariableDeclaration8928);
            type283=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type283.getTree());
            pushFollow(FOLLOW_classFieldDeclaratorList_in_localVariableDeclaration8930);
            classFieldDeclaratorList284=classFieldDeclaratorList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classFieldDeclaratorList.add(classFieldDeclaratorList284.getTree());


            // AST REWRITE
            // elements: type, localModifierList, classFieldDeclaratorList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 735:9: -> ^( VAR_DECLARATION localModifierList type classFieldDeclaratorList )
            {
                // ../etc/JamlAttrHash.g:735:13: ^( VAR_DECLARATION localModifierList type classFieldDeclaratorList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_DECLARATION, "VAR_DECLARATION"), root_1);

                adaptor.addChild(root_1, stream_localModifierList.nextTree());
                adaptor.addChild(root_1, stream_type.nextTree());
                adaptor.addChild(root_1, stream_classFieldDeclaratorList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("localVariableDeclaration", 79);
            if ( state.backtracking>0 ) { memoize(input, 79, localVariableDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "localVariableDeclaration"

    public static class statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statement"
    // ../etc/JamlAttrHash.g:739:1: statement : ( block | ASSERT expr1= expression ( COLON expr2= expression SEMI -> ^( ASSERT $expr1 $expr2) | SEMI -> ^( ASSERT $expr1) ) | IF parenthesizedExpression ifStat= statement ( ELSE elseStat= statement -> ^( IF parenthesizedExpression $ifStat $elseStat) | -> ^( IF parenthesizedExpression $ifStat) ) | FOR LPAREN ( forInit SEMI forCondition SEMI forUpdater RPAREN statement -> ^( FOR forInit forCondition forUpdater statement ) | localModifierList type IDENT COLON expression RPAREN statement -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement ) ) | WHILE parenthesizedExpression statement -> ^( WHILE parenthesizedExpression statement ) | DO statement WHILE parenthesizedExpression SEMI -> ^( DO statement parenthesizedExpression ) | TRY block ( catches ( finallyClause )? | finallyClause ) -> ^( TRY block ( catches )? ( finallyClause )? ) | SWITCH parenthesizedExpression LCURLY switchBlockLabels RCURLY -> ^( SWITCH parenthesizedExpression switchBlockLabels ) | SYNCHRONIZED parenthesizedExpression block -> ^( SYNCHRONIZED parenthesizedExpression block ) | RETURN ( expression )? SEMI -> ^( RETURN ( expression )? ) | THROW expression SEMI -> ^( THROW expression ) | BREAK ( IDENT )? SEMI -> ^( BREAK ( IDENT )? ) | CONTINUE ( IDENT )? SEMI -> ^( CONTINUE ( IDENT )? ) | IDENT COLON statement -> ^( LABELED_STATEMENT IDENT statement ) | expression SEMI | SEMI );
    public final JamlAttrHashParser.statement_return statement() throws RecognitionException {
    traceIn("statement", 80);
        JamlAttrHashParser.statement_return retval = new JamlAttrHashParser.statement_return();
        retval.start = input.LT(1);
        int statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ASSERT286=null;
        Token COLON287=null;
        Token SEMI288=null;
        Token SEMI289=null;
        Token IF290=null;
        Token ELSE292=null;
        Token FOR293=null;
        Token LPAREN294=null;
        Token SEMI296=null;
        Token SEMI298=null;
        Token RPAREN300=null;
        Token IDENT304=null;
        Token COLON305=null;
        Token RPAREN307=null;
        Token WHILE309=null;
        Token DO312=null;
        Token WHILE314=null;
        Token SEMI316=null;
        Token TRY317=null;
        Token SWITCH322=null;
        Token LCURLY324=null;
        Token RCURLY326=null;
        Token SYNCHRONIZED327=null;
        Token RETURN330=null;
        Token SEMI332=null;
        Token THROW333=null;
        Token SEMI335=null;
        Token BREAK336=null;
        Token IDENT337=null;
        Token SEMI338=null;
        Token CONTINUE339=null;
        Token IDENT340=null;
        Token SEMI341=null;
        Token IDENT342=null;
        Token COLON343=null;
        Token SEMI346=null;
        Token SEMI347=null;
        JamlAttrHashParser.expression_return expr1 = null;

        JamlAttrHashParser.expression_return expr2 = null;

        JamlAttrHashParser.statement_return ifStat = null;

        JamlAttrHashParser.statement_return elseStat = null;

        JamlAttrHashParser.block_return block285 = null;

        JamlAttrHashParser.parenthesizedExpression_return parenthesizedExpression291 = null;

        JamlAttrHashParser.forInit_return forInit295 = null;

        JamlAttrHashParser.forCondition_return forCondition297 = null;

        JamlAttrHashParser.forUpdater_return forUpdater299 = null;

        JamlAttrHashParser.statement_return statement301 = null;

        JamlAttrHashParser.localModifierList_return localModifierList302 = null;

        JamlAttrHashParser.type_return type303 = null;

        JamlAttrHashParser.expression_return expression306 = null;

        JamlAttrHashParser.statement_return statement308 = null;

        JamlAttrHashParser.parenthesizedExpression_return parenthesizedExpression310 = null;

        JamlAttrHashParser.statement_return statement311 = null;

        JamlAttrHashParser.statement_return statement313 = null;

        JamlAttrHashParser.parenthesizedExpression_return parenthesizedExpression315 = null;

        JamlAttrHashParser.block_return block318 = null;

        JamlAttrHashParser.catches_return catches319 = null;

        JamlAttrHashParser.finallyClause_return finallyClause320 = null;

        JamlAttrHashParser.finallyClause_return finallyClause321 = null;

        JamlAttrHashParser.parenthesizedExpression_return parenthesizedExpression323 = null;

        JamlAttrHashParser.switchBlockLabels_return switchBlockLabels325 = null;

        JamlAttrHashParser.parenthesizedExpression_return parenthesizedExpression328 = null;

        JamlAttrHashParser.block_return block329 = null;

        JamlAttrHashParser.expression_return expression331 = null;

        JamlAttrHashParser.expression_return expression334 = null;

        JamlAttrHashParser.statement_return statement344 = null;

        JamlAttrHashParser.expression_return expression345 = null;


        CommonTree ASSERT286_tree=null;
        CommonTree COLON287_tree=null;
        CommonTree SEMI288_tree=null;
        CommonTree SEMI289_tree=null;
        CommonTree IF290_tree=null;
        CommonTree ELSE292_tree=null;
        CommonTree FOR293_tree=null;
        CommonTree LPAREN294_tree=null;
        CommonTree SEMI296_tree=null;
        CommonTree SEMI298_tree=null;
        CommonTree RPAREN300_tree=null;
        CommonTree IDENT304_tree=null;
        CommonTree COLON305_tree=null;
        CommonTree RPAREN307_tree=null;
        CommonTree WHILE309_tree=null;
        CommonTree DO312_tree=null;
        CommonTree WHILE314_tree=null;
        CommonTree SEMI316_tree=null;
        CommonTree TRY317_tree=null;
        CommonTree SWITCH322_tree=null;
        CommonTree LCURLY324_tree=null;
        CommonTree RCURLY326_tree=null;
        CommonTree SYNCHRONIZED327_tree=null;
        CommonTree RETURN330_tree=null;
        CommonTree SEMI332_tree=null;
        CommonTree THROW333_tree=null;
        CommonTree SEMI335_tree=null;
        CommonTree BREAK336_tree=null;
        CommonTree IDENT337_tree=null;
        CommonTree SEMI338_tree=null;
        CommonTree CONTINUE339_tree=null;
        CommonTree IDENT340_tree=null;
        CommonTree SEMI341_tree=null;
        CommonTree IDENT342_tree=null;
        CommonTree COLON343_tree=null;
        CommonTree SEMI346_tree=null;
        CommonTree SEMI347_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_SYNCHRONIZED=new RewriteRuleTokenStream(adaptor,"token SYNCHRONIZED");
        RewriteRuleTokenStream stream_WHILE=new RewriteRuleTokenStream(adaptor,"token WHILE");
        RewriteRuleTokenStream stream_CONTINUE=new RewriteRuleTokenStream(adaptor,"token CONTINUE");
        RewriteRuleTokenStream stream_SWITCH=new RewriteRuleTokenStream(adaptor,"token SWITCH");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleTokenStream stream_ELSE=new RewriteRuleTokenStream(adaptor,"token ELSE");
        RewriteRuleTokenStream stream_RETURN=new RewriteRuleTokenStream(adaptor,"token RETURN");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_FOR=new RewriteRuleTokenStream(adaptor,"token FOR");
        RewriteRuleTokenStream stream_DO=new RewriteRuleTokenStream(adaptor,"token DO");
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_ASSERT=new RewriteRuleTokenStream(adaptor,"token ASSERT");
        RewriteRuleTokenStream stream_BREAK=new RewriteRuleTokenStream(adaptor,"token BREAK");
        RewriteRuleTokenStream stream_THROW=new RewriteRuleTokenStream(adaptor,"token THROW");
        RewriteRuleTokenStream stream_TRY=new RewriteRuleTokenStream(adaptor,"token TRY");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_IF=new RewriteRuleTokenStream(adaptor,"token IF");
        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_finallyClause=new RewriteRuleSubtreeStream(adaptor,"rule finallyClause");
        RewriteRuleSubtreeStream stream_catches=new RewriteRuleSubtreeStream(adaptor,"rule catches");
        RewriteRuleSubtreeStream stream_forUpdater=new RewriteRuleSubtreeStream(adaptor,"rule forUpdater");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        RewriteRuleSubtreeStream stream_forCondition=new RewriteRuleSubtreeStream(adaptor,"rule forCondition");
        RewriteRuleSubtreeStream stream_localModifierList=new RewriteRuleSubtreeStream(adaptor,"rule localModifierList");
        RewriteRuleSubtreeStream stream_forInit=new RewriteRuleSubtreeStream(adaptor,"rule forInit");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_switchBlockLabels=new RewriteRuleSubtreeStream(adaptor,"rule switchBlockLabels");
        RewriteRuleSubtreeStream stream_parenthesizedExpression=new RewriteRuleSubtreeStream(adaptor,"rule parenthesizedExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }
            // ../etc/JamlAttrHash.g:740:5: ( block | ASSERT expr1= expression ( COLON expr2= expression SEMI -> ^( ASSERT $expr1 $expr2) | SEMI -> ^( ASSERT $expr1) ) | IF parenthesizedExpression ifStat= statement ( ELSE elseStat= statement -> ^( IF parenthesizedExpression $ifStat $elseStat) | -> ^( IF parenthesizedExpression $ifStat) ) | FOR LPAREN ( forInit SEMI forCondition SEMI forUpdater RPAREN statement -> ^( FOR forInit forCondition forUpdater statement ) | localModifierList type IDENT COLON expression RPAREN statement -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement ) ) | WHILE parenthesizedExpression statement -> ^( WHILE parenthesizedExpression statement ) | DO statement WHILE parenthesizedExpression SEMI -> ^( DO statement parenthesizedExpression ) | TRY block ( catches ( finallyClause )? | finallyClause ) -> ^( TRY block ( catches )? ( finallyClause )? ) | SWITCH parenthesizedExpression LCURLY switchBlockLabels RCURLY -> ^( SWITCH parenthesizedExpression switchBlockLabels ) | SYNCHRONIZED parenthesizedExpression block -> ^( SYNCHRONIZED parenthesizedExpression block ) | RETURN ( expression )? SEMI -> ^( RETURN ( expression )? ) | THROW expression SEMI -> ^( THROW expression ) | BREAK ( IDENT )? SEMI -> ^( BREAK ( IDENT )? ) | CONTINUE ( IDENT )? SEMI -> ^( CONTINUE ( IDENT )? ) | IDENT COLON statement -> ^( LABELED_STATEMENT IDENT statement ) | expression SEMI | SEMI )
            int alt101=16;
            alt101 = dfa101.predict(input);
            switch (alt101) {
                case 1 :
                    // ../etc/JamlAttrHash.g:740:9: block
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_block_in_statement8983);
                    block285=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block285.getTree());

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:741:9: ASSERT expr1= expression ( COLON expr2= expression SEMI -> ^( ASSERT $expr1 $expr2) | SEMI -> ^( ASSERT $expr1) )
                    {
                    ASSERT286=(Token)match(input,ASSERT,FOLLOW_ASSERT_in_statement8993); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSERT.add(ASSERT286);

                    pushFollow(FOLLOW_expression_in_statement8997);
                    expr1=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expr1.getTree());
                    // ../etc/JamlAttrHash.g:742:9: ( COLON expr2= expression SEMI -> ^( ASSERT $expr1 $expr2) | SEMI -> ^( ASSERT $expr1) )
                    int alt93=2;
                    int LA93_0 = input.LA(1);

                    if ( (LA93_0==COLON) ) {
                        alt93=1;
                    }
                    else if ( (LA93_0==SEMI) ) {
                        alt93=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 93, 0, input);

                        throw nvae;
                    }
                    switch (alt93) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:742:13: COLON expr2= expression SEMI
                            {
                            COLON287=(Token)match(input,COLON,FOLLOW_COLON_in_statement9012); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(COLON287);

                            pushFollow(FOLLOW_expression_in_statement9016);
                            expr2=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expr2.getTree());
                            SEMI288=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement9018); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMI.add(SEMI288);



                            // AST REWRITE
                            // elements: expr1, ASSERT, expr2
                            // token labels: 
                            // rule labels: retval, expr1, expr2
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            RewriteRuleSubtreeStream stream_expr1=new RewriteRuleSubtreeStream(adaptor,"rule expr1",expr1!=null?expr1.tree:null);
                            RewriteRuleSubtreeStream stream_expr2=new RewriteRuleSubtreeStream(adaptor,"rule expr2",expr2!=null?expr2.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 742:77: -> ^( ASSERT $expr1 $expr2)
                            {
                                // ../etc/JamlAttrHash.g:742:81: ^( ASSERT $expr1 $expr2)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_ASSERT.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_expr1.nextTree());
                                adaptor.addChild(root_1, stream_expr2.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // ../etc/JamlAttrHash.g:743:13: SEMI
                            {
                            SEMI289=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement9081); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMI.add(SEMI289);



                            // AST REWRITE
                            // elements: expr1, ASSERT
                            // token labels: 
                            // rule labels: retval, expr1
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            RewriteRuleSubtreeStream stream_expr1=new RewriteRuleSubtreeStream(adaptor,"rule expr1",expr1!=null?expr1.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 743:77: -> ^( ASSERT $expr1)
                            {
                                // ../etc/JamlAttrHash.g:743:81: ^( ASSERT $expr1)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_ASSERT.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_expr1.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // ../etc/JamlAttrHash.g:745:9: IF parenthesizedExpression ifStat= statement ( ELSE elseStat= statement -> ^( IF parenthesizedExpression $ifStat $elseStat) | -> ^( IF parenthesizedExpression $ifStat) )
                    {
                    IF290=(Token)match(input,IF,FOLLOW_IF_in_statement9170); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IF.add(IF290);

                    pushFollow(FOLLOW_parenthesizedExpression_in_statement9172);
                    parenthesizedExpression291=parenthesizedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parenthesizedExpression.add(parenthesizedExpression291.getTree());
                    pushFollow(FOLLOW_statement_in_statement9176);
                    ifStat=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(ifStat.getTree());
                    // ../etc/JamlAttrHash.g:746:9: ( ELSE elseStat= statement -> ^( IF parenthesizedExpression $ifStat $elseStat) | -> ^( IF parenthesizedExpression $ifStat) )
                    int alt94=2;
                    int LA94_0 = input.LA(1);

                    if ( (LA94_0==ELSE) ) {
                        int LA94_1 = input.LA(2);

                        if ( (synpred133_JamlAttrHash()) ) {
                            alt94=1;
                        }
                        else if ( (true) ) {
                            alt94=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 94, 1, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA94_0==EOF||LA94_0==AT||LA94_0==DEC||LA94_0==INC||LA94_0==LCURLY||LA94_0==LESS_THAN||LA94_0==LOGICAL_NOT||(LA94_0>=LPAREN && LA94_0<=MINUS)||LA94_0==NOT||LA94_0==PLUS||LA94_0==RCURLY||LA94_0==SEMI||(LA94_0>=ABSTRACT && LA94_0<=CASE)||(LA94_0>=CHAR && LA94_0<=DOUBLE)||LA94_0==ENUM||(LA94_0>=FALSE && LA94_0<=FINAL)||(LA94_0>=FLOAT && LA94_0<=IF)||LA94_0==INTERFACE||(LA94_0>=INT && LA94_0<=NULL)||(LA94_0>=PRIVATE && LA94_0<=THROW)||(LA94_0>=TRANSIENT && LA94_0<=WHILE)||(LA94_0>=IDENT && LA94_0<=STRING_LITERAL)) ) {
                        alt94=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 94, 0, input);

                        throw nvae;
                    }
                    switch (alt94) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:746:13: ELSE elseStat= statement
                            {
                            ELSE292=(Token)match(input,ELSE,FOLLOW_ELSE_in_statement9191); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_ELSE.add(ELSE292);

                            pushFollow(FOLLOW_statement_in_statement9195);
                            elseStat=statement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_statement.add(elseStat.getTree());


                            // AST REWRITE
                            // elements: IF, ifStat, elseStat, parenthesizedExpression
                            // token labels: 
                            // rule labels: retval, ifStat, elseStat
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            RewriteRuleSubtreeStream stream_ifStat=new RewriteRuleSubtreeStream(adaptor,"rule ifStat",ifStat!=null?ifStat.tree:null);
                            RewriteRuleSubtreeStream stream_elseStat=new RewriteRuleSubtreeStream(adaptor,"rule elseStat",elseStat!=null?elseStat.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 746:77: -> ^( IF parenthesizedExpression $ifStat $elseStat)
                            {
                                // ../etc/JamlAttrHash.g:746:81: ^( IF parenthesizedExpression $ifStat $elseStat)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_IF.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_parenthesizedExpression.nextTree());
                                adaptor.addChild(root_1, stream_ifStat.nextTree());
                                adaptor.addChild(root_1, stream_elseStat.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // ../etc/JamlAttrHash.g:747:77: 
                            {

                            // AST REWRITE
                            // elements: parenthesizedExpression, IF, ifStat
                            // token labels: 
                            // rule labels: retval, ifStat
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            RewriteRuleSubtreeStream stream_ifStat=new RewriteRuleSubtreeStream(adaptor,"rule ifStat",ifStat!=null?ifStat.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 747:77: -> ^( IF parenthesizedExpression $ifStat)
                            {
                                // ../etc/JamlAttrHash.g:747:81: ^( IF parenthesizedExpression $ifStat)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_IF.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_parenthesizedExpression.nextTree());
                                adaptor.addChild(root_1, stream_ifStat.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // ../etc/JamlAttrHash.g:749:9: FOR LPAREN ( forInit SEMI forCondition SEMI forUpdater RPAREN statement -> ^( FOR forInit forCondition forUpdater statement ) | localModifierList type IDENT COLON expression RPAREN statement -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement ) )
                    {
                    FOR293=(Token)match(input,FOR,FOLLOW_FOR_in_statement9361); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOR.add(FOR293);

                    LPAREN294=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_statement9363); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN294);

                    // ../etc/JamlAttrHash.g:750:9: ( forInit SEMI forCondition SEMI forUpdater RPAREN statement -> ^( FOR forInit forCondition forUpdater statement ) | localModifierList type IDENT COLON expression RPAREN statement -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement ) )
                    int alt95=2;
                    alt95 = dfa95.predict(input);
                    switch (alt95) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:750:13: forInit SEMI forCondition SEMI forUpdater RPAREN statement
                            {
                            pushFollow(FOLLOW_forInit_in_statement9378);
                            forInit295=forInit();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_forInit.add(forInit295.getTree());
                            SEMI296=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement9380); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMI.add(SEMI296);

                            pushFollow(FOLLOW_forCondition_in_statement9382);
                            forCondition297=forCondition();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_forCondition.add(forCondition297.getTree());
                            SEMI298=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement9384); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMI.add(SEMI298);

                            pushFollow(FOLLOW_forUpdater_in_statement9386);
                            forUpdater299=forUpdater();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_forUpdater.add(forUpdater299.getTree());
                            RPAREN300=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_statement9388); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN300);

                            pushFollow(FOLLOW_statement_in_statement9390);
                            statement301=statement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_statement.add(statement301.getTree());


                            // AST REWRITE
                            // elements: forUpdater, forInit, FOR, statement, forCondition
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 750:77: -> ^( FOR forInit forCondition forUpdater statement )
                            {
                                // ../etc/JamlAttrHash.g:750:81: ^( FOR forInit forCondition forUpdater statement )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_FOR.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_forInit.nextTree());
                                adaptor.addChild(root_1, stream_forCondition.nextTree());
                                adaptor.addChild(root_1, stream_forUpdater.nextTree());
                                adaptor.addChild(root_1, stream_statement.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // ../etc/JamlAttrHash.g:751:13: localModifierList type IDENT COLON expression RPAREN statement
                            {
                            pushFollow(FOLLOW_localModifierList_in_statement9425);
                            localModifierList302=localModifierList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_localModifierList.add(localModifierList302.getTree());
                            pushFollow(FOLLOW_type_in_statement9427);
                            type303=type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_type.add(type303.getTree());
                            IDENT304=(Token)match(input,IDENT,FOLLOW_IDENT_in_statement9429); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(IDENT304);

                            COLON305=(Token)match(input,COLON,FOLLOW_COLON_in_statement9431); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(COLON305);

                            pushFollow(FOLLOW_expression_in_statement9433);
                            expression306=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression306.getTree());
                            RPAREN307=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_statement9435); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN307);

                            pushFollow(FOLLOW_statement_in_statement9437);
                            statement308=statement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_statement.add(statement308.getTree());


                            // AST REWRITE
                            // elements: IDENT, expression, localModifierList, statement, type
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 752:77: -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement )
                            {
                                // ../etc/JamlAttrHash.g:752:81: ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOR_EACH, FOR293, "FOR_EACH"), root_1);

                                adaptor.addChild(root_1, stream_localModifierList.nextTree());
                                adaptor.addChild(root_1, stream_type.nextTree());
                                adaptor.addChild(root_1, stream_IDENT.nextNode());
                                adaptor.addChild(root_1, stream_expression.nextTree());
                                adaptor.addChild(root_1, stream_statement.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 5 :
                    // ../etc/JamlAttrHash.g:754:9: WHILE parenthesizedExpression statement
                    {
                    WHILE309=(Token)match(input,WHILE,FOLLOW_WHILE_in_statement9552); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHILE.add(WHILE309);

                    pushFollow(FOLLOW_parenthesizedExpression_in_statement9554);
                    parenthesizedExpression310=parenthesizedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parenthesizedExpression.add(parenthesizedExpression310.getTree());
                    pushFollow(FOLLOW_statement_in_statement9556);
                    statement311=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement311.getTree());


                    // AST REWRITE
                    // elements: parenthesizedExpression, statement, WHILE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 754:77: -> ^( WHILE parenthesizedExpression statement )
                    {
                        // ../etc/JamlAttrHash.g:754:81: ^( WHILE parenthesizedExpression statement )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_WHILE.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_parenthesizedExpression.nextTree());
                        adaptor.addChild(root_1, stream_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // ../etc/JamlAttrHash.g:755:9: DO statement WHILE parenthesizedExpression SEMI
                    {
                    DO312=(Token)match(input,DO,FOLLOW_DO_in_statement9605); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DO.add(DO312);

                    pushFollow(FOLLOW_statement_in_statement9607);
                    statement313=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement313.getTree());
                    WHILE314=(Token)match(input,WHILE,FOLLOW_WHILE_in_statement9609); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHILE.add(WHILE314);

                    pushFollow(FOLLOW_parenthesizedExpression_in_statement9611);
                    parenthesizedExpression315=parenthesizedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parenthesizedExpression.add(parenthesizedExpression315.getTree());
                    SEMI316=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement9613); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI316);



                    // AST REWRITE
                    // elements: DO, parenthesizedExpression, statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 755:77: -> ^( DO statement parenthesizedExpression )
                    {
                        // ../etc/JamlAttrHash.g:755:81: ^( DO statement parenthesizedExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_DO.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_statement.nextTree());
                        adaptor.addChild(root_1, stream_parenthesizedExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    // ../etc/JamlAttrHash.g:756:9: TRY block ( catches ( finallyClause )? | finallyClause )
                    {
                    TRY317=(Token)match(input,TRY,FOLLOW_TRY_in_statement9654); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TRY.add(TRY317);

                    pushFollow(FOLLOW_block_in_statement9656);
                    block318=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block318.getTree());
                    // ../etc/JamlAttrHash.g:756:19: ( catches ( finallyClause )? | finallyClause )
                    int alt97=2;
                    int LA97_0 = input.LA(1);

                    if ( (LA97_0==CATCH) ) {
                        alt97=1;
                    }
                    else if ( (LA97_0==FINALLY) ) {
                        alt97=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 97, 0, input);

                        throw nvae;
                    }
                    switch (alt97) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:756:20: catches ( finallyClause )?
                            {
                            pushFollow(FOLLOW_catches_in_statement9659);
                            catches319=catches();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_catches.add(catches319.getTree());
                            // ../etc/JamlAttrHash.g:756:28: ( finallyClause )?
                            int alt96=2;
                            int LA96_0 = input.LA(1);

                            if ( (LA96_0==FINALLY) ) {
                                alt96=1;
                            }
                            switch (alt96) {
                                case 1 :
                                    // ../etc/JamlAttrHash.g:0:0: finallyClause
                                    {
                                    pushFollow(FOLLOW_finallyClause_in_statement9661);
                                    finallyClause320=finallyClause();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_finallyClause.add(finallyClause320.getTree());

                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // ../etc/JamlAttrHash.g:756:45: finallyClause
                            {
                            pushFollow(FOLLOW_finallyClause_in_statement9666);
                            finallyClause321=finallyClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_finallyClause.add(finallyClause321.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: TRY, block, finallyClause, catches
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 756:77: -> ^( TRY block ( catches )? ( finallyClause )? )
                    {
                        // ../etc/JamlAttrHash.g:756:81: ^( TRY block ( catches )? ( finallyClause )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_TRY.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_block.nextTree());
                        // ../etc/JamlAttrHash.g:756:93: ( catches )?
                        if ( stream_catches.hasNext() ) {
                            adaptor.addChild(root_1, stream_catches.nextTree());

                        }
                        stream_catches.reset();
                        // ../etc/JamlAttrHash.g:756:102: ( finallyClause )?
                        if ( stream_finallyClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_finallyClause.nextTree());

                        }
                        stream_finallyClause.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 8 :
                    // ../etc/JamlAttrHash.g:757:9: SWITCH parenthesizedExpression LCURLY switchBlockLabels RCURLY
                    {
                    SWITCH322=(Token)match(input,SWITCH,FOLLOW_SWITCH_in_statement9709); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SWITCH.add(SWITCH322);

                    pushFollow(FOLLOW_parenthesizedExpression_in_statement9711);
                    parenthesizedExpression323=parenthesizedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parenthesizedExpression.add(parenthesizedExpression323.getTree());
                    LCURLY324=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_statement9713); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY324);

                    pushFollow(FOLLOW_switchBlockLabels_in_statement9715);
                    switchBlockLabels325=switchBlockLabels();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_switchBlockLabels.add(switchBlockLabels325.getTree());
                    RCURLY326=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_statement9717); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY326);



                    // AST REWRITE
                    // elements: parenthesizedExpression, switchBlockLabels, SWITCH
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 757:77: -> ^( SWITCH parenthesizedExpression switchBlockLabels )
                    {
                        // ../etc/JamlAttrHash.g:757:81: ^( SWITCH parenthesizedExpression switchBlockLabels )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_SWITCH.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_parenthesizedExpression.nextTree());
                        adaptor.addChild(root_1, stream_switchBlockLabels.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 9 :
                    // ../etc/JamlAttrHash.g:758:9: SYNCHRONIZED parenthesizedExpression block
                    {
                    SYNCHRONIZED327=(Token)match(input,SYNCHRONIZED,FOLLOW_SYNCHRONIZED_in_statement9743); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SYNCHRONIZED.add(SYNCHRONIZED327);

                    pushFollow(FOLLOW_parenthesizedExpression_in_statement9745);
                    parenthesizedExpression328=parenthesizedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parenthesizedExpression.add(parenthesizedExpression328.getTree());
                    pushFollow(FOLLOW_block_in_statement9747);
                    block329=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block329.getTree());


                    // AST REWRITE
                    // elements: SYNCHRONIZED, block, parenthesizedExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 758:77: -> ^( SYNCHRONIZED parenthesizedExpression block )
                    {
                        // ../etc/JamlAttrHash.g:758:81: ^( SYNCHRONIZED parenthesizedExpression block )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_SYNCHRONIZED.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_parenthesizedExpression.nextTree());
                        adaptor.addChild(root_1, stream_block.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 10 :
                    // ../etc/JamlAttrHash.g:759:9: RETURN ( expression )? SEMI
                    {
                    RETURN330=(Token)match(input,RETURN,FOLLOW_RETURN_in_statement9793); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETURN.add(RETURN330);

                    // ../etc/JamlAttrHash.g:759:16: ( expression )?
                    int alt98=2;
                    int LA98_0 = input.LA(1);

                    if ( (LA98_0==DEC||LA98_0==INC||LA98_0==LESS_THAN||LA98_0==LOGICAL_NOT||(LA98_0>=LPAREN && LA98_0<=MINUS)||LA98_0==NOT||LA98_0==PLUS||LA98_0==BOOLEAN||LA98_0==BYTE||LA98_0==CHAR||LA98_0==DOUBLE||LA98_0==FALSE||LA98_0==FLOAT||(LA98_0>=INT && LA98_0<=LONG)||(LA98_0>=NEW && LA98_0<=NULL)||LA98_0==SHORT||LA98_0==SUPER||LA98_0==THIS||LA98_0==TRUE||LA98_0==VOID||(LA98_0>=IDENT && LA98_0<=STRING_LITERAL)) ) {
                        alt98=1;
                    }
                    switch (alt98) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:0:0: expression
                            {
                            pushFollow(FOLLOW_expression_in_statement9795);
                            expression331=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression331.getTree());

                            }
                            break;

                    }

                    SEMI332=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement9798); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI332);



                    // AST REWRITE
                    // elements: expression, RETURN
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 759:77: -> ^( RETURN ( expression )? )
                    {
                        // ../etc/JamlAttrHash.g:759:81: ^( RETURN ( expression )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_RETURN.nextNode(), root_1);

                        // ../etc/JamlAttrHash.g:759:90: ( expression )?
                        if ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());

                        }
                        stream_expression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 11 :
                    // ../etc/JamlAttrHash.g:760:9: THROW expression SEMI
                    {
                    THROW333=(Token)match(input,THROW,FOLLOW_THROW_in_statement9862); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_THROW.add(THROW333);

                    pushFollow(FOLLOW_expression_in_statement9864);
                    expression334=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression334.getTree());
                    SEMI335=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement9866); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI335);



                    // AST REWRITE
                    // elements: expression, THROW
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 760:77: -> ^( THROW expression )
                    {
                        // ../etc/JamlAttrHash.g:760:81: ^( THROW expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_THROW.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 12 :
                    // ../etc/JamlAttrHash.g:761:9: BREAK ( IDENT )? SEMI
                    {
                    BREAK336=(Token)match(input,BREAK,FOLLOW_BREAK_in_statement9931); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BREAK.add(BREAK336);

                    // ../etc/JamlAttrHash.g:761:15: ( IDENT )?
                    int alt99=2;
                    int LA99_0 = input.LA(1);

                    if ( (LA99_0==IDENT) ) {
                        alt99=1;
                    }
                    switch (alt99) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:0:0: IDENT
                            {
                            IDENT337=(Token)match(input,IDENT,FOLLOW_IDENT_in_statement9933); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(IDENT337);


                            }
                            break;

                    }

                    SEMI338=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement9936); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI338);



                    // AST REWRITE
                    // elements: IDENT, BREAK
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 761:77: -> ^( BREAK ( IDENT )? )
                    {
                        // ../etc/JamlAttrHash.g:761:81: ^( BREAK ( IDENT )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_BREAK.nextNode(), root_1);

                        // ../etc/JamlAttrHash.g:761:89: ( IDENT )?
                        if ( stream_IDENT.hasNext() ) {
                            adaptor.addChild(root_1, stream_IDENT.nextNode());

                        }
                        stream_IDENT.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 13 :
                    // ../etc/JamlAttrHash.g:762:9: CONTINUE ( IDENT )? SEMI
                    {
                    CONTINUE339=(Token)match(input,CONTINUE,FOLLOW_CONTINUE_in_statement10006); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CONTINUE.add(CONTINUE339);

                    // ../etc/JamlAttrHash.g:762:18: ( IDENT )?
                    int alt100=2;
                    int LA100_0 = input.LA(1);

                    if ( (LA100_0==IDENT) ) {
                        alt100=1;
                    }
                    switch (alt100) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:0:0: IDENT
                            {
                            IDENT340=(Token)match(input,IDENT,FOLLOW_IDENT_in_statement10008); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(IDENT340);


                            }
                            break;

                    }

                    SEMI341=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement10011); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI341);



                    // AST REWRITE
                    // elements: CONTINUE, IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 762:77: -> ^( CONTINUE ( IDENT )? )
                    {
                        // ../etc/JamlAttrHash.g:762:81: ^( CONTINUE ( IDENT )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_CONTINUE.nextNode(), root_1);

                        // ../etc/JamlAttrHash.g:762:92: ( IDENT )?
                        if ( stream_IDENT.hasNext() ) {
                            adaptor.addChild(root_1, stream_IDENT.nextNode());

                        }
                        stream_IDENT.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 14 :
                    // ../etc/JamlAttrHash.g:763:9: IDENT COLON statement
                    {
                    IDENT342=(Token)match(input,IDENT,FOLLOW_IDENT_in_statement10078); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT342);

                    COLON343=(Token)match(input,COLON,FOLLOW_COLON_in_statement10080); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(COLON343);

                    pushFollow(FOLLOW_statement_in_statement10082);
                    statement344=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement344.getTree());


                    // AST REWRITE
                    // elements: IDENT, statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 763:77: -> ^( LABELED_STATEMENT IDENT statement )
                    {
                        // ../etc/JamlAttrHash.g:763:81: ^( LABELED_STATEMENT IDENT statement )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LABELED_STATEMENT, "LABELED_STATEMENT"), root_1);

                        adaptor.addChild(root_1, stream_IDENT.nextNode());
                        adaptor.addChild(root_1, stream_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 15 :
                    // ../etc/JamlAttrHash.g:764:9: expression SEMI
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expression_in_statement10149);
                    expression345=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression345.getTree());
                    SEMI346=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement10151); if (state.failed) return retval;

                    }
                    break;
                case 16 :
                    // ../etc/JamlAttrHash.g:765:9: SEMI
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SEMI347=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement10162); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMI347_tree = (CommonTree)adaptor.create(SEMI347);
                    adaptor.addChild(root_0, SEMI347_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("statement", 80);
            if ( state.backtracking>0 ) { memoize(input, 80, statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "statement"

    public static class catches_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "catches"
    // ../etc/JamlAttrHash.g:768:1: catches : ( catchClause )+ -> ^( CATCH_CLAUSE_LIST ( catchClause )+ ) ;
    public final JamlAttrHashParser.catches_return catches() throws RecognitionException {
    traceIn("catches", 81);
        JamlAttrHashParser.catches_return retval = new JamlAttrHashParser.catches_return();
        retval.start = input.LT(1);
        int catches_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.catchClause_return catchClause348 = null;


        RewriteRuleSubtreeStream stream_catchClause=new RewriteRuleSubtreeStream(adaptor,"rule catchClause");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }
            // ../etc/JamlAttrHash.g:769:5: ( ( catchClause )+ -> ^( CATCH_CLAUSE_LIST ( catchClause )+ ) )
            // ../etc/JamlAttrHash.g:769:9: ( catchClause )+
            {
            // ../etc/JamlAttrHash.g:769:9: ( catchClause )+
            int cnt102=0;
            loop102:
            do {
                int alt102=2;
                int LA102_0 = input.LA(1);

                if ( (LA102_0==CATCH) ) {
                    alt102=1;
                }


                switch (alt102) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:0:0: catchClause
            	    {
            	    pushFollow(FOLLOW_catchClause_in_catches10201);
            	    catchClause348=catchClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_catchClause.add(catchClause348.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt102 >= 1 ) break loop102;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(102, input);
                        throw eee;
                }
                cnt102++;
            } while (true);



            // AST REWRITE
            // elements: catchClause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 770:9: -> ^( CATCH_CLAUSE_LIST ( catchClause )+ )
            {
                // ../etc/JamlAttrHash.g:770:13: ^( CATCH_CLAUSE_LIST ( catchClause )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CATCH_CLAUSE_LIST, "CATCH_CLAUSE_LIST"), root_1);

                if ( !(stream_catchClause.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_catchClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_catchClause.nextTree());

                }
                stream_catchClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("catches", 81);
            if ( state.backtracking>0 ) { memoize(input, 81, catches_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "catches"

    public static class catchClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "catchClause"
    // ../etc/JamlAttrHash.g:773:1: catchClause : CATCH LPAREN formalParameterStandardDecl RPAREN block ;
    public final JamlAttrHashParser.catchClause_return catchClause() throws RecognitionException {
    traceIn("catchClause", 82);
        JamlAttrHashParser.catchClause_return retval = new JamlAttrHashParser.catchClause_return();
        retval.start = input.LT(1);
        int catchClause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token CATCH349=null;
        Token LPAREN350=null;
        Token RPAREN352=null;
        JamlAttrHashParser.formalParameterStandardDecl_return formalParameterStandardDecl351 = null;

        JamlAttrHashParser.block_return block353 = null;


        CommonTree CATCH349_tree=null;
        CommonTree LPAREN350_tree=null;
        CommonTree RPAREN352_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }
            // ../etc/JamlAttrHash.g:774:5: ( CATCH LPAREN formalParameterStandardDecl RPAREN block )
            // ../etc/JamlAttrHash.g:774:9: CATCH LPAREN formalParameterStandardDecl RPAREN block
            {
            root_0 = (CommonTree)adaptor.nil();

            CATCH349=(Token)match(input,CATCH,FOLLOW_CATCH_in_catchClause10243); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CATCH349_tree = (CommonTree)adaptor.create(CATCH349);
            root_0 = (CommonTree)adaptor.becomeRoot(CATCH349_tree, root_0);
            }
            LPAREN350=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_catchClause10246); if (state.failed) return retval;
            pushFollow(FOLLOW_formalParameterStandardDecl_in_catchClause10249);
            formalParameterStandardDecl351=formalParameterStandardDecl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameterStandardDecl351.getTree());
            RPAREN352=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_catchClause10251); if (state.failed) return retval;
            pushFollow(FOLLOW_block_in_catchClause10254);
            block353=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block353.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("catchClause", 82);
            if ( state.backtracking>0 ) { memoize(input, 82, catchClause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "catchClause"

    public static class finallyClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "finallyClause"
    // ../etc/JamlAttrHash.g:777:1: finallyClause : FINALLY block -> block ;
    public final JamlAttrHashParser.finallyClause_return finallyClause() throws RecognitionException {
    traceIn("finallyClause", 83);
        JamlAttrHashParser.finallyClause_return retval = new JamlAttrHashParser.finallyClause_return();
        retval.start = input.LT(1);
        int finallyClause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token FINALLY354=null;
        JamlAttrHashParser.block_return block355 = null;


        CommonTree FINALLY354_tree=null;
        RewriteRuleTokenStream stream_FINALLY=new RewriteRuleTokenStream(adaptor,"token FINALLY");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }
            // ../etc/JamlAttrHash.g:778:5: ( FINALLY block -> block )
            // ../etc/JamlAttrHash.g:778:9: FINALLY block
            {
            FINALLY354=(Token)match(input,FINALLY,FOLLOW_FINALLY_in_finallyClause10273); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FINALLY.add(FINALLY354);

            pushFollow(FOLLOW_block_in_finallyClause10275);
            block355=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block355.getTree());


            // AST REWRITE
            // elements: block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 779:9: -> block
            {
                adaptor.addChild(root_0, stream_block.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("finallyClause", 83);
            if ( state.backtracking>0 ) { memoize(input, 83, finallyClause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "finallyClause"

    public static class switchBlockLabels_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchBlockLabels"
    // ../etc/JamlAttrHash.g:782:1: switchBlockLabels : switchCaseLabels ( switchDefaultLabel )? switchCaseLabels -> ^( SWITCH_BLOCK_LABEL_LIST switchCaseLabels ( switchDefaultLabel )? switchCaseLabels ) ;
    public final JamlAttrHashParser.switchBlockLabels_return switchBlockLabels() throws RecognitionException {
    traceIn("switchBlockLabels", 84);
        JamlAttrHashParser.switchBlockLabels_return retval = new JamlAttrHashParser.switchBlockLabels_return();
        retval.start = input.LT(1);
        int switchBlockLabels_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.switchCaseLabels_return switchCaseLabels356 = null;

        JamlAttrHashParser.switchDefaultLabel_return switchDefaultLabel357 = null;

        JamlAttrHashParser.switchCaseLabels_return switchCaseLabels358 = null;


        RewriteRuleSubtreeStream stream_switchDefaultLabel=new RewriteRuleSubtreeStream(adaptor,"rule switchDefaultLabel");
        RewriteRuleSubtreeStream stream_switchCaseLabels=new RewriteRuleSubtreeStream(adaptor,"rule switchCaseLabels");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }
            // ../etc/JamlAttrHash.g:783:5: ( switchCaseLabels ( switchDefaultLabel )? switchCaseLabels -> ^( SWITCH_BLOCK_LABEL_LIST switchCaseLabels ( switchDefaultLabel )? switchCaseLabels ) )
            // ../etc/JamlAttrHash.g:783:9: switchCaseLabels ( switchDefaultLabel )? switchCaseLabels
            {
            pushFollow(FOLLOW_switchCaseLabels_in_switchBlockLabels10307);
            switchCaseLabels356=switchCaseLabels();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_switchCaseLabels.add(switchCaseLabels356.getTree());
            // ../etc/JamlAttrHash.g:783:26: ( switchDefaultLabel )?
            int alt103=2;
            int LA103_0 = input.LA(1);

            if ( (LA103_0==DEFAULT) ) {
                alt103=1;
            }
            switch (alt103) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: switchDefaultLabel
                    {
                    pushFollow(FOLLOW_switchDefaultLabel_in_switchBlockLabels10309);
                    switchDefaultLabel357=switchDefaultLabel();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_switchDefaultLabel.add(switchDefaultLabel357.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_switchCaseLabels_in_switchBlockLabels10312);
            switchCaseLabels358=switchCaseLabels();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_switchCaseLabels.add(switchCaseLabels358.getTree());


            // AST REWRITE
            // elements: switchDefaultLabel, switchCaseLabels, switchCaseLabels
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 784:9: -> ^( SWITCH_BLOCK_LABEL_LIST switchCaseLabels ( switchDefaultLabel )? switchCaseLabels )
            {
                // ../etc/JamlAttrHash.g:784:13: ^( SWITCH_BLOCK_LABEL_LIST switchCaseLabels ( switchDefaultLabel )? switchCaseLabels )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SWITCH_BLOCK_LABEL_LIST, "SWITCH_BLOCK_LABEL_LIST"), root_1);

                adaptor.addChild(root_1, stream_switchCaseLabels.nextTree());
                // ../etc/JamlAttrHash.g:784:56: ( switchDefaultLabel )?
                if ( stream_switchDefaultLabel.hasNext() ) {
                    adaptor.addChild(root_1, stream_switchDefaultLabel.nextTree());

                }
                stream_switchDefaultLabel.reset();
                adaptor.addChild(root_1, stream_switchCaseLabels.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("switchBlockLabels", 84);
            if ( state.backtracking>0 ) { memoize(input, 84, switchBlockLabels_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchBlockLabels"

    public static class switchCaseLabels_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchCaseLabels"
    // ../etc/JamlAttrHash.g:787:1: switchCaseLabels : ( switchCaseLabel )* ;
    public final JamlAttrHashParser.switchCaseLabels_return switchCaseLabels() throws RecognitionException {
    traceIn("switchCaseLabels", 85);
        JamlAttrHashParser.switchCaseLabels_return retval = new JamlAttrHashParser.switchCaseLabels_return();
        retval.start = input.LT(1);
        int switchCaseLabels_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.switchCaseLabel_return switchCaseLabel359 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }
            // ../etc/JamlAttrHash.g:788:5: ( ( switchCaseLabel )* )
            // ../etc/JamlAttrHash.g:788:9: ( switchCaseLabel )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // ../etc/JamlAttrHash.g:788:9: ( switchCaseLabel )*
            loop104:
            do {
                int alt104=2;
                int LA104_0 = input.LA(1);

                if ( (LA104_0==CASE) ) {
                    int LA104_2 = input.LA(2);

                    if ( (synpred155_JamlAttrHash()) ) {
                        alt104=1;
                    }


                }


                switch (alt104) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:0:0: switchCaseLabel
            	    {
            	    pushFollow(FOLLOW_switchCaseLabel_in_switchCaseLabels10357);
            	    switchCaseLabel359=switchCaseLabel();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, switchCaseLabel359.getTree());

            	    }
            	    break;

            	default :
            	    break loop104;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("switchCaseLabels", 85);
            if ( state.backtracking>0 ) { memoize(input, 85, switchCaseLabels_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchCaseLabels"

    public static class switchCaseLabel_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchCaseLabel"
    // ../etc/JamlAttrHash.g:791:1: switchCaseLabel : CASE expression COLON ( blockStatement )* ;
    public final JamlAttrHashParser.switchCaseLabel_return switchCaseLabel() throws RecognitionException {
    traceIn("switchCaseLabel", 86);
        JamlAttrHashParser.switchCaseLabel_return retval = new JamlAttrHashParser.switchCaseLabel_return();
        retval.start = input.LT(1);
        int switchCaseLabel_StartIndex = input.index();
        CommonTree root_0 = null;

        Token CASE360=null;
        Token COLON362=null;
        JamlAttrHashParser.expression_return expression361 = null;

        JamlAttrHashParser.blockStatement_return blockStatement363 = null;


        CommonTree CASE360_tree=null;
        CommonTree COLON362_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }
            // ../etc/JamlAttrHash.g:792:5: ( CASE expression COLON ( blockStatement )* )
            // ../etc/JamlAttrHash.g:792:9: CASE expression COLON ( blockStatement )*
            {
            root_0 = (CommonTree)adaptor.nil();

            CASE360=(Token)match(input,CASE,FOLLOW_CASE_in_switchCaseLabel10385); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CASE360_tree = (CommonTree)adaptor.create(CASE360);
            root_0 = (CommonTree)adaptor.becomeRoot(CASE360_tree, root_0);
            }
            pushFollow(FOLLOW_expression_in_switchCaseLabel10388);
            expression361=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression361.getTree());
            COLON362=(Token)match(input,COLON,FOLLOW_COLON_in_switchCaseLabel10390); if (state.failed) return retval;
            // ../etc/JamlAttrHash.g:792:33: ( blockStatement )*
            loop105:
            do {
                int alt105=2;
                int LA105_0 = input.LA(1);

                if ( (LA105_0==AT||LA105_0==DEC||LA105_0==INC||LA105_0==LCURLY||LA105_0==LESS_THAN||LA105_0==LOGICAL_NOT||(LA105_0>=LPAREN && LA105_0<=MINUS)||LA105_0==NOT||LA105_0==PLUS||LA105_0==SEMI||(LA105_0>=ABSTRACT && LA105_0<=BYTE)||(LA105_0>=CHAR && LA105_0<=CONTINUE)||(LA105_0>=DO && LA105_0<=DOUBLE)||LA105_0==ENUM||(LA105_0>=FALSE && LA105_0<=FINAL)||(LA105_0>=FLOAT && LA105_0<=IF)||LA105_0==INTERFACE||(LA105_0>=INT && LA105_0<=NULL)||(LA105_0>=PRIVATE && LA105_0<=THROW)||(LA105_0>=TRANSIENT && LA105_0<=WHILE)||(LA105_0>=IDENT && LA105_0<=STRING_LITERAL)) ) {
                    alt105=1;
                }


                switch (alt105) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:0:0: blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_switchCaseLabel10393);
            	    blockStatement363=blockStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, blockStatement363.getTree());

            	    }
            	    break;

            	default :
            	    break loop105;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("switchCaseLabel", 86);
            if ( state.backtracking>0 ) { memoize(input, 86, switchCaseLabel_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchCaseLabel"

    public static class switchDefaultLabel_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchDefaultLabel"
    // ../etc/JamlAttrHash.g:795:1: switchDefaultLabel : DEFAULT COLON ( blockStatement )* ;
    public final JamlAttrHashParser.switchDefaultLabel_return switchDefaultLabel() throws RecognitionException {
    traceIn("switchDefaultLabel", 87);
        JamlAttrHashParser.switchDefaultLabel_return retval = new JamlAttrHashParser.switchDefaultLabel_return();
        retval.start = input.LT(1);
        int switchDefaultLabel_StartIndex = input.index();
        CommonTree root_0 = null;

        Token DEFAULT364=null;
        Token COLON365=null;
        JamlAttrHashParser.blockStatement_return blockStatement366 = null;


        CommonTree DEFAULT364_tree=null;
        CommonTree COLON365_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }
            // ../etc/JamlAttrHash.g:796:5: ( DEFAULT COLON ( blockStatement )* )
            // ../etc/JamlAttrHash.g:796:9: DEFAULT COLON ( blockStatement )*
            {
            root_0 = (CommonTree)adaptor.nil();

            DEFAULT364=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_switchDefaultLabel10417); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DEFAULT364_tree = (CommonTree)adaptor.create(DEFAULT364);
            root_0 = (CommonTree)adaptor.becomeRoot(DEFAULT364_tree, root_0);
            }
            COLON365=(Token)match(input,COLON,FOLLOW_COLON_in_switchDefaultLabel10420); if (state.failed) return retval;
            // ../etc/JamlAttrHash.g:796:25: ( blockStatement )*
            loop106:
            do {
                int alt106=2;
                int LA106_0 = input.LA(1);

                if ( (LA106_0==AT||LA106_0==DEC||LA106_0==INC||LA106_0==LCURLY||LA106_0==LESS_THAN||LA106_0==LOGICAL_NOT||(LA106_0>=LPAREN && LA106_0<=MINUS)||LA106_0==NOT||LA106_0==PLUS||LA106_0==SEMI||(LA106_0>=ABSTRACT && LA106_0<=BYTE)||(LA106_0>=CHAR && LA106_0<=CONTINUE)||(LA106_0>=DO && LA106_0<=DOUBLE)||LA106_0==ENUM||(LA106_0>=FALSE && LA106_0<=FINAL)||(LA106_0>=FLOAT && LA106_0<=IF)||LA106_0==INTERFACE||(LA106_0>=INT && LA106_0<=NULL)||(LA106_0>=PRIVATE && LA106_0<=THROW)||(LA106_0>=TRANSIENT && LA106_0<=WHILE)||(LA106_0>=IDENT && LA106_0<=STRING_LITERAL)) ) {
                    alt106=1;
                }


                switch (alt106) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:0:0: blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_switchDefaultLabel10423);
            	    blockStatement366=blockStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, blockStatement366.getTree());

            	    }
            	    break;

            	default :
            	    break loop106;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("switchDefaultLabel", 87);
            if ( state.backtracking>0 ) { memoize(input, 87, switchDefaultLabel_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchDefaultLabel"

    public static class forInit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forInit"
    // ../etc/JamlAttrHash.g:799:1: forInit : ( localVariableDeclaration -> ^( FOR_INIT localVariableDeclaration ) | expressionList -> ^( FOR_INIT expressionList ) | -> ^( FOR_INIT ) );
    public final JamlAttrHashParser.forInit_return forInit() throws RecognitionException {
    traceIn("forInit", 88);
        JamlAttrHashParser.forInit_return retval = new JamlAttrHashParser.forInit_return();
        retval.start = input.LT(1);
        int forInit_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.localVariableDeclaration_return localVariableDeclaration367 = null;

        JamlAttrHashParser.expressionList_return expressionList368 = null;


        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_localVariableDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule localVariableDeclaration");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }
            // ../etc/JamlAttrHash.g:800:5: ( localVariableDeclaration -> ^( FOR_INIT localVariableDeclaration ) | expressionList -> ^( FOR_INIT expressionList ) | -> ^( FOR_INIT ) )
            int alt107=3;
            alt107 = dfa107.predict(input);
            switch (alt107) {
                case 1 :
                    // ../etc/JamlAttrHash.g:800:9: localVariableDeclaration
                    {
                    pushFollow(FOLLOW_localVariableDeclaration_in_forInit10447);
                    localVariableDeclaration367=localVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_localVariableDeclaration.add(localVariableDeclaration367.getTree());


                    // AST REWRITE
                    // elements: localVariableDeclaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 800:37: -> ^( FOR_INIT localVariableDeclaration )
                    {
                        // ../etc/JamlAttrHash.g:800:41: ^( FOR_INIT localVariableDeclaration )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOR_INIT, "FOR_INIT"), root_1);

                        adaptor.addChild(root_1, stream_localVariableDeclaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:801:9: expressionList
                    {
                    pushFollow(FOLLOW_expressionList_in_forInit10469);
                    expressionList368=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionList.add(expressionList368.getTree());


                    // AST REWRITE
                    // elements: expressionList
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 801:37: -> ^( FOR_INIT expressionList )
                    {
                        // ../etc/JamlAttrHash.g:801:41: ^( FOR_INIT expressionList )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOR_INIT, "FOR_INIT"), root_1);

                        adaptor.addChild(root_1, stream_expressionList.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // ../etc/JamlAttrHash.g:802:37: 
                    {

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 802:37: -> ^( FOR_INIT )
                    {
                        // ../etc/JamlAttrHash.g:802:41: ^( FOR_INIT )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOR_INIT, "FOR_INIT"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("forInit", 88);
            if ( state.backtracking>0 ) { memoize(input, 88, forInit_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forInit"

    public static class forCondition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forCondition"
    // ../etc/JamlAttrHash.g:805:1: forCondition : ( expression )? -> ^( FOR_CONDITION ( expression )? ) ;
    public final JamlAttrHashParser.forCondition_return forCondition() throws RecognitionException {
    traceIn("forCondition", 89);
        JamlAttrHashParser.forCondition_return retval = new JamlAttrHashParser.forCondition_return();
        retval.start = input.LT(1);
        int forCondition_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.expression_return expression369 = null;


        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }
            // ../etc/JamlAttrHash.g:806:5: ( ( expression )? -> ^( FOR_CONDITION ( expression )? ) )
            // ../etc/JamlAttrHash.g:806:9: ( expression )?
            {
            // ../etc/JamlAttrHash.g:806:9: ( expression )?
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==DEC||LA108_0==INC||LA108_0==LESS_THAN||LA108_0==LOGICAL_NOT||(LA108_0>=LPAREN && LA108_0<=MINUS)||LA108_0==NOT||LA108_0==PLUS||LA108_0==BOOLEAN||LA108_0==BYTE||LA108_0==CHAR||LA108_0==DOUBLE||LA108_0==FALSE||LA108_0==FLOAT||(LA108_0>=INT && LA108_0<=LONG)||(LA108_0>=NEW && LA108_0<=NULL)||LA108_0==SHORT||LA108_0==SUPER||LA108_0==THIS||LA108_0==TRUE||LA108_0==VOID||(LA108_0>=IDENT && LA108_0<=STRING_LITERAL)) ) {
                alt108=1;
            }
            switch (alt108) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: expression
                    {
                    pushFollow(FOLLOW_expression_in_forCondition10557);
                    expression369=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression369.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 807:9: -> ^( FOR_CONDITION ( expression )? )
            {
                // ../etc/JamlAttrHash.g:807:13: ^( FOR_CONDITION ( expression )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOR_CONDITION, "FOR_CONDITION"), root_1);

                // ../etc/JamlAttrHash.g:807:29: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("forCondition", 89);
            if ( state.backtracking>0 ) { memoize(input, 89, forCondition_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forCondition"

    public static class forUpdater_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forUpdater"
    // ../etc/JamlAttrHash.g:810:1: forUpdater : ( expressionList )? -> ^( FOR_UPDATE ( expressionList )? ) ;
    public final JamlAttrHashParser.forUpdater_return forUpdater() throws RecognitionException {
    traceIn("forUpdater", 90);
        JamlAttrHashParser.forUpdater_return retval = new JamlAttrHashParser.forUpdater_return();
        retval.start = input.LT(1);
        int forUpdater_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.expressionList_return expressionList370 = null;


        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }
            // ../etc/JamlAttrHash.g:811:5: ( ( expressionList )? -> ^( FOR_UPDATE ( expressionList )? ) )
            // ../etc/JamlAttrHash.g:811:9: ( expressionList )?
            {
            // ../etc/JamlAttrHash.g:811:9: ( expressionList )?
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==DEC||LA109_0==INC||LA109_0==LESS_THAN||LA109_0==LOGICAL_NOT||(LA109_0>=LPAREN && LA109_0<=MINUS)||LA109_0==NOT||LA109_0==PLUS||LA109_0==BOOLEAN||LA109_0==BYTE||LA109_0==CHAR||LA109_0==DOUBLE||LA109_0==FALSE||LA109_0==FLOAT||(LA109_0>=INT && LA109_0<=LONG)||(LA109_0>=NEW && LA109_0<=NULL)||LA109_0==SHORT||LA109_0==SUPER||LA109_0==THIS||LA109_0==TRUE||LA109_0==VOID||(LA109_0>=IDENT && LA109_0<=STRING_LITERAL)) ) {
                alt109=1;
            }
            switch (alt109) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: expressionList
                    {
                    pushFollow(FOLLOW_expressionList_in_forUpdater10599);
                    expressionList370=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionList.add(expressionList370.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: expressionList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 812:9: -> ^( FOR_UPDATE ( expressionList )? )
            {
                // ../etc/JamlAttrHash.g:812:13: ^( FOR_UPDATE ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOR_UPDATE, "FOR_UPDATE"), root_1);

                // ../etc/JamlAttrHash.g:812:26: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("forUpdater", 90);
            if ( state.backtracking>0 ) { memoize(input, 90, forUpdater_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forUpdater"

    public static class parenthesizedExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parenthesizedExpression"
    // ../etc/JamlAttrHash.g:817:1: parenthesizedExpression : LPAREN expression RPAREN -> ^( PARENTESIZED_EXPR[$LPAREN, \"PARENTESIZED_EXPR\"] expression ) ;
    public final JamlAttrHashParser.parenthesizedExpression_return parenthesizedExpression() throws RecognitionException {
    traceIn("parenthesizedExpression", 91);
        JamlAttrHashParser.parenthesizedExpression_return retval = new JamlAttrHashParser.parenthesizedExpression_return();
        retval.start = input.LT(1);
        int parenthesizedExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LPAREN371=null;
        Token RPAREN373=null;
        JamlAttrHashParser.expression_return expression372 = null;


        CommonTree LPAREN371_tree=null;
        CommonTree RPAREN373_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }
            // ../etc/JamlAttrHash.g:818:5: ( LPAREN expression RPAREN -> ^( PARENTESIZED_EXPR[$LPAREN, \"PARENTESIZED_EXPR\"] expression ) )
            // ../etc/JamlAttrHash.g:818:9: LPAREN expression RPAREN
            {
            LPAREN371=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_parenthesizedExpression10639); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN371);

            pushFollow(FOLLOW_expression_in_parenthesizedExpression10641);
            expression372=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression372.getTree());
            RPAREN373=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_parenthesizedExpression10643); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN373);



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 819:9: -> ^( PARENTESIZED_EXPR[$LPAREN, \"PARENTESIZED_EXPR\"] expression )
            {
                // ../etc/JamlAttrHash.g:819:13: ^( PARENTESIZED_EXPR[$LPAREN, \"PARENTESIZED_EXPR\"] expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PARENTESIZED_EXPR, LPAREN371, "PARENTESIZED_EXPR"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("parenthesizedExpression", 91);
            if ( state.backtracking>0 ) { memoize(input, 91, parenthesizedExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parenthesizedExpression"

    public static class expressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionList"
    // ../etc/JamlAttrHash.g:822:1: expressionList : expression ( COMMA expression )* ;
    public final JamlAttrHashParser.expressionList_return expressionList() throws RecognitionException {
    traceIn("expressionList", 92);
        JamlAttrHashParser.expressionList_return retval = new JamlAttrHashParser.expressionList_return();
        retval.start = input.LT(1);
        int expressionList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA375=null;
        JamlAttrHashParser.expression_return expression374 = null;

        JamlAttrHashParser.expression_return expression376 = null;


        CommonTree COMMA375_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }
            // ../etc/JamlAttrHash.g:823:5: ( expression ( COMMA expression )* )
            // ../etc/JamlAttrHash.g:823:9: expression ( COMMA expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_expressionList10684);
            expression374=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression374.getTree());
            // ../etc/JamlAttrHash.g:823:20: ( COMMA expression )*
            loop110:
            do {
                int alt110=2;
                int LA110_0 = input.LA(1);

                if ( (LA110_0==COMMA) ) {
                    alt110=1;
                }


                switch (alt110) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:823:21: COMMA expression
            	    {
            	    COMMA375=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList10687); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_expressionList10690);
            	    expression376=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression376.getTree());

            	    }
            	    break;

            	default :
            	    break loop110;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("expressionList", 92);
            if ( state.backtracking>0 ) { memoize(input, 92, expressionList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expressionList"

    public static class expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression"
    // ../etc/JamlAttrHash.g:826:1: expression : assignmentExpression -> ^( EXPR assignmentExpression ) ;
    public final JamlAttrHashParser.expression_return expression() throws RecognitionException {
    traceIn("expression", 93);
        JamlAttrHashParser.expression_return retval = new JamlAttrHashParser.expression_return();
        retval.start = input.LT(1);
        int expression_StartIndex = input.index();
        CommonTree root_0 = null;

        JamlAttrHashParser.assignmentExpression_return assignmentExpression377 = null;


        RewriteRuleSubtreeStream stream_assignmentExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignmentExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }
            // ../etc/JamlAttrHash.g:827:5: ( assignmentExpression -> ^( EXPR assignmentExpression ) )
            // ../etc/JamlAttrHash.g:827:9: assignmentExpression
            {
            pushFollow(FOLLOW_assignmentExpression_in_expression10711);
            assignmentExpression377=assignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_assignmentExpression.add(assignmentExpression377.getTree());


            // AST REWRITE
            // elements: assignmentExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 828:9: -> ^( EXPR assignmentExpression )
            {
                // ../etc/JamlAttrHash.g:828:13: ^( EXPR assignmentExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXPR, "EXPR"), root_1);

                adaptor.addChild(root_1, stream_assignmentExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("expression", 93);
            if ( state.backtracking>0 ) { memoize(input, 93, expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expression"

    public static class assignmentExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "assignmentExpression"
    // ../etc/JamlAttrHash.g:831:1: assignmentExpression : conditionalExpression ( ( ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | STAR_ASSIGN | DIV_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | MOD_ASSIGN | SHIFT_LEFT_ASSIGN | SHIFT_RIGHT_ASSIGN | BIT_SHIFT_RIGHT_ASSIGN ) assignmentExpression )? ;
    public final JamlAttrHashParser.assignmentExpression_return assignmentExpression() throws RecognitionException {
    traceIn("assignmentExpression", 94);
        JamlAttrHashParser.assignmentExpression_return retval = new JamlAttrHashParser.assignmentExpression_return();
        retval.start = input.LT(1);
        int assignmentExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ASSIGN379=null;
        Token PLUS_ASSIGN380=null;
        Token MINUS_ASSIGN381=null;
        Token STAR_ASSIGN382=null;
        Token DIV_ASSIGN383=null;
        Token AND_ASSIGN384=null;
        Token OR_ASSIGN385=null;
        Token XOR_ASSIGN386=null;
        Token MOD_ASSIGN387=null;
        Token SHIFT_LEFT_ASSIGN388=null;
        Token SHIFT_RIGHT_ASSIGN389=null;
        Token BIT_SHIFT_RIGHT_ASSIGN390=null;
        JamlAttrHashParser.conditionalExpression_return conditionalExpression378 = null;

        JamlAttrHashParser.assignmentExpression_return assignmentExpression391 = null;


        CommonTree ASSIGN379_tree=null;
        CommonTree PLUS_ASSIGN380_tree=null;
        CommonTree MINUS_ASSIGN381_tree=null;
        CommonTree STAR_ASSIGN382_tree=null;
        CommonTree DIV_ASSIGN383_tree=null;
        CommonTree AND_ASSIGN384_tree=null;
        CommonTree OR_ASSIGN385_tree=null;
        CommonTree XOR_ASSIGN386_tree=null;
        CommonTree MOD_ASSIGN387_tree=null;
        CommonTree SHIFT_LEFT_ASSIGN388_tree=null;
        CommonTree SHIFT_RIGHT_ASSIGN389_tree=null;
        CommonTree BIT_SHIFT_RIGHT_ASSIGN390_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }
            // ../etc/JamlAttrHash.g:832:5: ( conditionalExpression ( ( ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | STAR_ASSIGN | DIV_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | MOD_ASSIGN | SHIFT_LEFT_ASSIGN | SHIFT_RIGHT_ASSIGN | BIT_SHIFT_RIGHT_ASSIGN ) assignmentExpression )? )
            // ../etc/JamlAttrHash.g:832:9: conditionalExpression ( ( ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | STAR_ASSIGN | DIV_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | MOD_ASSIGN | SHIFT_LEFT_ASSIGN | SHIFT_RIGHT_ASSIGN | BIT_SHIFT_RIGHT_ASSIGN ) assignmentExpression )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_conditionalExpression_in_assignmentExpression10747);
            conditionalExpression378=conditionalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalExpression378.getTree());
            // ../etc/JamlAttrHash.g:833:9: ( ( ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | STAR_ASSIGN | DIV_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | MOD_ASSIGN | SHIFT_LEFT_ASSIGN | SHIFT_RIGHT_ASSIGN | BIT_SHIFT_RIGHT_ASSIGN ) assignmentExpression )?
            int alt112=2;
            int LA112_0 = input.LA(1);

            if ( ((LA112_0>=AND_ASSIGN && LA112_0<=ASSIGN)||LA112_0==BIT_SHIFT_RIGHT_ASSIGN||LA112_0==DIV_ASSIGN||LA112_0==MINUS_ASSIGN||LA112_0==MOD_ASSIGN||LA112_0==OR_ASSIGN||LA112_0==PLUS_ASSIGN||LA112_0==SHIFT_LEFT_ASSIGN||LA112_0==SHIFT_RIGHT_ASSIGN||LA112_0==STAR_ASSIGN||LA112_0==XOR_ASSIGN) ) {
                alt112=1;
            }
            switch (alt112) {
                case 1 :
                    // ../etc/JamlAttrHash.g:833:13: ( ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | STAR_ASSIGN | DIV_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | MOD_ASSIGN | SHIFT_LEFT_ASSIGN | SHIFT_RIGHT_ASSIGN | BIT_SHIFT_RIGHT_ASSIGN ) assignmentExpression
                    {
                    // ../etc/JamlAttrHash.g:833:13: ( ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | STAR_ASSIGN | DIV_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | MOD_ASSIGN | SHIFT_LEFT_ASSIGN | SHIFT_RIGHT_ASSIGN | BIT_SHIFT_RIGHT_ASSIGN )
                    int alt111=12;
                    switch ( input.LA(1) ) {
                    case ASSIGN:
                        {
                        alt111=1;
                        }
                        break;
                    case PLUS_ASSIGN:
                        {
                        alt111=2;
                        }
                        break;
                    case MINUS_ASSIGN:
                        {
                        alt111=3;
                        }
                        break;
                    case STAR_ASSIGN:
                        {
                        alt111=4;
                        }
                        break;
                    case DIV_ASSIGN:
                        {
                        alt111=5;
                        }
                        break;
                    case AND_ASSIGN:
                        {
                        alt111=6;
                        }
                        break;
                    case OR_ASSIGN:
                        {
                        alt111=7;
                        }
                        break;
                    case XOR_ASSIGN:
                        {
                        alt111=8;
                        }
                        break;
                    case MOD_ASSIGN:
                        {
                        alt111=9;
                        }
                        break;
                    case SHIFT_LEFT_ASSIGN:
                        {
                        alt111=10;
                        }
                        break;
                    case SHIFT_RIGHT_ASSIGN:
                        {
                        alt111=11;
                        }
                        break;
                    case BIT_SHIFT_RIGHT_ASSIGN:
                        {
                        alt111=12;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 111, 0, input);

                        throw nvae;
                    }

                    switch (alt111) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:833:17: ASSIGN
                            {
                            ASSIGN379=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_assignmentExpression10766); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            ASSIGN379_tree = (CommonTree)adaptor.create(ASSIGN379);
                            root_0 = (CommonTree)adaptor.becomeRoot(ASSIGN379_tree, root_0);
                            }

                            }
                            break;
                        case 2 :
                            // ../etc/JamlAttrHash.g:834:17: PLUS_ASSIGN
                            {
                            PLUS_ASSIGN380=(Token)match(input,PLUS_ASSIGN,FOLLOW_PLUS_ASSIGN_in_assignmentExpression10785); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            PLUS_ASSIGN380_tree = (CommonTree)adaptor.create(PLUS_ASSIGN380);
                            root_0 = (CommonTree)adaptor.becomeRoot(PLUS_ASSIGN380_tree, root_0);
                            }

                            }
                            break;
                        case 3 :
                            // ../etc/JamlAttrHash.g:835:17: MINUS_ASSIGN
                            {
                            MINUS_ASSIGN381=(Token)match(input,MINUS_ASSIGN,FOLLOW_MINUS_ASSIGN_in_assignmentExpression10804); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            MINUS_ASSIGN381_tree = (CommonTree)adaptor.create(MINUS_ASSIGN381);
                            root_0 = (CommonTree)adaptor.becomeRoot(MINUS_ASSIGN381_tree, root_0);
                            }

                            }
                            break;
                        case 4 :
                            // ../etc/JamlAttrHash.g:836:17: STAR_ASSIGN
                            {
                            STAR_ASSIGN382=(Token)match(input,STAR_ASSIGN,FOLLOW_STAR_ASSIGN_in_assignmentExpression10823); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            STAR_ASSIGN382_tree = (CommonTree)adaptor.create(STAR_ASSIGN382);
                            root_0 = (CommonTree)adaptor.becomeRoot(STAR_ASSIGN382_tree, root_0);
                            }

                            }
                            break;
                        case 5 :
                            // ../etc/JamlAttrHash.g:837:17: DIV_ASSIGN
                            {
                            DIV_ASSIGN383=(Token)match(input,DIV_ASSIGN,FOLLOW_DIV_ASSIGN_in_assignmentExpression10842); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DIV_ASSIGN383_tree = (CommonTree)adaptor.create(DIV_ASSIGN383);
                            root_0 = (CommonTree)adaptor.becomeRoot(DIV_ASSIGN383_tree, root_0);
                            }

                            }
                            break;
                        case 6 :
                            // ../etc/JamlAttrHash.g:838:17: AND_ASSIGN
                            {
                            AND_ASSIGN384=(Token)match(input,AND_ASSIGN,FOLLOW_AND_ASSIGN_in_assignmentExpression10861); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            AND_ASSIGN384_tree = (CommonTree)adaptor.create(AND_ASSIGN384);
                            root_0 = (CommonTree)adaptor.becomeRoot(AND_ASSIGN384_tree, root_0);
                            }

                            }
                            break;
                        case 7 :
                            // ../etc/JamlAttrHash.g:839:17: OR_ASSIGN
                            {
                            OR_ASSIGN385=(Token)match(input,OR_ASSIGN,FOLLOW_OR_ASSIGN_in_assignmentExpression10880); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            OR_ASSIGN385_tree = (CommonTree)adaptor.create(OR_ASSIGN385);
                            root_0 = (CommonTree)adaptor.becomeRoot(OR_ASSIGN385_tree, root_0);
                            }

                            }
                            break;
                        case 8 :
                            // ../etc/JamlAttrHash.g:840:17: XOR_ASSIGN
                            {
                            XOR_ASSIGN386=(Token)match(input,XOR_ASSIGN,FOLLOW_XOR_ASSIGN_in_assignmentExpression10899); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            XOR_ASSIGN386_tree = (CommonTree)adaptor.create(XOR_ASSIGN386);
                            root_0 = (CommonTree)adaptor.becomeRoot(XOR_ASSIGN386_tree, root_0);
                            }

                            }
                            break;
                        case 9 :
                            // ../etc/JamlAttrHash.g:841:17: MOD_ASSIGN
                            {
                            MOD_ASSIGN387=(Token)match(input,MOD_ASSIGN,FOLLOW_MOD_ASSIGN_in_assignmentExpression10918); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            MOD_ASSIGN387_tree = (CommonTree)adaptor.create(MOD_ASSIGN387);
                            root_0 = (CommonTree)adaptor.becomeRoot(MOD_ASSIGN387_tree, root_0);
                            }

                            }
                            break;
                        case 10 :
                            // ../etc/JamlAttrHash.g:842:17: SHIFT_LEFT_ASSIGN
                            {
                            SHIFT_LEFT_ASSIGN388=(Token)match(input,SHIFT_LEFT_ASSIGN,FOLLOW_SHIFT_LEFT_ASSIGN_in_assignmentExpression10937); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            SHIFT_LEFT_ASSIGN388_tree = (CommonTree)adaptor.create(SHIFT_LEFT_ASSIGN388);
                            root_0 = (CommonTree)adaptor.becomeRoot(SHIFT_LEFT_ASSIGN388_tree, root_0);
                            }

                            }
                            break;
                        case 11 :
                            // ../etc/JamlAttrHash.g:843:17: SHIFT_RIGHT_ASSIGN
                            {
                            SHIFT_RIGHT_ASSIGN389=(Token)match(input,SHIFT_RIGHT_ASSIGN,FOLLOW_SHIFT_RIGHT_ASSIGN_in_assignmentExpression10956); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            SHIFT_RIGHT_ASSIGN389_tree = (CommonTree)adaptor.create(SHIFT_RIGHT_ASSIGN389);
                            root_0 = (CommonTree)adaptor.becomeRoot(SHIFT_RIGHT_ASSIGN389_tree, root_0);
                            }

                            }
                            break;
                        case 12 :
                            // ../etc/JamlAttrHash.g:844:17: BIT_SHIFT_RIGHT_ASSIGN
                            {
                            BIT_SHIFT_RIGHT_ASSIGN390=(Token)match(input,BIT_SHIFT_RIGHT_ASSIGN,FOLLOW_BIT_SHIFT_RIGHT_ASSIGN_in_assignmentExpression10975); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            BIT_SHIFT_RIGHT_ASSIGN390_tree = (CommonTree)adaptor.create(BIT_SHIFT_RIGHT_ASSIGN390);
                            root_0 = (CommonTree)adaptor.becomeRoot(BIT_SHIFT_RIGHT_ASSIGN390_tree, root_0);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_assignmentExpression_in_assignmentExpression10997);
                    assignmentExpression391=assignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignmentExpression391.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("assignmentExpression", 94);
            if ( state.backtracking>0 ) { memoize(input, 94, assignmentExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "assignmentExpression"

    public static class conditionalExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalExpression"
    // ../etc/JamlAttrHash.g:849:1: conditionalExpression : logicalOrExpression ( QUESTION assignmentExpression COLON conditionalExpression )? ;
    public final JamlAttrHashParser.conditionalExpression_return conditionalExpression() throws RecognitionException {
    traceIn("conditionalExpression", 95);
        JamlAttrHashParser.conditionalExpression_return retval = new JamlAttrHashParser.conditionalExpression_return();
        retval.start = input.LT(1);
        int conditionalExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token QUESTION393=null;
        Token COLON395=null;
        JamlAttrHashParser.logicalOrExpression_return logicalOrExpression392 = null;

        JamlAttrHashParser.assignmentExpression_return assignmentExpression394 = null;

        JamlAttrHashParser.conditionalExpression_return conditionalExpression396 = null;


        CommonTree QUESTION393_tree=null;
        CommonTree COLON395_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }
            // ../etc/JamlAttrHash.g:850:5: ( logicalOrExpression ( QUESTION assignmentExpression COLON conditionalExpression )? )
            // ../etc/JamlAttrHash.g:850:9: logicalOrExpression ( QUESTION assignmentExpression COLON conditionalExpression )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_logicalOrExpression_in_conditionalExpression11022);
            logicalOrExpression392=logicalOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, logicalOrExpression392.getTree());
            // ../etc/JamlAttrHash.g:850:29: ( QUESTION assignmentExpression COLON conditionalExpression )?
            int alt113=2;
            int LA113_0 = input.LA(1);

            if ( (LA113_0==QUESTION) ) {
                alt113=1;
            }
            switch (alt113) {
                case 1 :
                    // ../etc/JamlAttrHash.g:850:30: QUESTION assignmentExpression COLON conditionalExpression
                    {
                    QUESTION393=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_conditionalExpression11025); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUESTION393_tree = (CommonTree)adaptor.create(QUESTION393);
                    root_0 = (CommonTree)adaptor.becomeRoot(QUESTION393_tree, root_0);
                    }
                    pushFollow(FOLLOW_assignmentExpression_in_conditionalExpression11028);
                    assignmentExpression394=assignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignmentExpression394.getTree());
                    COLON395=(Token)match(input,COLON,FOLLOW_COLON_in_conditionalExpression11030); if (state.failed) return retval;
                    pushFollow(FOLLOW_conditionalExpression_in_conditionalExpression11033);
                    conditionalExpression396=conditionalExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalExpression396.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("conditionalExpression", 95);
            if ( state.backtracking>0 ) { memoize(input, 95, conditionalExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conditionalExpression"

    public static class logicalOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "logicalOrExpression"
    // ../etc/JamlAttrHash.g:853:1: logicalOrExpression : logicalAndExpression ( LOGICAL_OR logicalAndExpression )* ;
    public final JamlAttrHashParser.logicalOrExpression_return logicalOrExpression() throws RecognitionException {
    traceIn("logicalOrExpression", 96);
        JamlAttrHashParser.logicalOrExpression_return retval = new JamlAttrHashParser.logicalOrExpression_return();
        retval.start = input.LT(1);
        int logicalOrExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LOGICAL_OR398=null;
        JamlAttrHashParser.logicalAndExpression_return logicalAndExpression397 = null;

        JamlAttrHashParser.logicalAndExpression_return logicalAndExpression399 = null;


        CommonTree LOGICAL_OR398_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }
            // ../etc/JamlAttrHash.g:854:5: ( logicalAndExpression ( LOGICAL_OR logicalAndExpression )* )
            // ../etc/JamlAttrHash.g:854:9: logicalAndExpression ( LOGICAL_OR logicalAndExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_logicalAndExpression_in_logicalOrExpression11054);
            logicalAndExpression397=logicalAndExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, logicalAndExpression397.getTree());
            // ../etc/JamlAttrHash.g:854:30: ( LOGICAL_OR logicalAndExpression )*
            loop114:
            do {
                int alt114=2;
                int LA114_0 = input.LA(1);

                if ( (LA114_0==LOGICAL_OR) ) {
                    alt114=1;
                }


                switch (alt114) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:854:31: LOGICAL_OR logicalAndExpression
            	    {
            	    LOGICAL_OR398=(Token)match(input,LOGICAL_OR,FOLLOW_LOGICAL_OR_in_logicalOrExpression11057); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    LOGICAL_OR398_tree = (CommonTree)adaptor.create(LOGICAL_OR398);
            	    root_0 = (CommonTree)adaptor.becomeRoot(LOGICAL_OR398_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_logicalAndExpression_in_logicalOrExpression11060);
            	    logicalAndExpression399=logicalAndExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, logicalAndExpression399.getTree());

            	    }
            	    break;

            	default :
            	    break loop114;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("logicalOrExpression", 96);
            if ( state.backtracking>0 ) { memoize(input, 96, logicalOrExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "logicalOrExpression"

    public static class logicalAndExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "logicalAndExpression"
    // ../etc/JamlAttrHash.g:857:1: logicalAndExpression : inclusiveOrExpression ( LOGICAL_AND inclusiveOrExpression )* ;
    public final JamlAttrHashParser.logicalAndExpression_return logicalAndExpression() throws RecognitionException {
    traceIn("logicalAndExpression", 97);
        JamlAttrHashParser.logicalAndExpression_return retval = new JamlAttrHashParser.logicalAndExpression_return();
        retval.start = input.LT(1);
        int logicalAndExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LOGICAL_AND401=null;
        JamlAttrHashParser.inclusiveOrExpression_return inclusiveOrExpression400 = null;

        JamlAttrHashParser.inclusiveOrExpression_return inclusiveOrExpression402 = null;


        CommonTree LOGICAL_AND401_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }
            // ../etc/JamlAttrHash.g:858:5: ( inclusiveOrExpression ( LOGICAL_AND inclusiveOrExpression )* )
            // ../etc/JamlAttrHash.g:858:9: inclusiveOrExpression ( LOGICAL_AND inclusiveOrExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_inclusiveOrExpression_in_logicalAndExpression11081);
            inclusiveOrExpression400=inclusiveOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inclusiveOrExpression400.getTree());
            // ../etc/JamlAttrHash.g:858:31: ( LOGICAL_AND inclusiveOrExpression )*
            loop115:
            do {
                int alt115=2;
                int LA115_0 = input.LA(1);

                if ( (LA115_0==LOGICAL_AND) ) {
                    alt115=1;
                }


                switch (alt115) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:858:32: LOGICAL_AND inclusiveOrExpression
            	    {
            	    LOGICAL_AND401=(Token)match(input,LOGICAL_AND,FOLLOW_LOGICAL_AND_in_logicalAndExpression11084); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    LOGICAL_AND401_tree = (CommonTree)adaptor.create(LOGICAL_AND401);
            	    root_0 = (CommonTree)adaptor.becomeRoot(LOGICAL_AND401_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_inclusiveOrExpression_in_logicalAndExpression11087);
            	    inclusiveOrExpression402=inclusiveOrExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inclusiveOrExpression402.getTree());

            	    }
            	    break;

            	default :
            	    break loop115;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("logicalAndExpression", 97);
            if ( state.backtracking>0 ) { memoize(input, 97, logicalAndExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "logicalAndExpression"

    public static class inclusiveOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inclusiveOrExpression"
    // ../etc/JamlAttrHash.g:861:1: inclusiveOrExpression : exclusiveOrExpression ( OR exclusiveOrExpression )* ;
    public final JamlAttrHashParser.inclusiveOrExpression_return inclusiveOrExpression() throws RecognitionException {
    traceIn("inclusiveOrExpression", 98);
        JamlAttrHashParser.inclusiveOrExpression_return retval = new JamlAttrHashParser.inclusiveOrExpression_return();
        retval.start = input.LT(1);
        int inclusiveOrExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token OR404=null;
        JamlAttrHashParser.exclusiveOrExpression_return exclusiveOrExpression403 = null;

        JamlAttrHashParser.exclusiveOrExpression_return exclusiveOrExpression405 = null;


        CommonTree OR404_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }
            // ../etc/JamlAttrHash.g:862:5: ( exclusiveOrExpression ( OR exclusiveOrExpression )* )
            // ../etc/JamlAttrHash.g:862:9: exclusiveOrExpression ( OR exclusiveOrExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression11108);
            exclusiveOrExpression403=exclusiveOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, exclusiveOrExpression403.getTree());
            // ../etc/JamlAttrHash.g:862:31: ( OR exclusiveOrExpression )*
            loop116:
            do {
                int alt116=2;
                int LA116_0 = input.LA(1);

                if ( (LA116_0==OR) ) {
                    alt116=1;
                }


                switch (alt116) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:862:32: OR exclusiveOrExpression
            	    {
            	    OR404=(Token)match(input,OR,FOLLOW_OR_in_inclusiveOrExpression11111); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    OR404_tree = (CommonTree)adaptor.create(OR404);
            	    root_0 = (CommonTree)adaptor.becomeRoot(OR404_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression11114);
            	    exclusiveOrExpression405=exclusiveOrExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exclusiveOrExpression405.getTree());

            	    }
            	    break;

            	default :
            	    break loop116;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("inclusiveOrExpression", 98);
            if ( state.backtracking>0 ) { memoize(input, 98, inclusiveOrExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inclusiveOrExpression"

    public static class exclusiveOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exclusiveOrExpression"
    // ../etc/JamlAttrHash.g:865:1: exclusiveOrExpression : andExpression ( XOR andExpression )* ;
    public final JamlAttrHashParser.exclusiveOrExpression_return exclusiveOrExpression() throws RecognitionException {
    traceIn("exclusiveOrExpression", 99);
        JamlAttrHashParser.exclusiveOrExpression_return retval = new JamlAttrHashParser.exclusiveOrExpression_return();
        retval.start = input.LT(1);
        int exclusiveOrExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token XOR407=null;
        JamlAttrHashParser.andExpression_return andExpression406 = null;

        JamlAttrHashParser.andExpression_return andExpression408 = null;


        CommonTree XOR407_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }
            // ../etc/JamlAttrHash.g:866:5: ( andExpression ( XOR andExpression )* )
            // ../etc/JamlAttrHash.g:866:9: andExpression ( XOR andExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression11135);
            andExpression406=andExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, andExpression406.getTree());
            // ../etc/JamlAttrHash.g:866:23: ( XOR andExpression )*
            loop117:
            do {
                int alt117=2;
                int LA117_0 = input.LA(1);

                if ( (LA117_0==XOR) ) {
                    alt117=1;
                }


                switch (alt117) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:866:24: XOR andExpression
            	    {
            	    XOR407=(Token)match(input,XOR,FOLLOW_XOR_in_exclusiveOrExpression11138); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    XOR407_tree = (CommonTree)adaptor.create(XOR407);
            	    root_0 = (CommonTree)adaptor.becomeRoot(XOR407_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression11141);
            	    andExpression408=andExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, andExpression408.getTree());

            	    }
            	    break;

            	default :
            	    break loop117;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("exclusiveOrExpression", 99);
            if ( state.backtracking>0 ) { memoize(input, 99, exclusiveOrExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exclusiveOrExpression"

    public static class andExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "andExpression"
    // ../etc/JamlAttrHash.g:869:1: andExpression : equalityExpression ( AND equalityExpression )* ;
    public final JamlAttrHashParser.andExpression_return andExpression() throws RecognitionException {
    traceIn("andExpression", 100);
        JamlAttrHashParser.andExpression_return retval = new JamlAttrHashParser.andExpression_return();
        retval.start = input.LT(1);
        int andExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token AND410=null;
        JamlAttrHashParser.equalityExpression_return equalityExpression409 = null;

        JamlAttrHashParser.equalityExpression_return equalityExpression411 = null;


        CommonTree AND410_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }
            // ../etc/JamlAttrHash.g:870:5: ( equalityExpression ( AND equalityExpression )* )
            // ../etc/JamlAttrHash.g:870:9: equalityExpression ( AND equalityExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_equalityExpression_in_andExpression11162);
            equalityExpression409=equalityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, equalityExpression409.getTree());
            // ../etc/JamlAttrHash.g:870:28: ( AND equalityExpression )*
            loop118:
            do {
                int alt118=2;
                int LA118_0 = input.LA(1);

                if ( (LA118_0==AND) ) {
                    alt118=1;
                }


                switch (alt118) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:870:29: AND equalityExpression
            	    {
            	    AND410=(Token)match(input,AND,FOLLOW_AND_in_andExpression11165); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    AND410_tree = (CommonTree)adaptor.create(AND410);
            	    root_0 = (CommonTree)adaptor.becomeRoot(AND410_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_equalityExpression_in_andExpression11168);
            	    equalityExpression411=equalityExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, equalityExpression411.getTree());

            	    }
            	    break;

            	default :
            	    break loop118;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("andExpression", 100);
            if ( state.backtracking>0 ) { memoize(input, 100, andExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "andExpression"

    public static class equalityExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "equalityExpression"
    // ../etc/JamlAttrHash.g:873:1: equalityExpression : instanceOfExpression ( ( EQUAL | NOT_EQUAL ) instanceOfExpression )* ;
    public final JamlAttrHashParser.equalityExpression_return equalityExpression() throws RecognitionException {
    traceIn("equalityExpression", 101);
        JamlAttrHashParser.equalityExpression_return retval = new JamlAttrHashParser.equalityExpression_return();
        retval.start = input.LT(1);
        int equalityExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token EQUAL413=null;
        Token NOT_EQUAL414=null;
        JamlAttrHashParser.instanceOfExpression_return instanceOfExpression412 = null;

        JamlAttrHashParser.instanceOfExpression_return instanceOfExpression415 = null;


        CommonTree EQUAL413_tree=null;
        CommonTree NOT_EQUAL414_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }
            // ../etc/JamlAttrHash.g:874:5: ( instanceOfExpression ( ( EQUAL | NOT_EQUAL ) instanceOfExpression )* )
            // ../etc/JamlAttrHash.g:874:9: instanceOfExpression ( ( EQUAL | NOT_EQUAL ) instanceOfExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression11189);
            instanceOfExpression412=instanceOfExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, instanceOfExpression412.getTree());
            // ../etc/JamlAttrHash.g:875:9: ( ( EQUAL | NOT_EQUAL ) instanceOfExpression )*
            loop120:
            do {
                int alt120=2;
                int LA120_0 = input.LA(1);

                if ( (LA120_0==EQUAL||LA120_0==NOT_EQUAL) ) {
                    alt120=1;
                }


                switch (alt120) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:875:13: ( EQUAL | NOT_EQUAL ) instanceOfExpression
            	    {
            	    // ../etc/JamlAttrHash.g:875:13: ( EQUAL | NOT_EQUAL )
            	    int alt119=2;
            	    int LA119_0 = input.LA(1);

            	    if ( (LA119_0==EQUAL) ) {
            	        alt119=1;
            	    }
            	    else if ( (LA119_0==NOT_EQUAL) ) {
            	        alt119=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 119, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt119) {
            	        case 1 :
            	            // ../etc/JamlAttrHash.g:875:17: EQUAL
            	            {
            	            EQUAL413=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_equalityExpression11208); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            EQUAL413_tree = (CommonTree)adaptor.create(EQUAL413);
            	            root_0 = (CommonTree)adaptor.becomeRoot(EQUAL413_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // ../etc/JamlAttrHash.g:876:17: NOT_EQUAL
            	            {
            	            NOT_EQUAL414=(Token)match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_equalityExpression11227); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            NOT_EQUAL414_tree = (CommonTree)adaptor.create(NOT_EQUAL414);
            	            root_0 = (CommonTree)adaptor.becomeRoot(NOT_EQUAL414_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression11257);
            	    instanceOfExpression415=instanceOfExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, instanceOfExpression415.getTree());

            	    }
            	    break;

            	default :
            	    break loop120;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("equalityExpression", 101);
            if ( state.backtracking>0 ) { memoize(input, 101, equalityExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "equalityExpression"

    public static class instanceOfExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "instanceOfExpression"
    // ../etc/JamlAttrHash.g:882:1: instanceOfExpression : relationalExpression ( INSTANCEOF type )? ;
    public final JamlAttrHashParser.instanceOfExpression_return instanceOfExpression() throws RecognitionException {
    traceIn("instanceOfExpression", 102);
        JamlAttrHashParser.instanceOfExpression_return retval = new JamlAttrHashParser.instanceOfExpression_return();
        retval.start = input.LT(1);
        int instanceOfExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token INSTANCEOF417=null;
        JamlAttrHashParser.relationalExpression_return relationalExpression416 = null;

        JamlAttrHashParser.type_return type418 = null;


        CommonTree INSTANCEOF417_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }
            // ../etc/JamlAttrHash.g:883:5: ( relationalExpression ( INSTANCEOF type )? )
            // ../etc/JamlAttrHash.g:883:9: relationalExpression ( INSTANCEOF type )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_relationalExpression_in_instanceOfExpression11287);
            relationalExpression416=relationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, relationalExpression416.getTree());
            // ../etc/JamlAttrHash.g:883:30: ( INSTANCEOF type )?
            int alt121=2;
            int LA121_0 = input.LA(1);

            if ( (LA121_0==INSTANCEOF) ) {
                alt121=1;
            }
            switch (alt121) {
                case 1 :
                    // ../etc/JamlAttrHash.g:883:31: INSTANCEOF type
                    {
                    INSTANCEOF417=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_instanceOfExpression11290); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF417_tree = (CommonTree)adaptor.create(INSTANCEOF417);
                    root_0 = (CommonTree)adaptor.becomeRoot(INSTANCEOF417_tree, root_0);
                    }
                    pushFollow(FOLLOW_type_in_instanceOfExpression11293);
                    type418=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type418.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("instanceOfExpression", 102);
            if ( state.backtracking>0 ) { memoize(input, 102, instanceOfExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "instanceOfExpression"

    public static class relationalExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relationalExpression"
    // ../etc/JamlAttrHash.g:886:1: relationalExpression : shiftExpression ( ( LESS_OR_EQUAL | GREATER_OR_EQUAL | LESS_THAN | GREATER_THAN ) shiftExpression )* ;
    public final JamlAttrHashParser.relationalExpression_return relationalExpression() throws RecognitionException {
    traceIn("relationalExpression", 103);
        JamlAttrHashParser.relationalExpression_return retval = new JamlAttrHashParser.relationalExpression_return();
        retval.start = input.LT(1);
        int relationalExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LESS_OR_EQUAL420=null;
        Token GREATER_OR_EQUAL421=null;
        Token LESS_THAN422=null;
        Token GREATER_THAN423=null;
        JamlAttrHashParser.shiftExpression_return shiftExpression419 = null;

        JamlAttrHashParser.shiftExpression_return shiftExpression424 = null;


        CommonTree LESS_OR_EQUAL420_tree=null;
        CommonTree GREATER_OR_EQUAL421_tree=null;
        CommonTree LESS_THAN422_tree=null;
        CommonTree GREATER_THAN423_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }
            // ../etc/JamlAttrHash.g:887:5: ( shiftExpression ( ( LESS_OR_EQUAL | GREATER_OR_EQUAL | LESS_THAN | GREATER_THAN ) shiftExpression )* )
            // ../etc/JamlAttrHash.g:887:9: shiftExpression ( ( LESS_OR_EQUAL | GREATER_OR_EQUAL | LESS_THAN | GREATER_THAN ) shiftExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_shiftExpression_in_relationalExpression11314);
            shiftExpression419=shiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, shiftExpression419.getTree());
            // ../etc/JamlAttrHash.g:888:9: ( ( LESS_OR_EQUAL | GREATER_OR_EQUAL | LESS_THAN | GREATER_THAN ) shiftExpression )*
            loop123:
            do {
                int alt123=2;
                int LA123_0 = input.LA(1);

                if ( ((LA123_0>=GREATER_OR_EQUAL && LA123_0<=GREATER_THAN)||(LA123_0>=LESS_OR_EQUAL && LA123_0<=LESS_THAN)) ) {
                    alt123=1;
                }


                switch (alt123) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:888:13: ( LESS_OR_EQUAL | GREATER_OR_EQUAL | LESS_THAN | GREATER_THAN ) shiftExpression
            	    {
            	    // ../etc/JamlAttrHash.g:888:13: ( LESS_OR_EQUAL | GREATER_OR_EQUAL | LESS_THAN | GREATER_THAN )
            	    int alt122=4;
            	    switch ( input.LA(1) ) {
            	    case LESS_OR_EQUAL:
            	        {
            	        alt122=1;
            	        }
            	        break;
            	    case GREATER_OR_EQUAL:
            	        {
            	        alt122=2;
            	        }
            	        break;
            	    case LESS_THAN:
            	        {
            	        alt122=3;
            	        }
            	        break;
            	    case GREATER_THAN:
            	        {
            	        alt122=4;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 122, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt122) {
            	        case 1 :
            	            // ../etc/JamlAttrHash.g:888:17: LESS_OR_EQUAL
            	            {
            	            LESS_OR_EQUAL420=(Token)match(input,LESS_OR_EQUAL,FOLLOW_LESS_OR_EQUAL_in_relationalExpression11333); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            LESS_OR_EQUAL420_tree = (CommonTree)adaptor.create(LESS_OR_EQUAL420);
            	            root_0 = (CommonTree)adaptor.becomeRoot(LESS_OR_EQUAL420_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // ../etc/JamlAttrHash.g:889:17: GREATER_OR_EQUAL
            	            {
            	            GREATER_OR_EQUAL421=(Token)match(input,GREATER_OR_EQUAL,FOLLOW_GREATER_OR_EQUAL_in_relationalExpression11352); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            GREATER_OR_EQUAL421_tree = (CommonTree)adaptor.create(GREATER_OR_EQUAL421);
            	            root_0 = (CommonTree)adaptor.becomeRoot(GREATER_OR_EQUAL421_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // ../etc/JamlAttrHash.g:890:17: LESS_THAN
            	            {
            	            LESS_THAN422=(Token)match(input,LESS_THAN,FOLLOW_LESS_THAN_in_relationalExpression11371); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            LESS_THAN422_tree = (CommonTree)adaptor.create(LESS_THAN422);
            	            root_0 = (CommonTree)adaptor.becomeRoot(LESS_THAN422_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 4 :
            	            // ../etc/JamlAttrHash.g:891:17: GREATER_THAN
            	            {
            	            GREATER_THAN423=(Token)match(input,GREATER_THAN,FOLLOW_GREATER_THAN_in_relationalExpression11390); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            GREATER_THAN423_tree = (CommonTree)adaptor.create(GREATER_THAN423);
            	            root_0 = (CommonTree)adaptor.becomeRoot(GREATER_THAN423_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_shiftExpression_in_relationalExpression11419);
            	    shiftExpression424=shiftExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, shiftExpression424.getTree());

            	    }
            	    break;

            	default :
            	    break loop123;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("relationalExpression", 103);
            if ( state.backtracking>0 ) { memoize(input, 103, relationalExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "relationalExpression"

    public static class shiftExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "shiftExpression"
    // ../etc/JamlAttrHash.g:897:1: shiftExpression : additiveExpression ( ( BIT_SHIFT_RIGHT | SHIFT_RIGHT | SHIFT_LEFT ) additiveExpression )* ;
    public final JamlAttrHashParser.shiftExpression_return shiftExpression() throws RecognitionException {
    traceIn("shiftExpression", 104);
        JamlAttrHashParser.shiftExpression_return retval = new JamlAttrHashParser.shiftExpression_return();
        retval.start = input.LT(1);
        int shiftExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token BIT_SHIFT_RIGHT426=null;
        Token SHIFT_RIGHT427=null;
        Token SHIFT_LEFT428=null;
        JamlAttrHashParser.additiveExpression_return additiveExpression425 = null;

        JamlAttrHashParser.additiveExpression_return additiveExpression429 = null;


        CommonTree BIT_SHIFT_RIGHT426_tree=null;
        CommonTree SHIFT_RIGHT427_tree=null;
        CommonTree SHIFT_LEFT428_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }
            // ../etc/JamlAttrHash.g:898:5: ( additiveExpression ( ( BIT_SHIFT_RIGHT | SHIFT_RIGHT | SHIFT_LEFT ) additiveExpression )* )
            // ../etc/JamlAttrHash.g:898:9: additiveExpression ( ( BIT_SHIFT_RIGHT | SHIFT_RIGHT | SHIFT_LEFT ) additiveExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_additiveExpression_in_shiftExpression11453);
            additiveExpression425=additiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, additiveExpression425.getTree());
            // ../etc/JamlAttrHash.g:899:9: ( ( BIT_SHIFT_RIGHT | SHIFT_RIGHT | SHIFT_LEFT ) additiveExpression )*
            loop125:
            do {
                int alt125=2;
                int LA125_0 = input.LA(1);

                if ( (LA125_0==BIT_SHIFT_RIGHT||LA125_0==SHIFT_LEFT||LA125_0==SHIFT_RIGHT) ) {
                    alt125=1;
                }


                switch (alt125) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:899:13: ( BIT_SHIFT_RIGHT | SHIFT_RIGHT | SHIFT_LEFT ) additiveExpression
            	    {
            	    // ../etc/JamlAttrHash.g:899:13: ( BIT_SHIFT_RIGHT | SHIFT_RIGHT | SHIFT_LEFT )
            	    int alt124=3;
            	    switch ( input.LA(1) ) {
            	    case BIT_SHIFT_RIGHT:
            	        {
            	        alt124=1;
            	        }
            	        break;
            	    case SHIFT_RIGHT:
            	        {
            	        alt124=2;
            	        }
            	        break;
            	    case SHIFT_LEFT:
            	        {
            	        alt124=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 124, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt124) {
            	        case 1 :
            	            // ../etc/JamlAttrHash.g:899:17: BIT_SHIFT_RIGHT
            	            {
            	            BIT_SHIFT_RIGHT426=(Token)match(input,BIT_SHIFT_RIGHT,FOLLOW_BIT_SHIFT_RIGHT_in_shiftExpression11471); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BIT_SHIFT_RIGHT426_tree = (CommonTree)adaptor.create(BIT_SHIFT_RIGHT426);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BIT_SHIFT_RIGHT426_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // ../etc/JamlAttrHash.g:900:17: SHIFT_RIGHT
            	            {
            	            SHIFT_RIGHT427=(Token)match(input,SHIFT_RIGHT,FOLLOW_SHIFT_RIGHT_in_shiftExpression11490); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            SHIFT_RIGHT427_tree = (CommonTree)adaptor.create(SHIFT_RIGHT427);
            	            root_0 = (CommonTree)adaptor.becomeRoot(SHIFT_RIGHT427_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // ../etc/JamlAttrHash.g:901:17: SHIFT_LEFT
            	            {
            	            SHIFT_LEFT428=(Token)match(input,SHIFT_LEFT,FOLLOW_SHIFT_LEFT_in_shiftExpression11509); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            SHIFT_LEFT428_tree = (CommonTree)adaptor.create(SHIFT_LEFT428);
            	            root_0 = (CommonTree)adaptor.becomeRoot(SHIFT_LEFT428_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_additiveExpression_in_shiftExpression11538);
            	    additiveExpression429=additiveExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, additiveExpression429.getTree());

            	    }
            	    break;

            	default :
            	    break loop125;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("shiftExpression", 104);
            if ( state.backtracking>0 ) { memoize(input, 104, shiftExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "shiftExpression"

    public static class additiveExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "additiveExpression"
    // ../etc/JamlAttrHash.g:907:1: additiveExpression : multiplicativeExpression ( ( PLUS | MINUS ) multiplicativeExpression )* ;
    public final JamlAttrHashParser.additiveExpression_return additiveExpression() throws RecognitionException {
    traceIn("additiveExpression", 105);
        JamlAttrHashParser.additiveExpression_return retval = new JamlAttrHashParser.additiveExpression_return();
        retval.start = input.LT(1);
        int additiveExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token PLUS431=null;
        Token MINUS432=null;
        JamlAttrHashParser.multiplicativeExpression_return multiplicativeExpression430 = null;

        JamlAttrHashParser.multiplicativeExpression_return multiplicativeExpression433 = null;


        CommonTree PLUS431_tree=null;
        CommonTree MINUS432_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }
            // ../etc/JamlAttrHash.g:908:5: ( multiplicativeExpression ( ( PLUS | MINUS ) multiplicativeExpression )* )
            // ../etc/JamlAttrHash.g:908:9: multiplicativeExpression ( ( PLUS | MINUS ) multiplicativeExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression11568);
            multiplicativeExpression430=multiplicativeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplicativeExpression430.getTree());
            // ../etc/JamlAttrHash.g:909:9: ( ( PLUS | MINUS ) multiplicativeExpression )*
            loop127:
            do {
                int alt127=2;
                int LA127_0 = input.LA(1);

                if ( (LA127_0==MINUS||LA127_0==PLUS) ) {
                    alt127=1;
                }


                switch (alt127) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:909:13: ( PLUS | MINUS ) multiplicativeExpression
            	    {
            	    // ../etc/JamlAttrHash.g:909:13: ( PLUS | MINUS )
            	    int alt126=2;
            	    int LA126_0 = input.LA(1);

            	    if ( (LA126_0==PLUS) ) {
            	        alt126=1;
            	    }
            	    else if ( (LA126_0==MINUS) ) {
            	        alt126=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 126, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt126) {
            	        case 1 :
            	            // ../etc/JamlAttrHash.g:909:17: PLUS
            	            {
            	            PLUS431=(Token)match(input,PLUS,FOLLOW_PLUS_in_additiveExpression11586); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUS431_tree = (CommonTree)adaptor.create(PLUS431);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUS431_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // ../etc/JamlAttrHash.g:910:17: MINUS
            	            {
            	            MINUS432=(Token)match(input,MINUS,FOLLOW_MINUS_in_additiveExpression11605); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUS432_tree = (CommonTree)adaptor.create(MINUS432);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUS432_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression11634);
            	    multiplicativeExpression433=multiplicativeExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplicativeExpression433.getTree());

            	    }
            	    break;

            	default :
            	    break loop127;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("additiveExpression", 105);
            if ( state.backtracking>0 ) { memoize(input, 105, additiveExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "additiveExpression"

    public static class multiplicativeExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiplicativeExpression"
    // ../etc/JamlAttrHash.g:916:1: multiplicativeExpression : unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )* ;
    public final JamlAttrHashParser.multiplicativeExpression_return multiplicativeExpression() throws RecognitionException {
    traceIn("multiplicativeExpression", 106);
        JamlAttrHashParser.multiplicativeExpression_return retval = new JamlAttrHashParser.multiplicativeExpression_return();
        retval.start = input.LT(1);
        int multiplicativeExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token STAR435=null;
        Token DIV436=null;
        Token MOD437=null;
        JamlAttrHashParser.unaryExpression_return unaryExpression434 = null;

        JamlAttrHashParser.unaryExpression_return unaryExpression438 = null;


        CommonTree STAR435_tree=null;
        CommonTree DIV436_tree=null;
        CommonTree MOD437_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }
            // ../etc/JamlAttrHash.g:917:5: ( unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )* )
            // ../etc/JamlAttrHash.g:917:9: unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression11664);
            unaryExpression434=unaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression434.getTree());
            // ../etc/JamlAttrHash.g:918:9: ( ( STAR | DIV | MOD ) unaryExpression )*
            loop129:
            do {
                int alt129=2;
                int LA129_0 = input.LA(1);

                if ( (LA129_0==DIV||LA129_0==MOD||LA129_0==STAR) ) {
                    alt129=1;
                }


                switch (alt129) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:918:13: ( STAR | DIV | MOD ) unaryExpression
            	    {
            	    // ../etc/JamlAttrHash.g:918:13: ( STAR | DIV | MOD )
            	    int alt128=3;
            	    switch ( input.LA(1) ) {
            	    case STAR:
            	        {
            	        alt128=1;
            	        }
            	        break;
            	    case DIV:
            	        {
            	        alt128=2;
            	        }
            	        break;
            	    case MOD:
            	        {
            	        alt128=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 128, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt128) {
            	        case 1 :
            	            // ../etc/JamlAttrHash.g:918:17: STAR
            	            {
            	            STAR435=(Token)match(input,STAR,FOLLOW_STAR_in_multiplicativeExpression11683); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            STAR435_tree = (CommonTree)adaptor.create(STAR435);
            	            root_0 = (CommonTree)adaptor.becomeRoot(STAR435_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // ../etc/JamlAttrHash.g:919:17: DIV
            	            {
            	            DIV436=(Token)match(input,DIV,FOLLOW_DIV_in_multiplicativeExpression11702); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DIV436_tree = (CommonTree)adaptor.create(DIV436);
            	            root_0 = (CommonTree)adaptor.becomeRoot(DIV436_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // ../etc/JamlAttrHash.g:920:17: MOD
            	            {
            	            MOD437=(Token)match(input,MOD,FOLLOW_MOD_in_multiplicativeExpression11721); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MOD437_tree = (CommonTree)adaptor.create(MOD437);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MOD437_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression11750);
            	    unaryExpression438=unaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression438.getTree());

            	    }
            	    break;

            	default :
            	    break loop129;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("multiplicativeExpression", 106);
            if ( state.backtracking>0 ) { memoize(input, 106, multiplicativeExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiplicativeExpression"

    public static class unaryExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpression"
    // ../etc/JamlAttrHash.g:926:1: unaryExpression : ( PLUS unaryExpression -> ^( UNARY_PLUS[$PLUS, \"UNARY_PLUS\"] unaryExpression ) | MINUS unaryExpression -> ^( UNARY_MINUS[$MINUS, \"UNARY_MINUS\"] unaryExpression ) | INC postfixedExpression -> ^( PRE_INC[$INC, \"PRE_INC\"] postfixedExpression ) | DEC postfixedExpression -> ^( PRE_DEC[$DEC, \"PRE_DEC\"] postfixedExpression ) | unaryExpressionNotPlusMinus );
    public final JamlAttrHashParser.unaryExpression_return unaryExpression() throws RecognitionException {
    traceIn("unaryExpression", 107);
        JamlAttrHashParser.unaryExpression_return retval = new JamlAttrHashParser.unaryExpression_return();
        retval.start = input.LT(1);
        int unaryExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token PLUS439=null;
        Token MINUS441=null;
        Token INC443=null;
        Token DEC445=null;
        JamlAttrHashParser.unaryExpression_return unaryExpression440 = null;

        JamlAttrHashParser.unaryExpression_return unaryExpression442 = null;

        JamlAttrHashParser.postfixedExpression_return postfixedExpression444 = null;

        JamlAttrHashParser.postfixedExpression_return postfixedExpression446 = null;

        JamlAttrHashParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus447 = null;


        CommonTree PLUS439_tree=null;
        CommonTree MINUS441_tree=null;
        CommonTree INC443_tree=null;
        CommonTree DEC445_tree=null;
        RewriteRuleTokenStream stream_DEC=new RewriteRuleTokenStream(adaptor,"token DEC");
        RewriteRuleTokenStream stream_INC=new RewriteRuleTokenStream(adaptor,"token INC");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_postfixedExpression=new RewriteRuleSubtreeStream(adaptor,"rule postfixedExpression");
        RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }
            // ../etc/JamlAttrHash.g:927:5: ( PLUS unaryExpression -> ^( UNARY_PLUS[$PLUS, \"UNARY_PLUS\"] unaryExpression ) | MINUS unaryExpression -> ^( UNARY_MINUS[$MINUS, \"UNARY_MINUS\"] unaryExpression ) | INC postfixedExpression -> ^( PRE_INC[$INC, \"PRE_INC\"] postfixedExpression ) | DEC postfixedExpression -> ^( PRE_DEC[$DEC, \"PRE_DEC\"] postfixedExpression ) | unaryExpressionNotPlusMinus )
            int alt130=5;
            switch ( input.LA(1) ) {
            case PLUS:
                {
                alt130=1;
                }
                break;
            case MINUS:
                {
                alt130=2;
                }
                break;
            case INC:
                {
                alt130=3;
                }
                break;
            case DEC:
                {
                alt130=4;
                }
                break;
            case LESS_THAN:
            case LOGICAL_NOT:
            case LPAREN:
            case NOT:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case SHORT:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
            case IDENT:
            case HEX_LITERAL:
            case OCTAL_LITERAL:
            case DECIMAL_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
                {
                alt130=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 130, 0, input);

                throw nvae;
            }

            switch (alt130) {
                case 1 :
                    // ../etc/JamlAttrHash.g:927:9: PLUS unaryExpression
                    {
                    PLUS439=(Token)match(input,PLUS,FOLLOW_PLUS_in_unaryExpression11784); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(PLUS439);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression11786);
                    unaryExpression440=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression440.getTree());


                    // AST REWRITE
                    // elements: unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 927:37: -> ^( UNARY_PLUS[$PLUS, \"UNARY_PLUS\"] unaryExpression )
                    {
                        // ../etc/JamlAttrHash.g:927:41: ^( UNARY_PLUS[$PLUS, \"UNARY_PLUS\"] unaryExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UNARY_PLUS, PLUS439, "UNARY_PLUS"), root_1);

                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:928:9: MINUS unaryExpression
                    {
                    MINUS441=(Token)match(input,MINUS,FOLLOW_MINUS_in_unaryExpression11813); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS441);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression11815);
                    unaryExpression442=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression442.getTree());


                    // AST REWRITE
                    // elements: unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 928:37: -> ^( UNARY_MINUS[$MINUS, \"UNARY_MINUS\"] unaryExpression )
                    {
                        // ../etc/JamlAttrHash.g:928:41: ^( UNARY_MINUS[$MINUS, \"UNARY_MINUS\"] unaryExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UNARY_MINUS, MINUS441, "UNARY_MINUS"), root_1);

                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // ../etc/JamlAttrHash.g:929:9: INC postfixedExpression
                    {
                    INC443=(Token)match(input,INC,FOLLOW_INC_in_unaryExpression11841); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INC.add(INC443);

                    pushFollow(FOLLOW_postfixedExpression_in_unaryExpression11843);
                    postfixedExpression444=postfixedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_postfixedExpression.add(postfixedExpression444.getTree());


                    // AST REWRITE
                    // elements: postfixedExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 929:37: -> ^( PRE_INC[$INC, \"PRE_INC\"] postfixedExpression )
                    {
                        // ../etc/JamlAttrHash.g:929:41: ^( PRE_INC[$INC, \"PRE_INC\"] postfixedExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PRE_INC, INC443, "PRE_INC"), root_1);

                        adaptor.addChild(root_1, stream_postfixedExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // ../etc/JamlAttrHash.g:930:9: DEC postfixedExpression
                    {
                    DEC445=(Token)match(input,DEC,FOLLOW_DEC_in_unaryExpression11867); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DEC.add(DEC445);

                    pushFollow(FOLLOW_postfixedExpression_in_unaryExpression11869);
                    postfixedExpression446=postfixedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_postfixedExpression.add(postfixedExpression446.getTree());


                    // AST REWRITE
                    // elements: postfixedExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 930:37: -> ^( PRE_DEC[$DEC, \"PRE_DEC\"] postfixedExpression )
                    {
                        // ../etc/JamlAttrHash.g:930:41: ^( PRE_DEC[$DEC, \"PRE_DEC\"] postfixedExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PRE_DEC, DEC445, "PRE_DEC"), root_1);

                        adaptor.addChild(root_1, stream_postfixedExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // ../etc/JamlAttrHash.g:931:9: unaryExpressionNotPlusMinus
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression11893);
                    unaryExpressionNotPlusMinus447=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpressionNotPlusMinus447.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("unaryExpression", 107);
            if ( state.backtracking>0 ) { memoize(input, 107, unaryExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unaryExpression"

    public static class unaryExpressionNotPlusMinus_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpressionNotPlusMinus"
    // ../etc/JamlAttrHash.g:934:1: unaryExpressionNotPlusMinus : ( NOT unaryExpression -> ^( NOT unaryExpression ) | LOGICAL_NOT unaryExpression -> ^( LOGICAL_NOT unaryExpression ) | LPAREN type RPAREN unaryExpression -> ^( CAST_EXPR[$LPAREN, \"CAST_EXPR\"] type unaryExpression ) | postfixedExpression );
    public final JamlAttrHashParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus() throws RecognitionException {
    traceIn("unaryExpressionNotPlusMinus", 108);
        JamlAttrHashParser.unaryExpressionNotPlusMinus_return retval = new JamlAttrHashParser.unaryExpressionNotPlusMinus_return();
        retval.start = input.LT(1);
        int unaryExpressionNotPlusMinus_StartIndex = input.index();
        CommonTree root_0 = null;

        Token NOT448=null;
        Token LOGICAL_NOT450=null;
        Token LPAREN452=null;
        Token RPAREN454=null;
        JamlAttrHashParser.unaryExpression_return unaryExpression449 = null;

        JamlAttrHashParser.unaryExpression_return unaryExpression451 = null;

        JamlAttrHashParser.type_return type453 = null;

        JamlAttrHashParser.unaryExpression_return unaryExpression455 = null;

        JamlAttrHashParser.postfixedExpression_return postfixedExpression456 = null;


        CommonTree NOT448_tree=null;
        CommonTree LOGICAL_NOT450_tree=null;
        CommonTree LPAREN452_tree=null;
        CommonTree RPAREN454_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LOGICAL_NOT=new RewriteRuleTokenStream(adaptor,"token LOGICAL_NOT");
        RewriteRuleTokenStream stream_NOT=new RewriteRuleTokenStream(adaptor,"token NOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }
            // ../etc/JamlAttrHash.g:935:5: ( NOT unaryExpression -> ^( NOT unaryExpression ) | LOGICAL_NOT unaryExpression -> ^( LOGICAL_NOT unaryExpression ) | LPAREN type RPAREN unaryExpression -> ^( CAST_EXPR[$LPAREN, \"CAST_EXPR\"] type unaryExpression ) | postfixedExpression )
            int alt131=4;
            alt131 = dfa131.predict(input);
            switch (alt131) {
                case 1 :
                    // ../etc/JamlAttrHash.g:935:9: NOT unaryExpression
                    {
                    NOT448=(Token)match(input,NOT,FOLLOW_NOT_in_unaryExpressionNotPlusMinus11912); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NOT.add(NOT448);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus11914);
                    unaryExpression449=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression449.getTree());


                    // AST REWRITE
                    // elements: unaryExpression, NOT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 935:57: -> ^( NOT unaryExpression )
                    {
                        // ../etc/JamlAttrHash.g:935:61: ^( NOT unaryExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_NOT.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:936:9: LOGICAL_NOT unaryExpression
                    {
                    LOGICAL_NOT450=(Token)match(input,LOGICAL_NOT,FOLLOW_LOGICAL_NOT_in_unaryExpressionNotPlusMinus11961); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LOGICAL_NOT.add(LOGICAL_NOT450);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus11963);
                    unaryExpression451=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression451.getTree());


                    // AST REWRITE
                    // elements: LOGICAL_NOT, unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 936:57: -> ^( LOGICAL_NOT unaryExpression )
                    {
                        // ../etc/JamlAttrHash.g:936:61: ^( LOGICAL_NOT unaryExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_LOGICAL_NOT.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // ../etc/JamlAttrHash.g:937:9: LPAREN type RPAREN unaryExpression
                    {
                    LPAREN452=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_unaryExpressionNotPlusMinus12002); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN452);

                    pushFollow(FOLLOW_type_in_unaryExpressionNotPlusMinus12004);
                    type453=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type453.getTree());
                    RPAREN454=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_unaryExpressionNotPlusMinus12006); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN454);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus12008);
                    unaryExpression455=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression455.getTree());


                    // AST REWRITE
                    // elements: unaryExpression, type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 937:57: -> ^( CAST_EXPR[$LPAREN, \"CAST_EXPR\"] type unaryExpression )
                    {
                        // ../etc/JamlAttrHash.g:937:61: ^( CAST_EXPR[$LPAREN, \"CAST_EXPR\"] type unaryExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CAST_EXPR, LPAREN452, "CAST_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_type.nextTree());
                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // ../etc/JamlAttrHash.g:938:9: postfixedExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_postfixedExpression_in_unaryExpressionNotPlusMinus12043);
                    postfixedExpression456=postfixedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, postfixedExpression456.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("unaryExpressionNotPlusMinus", 108);
            if ( state.backtracking>0 ) { memoize(input, 108, unaryExpressionNotPlusMinus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unaryExpressionNotPlusMinus"

    public static class postfixedExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "postfixedExpression"
    // ../etc/JamlAttrHash.g:941:1: postfixedExpression : ( primaryExpression -> primaryExpression ) (outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) ) | LBRACK expression RBRACK -> ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression ) )* ( INC -> ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression) | DEC -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression) )? ;
    public final JamlAttrHashParser.postfixedExpression_return postfixedExpression() throws RecognitionException {
    traceIn("postfixedExpression", 109);
        JamlAttrHashParser.postfixedExpression_return retval = new JamlAttrHashParser.postfixedExpression_return();
        retval.start = input.LT(1);
        int postfixedExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token outerDot=null;
        Token Super=null;
        Token innerDot=null;
        Token IDENT459=null;
        Token THIS461=null;
        Token SUPER463=null;
        Token IDENT464=null;
        Token LBRACK467=null;
        Token RBRACK469=null;
        Token INC470=null;
        Token DEC471=null;
        JamlAttrHashParser.primaryExpression_return primaryExpression457 = null;

        JamlAttrHashParser.genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified458 = null;

        JamlAttrHashParser.arguments_return arguments460 = null;

        JamlAttrHashParser.arguments_return arguments462 = null;

        JamlAttrHashParser.arguments_return arguments465 = null;

        JamlAttrHashParser.innerNewExpression_return innerNewExpression466 = null;

        JamlAttrHashParser.expression_return expression468 = null;


        CommonTree outerDot_tree=null;
        CommonTree Super_tree=null;
        CommonTree innerDot_tree=null;
        CommonTree IDENT459_tree=null;
        CommonTree THIS461_tree=null;
        CommonTree SUPER463_tree=null;
        CommonTree IDENT464_tree=null;
        CommonTree LBRACK467_tree=null;
        CommonTree RBRACK469_tree=null;
        CommonTree INC470_tree=null;
        CommonTree DEC471_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_INC=new RewriteRuleTokenStream(adaptor,"token INC");
        RewriteRuleTokenStream stream_DEC=new RewriteRuleTokenStream(adaptor,"token DEC");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_SUPER=new RewriteRuleTokenStream(adaptor,"token SUPER");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_THIS=new RewriteRuleTokenStream(adaptor,"token THIS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_primaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule primaryExpression");
        RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
        RewriteRuleSubtreeStream stream_innerNewExpression=new RewriteRuleSubtreeStream(adaptor,"rule innerNewExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }
            // ../etc/JamlAttrHash.g:943:5: ( ( primaryExpression -> primaryExpression ) (outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) ) | LBRACK expression RBRACK -> ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression ) )* ( INC -> ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression) | DEC -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression) )? )
            // ../etc/JamlAttrHash.g:943:9: ( primaryExpression -> primaryExpression ) (outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) ) | LBRACK expression RBRACK -> ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression ) )* ( INC -> ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression) | DEC -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression) )?
            {
            // ../etc/JamlAttrHash.g:943:9: ( primaryExpression -> primaryExpression )
            // ../etc/JamlAttrHash.g:943:13: primaryExpression
            {
            pushFollow(FOLLOW_primaryExpression_in_postfixedExpression12079);
            primaryExpression457=primaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_primaryExpression.add(primaryExpression457.getTree());


            // AST REWRITE
            // elements: primaryExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 943:53: -> primaryExpression
            {
                adaptor.addChild(root_0, stream_primaryExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            // ../etc/JamlAttrHash.g:946:9: (outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) ) | LBRACK expression RBRACK -> ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression ) )*
            loop136:
            do {
                int alt136=3;
                int LA136_0 = input.LA(1);

                if ( (LA136_0==DOT) ) {
                    alt136=1;
                }
                else if ( (LA136_0==LBRACK) ) {
                    alt136=2;
                }


                switch (alt136) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:946:13: outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) )
            	    {
            	    outerDot=(Token)match(input,DOT,FOLLOW_DOT_in_postfixedExpression12141); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(outerDot);

            	    // ../etc/JamlAttrHash.g:947:13: ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) )
            	    int alt135=5;
            	    switch ( input.LA(1) ) {
            	    case LESS_THAN:
            	    case IDENT:
            	        {
            	        alt135=1;
            	        }
            	        break;
            	    case THIS:
            	        {
            	        alt135=2;
            	        }
            	        break;
            	    case SUPER:
            	        {
            	        int LA135_3 = input.LA(2);

            	        if ( (LA135_3==DOT) ) {
            	            alt135=4;
            	        }
            	        else if ( (LA135_3==LPAREN) ) {
            	            alt135=3;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 135, 3, input);

            	            throw nvae;
            	        }
            	        }
            	        break;
            	    case NEW:
            	        {
            	        alt135=5;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 135, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt135) {
            	        case 1 :
            	            // ../etc/JamlAttrHash.g:947:17: ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )?
            	            {
            	            // ../etc/JamlAttrHash.g:947:17: ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) )
            	            // ../etc/JamlAttrHash.g:947:21: ( genericTypeArgumentListSimplified )? IDENT
            	            {
            	            // ../etc/JamlAttrHash.g:947:21: ( genericTypeArgumentListSimplified )?
            	            int alt132=2;
            	            int LA132_0 = input.LA(1);

            	            if ( (LA132_0==LESS_THAN) ) {
            	                alt132=1;
            	            }
            	            switch (alt132) {
            	                case 1 :
            	                    // ../etc/JamlAttrHash.g:0:0: genericTypeArgumentListSimplified
            	                    {
            	                    pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_postfixedExpression12191);
            	                    genericTypeArgumentListSimplified458=genericTypeArgumentListSimplified();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_genericTypeArgumentListSimplified.add(genericTypeArgumentListSimplified458.getTree());

            	                    }
            	                    break;

            	            }

            	            IDENT459=(Token)match(input,IDENT,FOLLOW_IDENT_in_postfixedExpression12273); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IDENT.add(IDENT459);



            	            // AST REWRITE
            	            // elements: postfixedExpression, IDENT, DOT
            	            // token labels: 
            	            // rule labels: retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {
            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (CommonTree)adaptor.nil();
            	            // 949:53: -> ^( DOT $postfixedExpression IDENT )
            	            {
            	                // ../etc/JamlAttrHash.g:949:57: ^( DOT $postfixedExpression IDENT )
            	                {
            	                CommonTree root_1 = (CommonTree)adaptor.nil();
            	                root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());
            	                adaptor.addChild(root_1, stream_IDENT.nextNode());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }

            	            retval.tree = root_0;}
            	            }

            	            // ../etc/JamlAttrHash.g:951:17: ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )?
            	            int alt133=2;
            	            int LA133_0 = input.LA(1);

            	            if ( (LA133_0==LPAREN) ) {
            	                alt133=1;
            	            }
            	            switch (alt133) {
            	                case 1 :
            	                    // ../etc/JamlAttrHash.g:951:21: arguments
            	                    {
            	                    pushFollow(FOLLOW_arguments_in_postfixedExpression12352);
            	                    arguments460=arguments();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_arguments.add(arguments460.getTree());


            	                    // AST REWRITE
            	                    // elements: genericTypeArgumentListSimplified, arguments, postfixedExpression
            	                    // token labels: 
            	                    // rule labels: retval
            	                    // token list labels: 
            	                    // rule list labels: 
            	                    // wildcard labels: 
            	                    if ( state.backtracking==0 ) {
            	                    retval.tree = root_0;
            	                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	                    root_0 = (CommonTree)adaptor.nil();
            	                    // 951:53: -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments )
            	                    {
            	                        // ../etc/JamlAttrHash.g:951:57: ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments )
            	                        {
            	                        CommonTree root_1 = (CommonTree)adaptor.nil();
            	                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_CALL, "METHOD_CALL"), root_1);

            	                        adaptor.addChild(root_1, stream_retval.nextTree());
            	                        // ../etc/JamlAttrHash.g:951:92: ( genericTypeArgumentListSimplified )?
            	                        if ( stream_genericTypeArgumentListSimplified.hasNext() ) {
            	                            adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());

            	                        }
            	                        stream_genericTypeArgumentListSimplified.reset();
            	                        adaptor.addChild(root_1, stream_arguments.nextTree());

            	                        adaptor.addChild(root_0, root_1);
            	                        }

            	                    }

            	                    retval.tree = root_0;}
            	                    }
            	                    break;

            	            }


            	            }
            	            break;
            	        case 2 :
            	            // ../etc/JamlAttrHash.g:953:17: THIS
            	            {
            	            THIS461=(Token)match(input,THIS,FOLLOW_THIS_in_postfixedExpression12426); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_THIS.add(THIS461);



            	            // AST REWRITE
            	            // elements: DOT, THIS, postfixedExpression
            	            // token labels: 
            	            // rule labels: retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {
            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (CommonTree)adaptor.nil();
            	            // 953:53: -> ^( DOT $postfixedExpression THIS )
            	            {
            	                // ../etc/JamlAttrHash.g:953:57: ^( DOT $postfixedExpression THIS )
            	                {
            	                CommonTree root_1 = (CommonTree)adaptor.nil();
            	                root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());
            	                adaptor.addChild(root_1, stream_THIS.nextNode());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }

            	            retval.tree = root_0;}
            	            }
            	            break;
            	        case 3 :
            	            // ../etc/JamlAttrHash.g:954:17: Super= SUPER arguments
            	            {
            	            Super=(Token)match(input,SUPER,FOLLOW_SUPER_in_postfixedExpression12489); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_SUPER.add(Super);

            	            pushFollow(FOLLOW_arguments_in_postfixedExpression12491);
            	            arguments462=arguments();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_arguments.add(arguments462.getTree());


            	            // AST REWRITE
            	            // elements: arguments, postfixedExpression
            	            // token labels: 
            	            // rule labels: retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {
            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (CommonTree)adaptor.nil();
            	            // 954:57: -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments )
            	            {
            	                // ../etc/JamlAttrHash.g:954:61: ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments )
            	                {
            	                CommonTree root_1 = (CommonTree)adaptor.nil();
            	                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUPER_CONSTRUCTOR_CALL, Super, "SUPER_CONSTRUCTOR_CALL"), root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());
            	                adaptor.addChild(root_1, stream_arguments.nextTree());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }

            	            retval.tree = root_0;}
            	            }
            	            break;
            	        case 4 :
            	            // ../etc/JamlAttrHash.g:955:17: ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )?
            	            {
            	            // ../etc/JamlAttrHash.g:955:17: ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) )
            	            // ../etc/JamlAttrHash.g:955:21: SUPER innerDot= DOT IDENT
            	            {
            	            SUPER463=(Token)match(input,SUPER,FOLLOW_SUPER_in_postfixedExpression12544); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_SUPER.add(SUPER463);

            	            innerDot=(Token)match(input,DOT,FOLLOW_DOT_in_postfixedExpression12548); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_DOT.add(innerDot);

            	            IDENT464=(Token)match(input,IDENT,FOLLOW_IDENT_in_postfixedExpression12550); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IDENT.add(IDENT464);



            	            // AST REWRITE
            	            // elements: IDENT, outerDot, innerDot, SUPER, postfixedExpression
            	            // token labels: outerDot, innerDot
            	            // rule labels: retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {
            	            retval.tree = root_0;
            	            RewriteRuleTokenStream stream_outerDot=new RewriteRuleTokenStream(adaptor,"token outerDot",outerDot);
            	            RewriteRuleTokenStream stream_innerDot=new RewriteRuleTokenStream(adaptor,"token innerDot",innerDot);
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (CommonTree)adaptor.nil();
            	            // 955:53: -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT )
            	            {
            	                // ../etc/JamlAttrHash.g:955:57: ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT )
            	                {
            	                CommonTree root_1 = (CommonTree)adaptor.nil();
            	                root_1 = (CommonTree)adaptor.becomeRoot(stream_innerDot.nextNode(), root_1);

            	                // ../etc/JamlAttrHash.g:955:69: ^( $outerDot $postfixedExpression SUPER )
            	                {
            	                CommonTree root_2 = (CommonTree)adaptor.nil();
            	                root_2 = (CommonTree)adaptor.becomeRoot(stream_outerDot.nextNode(), root_2);

            	                adaptor.addChild(root_2, stream_retval.nextTree());
            	                adaptor.addChild(root_2, stream_SUPER.nextNode());

            	                adaptor.addChild(root_1, root_2);
            	                }
            	                adaptor.addChild(root_1, stream_IDENT.nextNode());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }

            	            retval.tree = root_0;}
            	            }

            	            // ../etc/JamlAttrHash.g:957:17: ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )?
            	            int alt134=2;
            	            int LA134_0 = input.LA(1);

            	            if ( (LA134_0==LPAREN) ) {
            	                alt134=1;
            	            }
            	            switch (alt134) {
            	                case 1 :
            	                    // ../etc/JamlAttrHash.g:957:21: arguments
            	                    {
            	                    pushFollow(FOLLOW_arguments_in_postfixedExpression12617);
            	                    arguments465=arguments();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_arguments.add(arguments465.getTree());


            	                    // AST REWRITE
            	                    // elements: postfixedExpression, arguments
            	                    // token labels: 
            	                    // rule labels: retval
            	                    // token list labels: 
            	                    // rule list labels: 
            	                    // wildcard labels: 
            	                    if ( state.backtracking==0 ) {
            	                    retval.tree = root_0;
            	                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	                    root_0 = (CommonTree)adaptor.nil();
            	                    // 957:53: -> ^( METHOD_CALL $postfixedExpression arguments )
            	                    {
            	                        // ../etc/JamlAttrHash.g:957:57: ^( METHOD_CALL $postfixedExpression arguments )
            	                        {
            	                        CommonTree root_1 = (CommonTree)adaptor.nil();
            	                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_CALL, "METHOD_CALL"), root_1);

            	                        adaptor.addChild(root_1, stream_retval.nextTree());
            	                        adaptor.addChild(root_1, stream_arguments.nextTree());

            	                        adaptor.addChild(root_0, root_1);
            	                        }

            	                    }

            	                    retval.tree = root_0;}
            	                    }
            	                    break;

            	            }


            	            }
            	            break;
            	        case 5 :
            	            // ../etc/JamlAttrHash.g:959:17: innerNewExpression
            	            {
            	            pushFollow(FOLLOW_innerNewExpression_in_postfixedExpression12688);
            	            innerNewExpression466=innerNewExpression();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_innerNewExpression.add(innerNewExpression466.getTree());


            	            // AST REWRITE
            	            // elements: DOT, innerNewExpression, postfixedExpression
            	            // token labels: 
            	            // rule labels: retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {
            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (CommonTree)adaptor.nil();
            	            // 959:53: -> ^( DOT $postfixedExpression innerNewExpression )
            	            {
            	                // ../etc/JamlAttrHash.g:959:57: ^( DOT $postfixedExpression innerNewExpression )
            	                {
            	                CommonTree root_1 = (CommonTree)adaptor.nil();
            	                root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());
            	                adaptor.addChild(root_1, stream_innerNewExpression.nextTree());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }

            	            retval.tree = root_0;}
            	            }
            	            break;

            	    }


            	    }
            	    break;
            	case 2 :
            	    // ../etc/JamlAttrHash.g:961:13: LBRACK expression RBRACK
            	    {
            	    LBRACK467=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_postfixedExpression12745); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK467);

            	    pushFollow(FOLLOW_expression_in_postfixedExpression12747);
            	    expression468=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression468.getTree());
            	    RBRACK469=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_postfixedExpression12749); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK469);



            	    // AST REWRITE
            	    // elements: postfixedExpression, expression
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (CommonTree)adaptor.nil();
            	    // 961:53: -> ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression )
            	    {
            	        // ../etc/JamlAttrHash.g:961:57: ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression )
            	        {
            	        CommonTree root_1 = (CommonTree)adaptor.nil();
            	        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_ELEMENT_ACCESS, "ARRAY_ELEMENT_ACCESS"), root_1);

            	        adaptor.addChild(root_1, stream_retval.nextTree());
            	        adaptor.addChild(root_1, stream_expression.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }

            	    retval.tree = root_0;}
            	    }
            	    break;

            	default :
            	    break loop136;
                }
            } while (true);

            // ../etc/JamlAttrHash.g:964:9: ( INC -> ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression) | DEC -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression) )?
            int alt137=3;
            int LA137_0 = input.LA(1);

            if ( (LA137_0==INC) ) {
                alt137=1;
            }
            else if ( (LA137_0==DEC) ) {
                alt137=2;
            }
            switch (alt137) {
                case 1 :
                    // ../etc/JamlAttrHash.g:964:13: INC
                    {
                    INC470=(Token)match(input,INC,FOLLOW_INC_in_postfixedExpression12810); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INC.add(INC470);



                    // AST REWRITE
                    // elements: postfixedExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 964:17: -> ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression)
                    {
                        // ../etc/JamlAttrHash.g:964:20: ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(POST_INC, INC470, "POST_INC"), root_1);

                        adaptor.addChild(root_1, stream_retval.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:965:13: DEC
                    {
                    DEC471=(Token)match(input,DEC,FOLLOW_DEC_in_postfixedExpression12834); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DEC.add(DEC471);



                    // AST REWRITE
                    // elements: postfixedExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 965:17: -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression)
                    {
                        // ../etc/JamlAttrHash.g:965:20: ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(POST_DEC, DEC471, "POST_DEC"), root_1);

                        adaptor.addChild(root_1, stream_retval.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("postfixedExpression", 109);
            if ( state.backtracking>0 ) { memoize(input, 109, postfixedExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "postfixedExpression"

    public static class primaryExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primaryExpression"
    // ../etc/JamlAttrHash.g:969:1: primaryExpression : ( parenthesizedExpression | literal | newExpression | qualifiedIdentExpression | genericTypeArgumentListSimplified ( SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) ) | IDENT arguments -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments ) | THIS arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) ) | ( THIS -> THIS ) ( arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments ) )? | SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] arguments ) | ( SUPER DOT IDENT ) ( arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) ) | ( primitiveType -> primitiveType ) ( arrayDeclarator -> ^( arrayDeclarator $primaryExpression) )* DOT CLASS -> ^( DOT $primaryExpression CLASS ) | VOID DOT CLASS -> ^( DOT VOID CLASS ) );
    public final JamlAttrHashParser.primaryExpression_return primaryExpression() throws RecognitionException {
    traceIn("primaryExpression", 110);
        JamlAttrHashParser.primaryExpression_return retval = new JamlAttrHashParser.primaryExpression_return();
        retval.start = input.LT(1);
        int primaryExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SUPER477=null;
        Token DOT479=null;
        Token IDENT480=null;
        Token IDENT482=null;
        Token THIS484=null;
        Token THIS486=null;
        Token SUPER488=null;
        Token SUPER490=null;
        Token DOT491=null;
        Token IDENT492=null;
        Token DOT496=null;
        Token CLASS497=null;
        Token VOID498=null;
        Token DOT499=null;
        Token CLASS500=null;
        JamlAttrHashParser.parenthesizedExpression_return parenthesizedExpression472 = null;

        JamlAttrHashParser.literal_return literal473 = null;

        JamlAttrHashParser.newExpression_return newExpression474 = null;

        JamlAttrHashParser.qualifiedIdentExpression_return qualifiedIdentExpression475 = null;

        JamlAttrHashParser.genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified476 = null;

        JamlAttrHashParser.arguments_return arguments478 = null;

        JamlAttrHashParser.arguments_return arguments481 = null;

        JamlAttrHashParser.arguments_return arguments483 = null;

        JamlAttrHashParser.arguments_return arguments485 = null;

        JamlAttrHashParser.arguments_return arguments487 = null;

        JamlAttrHashParser.arguments_return arguments489 = null;

        JamlAttrHashParser.arguments_return arguments493 = null;

        JamlAttrHashParser.primitiveType_return primitiveType494 = null;

        JamlAttrHashParser.arrayDeclarator_return arrayDeclarator495 = null;


        CommonTree SUPER477_tree=null;
        CommonTree DOT479_tree=null;
        CommonTree IDENT480_tree=null;
        CommonTree IDENT482_tree=null;
        CommonTree THIS484_tree=null;
        CommonTree THIS486_tree=null;
        CommonTree SUPER488_tree=null;
        CommonTree SUPER490_tree=null;
        CommonTree DOT491_tree=null;
        CommonTree IDENT492_tree=null;
        CommonTree DOT496_tree=null;
        CommonTree CLASS497_tree=null;
        CommonTree VOID498_tree=null;
        CommonTree DOT499_tree=null;
        CommonTree CLASS500_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
        RewriteRuleTokenStream stream_VOID=new RewriteRuleTokenStream(adaptor,"token VOID");
        RewriteRuleTokenStream stream_SUPER=new RewriteRuleTokenStream(adaptor,"token SUPER");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_THIS=new RewriteRuleTokenStream(adaptor,"token THIS");
        RewriteRuleSubtreeStream stream_arrayDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclarator");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
        RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }
            // ../etc/JamlAttrHash.g:970:5: ( parenthesizedExpression | literal | newExpression | qualifiedIdentExpression | genericTypeArgumentListSimplified ( SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) ) | IDENT arguments -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments ) | THIS arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) ) | ( THIS -> THIS ) ( arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments ) )? | SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] arguments ) | ( SUPER DOT IDENT ) ( arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) ) | ( primitiveType -> primitiveType ) ( arrayDeclarator -> ^( arrayDeclarator $primaryExpression) )* DOT CLASS -> ^( DOT $primaryExpression CLASS ) | VOID DOT CLASS -> ^( DOT VOID CLASS ) )
            int alt143=10;
            alt143 = dfa143.predict(input);
            switch (alt143) {
                case 1 :
                    // ../etc/JamlAttrHash.g:970:9: parenthesizedExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_parenthesizedExpression_in_primaryExpression12882);
                    parenthesizedExpression472=parenthesizedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parenthesizedExpression472.getTree());

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:971:9: literal
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_literal_in_primaryExpression12892);
                    literal473=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal473.getTree());

                    }
                    break;
                case 3 :
                    // ../etc/JamlAttrHash.g:972:9: newExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_newExpression_in_primaryExpression12902);
                    newExpression474=newExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, newExpression474.getTree());

                    }
                    break;
                case 4 :
                    // ../etc/JamlAttrHash.g:973:9: qualifiedIdentExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_qualifiedIdentExpression_in_primaryExpression12912);
                    qualifiedIdentExpression475=qualifiedIdentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedIdentExpression475.getTree());

                    }
                    break;
                case 5 :
                    // ../etc/JamlAttrHash.g:974:9: genericTypeArgumentListSimplified ( SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) ) | IDENT arguments -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments ) | THIS arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) )
                    {
                    pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_primaryExpression12922);
                    genericTypeArgumentListSimplified476=genericTypeArgumentListSimplified();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_genericTypeArgumentListSimplified.add(genericTypeArgumentListSimplified476.getTree());
                    // ../etc/JamlAttrHash.g:975:9: ( SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) ) | IDENT arguments -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments ) | THIS arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) )
                    int alt139=3;
                    switch ( input.LA(1) ) {
                    case SUPER:
                        {
                        alt139=1;
                        }
                        break;
                    case IDENT:
                        {
                        alt139=2;
                        }
                        break;
                    case THIS:
                        {
                        alt139=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 139, 0, input);

                        throw nvae;
                    }

                    switch (alt139) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:975:13: SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) )
                            {
                            SUPER477=(Token)match(input,SUPER,FOLLOW_SUPER_in_primaryExpression12937); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SUPER.add(SUPER477);

                            // ../etc/JamlAttrHash.g:976:13: ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) )
                            int alt138=2;
                            int LA138_0 = input.LA(1);

                            if ( (LA138_0==LPAREN) ) {
                                alt138=1;
                            }
                            else if ( (LA138_0==DOT) ) {
                                alt138=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 138, 0, input);

                                throw nvae;
                            }
                            switch (alt138) {
                                case 1 :
                                    // ../etc/JamlAttrHash.g:976:17: arguments
                                    {
                                    pushFollow(FOLLOW_arguments_in_primaryExpression12955);
                                    arguments478=arguments();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_arguments.add(arguments478.getTree());


                                    // AST REWRITE
                                    // elements: arguments, genericTypeArgumentListSimplified
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 976:57: -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments )
                                    {
                                        // ../etc/JamlAttrHash.g:976:61: ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUPER_CONSTRUCTOR_CALL, SUPER477, "SUPER_CONSTRUCTOR_CALL"), root_1);

                                        adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());
                                        adaptor.addChild(root_1, stream_arguments.nextTree());

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;
                                case 2 :
                                    // ../etc/JamlAttrHash.g:977:17: DOT IDENT arguments
                                    {
                                    DOT479=(Token)match(input,DOT,FOLLOW_DOT_in_primaryExpression13015); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_DOT.add(DOT479);

                                    IDENT480=(Token)match(input,IDENT,FOLLOW_IDENT_in_primaryExpression13017); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT480);

                                    pushFollow(FOLLOW_arguments_in_primaryExpression13019);
                                    arguments481=arguments();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_arguments.add(arguments481.getTree());


                                    // AST REWRITE
                                    // elements: genericTypeArgumentListSimplified, DOT, arguments, SUPER, IDENT
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 977:57: -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments )
                                    {
                                        // ../etc/JamlAttrHash.g:977:61: ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_CALL, "METHOD_CALL"), root_1);

                                        // ../etc/JamlAttrHash.g:977:75: ^( DOT SUPER IDENT )
                                        {
                                        CommonTree root_2 = (CommonTree)adaptor.nil();
                                        root_2 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_2);

                                        adaptor.addChild(root_2, stream_SUPER.nextNode());
                                        adaptor.addChild(root_2, stream_IDENT.nextNode());

                                        adaptor.addChild(root_1, root_2);
                                        }
                                        adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());
                                        adaptor.addChild(root_1, stream_arguments.nextTree());

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // ../etc/JamlAttrHash.g:979:13: IDENT arguments
                            {
                            IDENT482=(Token)match(input,IDENT,FOLLOW_IDENT_in_primaryExpression13086); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(IDENT482);

                            pushFollow(FOLLOW_arguments_in_primaryExpression13088);
                            arguments483=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arguments.add(arguments483.getTree());


                            // AST REWRITE
                            // elements: IDENT, arguments, genericTypeArgumentListSimplified
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 979:57: -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments )
                            {
                                // ../etc/JamlAttrHash.g:979:61: ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_CALL, "METHOD_CALL"), root_1);

                                adaptor.addChild(root_1, stream_IDENT.nextNode());
                                adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());
                                adaptor.addChild(root_1, stream_arguments.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            // ../etc/JamlAttrHash.g:980:13: THIS arguments
                            {
                            THIS484=(Token)match(input,THIS,FOLLOW_THIS_in_primaryExpression13143); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THIS.add(THIS484);

                            pushFollow(FOLLOW_arguments_in_primaryExpression13145);
                            arguments485=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arguments.add(arguments485.getTree());


                            // AST REWRITE
                            // elements: genericTypeArgumentListSimplified, arguments
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 980:57: -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments )
                            {
                                // ../etc/JamlAttrHash.g:980:61: ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(THIS_CONSTRUCTOR_CALL, THIS484, "THIS_CONSTRUCTOR_CALL"), root_1);

                                adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());
                                adaptor.addChild(root_1, stream_arguments.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 6 :
                    // ../etc/JamlAttrHash.g:982:9: ( THIS -> THIS ) ( arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments ) )?
                    {
                    // ../etc/JamlAttrHash.g:982:9: ( THIS -> THIS )
                    // ../etc/JamlAttrHash.g:982:13: THIS
                    {
                    THIS486=(Token)match(input,THIS,FOLLOW_THIS_in_primaryExpression13210); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_THIS.add(THIS486);



                    // AST REWRITE
                    // elements: THIS
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 982:57: -> THIS
                    {
                        adaptor.addChild(root_0, stream_THIS.nextNode());

                    }

                    retval.tree = root_0;}
                    }

                    // ../etc/JamlAttrHash.g:984:9: ( arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments ) )?
                    int alt140=2;
                    int LA140_0 = input.LA(1);

                    if ( (LA140_0==LPAREN) ) {
                        alt140=1;
                    }
                    switch (alt140) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:984:13: arguments
                            {
                            pushFollow(FOLLOW_arguments_in_primaryExpression13278);
                            arguments487=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arguments.add(arguments487.getTree());


                            // AST REWRITE
                            // elements: arguments
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 984:57: -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments )
                            {
                                // ../etc/JamlAttrHash.g:984:61: ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(THIS_CONSTRUCTOR_CALL, THIS486, "THIS_CONSTRUCTOR_CALL"), root_1);

                                adaptor.addChild(root_1, stream_arguments.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 7 :
                    // ../etc/JamlAttrHash.g:986:9: SUPER arguments
                    {
                    SUPER488=(Token)match(input,SUPER,FOLLOW_SUPER_in_primaryExpression13343); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SUPER.add(SUPER488);

                    pushFollow(FOLLOW_arguments_in_primaryExpression13345);
                    arguments489=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arguments.add(arguments489.getTree());


                    // AST REWRITE
                    // elements: arguments
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 986:57: -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] arguments )
                    {
                        // ../etc/JamlAttrHash.g:986:61: ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] arguments )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUPER_CONSTRUCTOR_CALL, SUPER488, "SUPER_CONSTRUCTOR_CALL"), root_1);

                        adaptor.addChild(root_1, stream_arguments.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 8 :
                    // ../etc/JamlAttrHash.g:987:9: ( SUPER DOT IDENT ) ( arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) )
                    {
                    // ../etc/JamlAttrHash.g:987:9: ( SUPER DOT IDENT )
                    // ../etc/JamlAttrHash.g:987:13: SUPER DOT IDENT
                    {
                    SUPER490=(Token)match(input,SUPER,FOLLOW_SUPER_in_primaryExpression13401); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SUPER.add(SUPER490);

                    DOT491=(Token)match(input,DOT,FOLLOW_DOT_in_primaryExpression13403); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT491);

                    IDENT492=(Token)match(input,IDENT,FOLLOW_IDENT_in_primaryExpression13405); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT492);


                    }

                    // ../etc/JamlAttrHash.g:989:9: ( arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) )
                    int alt141=2;
                    int LA141_0 = input.LA(1);

                    if ( (LA141_0==LPAREN) ) {
                        alt141=1;
                    }
                    else if ( (LA141_0==EOF||(LA141_0>=AND && LA141_0<=ASSIGN)||(LA141_0>=BIT_SHIFT_RIGHT && LA141_0<=DOT)||(LA141_0>=EQUAL && LA141_0<=LBRACK)||(LA141_0>=LESS_OR_EQUAL && LA141_0<=LOGICAL_AND)||LA141_0==LOGICAL_OR||(LA141_0>=MINUS && LA141_0<=MOD_ASSIGN)||(LA141_0>=NOT_EQUAL && LA141_0<=XOR_ASSIGN)||LA141_0==INSTANCEOF) ) {
                        alt141=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 141, 0, input);

                        throw nvae;
                    }
                    switch (alt141) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:989:13: arguments
                            {
                            pushFollow(FOLLOW_arguments_in_primaryExpression13429);
                            arguments493=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arguments.add(arguments493.getTree());


                            // AST REWRITE
                            // elements: SUPER, DOT, arguments, IDENT
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 989:57: -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments )
                            {
                                // ../etc/JamlAttrHash.g:989:61: ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_CALL, "METHOD_CALL"), root_1);

                                // ../etc/JamlAttrHash.g:989:75: ^( DOT SUPER IDENT )
                                {
                                CommonTree root_2 = (CommonTree)adaptor.nil();
                                root_2 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_2);

                                adaptor.addChild(root_2, stream_SUPER.nextNode());
                                adaptor.addChild(root_2, stream_IDENT.nextNode());

                                adaptor.addChild(root_1, root_2);
                                }
                                adaptor.addChild(root_1, stream_arguments.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // ../etc/JamlAttrHash.g:990:57: 
                            {

                            // AST REWRITE
                            // elements: SUPER, DOT, IDENT
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 990:57: -> ^( DOT SUPER IDENT )
                            {
                                // ../etc/JamlAttrHash.g:990:61: ^( DOT SUPER IDENT )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_SUPER.nextNode());
                                adaptor.addChild(root_1, stream_IDENT.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 9 :
                    // ../etc/JamlAttrHash.g:992:9: ( primitiveType -> primitiveType ) ( arrayDeclarator -> ^( arrayDeclarator $primaryExpression) )* DOT CLASS
                    {
                    // ../etc/JamlAttrHash.g:992:9: ( primitiveType -> primitiveType )
                    // ../etc/JamlAttrHash.g:992:13: primitiveType
                    {
                    pushFollow(FOLLOW_primitiveType_in_primaryExpression13571);
                    primitiveType494=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitiveType.add(primitiveType494.getTree());


                    // AST REWRITE
                    // elements: primitiveType
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 992:57: -> primitiveType
                    {
                        adaptor.addChild(root_0, stream_primitiveType.nextTree());

                    }

                    retval.tree = root_0;}
                    }

                    // ../etc/JamlAttrHash.g:994:9: ( arrayDeclarator -> ^( arrayDeclarator $primaryExpression) )*
                    loop142:
                    do {
                        int alt142=2;
                        int LA142_0 = input.LA(1);

                        if ( (LA142_0==LBRACK) ) {
                            alt142=1;
                        }


                        switch (alt142) {
                    	case 1 :
                    	    // ../etc/JamlAttrHash.g:994:13: arrayDeclarator
                    	    {
                    	    pushFollow(FOLLOW_arrayDeclarator_in_primaryExpression13630);
                    	    arrayDeclarator495=arrayDeclarator();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_arrayDeclarator.add(arrayDeclarator495.getTree());


                    	    // AST REWRITE
                    	    // elements: primaryExpression, arrayDeclarator
                    	    // token labels: 
                    	    // rule labels: retval
                    	    // token list labels: 
                    	    // rule list labels: 
                    	    // wildcard labels: 
                    	    if ( state.backtracking==0 ) {
                    	    retval.tree = root_0;
                    	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    	    root_0 = (CommonTree)adaptor.nil();
                    	    // 994:57: -> ^( arrayDeclarator $primaryExpression)
                    	    {
                    	        // ../etc/JamlAttrHash.g:994:61: ^( arrayDeclarator $primaryExpression)
                    	        {
                    	        CommonTree root_1 = (CommonTree)adaptor.nil();
                    	        root_1 = (CommonTree)adaptor.becomeRoot(stream_arrayDeclarator.nextNode(), root_1);

                    	        adaptor.addChild(root_1, stream_retval.nextTree());

                    	        adaptor.addChild(root_0, root_1);
                    	        }

                    	    }

                    	    retval.tree = root_0;}
                    	    }
                    	    break;

                    	default :
                    	    break loop142;
                        }
                    } while (true);

                    DOT496=(Token)match(input,DOT,FOLLOW_DOT_in_primaryExpression13693); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT496);

                    CLASS497=(Token)match(input,CLASS,FOLLOW_CLASS_in_primaryExpression13695); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLASS.add(CLASS497);



                    // AST REWRITE
                    // elements: DOT, primaryExpression, CLASS
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 996:57: -> ^( DOT $primaryExpression CLASS )
                    {
                        // ../etc/JamlAttrHash.g:996:61: ^( DOT $primaryExpression CLASS )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_retval.nextTree());
                        adaptor.addChild(root_1, stream_CLASS.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 10 :
                    // ../etc/JamlAttrHash.g:997:9: VOID DOT CLASS
                    {
                    VOID498=(Token)match(input,VOID,FOLLOW_VOID_in_primaryExpression13755); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VOID.add(VOID498);

                    DOT499=(Token)match(input,DOT,FOLLOW_DOT_in_primaryExpression13757); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT499);

                    CLASS500=(Token)match(input,CLASS,FOLLOW_CLASS_in_primaryExpression13759); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLASS.add(CLASS500);



                    // AST REWRITE
                    // elements: DOT, VOID, CLASS
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 997:57: -> ^( DOT VOID CLASS )
                    {
                        // ../etc/JamlAttrHash.g:997:61: ^( DOT VOID CLASS )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_VOID.nextNode());
                        adaptor.addChild(root_1, stream_CLASS.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("primaryExpression", 110);
            if ( state.backtracking>0 ) { memoize(input, 110, primaryExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "primaryExpression"

    public static class qualifiedIdentExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedIdentExpression"
    // ../etc/JamlAttrHash.g:1000:1: qualifiedIdentExpression : ( qualifiedIdentifier -> qualifiedIdentifier ) ( ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) ) | arguments -> ^( METHOD_CALL qualifiedIdentifier arguments ) | outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) ) )? ;
    public final JamlAttrHashParser.qualifiedIdentExpression_return qualifiedIdentExpression() throws RecognitionException {
    traceIn("qualifiedIdentExpression", 111);
        JamlAttrHashParser.qualifiedIdentExpression_return retval = new JamlAttrHashParser.qualifiedIdentExpression_return();
        retval.start = input.LT(1);
        int qualifiedIdentExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token outerDot=null;
        Token Super=null;
        Token innerDot=null;
        Token DOT503=null;
        Token CLASS504=null;
        Token CLASS506=null;
        Token SUPER509=null;
        Token IDENT510=null;
        Token IDENT512=null;
        Token THIS514=null;
        JamlAttrHashParser.qualifiedIdentifier_return qualifiedIdentifier501 = null;

        JamlAttrHashParser.arrayDeclarator_return arrayDeclarator502 = null;

        JamlAttrHashParser.arguments_return arguments505 = null;

        JamlAttrHashParser.genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified507 = null;

        JamlAttrHashParser.arguments_return arguments508 = null;

        JamlAttrHashParser.arguments_return arguments511 = null;

        JamlAttrHashParser.arguments_return arguments513 = null;

        JamlAttrHashParser.arguments_return arguments515 = null;

        JamlAttrHashParser.innerNewExpression_return innerNewExpression516 = null;


        CommonTree outerDot_tree=null;
        CommonTree Super_tree=null;
        CommonTree innerDot_tree=null;
        CommonTree DOT503_tree=null;
        CommonTree CLASS504_tree=null;
        CommonTree CLASS506_tree=null;
        CommonTree SUPER509_tree=null;
        CommonTree IDENT510_tree=null;
        CommonTree IDENT512_tree=null;
        CommonTree THIS514_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
        RewriteRuleTokenStream stream_SUPER=new RewriteRuleTokenStream(adaptor,"token SUPER");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_THIS=new RewriteRuleTokenStream(adaptor,"token THIS");
        RewriteRuleSubtreeStream stream_arrayDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclarator");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_qualifiedIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedIdentifier");
        RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
        RewriteRuleSubtreeStream stream_innerNewExpression=new RewriteRuleSubtreeStream(adaptor,"rule innerNewExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }
            // ../etc/JamlAttrHash.g:1002:5: ( ( qualifiedIdentifier -> qualifiedIdentifier ) ( ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) ) | arguments -> ^( METHOD_CALL qualifiedIdentifier arguments ) | outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) ) )? )
            // ../etc/JamlAttrHash.g:1002:9: ( qualifiedIdentifier -> qualifiedIdentifier ) ( ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) ) | arguments -> ^( METHOD_CALL qualifiedIdentifier arguments ) | outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) ) )?
            {
            // ../etc/JamlAttrHash.g:1002:9: ( qualifiedIdentifier -> qualifiedIdentifier )
            // ../etc/JamlAttrHash.g:1002:13: qualifiedIdentifier
            {
            pushFollow(FOLLOW_qualifiedIdentifier_in_qualifiedIdentExpression13839);
            qualifiedIdentifier501=qualifiedIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifiedIdentifier.add(qualifiedIdentifier501.getTree());


            // AST REWRITE
            // elements: qualifiedIdentifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1002:61: -> qualifiedIdentifier
            {
                adaptor.addChild(root_0, stream_qualifiedIdentifier.nextTree());

            }

            retval.tree = root_0;}
            }

            // ../etc/JamlAttrHash.g:1005:9: ( ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) ) | arguments -> ^( METHOD_CALL qualifiedIdentifier arguments ) | outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) ) )?
            int alt147=4;
            alt147 = dfa147.predict(input);
            switch (alt147) {
                case 1 :
                    // ../etc/JamlAttrHash.g:1005:13: ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) )
                    {
                    // ../etc/JamlAttrHash.g:1005:13: ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+
                    int cnt144=0;
                    loop144:
                    do {
                        int alt144=2;
                        int LA144_0 = input.LA(1);

                        if ( (LA144_0==LBRACK) ) {
                            alt144=1;
                        }


                        switch (alt144) {
                    	case 1 :
                    	    // ../etc/JamlAttrHash.g:1005:17: arrayDeclarator
                    	    {
                    	    pushFollow(FOLLOW_arrayDeclarator_in_qualifiedIdentExpression13909);
                    	    arrayDeclarator502=arrayDeclarator();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_arrayDeclarator.add(arrayDeclarator502.getTree());


                    	    // AST REWRITE
                    	    // elements: arrayDeclarator, qualifiedIdentExpression
                    	    // token labels: 
                    	    // rule labels: retval
                    	    // token list labels: 
                    	    // rule list labels: 
                    	    // wildcard labels: 
                    	    if ( state.backtracking==0 ) {
                    	    retval.tree = root_0;
                    	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    	    root_0 = (CommonTree)adaptor.nil();
                    	    // 1005:57: -> ^( arrayDeclarator $qualifiedIdentExpression)
                    	    {
                    	        // ../etc/JamlAttrHash.g:1005:61: ^( arrayDeclarator $qualifiedIdentExpression)
                    	        {
                    	        CommonTree root_1 = (CommonTree)adaptor.nil();
                    	        root_1 = (CommonTree)adaptor.becomeRoot(stream_arrayDeclarator.nextNode(), root_1);

                    	        adaptor.addChild(root_1, stream_retval.nextTree());

                    	        adaptor.addChild(root_0, root_1);
                    	        }

                    	    }

                    	    retval.tree = root_0;}
                    	    }
                    	    break;

                    	default :
                    	    if ( cnt144 >= 1 ) break loop144;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(144, input);
                                throw eee;
                        }
                        cnt144++;
                    } while (true);

                    // ../etc/JamlAttrHash.g:1007:13: ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) )
                    // ../etc/JamlAttrHash.g:1007:17: DOT CLASS
                    {
                    DOT503=(Token)match(input,DOT,FOLLOW_DOT_in_qualifiedIdentExpression13977); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT503);

                    CLASS504=(Token)match(input,CLASS,FOLLOW_CLASS_in_qualifiedIdentExpression13979); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLASS.add(CLASS504);



                    // AST REWRITE
                    // elements: CLASS, qualifiedIdentExpression, DOT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1007:57: -> ^( DOT $qualifiedIdentExpression CLASS )
                    {
                        // ../etc/JamlAttrHash.g:1007:61: ^( DOT $qualifiedIdentExpression CLASS )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_retval.nextTree());
                        adaptor.addChild(root_1, stream_CLASS.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:1009:13: arguments
                    {
                    pushFollow(FOLLOW_arguments_in_qualifiedIdentExpression14049);
                    arguments505=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arguments.add(arguments505.getTree());


                    // AST REWRITE
                    // elements: arguments, qualifiedIdentifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1009:57: -> ^( METHOD_CALL qualifiedIdentifier arguments )
                    {
                        // ../etc/JamlAttrHash.g:1009:61: ^( METHOD_CALL qualifiedIdentifier arguments )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_CALL, "METHOD_CALL"), root_1);

                        adaptor.addChild(root_1, stream_qualifiedIdentifier.nextTree());
                        adaptor.addChild(root_1, stream_arguments.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // ../etc/JamlAttrHash.g:1010:13: outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) )
                    {
                    outerDot=(Token)match(input,DOT,FOLLOW_DOT_in_qualifiedIdentExpression14110); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(outerDot);

                    // ../etc/JamlAttrHash.g:1011:13: ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) )
                    int alt146=5;
                    switch ( input.LA(1) ) {
                    case CLASS:
                        {
                        alt146=1;
                        }
                        break;
                    case LESS_THAN:
                        {
                        alt146=2;
                        }
                        break;
                    case THIS:
                        {
                        alt146=3;
                        }
                        break;
                    case SUPER:
                        {
                        alt146=4;
                        }
                        break;
                    case NEW:
                        {
                        alt146=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 146, 0, input);

                        throw nvae;
                    }

                    switch (alt146) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:1011:17: CLASS
                            {
                            CLASS506=(Token)match(input,CLASS,FOLLOW_CLASS_in_qualifiedIdentExpression14128); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_CLASS.add(CLASS506);



                            // AST REWRITE
                            // elements: DOT, qualifiedIdentifier, CLASS
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1011:57: -> ^( DOT qualifiedIdentifier CLASS )
                            {
                                // ../etc/JamlAttrHash.g:1011:61: ^( DOT qualifiedIdentifier CLASS )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_qualifiedIdentifier.nextTree());
                                adaptor.addChild(root_1, stream_CLASS.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // ../etc/JamlAttrHash.g:1012:17: genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) )
                            {
                            pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_qualifiedIdentExpression14191);
                            genericTypeArgumentListSimplified507=genericTypeArgumentListSimplified();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_genericTypeArgumentListSimplified.add(genericTypeArgumentListSimplified507.getTree());
                            // ../etc/JamlAttrHash.g:1013:17: (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) )
                            int alt145=3;
                            int LA145_0 = input.LA(1);

                            if ( (LA145_0==SUPER) ) {
                                int LA145_1 = input.LA(2);

                                if ( (LA145_1==DOT) ) {
                                    alt145=2;
                                }
                                else if ( (LA145_1==LPAREN) ) {
                                    alt145=1;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 145, 1, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA145_0==IDENT) ) {
                                alt145=3;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 145, 0, input);

                                throw nvae;
                            }
                            switch (alt145) {
                                case 1 :
                                    // ../etc/JamlAttrHash.g:1013:21: Super= SUPER arguments
                                    {
                                    Super=(Token)match(input,SUPER,FOLLOW_SUPER_in_qualifiedIdentExpression14216); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_SUPER.add(Super);

                                    pushFollow(FOLLOW_arguments_in_qualifiedIdentExpression14218);
                                    arguments508=arguments();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_arguments.add(arguments508.getTree());


                                    // AST REWRITE
                                    // elements: arguments, genericTypeArgumentListSimplified, qualifiedIdentifier
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 1013:57: -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments )
                                    {
                                        // ../etc/JamlAttrHash.g:1013:61: ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUPER_CONSTRUCTOR_CALL, Super, "SUPER_CONSTRUCTOR_CALL"), root_1);

                                        adaptor.addChild(root_1, stream_qualifiedIdentifier.nextTree());
                                        adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());
                                        adaptor.addChild(root_1, stream_arguments.nextTree());

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;
                                case 2 :
                                    // ../etc/JamlAttrHash.g:1014:21: SUPER innerDot= DOT IDENT arguments
                                    {
                                    SUPER509=(Token)match(input,SUPER,FOLLOW_SUPER_in_qualifiedIdentExpression14268); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_SUPER.add(SUPER509);

                                    innerDot=(Token)match(input,DOT,FOLLOW_DOT_in_qualifiedIdentExpression14272); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_DOT.add(innerDot);

                                    IDENT510=(Token)match(input,IDENT,FOLLOW_IDENT_in_qualifiedIdentExpression14274); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT510);

                                    pushFollow(FOLLOW_arguments_in_qualifiedIdentExpression14276);
                                    arguments511=arguments();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_arguments.add(arguments511.getTree());


                                    // AST REWRITE
                                    // elements: innerDot, arguments, IDENT, genericTypeArgumentListSimplified, SUPER, qualifiedIdentifier, outerDot
                                    // token labels: outerDot, innerDot
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleTokenStream stream_outerDot=new RewriteRuleTokenStream(adaptor,"token outerDot",outerDot);
                                    RewriteRuleTokenStream stream_innerDot=new RewriteRuleTokenStream(adaptor,"token innerDot",innerDot);
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 1014:57: -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments )
                                    {
                                        // ../etc/JamlAttrHash.g:1014:61: ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_CALL, "METHOD_CALL"), root_1);

                                        // ../etc/JamlAttrHash.g:1014:75: ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT )
                                        {
                                        CommonTree root_2 = (CommonTree)adaptor.nil();
                                        root_2 = (CommonTree)adaptor.becomeRoot(stream_innerDot.nextNode(), root_2);

                                        // ../etc/JamlAttrHash.g:1014:87: ^( $outerDot qualifiedIdentifier SUPER )
                                        {
                                        CommonTree root_3 = (CommonTree)adaptor.nil();
                                        root_3 = (CommonTree)adaptor.becomeRoot(stream_outerDot.nextNode(), root_3);

                                        adaptor.addChild(root_3, stream_qualifiedIdentifier.nextTree());
                                        adaptor.addChild(root_3, stream_SUPER.nextNode());

                                        adaptor.addChild(root_2, root_3);
                                        }
                                        adaptor.addChild(root_2, stream_IDENT.nextNode());

                                        adaptor.addChild(root_1, root_2);
                                        }
                                        adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());
                                        adaptor.addChild(root_1, stream_arguments.nextTree());

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;
                                case 3 :
                                    // ../etc/JamlAttrHash.g:1015:21: IDENT arguments
                                    {
                                    IDENT512=(Token)match(input,IDENT,FOLLOW_IDENT_in_qualifiedIdentExpression14326); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT512);

                                    pushFollow(FOLLOW_arguments_in_qualifiedIdentExpression14328);
                                    arguments513=arguments();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_arguments.add(arguments513.getTree());


                                    // AST REWRITE
                                    // elements: IDENT, arguments, genericTypeArgumentListSimplified, qualifiedIdentifier, DOT
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 1015:57: -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments )
                                    {
                                        // ../etc/JamlAttrHash.g:1015:61: ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_CALL, "METHOD_CALL"), root_1);

                                        // ../etc/JamlAttrHash.g:1015:75: ^( DOT qualifiedIdentifier IDENT )
                                        {
                                        CommonTree root_2 = (CommonTree)adaptor.nil();
                                        root_2 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_2);

                                        adaptor.addChild(root_2, stream_qualifiedIdentifier.nextTree());
                                        adaptor.addChild(root_2, stream_IDENT.nextNode());

                                        adaptor.addChild(root_1, root_2);
                                        }
                                        adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());
                                        adaptor.addChild(root_1, stream_arguments.nextTree());

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;

                            }


                            }
                            break;
                        case 3 :
                            // ../etc/JamlAttrHash.g:1017:17: THIS
                            {
                            THIS514=(Token)match(input,THIS,FOLLOW_THIS_in_qualifiedIdentExpression14403); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THIS.add(THIS514);



                            // AST REWRITE
                            // elements: THIS, qualifiedIdentifier, DOT
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1017:57: -> ^( DOT qualifiedIdentifier THIS )
                            {
                                // ../etc/JamlAttrHash.g:1017:61: ^( DOT qualifiedIdentifier THIS )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_qualifiedIdentifier.nextTree());
                                adaptor.addChild(root_1, stream_THIS.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            // ../etc/JamlAttrHash.g:1018:17: Super= SUPER arguments
                            {
                            Super=(Token)match(input,SUPER,FOLLOW_SUPER_in_qualifiedIdentExpression14469); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SUPER.add(Super);

                            pushFollow(FOLLOW_arguments_in_qualifiedIdentExpression14471);
                            arguments515=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arguments.add(arguments515.getTree());


                            // AST REWRITE
                            // elements: arguments, qualifiedIdentifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1018:57: -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments )
                            {
                                // ../etc/JamlAttrHash.g:1018:61: ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUPER_CONSTRUCTOR_CALL, Super, "SUPER_CONSTRUCTOR_CALL"), root_1);

                                adaptor.addChild(root_1, stream_qualifiedIdentifier.nextTree());
                                adaptor.addChild(root_1, stream_arguments.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 5 :
                            // ../etc/JamlAttrHash.g:1019:17: innerNewExpression
                            {
                            pushFollow(FOLLOW_innerNewExpression_in_qualifiedIdentExpression14519);
                            innerNewExpression516=innerNewExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_innerNewExpression.add(innerNewExpression516.getTree());


                            // AST REWRITE
                            // elements: innerNewExpression, qualifiedIdentifier, DOT
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1019:57: -> ^( DOT qualifiedIdentifier innerNewExpression )
                            {
                                // ../etc/JamlAttrHash.g:1019:61: ^( DOT qualifiedIdentifier innerNewExpression )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_qualifiedIdentifier.nextTree());
                                adaptor.addChild(root_1, stream_innerNewExpression.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("qualifiedIdentExpression", 111);
            if ( state.backtracking>0 ) { memoize(input, 111, qualifiedIdentExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedIdentExpression"

    public static class newExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "newExpression"
    // ../etc/JamlAttrHash.g:1024:1: newExpression : NEW ( primitiveType newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction ) | ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) ) ) ;
    public final JamlAttrHashParser.newExpression_return newExpression() throws RecognitionException {
    traceIn("newExpression", 112);
        JamlAttrHashParser.newExpression_return retval = new JamlAttrHashParser.newExpression_return();
        retval.start = input.LT(1);
        int newExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token NEW517=null;
        JamlAttrHashParser.primitiveType_return primitiveType518 = null;

        JamlAttrHashParser.newArrayConstruction_return newArrayConstruction519 = null;

        JamlAttrHashParser.genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified520 = null;

        JamlAttrHashParser.qualifiedTypeIdentSimplified_return qualifiedTypeIdentSimplified521 = null;

        JamlAttrHashParser.newArrayConstruction_return newArrayConstruction522 = null;

        JamlAttrHashParser.arguments_return arguments523 = null;

        JamlAttrHashParser.classBody_return classBody524 = null;


        CommonTree NEW517_tree=null;
        RewriteRuleTokenStream stream_NEW=new RewriteRuleTokenStream(adaptor,"token NEW");
        RewriteRuleSubtreeStream stream_newArrayConstruction=new RewriteRuleSubtreeStream(adaptor,"rule newArrayConstruction");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_qualifiedTypeIdentSimplified=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedTypeIdentSimplified");
        RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
        RewriteRuleSubtreeStream stream_classBody=new RewriteRuleSubtreeStream(adaptor,"rule classBody");
        RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }
            // ../etc/JamlAttrHash.g:1025:5: ( NEW ( primitiveType newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction ) | ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) ) ) )
            // ../etc/JamlAttrHash.g:1025:9: NEW ( primitiveType newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction ) | ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) ) )
            {
            NEW517=(Token)match(input,NEW,FOLLOW_NEW_in_newExpression14595); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NEW.add(NEW517);

            // ../etc/JamlAttrHash.g:1026:9: ( primitiveType newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction ) | ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) ) )
            int alt151=2;
            int LA151_0 = input.LA(1);

            if ( (LA151_0==BOOLEAN||LA151_0==BYTE||LA151_0==CHAR||LA151_0==DOUBLE||LA151_0==FLOAT||(LA151_0>=INT && LA151_0<=LONG)||LA151_0==SHORT) ) {
                alt151=1;
            }
            else if ( (LA151_0==LESS_THAN||LA151_0==IDENT) ) {
                alt151=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 151, 0, input);

                throw nvae;
            }
            switch (alt151) {
                case 1 :
                    // ../etc/JamlAttrHash.g:1026:13: primitiveType newArrayConstruction
                    {
                    pushFollow(FOLLOW_primitiveType_in_newExpression14611);
                    primitiveType518=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitiveType.add(primitiveType518.getTree());
                    pushFollow(FOLLOW_newArrayConstruction_in_newExpression14613);
                    newArrayConstruction519=newArrayConstruction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_newArrayConstruction.add(newArrayConstruction519.getTree());


                    // AST REWRITE
                    // elements: newArrayConstruction, primitiveType
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1027:13: -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction )
                    {
                        // ../etc/JamlAttrHash.g:1027:17: ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STATIC_ARRAY_CREATOR, NEW517, "STATIC_ARRAY_CREATOR"), root_1);

                        adaptor.addChild(root_1, stream_primitiveType.nextTree());
                        adaptor.addChild(root_1, stream_newArrayConstruction.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:1028:13: ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) )
                    {
                    // ../etc/JamlAttrHash.g:1028:13: ( genericTypeArgumentListSimplified )?
                    int alt148=2;
                    int LA148_0 = input.LA(1);

                    if ( (LA148_0==LESS_THAN) ) {
                        alt148=1;
                    }
                    switch (alt148) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:0:0: genericTypeArgumentListSimplified
                            {
                            pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_newExpression14657);
                            genericTypeArgumentListSimplified520=genericTypeArgumentListSimplified();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_genericTypeArgumentListSimplified.add(genericTypeArgumentListSimplified520.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_qualifiedTypeIdentSimplified_in_newExpression14660);
                    qualifiedTypeIdentSimplified521=qualifiedTypeIdentSimplified();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualifiedTypeIdentSimplified.add(qualifiedTypeIdentSimplified521.getTree());
                    // ../etc/JamlAttrHash.g:1029:13: ( newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) )
                    int alt150=2;
                    int LA150_0 = input.LA(1);

                    if ( (LA150_0==LBRACK) ) {
                        alt150=1;
                    }
                    else if ( (LA150_0==LPAREN) ) {
                        alt150=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 150, 0, input);

                        throw nvae;
                    }
                    switch (alt150) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:1029:17: newArrayConstruction
                            {
                            pushFollow(FOLLOW_newArrayConstruction_in_newExpression14678);
                            newArrayConstruction522=newArrayConstruction();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_newArrayConstruction.add(newArrayConstruction522.getTree());


                            // AST REWRITE
                            // elements: qualifiedTypeIdentSimplified, newArrayConstruction, genericTypeArgumentListSimplified
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1030:17: -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction )
                            {
                                // ../etc/JamlAttrHash.g:1030:21: ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STATIC_ARRAY_CREATOR, NEW517, "STATIC_ARRAY_CREATOR"), root_1);

                                // ../etc/JamlAttrHash.g:1030:74: ( genericTypeArgumentListSimplified )?
                                if ( stream_genericTypeArgumentListSimplified.hasNext() ) {
                                    adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());

                                }
                                stream_genericTypeArgumentListSimplified.reset();
                                adaptor.addChild(root_1, stream_qualifiedTypeIdentSimplified.nextTree());
                                adaptor.addChild(root_1, stream_newArrayConstruction.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // ../etc/JamlAttrHash.g:1031:17: arguments ( classBody )?
                            {
                            pushFollow(FOLLOW_arguments_in_newExpression14743);
                            arguments523=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arguments.add(arguments523.getTree());
                            // ../etc/JamlAttrHash.g:1031:27: ( classBody )?
                            int alt149=2;
                            int LA149_0 = input.LA(1);

                            if ( (LA149_0==LCURLY) ) {
                                alt149=1;
                            }
                            switch (alt149) {
                                case 1 :
                                    // ../etc/JamlAttrHash.g:0:0: classBody
                                    {
                                    pushFollow(FOLLOW_classBody_in_newExpression14745);
                                    classBody524=classBody();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_classBody.add(classBody524.getTree());

                                    }
                                    break;

                            }



                            // AST REWRITE
                            // elements: qualifiedTypeIdentSimplified, genericTypeArgumentListSimplified, arguments, classBody
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1032:17: -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? )
                            {
                                // ../etc/JamlAttrHash.g:1032:21: ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_CONSTRUCTOR_CALL, NEW517, "STATIC_ARRAY_CREATOR"), root_1);

                                // ../etc/JamlAttrHash.g:1032:76: ( genericTypeArgumentListSimplified )?
                                if ( stream_genericTypeArgumentListSimplified.hasNext() ) {
                                    adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());

                                }
                                stream_genericTypeArgumentListSimplified.reset();
                                adaptor.addChild(root_1, stream_qualifiedTypeIdentSimplified.nextTree());
                                adaptor.addChild(root_1, stream_arguments.nextTree());
                                // ../etc/JamlAttrHash.g:1032:150: ( classBody )?
                                if ( stream_classBody.hasNext() ) {
                                    adaptor.addChild(root_1, stream_classBody.nextTree());

                                }
                                stream_classBody.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("newExpression", 112);
            if ( state.backtracking>0 ) { memoize(input, 112, newExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "newExpression"

    public static class innerNewExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "innerNewExpression"
    // ../etc/JamlAttrHash.g:1037:1: innerNewExpression : NEW ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? ) ;
    public final JamlAttrHashParser.innerNewExpression_return innerNewExpression() throws RecognitionException {
    traceIn("innerNewExpression", 113);
        JamlAttrHashParser.innerNewExpression_return retval = new JamlAttrHashParser.innerNewExpression_return();
        retval.start = input.LT(1);
        int innerNewExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token NEW525=null;
        Token IDENT527=null;
        JamlAttrHashParser.genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified526 = null;

        JamlAttrHashParser.arguments_return arguments528 = null;

        JamlAttrHashParser.classBody_return classBody529 = null;


        CommonTree NEW525_tree=null;
        CommonTree IDENT527_tree=null;
        RewriteRuleTokenStream stream_NEW=new RewriteRuleTokenStream(adaptor,"token NEW");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_classBody=new RewriteRuleSubtreeStream(adaptor,"rule classBody");
        RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }
            // ../etc/JamlAttrHash.g:1038:5: ( NEW ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? ) )
            // ../etc/JamlAttrHash.g:1038:9: NEW ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )?
            {
            NEW525=(Token)match(input,NEW,FOLLOW_NEW_in_innerNewExpression14844); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NEW.add(NEW525);

            // ../etc/JamlAttrHash.g:1038:13: ( genericTypeArgumentListSimplified )?
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==LESS_THAN) ) {
                alt152=1;
            }
            switch (alt152) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: genericTypeArgumentListSimplified
                    {
                    pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_innerNewExpression14846);
                    genericTypeArgumentListSimplified526=genericTypeArgumentListSimplified();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_genericTypeArgumentListSimplified.add(genericTypeArgumentListSimplified526.getTree());

                    }
                    break;

            }

            IDENT527=(Token)match(input,IDENT,FOLLOW_IDENT_in_innerNewExpression14849); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT527);

            pushFollow(FOLLOW_arguments_in_innerNewExpression14851);
            arguments528=arguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_arguments.add(arguments528.getTree());
            // ../etc/JamlAttrHash.g:1038:64: ( classBody )?
            int alt153=2;
            int LA153_0 = input.LA(1);

            if ( (LA153_0==LCURLY) ) {
                alt153=1;
            }
            switch (alt153) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: classBody
                    {
                    pushFollow(FOLLOW_classBody_in_innerNewExpression14853);
                    classBody529=classBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classBody.add(classBody529.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: IDENT, genericTypeArgumentListSimplified, classBody, arguments
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1039:9: -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? )
            {
                // ../etc/JamlAttrHash.g:1039:13: ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_CONSTRUCTOR_CALL, NEW525, "STATIC_ARRAY_CREATOR"), root_1);

                // ../etc/JamlAttrHash.g:1039:68: ( genericTypeArgumentListSimplified )?
                if ( stream_genericTypeArgumentListSimplified.hasNext() ) {
                    adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());

                }
                stream_genericTypeArgumentListSimplified.reset();
                adaptor.addChild(root_1, stream_IDENT.nextNode());
                adaptor.addChild(root_1, stream_arguments.nextTree());
                // ../etc/JamlAttrHash.g:1039:119: ( classBody )?
                if ( stream_classBody.hasNext() ) {
                    adaptor.addChild(root_1, stream_classBody.nextTree());

                }
                stream_classBody.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("innerNewExpression", 113);
            if ( state.backtracking>0 ) { memoize(input, 113, innerNewExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "innerNewExpression"

    public static class newArrayConstruction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "newArrayConstruction"
    // ../etc/JamlAttrHash.g:1042:1: newArrayConstruction : ( arrayDeclaratorList arrayInitializer | LBRACK expression RBRACK ( LBRACK expression RBRACK )* ( arrayDeclaratorList )? );
    public final JamlAttrHashParser.newArrayConstruction_return newArrayConstruction() throws RecognitionException {
    traceIn("newArrayConstruction", 114);
        JamlAttrHashParser.newArrayConstruction_return retval = new JamlAttrHashParser.newArrayConstruction_return();
        retval.start = input.LT(1);
        int newArrayConstruction_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LBRACK532=null;
        Token RBRACK534=null;
        Token LBRACK535=null;
        Token RBRACK537=null;
        JamlAttrHashParser.arrayDeclaratorList_return arrayDeclaratorList530 = null;

        JamlAttrHashParser.arrayInitializer_return arrayInitializer531 = null;

        JamlAttrHashParser.expression_return expression533 = null;

        JamlAttrHashParser.expression_return expression536 = null;

        JamlAttrHashParser.arrayDeclaratorList_return arrayDeclaratorList538 = null;


        CommonTree LBRACK532_tree=null;
        CommonTree RBRACK534_tree=null;
        CommonTree LBRACK535_tree=null;
        CommonTree RBRACK537_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }
            // ../etc/JamlAttrHash.g:1043:5: ( arrayDeclaratorList arrayInitializer | LBRACK expression RBRACK ( LBRACK expression RBRACK )* ( arrayDeclaratorList )? )
            int alt156=2;
            int LA156_0 = input.LA(1);

            if ( (LA156_0==LBRACK) ) {
                int LA156_1 = input.LA(2);

                if ( (LA156_1==RBRACK) ) {
                    alt156=1;
                }
                else if ( (LA156_1==DEC||LA156_1==INC||LA156_1==LESS_THAN||LA156_1==LOGICAL_NOT||(LA156_1>=LPAREN && LA156_1<=MINUS)||LA156_1==NOT||LA156_1==PLUS||LA156_1==BOOLEAN||LA156_1==BYTE||LA156_1==CHAR||LA156_1==DOUBLE||LA156_1==FALSE||LA156_1==FLOAT||(LA156_1>=INT && LA156_1<=LONG)||(LA156_1>=NEW && LA156_1<=NULL)||LA156_1==SHORT||LA156_1==SUPER||LA156_1==THIS||LA156_1==TRUE||LA156_1==VOID||(LA156_1>=IDENT && LA156_1<=STRING_LITERAL)) ) {
                    alt156=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 156, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 156, 0, input);

                throw nvae;
            }
            switch (alt156) {
                case 1 :
                    // ../etc/JamlAttrHash.g:1043:9: arrayDeclaratorList arrayInitializer
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_arrayDeclaratorList_in_newArrayConstruction14899);
                    arrayDeclaratorList530=arrayDeclaratorList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayDeclaratorList530.getTree());
                    pushFollow(FOLLOW_arrayInitializer_in_newArrayConstruction14901);
                    arrayInitializer531=arrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayInitializer531.getTree());

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:1044:9: LBRACK expression RBRACK ( LBRACK expression RBRACK )* ( arrayDeclaratorList )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LBRACK532=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_newArrayConstruction14911); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_newArrayConstruction14914);
                    expression533=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression533.getTree());
                    RBRACK534=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_newArrayConstruction14916); if (state.failed) return retval;
                    // ../etc/JamlAttrHash.g:1044:36: ( LBRACK expression RBRACK )*
                    loop154:
                    do {
                        int alt154=2;
                        alt154 = dfa154.predict(input);
                        switch (alt154) {
                    	case 1 :
                    	    // ../etc/JamlAttrHash.g:1044:37: LBRACK expression RBRACK
                    	    {
                    	    LBRACK535=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_newArrayConstruction14920); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_newArrayConstruction14923);
                    	    expression536=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression536.getTree());
                    	    RBRACK537=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_newArrayConstruction14925); if (state.failed) return retval;

                    	    }
                    	    break;

                    	default :
                    	    break loop154;
                        }
                    } while (true);

                    // ../etc/JamlAttrHash.g:1044:66: ( arrayDeclaratorList )?
                    int alt155=2;
                    int LA155_0 = input.LA(1);

                    if ( (LA155_0==LBRACK) ) {
                        int LA155_1 = input.LA(2);

                        if ( (LA155_1==RBRACK) ) {
                            alt155=1;
                        }
                    }
                    switch (alt155) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:0:0: arrayDeclaratorList
                            {
                            pushFollow(FOLLOW_arrayDeclaratorList_in_newArrayConstruction14930);
                            arrayDeclaratorList538=arrayDeclaratorList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayDeclaratorList538.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("newArrayConstruction", 114);
            if ( state.backtracking>0 ) { memoize(input, 114, newArrayConstruction_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "newArrayConstruction"

    public static class arguments_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arguments"
    // ../etc/JamlAttrHash.g:1047:1: arguments : LPAREN ( expressionList )? RPAREN -> ^( ARGUMENT_LIST[$LPAREN, \"ARGUMENT_LIST\"] ( expressionList )? ) ;
    public final JamlAttrHashParser.arguments_return arguments() throws RecognitionException {
    traceIn("arguments", 115);
        JamlAttrHashParser.arguments_return retval = new JamlAttrHashParser.arguments_return();
        retval.start = input.LT(1);
        int arguments_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LPAREN539=null;
        Token RPAREN541=null;
        JamlAttrHashParser.expressionList_return expressionList540 = null;


        CommonTree LPAREN539_tree=null;
        CommonTree RPAREN541_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }
            // ../etc/JamlAttrHash.g:1048:5: ( LPAREN ( expressionList )? RPAREN -> ^( ARGUMENT_LIST[$LPAREN, \"ARGUMENT_LIST\"] ( expressionList )? ) )
            // ../etc/JamlAttrHash.g:1048:9: LPAREN ( expressionList )? RPAREN
            {
            LPAREN539=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_arguments14950); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN539);

            // ../etc/JamlAttrHash.g:1048:16: ( expressionList )?
            int alt157=2;
            int LA157_0 = input.LA(1);

            if ( (LA157_0==DEC||LA157_0==INC||LA157_0==LESS_THAN||LA157_0==LOGICAL_NOT||(LA157_0>=LPAREN && LA157_0<=MINUS)||LA157_0==NOT||LA157_0==PLUS||LA157_0==BOOLEAN||LA157_0==BYTE||LA157_0==CHAR||LA157_0==DOUBLE||LA157_0==FALSE||LA157_0==FLOAT||(LA157_0>=INT && LA157_0<=LONG)||(LA157_0>=NEW && LA157_0<=NULL)||LA157_0==SHORT||LA157_0==SUPER||LA157_0==THIS||LA157_0==TRUE||LA157_0==VOID||(LA157_0>=IDENT && LA157_0<=STRING_LITERAL)) ) {
                alt157=1;
            }
            switch (alt157) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: expressionList
                    {
                    pushFollow(FOLLOW_expressionList_in_arguments14952);
                    expressionList540=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionList.add(expressionList540.getTree());

                    }
                    break;

            }

            RPAREN541=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_arguments14955); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN541);



            // AST REWRITE
            // elements: expressionList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1049:9: -> ^( ARGUMENT_LIST[$LPAREN, \"ARGUMENT_LIST\"] ( expressionList )? )
            {
                // ../etc/JamlAttrHash.g:1049:13: ^( ARGUMENT_LIST[$LPAREN, \"ARGUMENT_LIST\"] ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARGUMENT_LIST, LPAREN539, "ARGUMENT_LIST"), root_1);

                // ../etc/JamlAttrHash.g:1049:55: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
    traceOut("arguments", 115);
            if ( state.backtracking>0 ) { memoize(input, 115, arguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arguments"

    // $ANTLR start synpred4_JamlAttrHash
    public final void synpred4_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred4_JamlAttrHash_fragment", 119);
        try {
            // ../etc/JamlAttrHash.g:295:1: ( literal ',' | literal EOF )
            int alt158=2;
            switch ( input.LA(1) ) {
            case HEX_LITERAL:
            case OCTAL_LITERAL:
            case DECIMAL_LITERAL:
                {
                int LA158_1 = input.LA(2);

                if ( (LA158_1==EOF) ) {
                    alt158=2;
                }
                else if ( (LA158_1==COMMA) ) {
                    alt158=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 158, 1, input);

                    throw nvae;
                }
                }
                break;
            case FLOATING_POINT_LITERAL:
                {
                int LA158_2 = input.LA(2);

                if ( (LA158_2==COMMA) ) {
                    alt158=1;
                }
                else if ( (LA158_2==EOF) ) {
                    alt158=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 158, 2, input);

                    throw nvae;
                }
                }
                break;
            case CHARACTER_LITERAL:
                {
                int LA158_3 = input.LA(2);

                if ( (LA158_3==COMMA) ) {
                    alt158=1;
                }
                else if ( (LA158_3==EOF) ) {
                    alt158=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 158, 3, input);

                    throw nvae;
                }
                }
                break;
            case STRING_LITERAL:
                {
                int LA158_4 = input.LA(2);

                if ( (LA158_4==EOF) ) {
                    alt158=2;
                }
                else if ( (LA158_4==COMMA) ) {
                    alt158=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 158, 4, input);

                    throw nvae;
                }
                }
                break;
            case FALSE:
            case NULL:
            case TRUE:
                {
                int LA158_5 = input.LA(2);

                if ( (LA158_5==COMMA) ) {
                    alt158=1;
                }
                else if ( (LA158_5==EOF) ) {
                    alt158=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 158, 5, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 158, 0, input);

                throw nvae;
            }

            switch (alt158) {
                case 1 :
                    // ../etc/JamlAttrHash.g:295:2: literal ','
                    {
                    pushFollow(FOLLOW_literal_in_synpred4_JamlAttrHash4613);
                    literal();

                    state._fsp--;
                    if (state.failed) return ;
                    match(input,COMMA,FOLLOW_COMMA_in_synpred4_JamlAttrHash4615); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:295:16: literal EOF
                    {
                    pushFollow(FOLLOW_literal_in_synpred4_JamlAttrHash4619);
                    literal();

                    state._fsp--;
                    if (state.failed) return ;
                    match(input,EOF,FOLLOW_EOF_in_synpred4_JamlAttrHash4621); if (state.failed) return ;

                    }
                    break;

            }
        }
        finally {
            traceOut("synpred4_JamlAttrHash_fragment", 119);
        }}
    // $ANTLR end synpred4_JamlAttrHash

    // $ANTLR start synpred26_JamlAttrHash
    public final void synpred26_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred26_JamlAttrHash_fragment", 141);
        try {
            // ../etc/JamlAttrHash.g:370:9: ( GREATER_THAN )
            // ../etc/JamlAttrHash.g:370:9: GREATER_THAN
            {
            match(input,GREATER_THAN,FOLLOW_GREATER_THAN_in_synpred26_JamlAttrHash5338); if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred26_JamlAttrHash_fragment", 141);
        }}
    // $ANTLR end synpred26_JamlAttrHash

    // $ANTLR start synpred27_JamlAttrHash
    public final void synpred27_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred27_JamlAttrHash_fragment", 142);
        try {
            // ../etc/JamlAttrHash.g:371:9: ( SHIFT_RIGHT )
            // ../etc/JamlAttrHash.g:371:9: SHIFT_RIGHT
            {
            match(input,SHIFT_RIGHT,FOLLOW_SHIFT_RIGHT_in_synpred27_JamlAttrHash5348); if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred27_JamlAttrHash_fragment", 142);
        }}
    // $ANTLR end synpred27_JamlAttrHash

    // $ANTLR start synpred28_JamlAttrHash
    public final void synpred28_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred28_JamlAttrHash_fragment", 143);
        try {
            // ../etc/JamlAttrHash.g:372:9: ( BIT_SHIFT_RIGHT )
            // ../etc/JamlAttrHash.g:372:9: BIT_SHIFT_RIGHT
            {
            match(input,BIT_SHIFT_RIGHT,FOLLOW_BIT_SHIFT_RIGHT_in_synpred28_JamlAttrHash5358); if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred28_JamlAttrHash_fragment", 143);
        }}
    // $ANTLR end synpred28_JamlAttrHash

    // $ANTLR start synpred29_JamlAttrHash
    public final void synpred29_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred29_JamlAttrHash_fragment", 144);
        try {
            // ../etc/JamlAttrHash.g:377:15: ( bound )
            // ../etc/JamlAttrHash.g:377:15: bound
            {
            pushFollow(FOLLOW_bound_in_synpred29_JamlAttrHash5388);
            bound();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred29_JamlAttrHash_fragment", 144);
        }}
    // $ANTLR end synpred29_JamlAttrHash

    // $ANTLR start synpred44_JamlAttrHash
    public final void synpred44_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred44_JamlAttrHash_fragment", 159);
        try {
            // ../etc/JamlAttrHash.g:434:9: ( STATIC block )
            // ../etc/JamlAttrHash.g:434:9: STATIC block
            {
            match(input,STATIC,FOLLOW_STATIC_in_synpred44_JamlAttrHash5920); if (state.failed) return ;
            pushFollow(FOLLOW_block_in_synpred44_JamlAttrHash5922);
            block();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred44_JamlAttrHash_fragment", 159);
        }}
    // $ANTLR end synpred44_JamlAttrHash

    // $ANTLR start synpred54_JamlAttrHash
    public final void synpred54_JamlAttrHash_fragment() throws RecognitionException {   
        Token ident=null;

        traceIn("synpred54_JamlAttrHash_fragment", 169);
        try {
            // ../etc/JamlAttrHash.g:436:13: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) | ident= IDENT formalParameterList ( throwsClause )? block ) )
            // ../etc/JamlAttrHash.g:436:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) | ident= IDENT formalParameterList ( throwsClause )? block )
            {
            // ../etc/JamlAttrHash.g:436:13: ( genericTypeParameterList )?
            int alt164=2;
            int LA164_0 = input.LA(1);

            if ( (LA164_0==LESS_THAN) ) {
                alt164=1;
            }
            switch (alt164) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: genericTypeParameterList
                    {
                    pushFollow(FOLLOW_genericTypeParameterList_in_synpred54_JamlAttrHash5959);
                    genericTypeParameterList();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            // ../etc/JamlAttrHash.g:437:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) | ident= IDENT formalParameterList ( throwsClause )? block )
            int alt171=3;
            switch ( input.LA(1) ) {
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
                {
                alt171=1;
                }
                break;
            case IDENT:
                {
                int LA171_2 = input.LA(2);

                if ( (LA171_2==LPAREN) ) {
                    alt171=3;
                }
                else if ( (LA171_2==DOT||LA171_2==LBRACK||LA171_2==LESS_THAN||LA171_2==IDENT) ) {
                    alt171=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 171, 2, input);

                    throw nvae;
                }
                }
                break;
            case VOID:
                {
                alt171=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 171, 0, input);

                throw nvae;
            }

            switch (alt171) {
                case 1 :
                    // ../etc/JamlAttrHash.g:437:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI )
                    {
                    pushFollow(FOLLOW_type_in_synpred54_JamlAttrHash5978);
                    type();

                    state._fsp--;
                    if (state.failed) return ;
                    match(input,IDENT,FOLLOW_IDENT_in_synpred54_JamlAttrHash5980); if (state.failed) return ;
                    pushFollow(FOLLOW_formalParameterList_in_synpred54_JamlAttrHash5982);
                    formalParameterList();

                    state._fsp--;
                    if (state.failed) return ;
                    // ../etc/JamlAttrHash.g:437:48: ( arrayDeclaratorList )?
                    int alt165=2;
                    int LA165_0 = input.LA(1);

                    if ( (LA165_0==LBRACK) ) {
                        alt165=1;
                    }
                    switch (alt165) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:0:0: arrayDeclaratorList
                            {
                            pushFollow(FOLLOW_arrayDeclaratorList_in_synpred54_JamlAttrHash5984);
                            arrayDeclaratorList();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }

                    // ../etc/JamlAttrHash.g:437:69: ( throwsClause )?
                    int alt166=2;
                    int LA166_0 = input.LA(1);

                    if ( (LA166_0==THROWS) ) {
                        alt166=1;
                    }
                    switch (alt166) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:0:0: throwsClause
                            {
                            pushFollow(FOLLOW_throwsClause_in_synpred54_JamlAttrHash5987);
                            throwsClause();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }

                    // ../etc/JamlAttrHash.g:437:83: ( block | SEMI )
                    int alt167=2;
                    int LA167_0 = input.LA(1);

                    if ( (LA167_0==LCURLY) ) {
                        alt167=1;
                    }
                    else if ( (LA167_0==SEMI) ) {
                        alt167=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 167, 0, input);

                        throw nvae;
                    }
                    switch (alt167) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:437:84: block
                            {
                            pushFollow(FOLLOW_block_in_synpred54_JamlAttrHash5991);
                            block();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;
                        case 2 :
                            // ../etc/JamlAttrHash.g:437:92: SEMI
                            {
                            match(input,SEMI,FOLLOW_SEMI_in_synpred54_JamlAttrHash5995); if (state.failed) return ;

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:439:17: VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI )
                    {
                    match(input,VOID,FOLLOW_VOID_in_synpred54_JamlAttrHash6057); if (state.failed) return ;
                    match(input,IDENT,FOLLOW_IDENT_in_synpred54_JamlAttrHash6059); if (state.failed) return ;
                    pushFollow(FOLLOW_formalParameterList_in_synpred54_JamlAttrHash6061);
                    formalParameterList();

                    state._fsp--;
                    if (state.failed) return ;
                    // ../etc/JamlAttrHash.g:439:48: ( throwsClause )?
                    int alt168=2;
                    int LA168_0 = input.LA(1);

                    if ( (LA168_0==THROWS) ) {
                        alt168=1;
                    }
                    switch (alt168) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:0:0: throwsClause
                            {
                            pushFollow(FOLLOW_throwsClause_in_synpred54_JamlAttrHash6063);
                            throwsClause();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }

                    // ../etc/JamlAttrHash.g:439:62: ( block | SEMI )
                    int alt169=2;
                    int LA169_0 = input.LA(1);

                    if ( (LA169_0==LCURLY) ) {
                        alt169=1;
                    }
                    else if ( (LA169_0==SEMI) ) {
                        alt169=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 169, 0, input);

                        throw nvae;
                    }
                    switch (alt169) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:439:63: block
                            {
                            pushFollow(FOLLOW_block_in_synpred54_JamlAttrHash6067);
                            block();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;
                        case 2 :
                            // ../etc/JamlAttrHash.g:439:71: SEMI
                            {
                            match(input,SEMI,FOLLOW_SEMI_in_synpred54_JamlAttrHash6071); if (state.failed) return ;

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // ../etc/JamlAttrHash.g:441:17: ident= IDENT formalParameterList ( throwsClause )? block
                    {
                    ident=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred54_JamlAttrHash6130); if (state.failed) return ;
                    pushFollow(FOLLOW_formalParameterList_in_synpred54_JamlAttrHash6132);
                    formalParameterList();

                    state._fsp--;
                    if (state.failed) return ;
                    // ../etc/JamlAttrHash.g:441:49: ( throwsClause )?
                    int alt170=2;
                    int LA170_0 = input.LA(1);

                    if ( (LA170_0==THROWS) ) {
                        alt170=1;
                    }
                    switch (alt170) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:0:0: throwsClause
                            {
                            pushFollow(FOLLOW_throwsClause_in_synpred54_JamlAttrHash6134);
                            throwsClause();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_block_in_synpred54_JamlAttrHash6137);
                    block();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        finally {
            traceOut("synpred54_JamlAttrHash_fragment", 169);
        }}
    // $ANTLR end synpred54_JamlAttrHash

    // $ANTLR start synpred55_JamlAttrHash
    public final void synpred55_JamlAttrHash_fragment() throws RecognitionException {   
        Token ident=null;

        traceIn("synpred55_JamlAttrHash_fragment", 170);
        try {
            // ../etc/JamlAttrHash.g:435:9: ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) | ident= IDENT formalParameterList ( throwsClause )? block ) | type classFieldDeclaratorList SEMI ) )
            // ../etc/JamlAttrHash.g:435:9: modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) | ident= IDENT formalParameterList ( throwsClause )? block ) | type classFieldDeclaratorList SEMI )
            {
            pushFollow(FOLLOW_modifierList_in_synpred55_JamlAttrHash5945);
            modifierList();

            state._fsp--;
            if (state.failed) return ;
            // ../etc/JamlAttrHash.g:436:9: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) | ident= IDENT formalParameterList ( throwsClause )? block ) | type classFieldDeclaratorList SEMI )
            int alt180=2;
            switch ( input.LA(1) ) {
            case LESS_THAN:
            case VOID:
                {
                alt180=1;
                }
                break;
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
                {
                int LA180_2 = input.LA(2);

                if ( (synpred54_JamlAttrHash()) ) {
                    alt180=1;
                }
                else if ( (true) ) {
                    alt180=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 180, 2, input);

                    throw nvae;
                }
                }
                break;
            case IDENT:
                {
                int LA180_3 = input.LA(2);

                if ( (synpred54_JamlAttrHash()) ) {
                    alt180=1;
                }
                else if ( (true) ) {
                    alt180=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 180, 3, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 180, 0, input);

                throw nvae;
            }

            switch (alt180) {
                case 1 :
                    // ../etc/JamlAttrHash.g:436:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) | ident= IDENT formalParameterList ( throwsClause )? block )
                    {
                    // ../etc/JamlAttrHash.g:436:13: ( genericTypeParameterList )?
                    int alt172=2;
                    int LA172_0 = input.LA(1);

                    if ( (LA172_0==LESS_THAN) ) {
                        alt172=1;
                    }
                    switch (alt172) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:0:0: genericTypeParameterList
                            {
                            pushFollow(FOLLOW_genericTypeParameterList_in_synpred55_JamlAttrHash5959);
                            genericTypeParameterList();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }

                    // ../etc/JamlAttrHash.g:437:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) | ident= IDENT formalParameterList ( throwsClause )? block )
                    int alt179=3;
                    switch ( input.LA(1) ) {
                    case BOOLEAN:
                    case BYTE:
                    case CHAR:
                    case DOUBLE:
                    case FLOAT:
                    case INT:
                    case LONG:
                    case SHORT:
                        {
                        alt179=1;
                        }
                        break;
                    case IDENT:
                        {
                        int LA179_2 = input.LA(2);

                        if ( (LA179_2==DOT||LA179_2==LBRACK||LA179_2==LESS_THAN||LA179_2==IDENT) ) {
                            alt179=1;
                        }
                        else if ( (LA179_2==LPAREN) ) {
                            alt179=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return ;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 179, 2, input);

                            throw nvae;
                        }
                        }
                        break;
                    case VOID:
                        {
                        alt179=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 179, 0, input);

                        throw nvae;
                    }

                    switch (alt179) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:437:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI )
                            {
                            pushFollow(FOLLOW_type_in_synpred55_JamlAttrHash5978);
                            type();

                            state._fsp--;
                            if (state.failed) return ;
                            match(input,IDENT,FOLLOW_IDENT_in_synpred55_JamlAttrHash5980); if (state.failed) return ;
                            pushFollow(FOLLOW_formalParameterList_in_synpred55_JamlAttrHash5982);
                            formalParameterList();

                            state._fsp--;
                            if (state.failed) return ;
                            // ../etc/JamlAttrHash.g:437:48: ( arrayDeclaratorList )?
                            int alt173=2;
                            int LA173_0 = input.LA(1);

                            if ( (LA173_0==LBRACK) ) {
                                alt173=1;
                            }
                            switch (alt173) {
                                case 1 :
                                    // ../etc/JamlAttrHash.g:0:0: arrayDeclaratorList
                                    {
                                    pushFollow(FOLLOW_arrayDeclaratorList_in_synpred55_JamlAttrHash5984);
                                    arrayDeclaratorList();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }

                            // ../etc/JamlAttrHash.g:437:69: ( throwsClause )?
                            int alt174=2;
                            int LA174_0 = input.LA(1);

                            if ( (LA174_0==THROWS) ) {
                                alt174=1;
                            }
                            switch (alt174) {
                                case 1 :
                                    // ../etc/JamlAttrHash.g:0:0: throwsClause
                                    {
                                    pushFollow(FOLLOW_throwsClause_in_synpred55_JamlAttrHash5987);
                                    throwsClause();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }

                            // ../etc/JamlAttrHash.g:437:83: ( block | SEMI )
                            int alt175=2;
                            int LA175_0 = input.LA(1);

                            if ( (LA175_0==LCURLY) ) {
                                alt175=1;
                            }
                            else if ( (LA175_0==SEMI) ) {
                                alt175=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return ;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 175, 0, input);

                                throw nvae;
                            }
                            switch (alt175) {
                                case 1 :
                                    // ../etc/JamlAttrHash.g:437:84: block
                                    {
                                    pushFollow(FOLLOW_block_in_synpred55_JamlAttrHash5991);
                                    block();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;
                                case 2 :
                                    // ../etc/JamlAttrHash.g:437:92: SEMI
                                    {
                                    match(input,SEMI,FOLLOW_SEMI_in_synpred55_JamlAttrHash5995); if (state.failed) return ;

                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // ../etc/JamlAttrHash.g:439:17: VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI )
                            {
                            match(input,VOID,FOLLOW_VOID_in_synpred55_JamlAttrHash6057); if (state.failed) return ;
                            match(input,IDENT,FOLLOW_IDENT_in_synpred55_JamlAttrHash6059); if (state.failed) return ;
                            pushFollow(FOLLOW_formalParameterList_in_synpred55_JamlAttrHash6061);
                            formalParameterList();

                            state._fsp--;
                            if (state.failed) return ;
                            // ../etc/JamlAttrHash.g:439:48: ( throwsClause )?
                            int alt176=2;
                            int LA176_0 = input.LA(1);

                            if ( (LA176_0==THROWS) ) {
                                alt176=1;
                            }
                            switch (alt176) {
                                case 1 :
                                    // ../etc/JamlAttrHash.g:0:0: throwsClause
                                    {
                                    pushFollow(FOLLOW_throwsClause_in_synpred55_JamlAttrHash6063);
                                    throwsClause();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }

                            // ../etc/JamlAttrHash.g:439:62: ( block | SEMI )
                            int alt177=2;
                            int LA177_0 = input.LA(1);

                            if ( (LA177_0==LCURLY) ) {
                                alt177=1;
                            }
                            else if ( (LA177_0==SEMI) ) {
                                alt177=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return ;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 177, 0, input);

                                throw nvae;
                            }
                            switch (alt177) {
                                case 1 :
                                    // ../etc/JamlAttrHash.g:439:63: block
                                    {
                                    pushFollow(FOLLOW_block_in_synpred55_JamlAttrHash6067);
                                    block();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;
                                case 2 :
                                    // ../etc/JamlAttrHash.g:439:71: SEMI
                                    {
                                    match(input,SEMI,FOLLOW_SEMI_in_synpred55_JamlAttrHash6071); if (state.failed) return ;

                                    }
                                    break;

                            }


                            }
                            break;
                        case 3 :
                            // ../etc/JamlAttrHash.g:441:17: ident= IDENT formalParameterList ( throwsClause )? block
                            {
                            ident=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred55_JamlAttrHash6130); if (state.failed) return ;
                            pushFollow(FOLLOW_formalParameterList_in_synpred55_JamlAttrHash6132);
                            formalParameterList();

                            state._fsp--;
                            if (state.failed) return ;
                            // ../etc/JamlAttrHash.g:441:49: ( throwsClause )?
                            int alt178=2;
                            int LA178_0 = input.LA(1);

                            if ( (LA178_0==THROWS) ) {
                                alt178=1;
                            }
                            switch (alt178) {
                                case 1 :
                                    // ../etc/JamlAttrHash.g:0:0: throwsClause
                                    {
                                    pushFollow(FOLLOW_throwsClause_in_synpred55_JamlAttrHash6134);
                                    throwsClause();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_block_in_synpred55_JamlAttrHash6137);
                            block();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:444:13: type classFieldDeclaratorList SEMI
                    {
                    pushFollow(FOLLOW_type_in_synpred55_JamlAttrHash6201);
                    type();

                    state._fsp--;
                    if (state.failed) return ;
                    pushFollow(FOLLOW_classFieldDeclaratorList_in_synpred55_JamlAttrHash6203);
                    classFieldDeclaratorList();

                    state._fsp--;
                    if (state.failed) return ;
                    match(input,SEMI,FOLLOW_SEMI_in_synpred55_JamlAttrHash6205); if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        finally {
            traceOut("synpred55_JamlAttrHash_fragment", 170);
        }}
    // $ANTLR end synpred55_JamlAttrHash

    // $ANTLR start synpred56_JamlAttrHash
    public final void synpred56_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred56_JamlAttrHash_fragment", 171);
        try {
            // ../etc/JamlAttrHash.g:447:9: ( typeDeclaration )
            // ../etc/JamlAttrHash.g:447:9: typeDeclaration
            {
            pushFollow(FOLLOW_typeDeclaration_in_synpred56_JamlAttrHash6250);
            typeDeclaration();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred56_JamlAttrHash_fragment", 171);
        }}
    // $ANTLR end synpred56_JamlAttrHash

    // $ANTLR start synpred62_JamlAttrHash
    public final void synpred62_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred62_JamlAttrHash_fragment", 177);
        try {
            // ../etc/JamlAttrHash.g:453:13: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI ) )
            // ../etc/JamlAttrHash.g:453:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI )
            {
            // ../etc/JamlAttrHash.g:453:13: ( genericTypeParameterList )?
            int alt183=2;
            int LA183_0 = input.LA(1);

            if ( (LA183_0==LESS_THAN) ) {
                alt183=1;
            }
            switch (alt183) {
                case 1 :
                    // ../etc/JamlAttrHash.g:0:0: genericTypeParameterList
                    {
                    pushFollow(FOLLOW_genericTypeParameterList_in_synpred62_JamlAttrHash6306);
                    genericTypeParameterList();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            // ../etc/JamlAttrHash.g:454:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI )
            int alt187=2;
            int LA187_0 = input.LA(1);

            if ( (LA187_0==BOOLEAN||LA187_0==BYTE||LA187_0==CHAR||LA187_0==DOUBLE||LA187_0==FLOAT||(LA187_0>=INT && LA187_0<=LONG)||LA187_0==SHORT||LA187_0==IDENT) ) {
                alt187=1;
            }
            else if ( (LA187_0==VOID) ) {
                alt187=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 187, 0, input);

                throw nvae;
            }
            switch (alt187) {
                case 1 :
                    // ../etc/JamlAttrHash.g:454:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI
                    {
                    pushFollow(FOLLOW_type_in_synpred62_JamlAttrHash6325);
                    type();

                    state._fsp--;
                    if (state.failed) return ;
                    match(input,IDENT,FOLLOW_IDENT_in_synpred62_JamlAttrHash6327); if (state.failed) return ;
                    pushFollow(FOLLOW_formalParameterList_in_synpred62_JamlAttrHash6329);
                    formalParameterList();

                    state._fsp--;
                    if (state.failed) return ;
                    // ../etc/JamlAttrHash.g:454:48: ( arrayDeclaratorList )?
                    int alt184=2;
                    int LA184_0 = input.LA(1);

                    if ( (LA184_0==LBRACK) ) {
                        alt184=1;
                    }
                    switch (alt184) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:0:0: arrayDeclaratorList
                            {
                            pushFollow(FOLLOW_arrayDeclaratorList_in_synpred62_JamlAttrHash6331);
                            arrayDeclaratorList();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }

                    // ../etc/JamlAttrHash.g:454:69: ( throwsClause )?
                    int alt185=2;
                    int LA185_0 = input.LA(1);

                    if ( (LA185_0==THROWS) ) {
                        alt185=1;
                    }
                    switch (alt185) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:0:0: throwsClause
                            {
                            pushFollow(FOLLOW_throwsClause_in_synpred62_JamlAttrHash6334);
                            throwsClause();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }

                    match(input,SEMI,FOLLOW_SEMI_in_synpred62_JamlAttrHash6337); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:456:17: VOID IDENT formalParameterList ( throwsClause )? SEMI
                    {
                    match(input,VOID,FOLLOW_VOID_in_synpred62_JamlAttrHash6395); if (state.failed) return ;
                    match(input,IDENT,FOLLOW_IDENT_in_synpred62_JamlAttrHash6397); if (state.failed) return ;
                    pushFollow(FOLLOW_formalParameterList_in_synpred62_JamlAttrHash6399);
                    formalParameterList();

                    state._fsp--;
                    if (state.failed) return ;
                    // ../etc/JamlAttrHash.g:456:48: ( throwsClause )?
                    int alt186=2;
                    int LA186_0 = input.LA(1);

                    if ( (LA186_0==THROWS) ) {
                        alt186=1;
                    }
                    switch (alt186) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:0:0: throwsClause
                            {
                            pushFollow(FOLLOW_throwsClause_in_synpred62_JamlAttrHash6401);
                            throwsClause();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }

                    match(input,SEMI,FOLLOW_SEMI_in_synpred62_JamlAttrHash6404); if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        finally {
            traceOut("synpred62_JamlAttrHash_fragment", 177);
        }}
    // $ANTLR end synpred62_JamlAttrHash

    // $ANTLR start synpred63_JamlAttrHash
    public final void synpred63_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred63_JamlAttrHash_fragment", 178);
        try {
            // ../etc/JamlAttrHash.g:452:9: ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI ) | type interfaceFieldDeclaratorList SEMI ) )
            // ../etc/JamlAttrHash.g:452:9: modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI ) | type interfaceFieldDeclaratorList SEMI )
            {
            pushFollow(FOLLOW_modifierList_in_synpred63_JamlAttrHash6292);
            modifierList();

            state._fsp--;
            if (state.failed) return ;
            // ../etc/JamlAttrHash.g:453:9: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI ) | type interfaceFieldDeclaratorList SEMI )
            int alt193=2;
            switch ( input.LA(1) ) {
            case LESS_THAN:
            case VOID:
                {
                alt193=1;
                }
                break;
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
                {
                int LA193_2 = input.LA(2);

                if ( (synpred62_JamlAttrHash()) ) {
                    alt193=1;
                }
                else if ( (true) ) {
                    alt193=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 193, 2, input);

                    throw nvae;
                }
                }
                break;
            case IDENT:
                {
                int LA193_3 = input.LA(2);

                if ( (synpred62_JamlAttrHash()) ) {
                    alt193=1;
                }
                else if ( (true) ) {
                    alt193=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 193, 3, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 193, 0, input);

                throw nvae;
            }

            switch (alt193) {
                case 1 :
                    // ../etc/JamlAttrHash.g:453:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI )
                    {
                    // ../etc/JamlAttrHash.g:453:13: ( genericTypeParameterList )?
                    int alt188=2;
                    int LA188_0 = input.LA(1);

                    if ( (LA188_0==LESS_THAN) ) {
                        alt188=1;
                    }
                    switch (alt188) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:0:0: genericTypeParameterList
                            {
                            pushFollow(FOLLOW_genericTypeParameterList_in_synpred63_JamlAttrHash6306);
                            genericTypeParameterList();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }

                    // ../etc/JamlAttrHash.g:454:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI )
                    int alt192=2;
                    int LA192_0 = input.LA(1);

                    if ( (LA192_0==BOOLEAN||LA192_0==BYTE||LA192_0==CHAR||LA192_0==DOUBLE||LA192_0==FLOAT||(LA192_0>=INT && LA192_0<=LONG)||LA192_0==SHORT||LA192_0==IDENT) ) {
                        alt192=1;
                    }
                    else if ( (LA192_0==VOID) ) {
                        alt192=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 192, 0, input);

                        throw nvae;
                    }
                    switch (alt192) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:454:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI
                            {
                            pushFollow(FOLLOW_type_in_synpred63_JamlAttrHash6325);
                            type();

                            state._fsp--;
                            if (state.failed) return ;
                            match(input,IDENT,FOLLOW_IDENT_in_synpred63_JamlAttrHash6327); if (state.failed) return ;
                            pushFollow(FOLLOW_formalParameterList_in_synpred63_JamlAttrHash6329);
                            formalParameterList();

                            state._fsp--;
                            if (state.failed) return ;
                            // ../etc/JamlAttrHash.g:454:48: ( arrayDeclaratorList )?
                            int alt189=2;
                            int LA189_0 = input.LA(1);

                            if ( (LA189_0==LBRACK) ) {
                                alt189=1;
                            }
                            switch (alt189) {
                                case 1 :
                                    // ../etc/JamlAttrHash.g:0:0: arrayDeclaratorList
                                    {
                                    pushFollow(FOLLOW_arrayDeclaratorList_in_synpred63_JamlAttrHash6331);
                                    arrayDeclaratorList();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }

                            // ../etc/JamlAttrHash.g:454:69: ( throwsClause )?
                            int alt190=2;
                            int LA190_0 = input.LA(1);

                            if ( (LA190_0==THROWS) ) {
                                alt190=1;
                            }
                            switch (alt190) {
                                case 1 :
                                    // ../etc/JamlAttrHash.g:0:0: throwsClause
                                    {
                                    pushFollow(FOLLOW_throwsClause_in_synpred63_JamlAttrHash6334);
                                    throwsClause();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }

                            match(input,SEMI,FOLLOW_SEMI_in_synpred63_JamlAttrHash6337); if (state.failed) return ;

                            }
                            break;
                        case 2 :
                            // ../etc/JamlAttrHash.g:456:17: VOID IDENT formalParameterList ( throwsClause )? SEMI
                            {
                            match(input,VOID,FOLLOW_VOID_in_synpred63_JamlAttrHash6395); if (state.failed) return ;
                            match(input,IDENT,FOLLOW_IDENT_in_synpred63_JamlAttrHash6397); if (state.failed) return ;
                            pushFollow(FOLLOW_formalParameterList_in_synpred63_JamlAttrHash6399);
                            formalParameterList();

                            state._fsp--;
                            if (state.failed) return ;
                            // ../etc/JamlAttrHash.g:456:48: ( throwsClause )?
                            int alt191=2;
                            int LA191_0 = input.LA(1);

                            if ( (LA191_0==THROWS) ) {
                                alt191=1;
                            }
                            switch (alt191) {
                                case 1 :
                                    // ../etc/JamlAttrHash.g:0:0: throwsClause
                                    {
                                    pushFollow(FOLLOW_throwsClause_in_synpred63_JamlAttrHash6401);
                                    throwsClause();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }

                            match(input,SEMI,FOLLOW_SEMI_in_synpred63_JamlAttrHash6404); if (state.failed) return ;

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:459:13: type interfaceFieldDeclaratorList SEMI
                    {
                    pushFollow(FOLLOW_type_in_synpred63_JamlAttrHash6467);
                    type();

                    state._fsp--;
                    if (state.failed) return ;
                    pushFollow(FOLLOW_interfaceFieldDeclaratorList_in_synpred63_JamlAttrHash6469);
                    interfaceFieldDeclaratorList();

                    state._fsp--;
                    if (state.failed) return ;
                    match(input,SEMI,FOLLOW_SEMI_in_synpred63_JamlAttrHash6471); if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        finally {
            traceOut("synpred63_JamlAttrHash_fragment", 178);
        }}
    // $ANTLR end synpred63_JamlAttrHash

    // $ANTLR start synpred64_JamlAttrHash
    public final void synpred64_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred64_JamlAttrHash_fragment", 179);
        try {
            // ../etc/JamlAttrHash.g:462:9: ( typeDeclaration )
            // ../etc/JamlAttrHash.g:462:9: typeDeclaration
            {
            pushFollow(FOLLOW_typeDeclaration_in_synpred64_JamlAttrHash6516);
            typeDeclaration();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred64_JamlAttrHash_fragment", 179);
        }}
    // $ANTLR end synpred64_JamlAttrHash

    // $ANTLR start synpred70_JamlAttrHash
    public final void synpred70_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred70_JamlAttrHash_fragment", 185);
        try {
            // ../etc/JamlAttrHash.g:501:9: ( arrayDeclarator )
            // ../etc/JamlAttrHash.g:501:9: arrayDeclarator
            {
            pushFollow(FOLLOW_arrayDeclarator_in_synpred70_JamlAttrHash6818);
            arrayDeclarator();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred70_JamlAttrHash_fragment", 185);
        }}
    // $ANTLR end synpred70_JamlAttrHash

    // $ANTLR start synpred88_JamlAttrHash
    public final void synpred88_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred88_JamlAttrHash_fragment", 203);
        try {
            // ../etc/JamlAttrHash.g:550:23: ( arrayDeclaratorList )
            // ../etc/JamlAttrHash.g:550:23: arrayDeclaratorList
            {
            pushFollow(FOLLOW_arrayDeclaratorList_in_synpred88_JamlAttrHash7219);
            arrayDeclaratorList();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred88_JamlAttrHash_fragment", 203);
        }}
    // $ANTLR end synpred88_JamlAttrHash

    // $ANTLR start synpred89_JamlAttrHash
    public final void synpred89_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred89_JamlAttrHash_fragment", 204);
        try {
            // ../etc/JamlAttrHash.g:555:28: ( arrayDeclaratorList )
            // ../etc/JamlAttrHash.g:555:28: arrayDeclaratorList
            {
            pushFollow(FOLLOW_arrayDeclaratorList_in_synpred89_JamlAttrHash7268);
            arrayDeclaratorList();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred89_JamlAttrHash_fragment", 204);
        }}
    // $ANTLR end synpred89_JamlAttrHash

    // $ANTLR start synpred91_JamlAttrHash
    public final void synpred91_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred91_JamlAttrHash_fragment", 206);
        try {
            // ../etc/JamlAttrHash.g:565:20: ( DOT typeIdent )
            // ../etc/JamlAttrHash.g:565:20: DOT typeIdent
            {
            match(input,DOT,FOLLOW_DOT_in_synpred91_JamlAttrHash7353); if (state.failed) return ;
            pushFollow(FOLLOW_typeIdent_in_synpred91_JamlAttrHash7355);
            typeIdent();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred91_JamlAttrHash_fragment", 206);
        }}
    // $ANTLR end synpred91_JamlAttrHash

    // $ANTLR start synpred102_JamlAttrHash
    public final void synpred102_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred102_JamlAttrHash_fragment", 217);
        try {
            // ../etc/JamlAttrHash.g:594:40: ( COMMA genericTypeArgument )
            // ../etc/JamlAttrHash.g:594:40: COMMA genericTypeArgument
            {
            match(input,COMMA,FOLLOW_COMMA_in_synpred102_JamlAttrHash7580); if (state.failed) return ;
            pushFollow(FOLLOW_genericTypeArgument_in_synpred102_JamlAttrHash7582);
            genericTypeArgument();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred102_JamlAttrHash_fragment", 217);
        }}
    // $ANTLR end synpred102_JamlAttrHash

    // $ANTLR start synpred104_JamlAttrHash
    public final void synpred104_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred104_JamlAttrHash_fragment", 219);
        try {
            // ../etc/JamlAttrHash.g:600:18: ( genericWildcardBoundType )
            // ../etc/JamlAttrHash.g:600:18: genericWildcardBoundType
            {
            pushFollow(FOLLOW_genericWildcardBoundType_in_synpred104_JamlAttrHash7636);
            genericWildcardBoundType();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred104_JamlAttrHash_fragment", 219);
        }}
    // $ANTLR end synpred104_JamlAttrHash

    // $ANTLR start synpred109_JamlAttrHash
    public final void synpred109_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred109_JamlAttrHash_fragment", 224);
        try {
            // ../etc/JamlAttrHash.g:625:42: ( COMMA formalParameterStandardDecl )
            // ../etc/JamlAttrHash.g:625:42: COMMA formalParameterStandardDecl
            {
            match(input,COMMA,FOLLOW_COMMA_in_synpred109_JamlAttrHash7854); if (state.failed) return ;
            pushFollow(FOLLOW_formalParameterStandardDecl_in_synpred109_JamlAttrHash7856);
            formalParameterStandardDecl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred109_JamlAttrHash_fragment", 224);
        }}
    // $ANTLR end synpred109_JamlAttrHash

    // $ANTLR start synpred111_JamlAttrHash
    public final void synpred111_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred111_JamlAttrHash_fragment", 226);
        try {
            // ../etc/JamlAttrHash.g:625:13: ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? )
            // ../etc/JamlAttrHash.g:625:13: formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )?
            {
            pushFollow(FOLLOW_formalParameterStandardDecl_in_synpred111_JamlAttrHash7851);
            formalParameterStandardDecl();

            state._fsp--;
            if (state.failed) return ;
            // ../etc/JamlAttrHash.g:625:41: ( COMMA formalParameterStandardDecl )*
            loop196:
            do {
                int alt196=2;
                int LA196_0 = input.LA(1);

                if ( (LA196_0==COMMA) ) {
                    int LA196_1 = input.LA(2);

                    if ( (synpred109_JamlAttrHash()) ) {
                        alt196=1;
                    }


                }


                switch (alt196) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:625:42: COMMA formalParameterStandardDecl
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_synpred111_JamlAttrHash7854); if (state.failed) return ;
            	    pushFollow(FOLLOW_formalParameterStandardDecl_in_synpred111_JamlAttrHash7856);
            	    formalParameterStandardDecl();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop196;
                }
            } while (true);

            // ../etc/JamlAttrHash.g:625:78: ( COMMA formalParameterVarArgDecl )?
            int alt197=2;
            int LA197_0 = input.LA(1);

            if ( (LA197_0==COMMA) ) {
                alt197=1;
            }
            switch (alt197) {
                case 1 :
                    // ../etc/JamlAttrHash.g:625:79: COMMA formalParameterVarArgDecl
                    {
                    match(input,COMMA,FOLLOW_COMMA_in_synpred111_JamlAttrHash7861); if (state.failed) return ;
                    pushFollow(FOLLOW_formalParameterVarArgDecl_in_synpred111_JamlAttrHash7863);
                    formalParameterVarArgDecl();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        finally {
            traceOut("synpred111_JamlAttrHash_fragment", 226);
        }}
    // $ANTLR end synpred111_JamlAttrHash

    // $ANTLR start synpred112_JamlAttrHash
    public final void synpred112_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred112_JamlAttrHash_fragment", 227);
        try {
            // ../etc/JamlAttrHash.g:628:13: ( formalParameterVarArgDecl )
            // ../etc/JamlAttrHash.g:628:13: formalParameterVarArgDecl
            {
            pushFollow(FOLLOW_formalParameterVarArgDecl_in_synpred112_JamlAttrHash7920);
            formalParameterVarArgDecl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred112_JamlAttrHash_fragment", 227);
        }}
    // $ANTLR end synpred112_JamlAttrHash

    // $ANTLR start synpred113_JamlAttrHash
    public final void synpred113_JamlAttrHash_fragment() throws RecognitionException {   
        Token ident=null;

        traceIn("synpred113_JamlAttrHash_fragment", 228);
        try {
            // ../etc/JamlAttrHash.g:649:13: ( DOT ident= IDENT )
            // ../etc/JamlAttrHash.g:649:13: DOT ident= IDENT
            {
            match(input,DOT,FOLLOW_DOT_in_synpred113_JamlAttrHash8165); if (state.failed) return ;
            ident=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred113_JamlAttrHash8169); if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred113_JamlAttrHash_fragment", 228);
        }}
    // $ANTLR end synpred113_JamlAttrHash

    // $ANTLR start synpred114_JamlAttrHash
    public final void synpred114_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred114_JamlAttrHash_fragment", 229);
        try {
            // ../etc/JamlAttrHash.g:656:9: ( annotation )
            // ../etc/JamlAttrHash.g:656:9: annotation
            {
            pushFollow(FOLLOW_annotation_in_synpred114_JamlAttrHash8222);
            annotation();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred114_JamlAttrHash_fragment", 229);
        }}
    // $ANTLR end synpred114_JamlAttrHash

    // $ANTLR start synpred126_JamlAttrHash
    public final void synpred126_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred126_JamlAttrHash_fragment", 241);
        try {
            // ../etc/JamlAttrHash.g:707:9: ( modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI | classFieldDeclaratorList SEMI ) )
            // ../etc/JamlAttrHash.g:707:9: modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI | classFieldDeclaratorList SEMI )
            {
            pushFollow(FOLLOW_modifierList_in_synpred126_JamlAttrHash8676);
            modifierList();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_type_in_synpred126_JamlAttrHash8678);
            type();

            state._fsp--;
            if (state.failed) return ;
            // ../etc/JamlAttrHash.g:708:9: ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI | classFieldDeclaratorList SEMI )
            int alt202=2;
            int LA202_0 = input.LA(1);

            if ( (LA202_0==IDENT) ) {
                int LA202_1 = input.LA(2);

                if ( (LA202_1==LPAREN) ) {
                    alt202=1;
                }
                else if ( (LA202_1==ASSIGN||LA202_1==COMMA||LA202_1==LBRACK||LA202_1==SEMI) ) {
                    alt202=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 202, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 202, 0, input);

                throw nvae;
            }
            switch (alt202) {
                case 1 :
                    // ../etc/JamlAttrHash.g:708:13: IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI
                    {
                    match(input,IDENT,FOLLOW_IDENT_in_synpred126_JamlAttrHash8692); if (state.failed) return ;
                    match(input,LPAREN,FOLLOW_LPAREN_in_synpred126_JamlAttrHash8694); if (state.failed) return ;
                    match(input,RPAREN,FOLLOW_RPAREN_in_synpred126_JamlAttrHash8696); if (state.failed) return ;
                    // ../etc/JamlAttrHash.g:708:33: ( annotationDefaultValue )?
                    int alt201=2;
                    int LA201_0 = input.LA(1);

                    if ( (LA201_0==DEFAULT) ) {
                        alt201=1;
                    }
                    switch (alt201) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:0:0: annotationDefaultValue
                            {
                            pushFollow(FOLLOW_annotationDefaultValue_in_synpred126_JamlAttrHash8698);
                            annotationDefaultValue();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }

                    match(input,SEMI,FOLLOW_SEMI_in_synpred126_JamlAttrHash8701); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:710:13: classFieldDeclaratorList SEMI
                    {
                    pushFollow(FOLLOW_classFieldDeclaratorList_in_synpred126_JamlAttrHash8743);
                    classFieldDeclaratorList();

                    state._fsp--;
                    if (state.failed) return ;
                    match(input,SEMI,FOLLOW_SEMI_in_synpred126_JamlAttrHash8745); if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        finally {
            traceOut("synpred126_JamlAttrHash_fragment", 241);
        }}
    // $ANTLR end synpred126_JamlAttrHash

    // $ANTLR start synpred128_JamlAttrHash
    public final void synpred128_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred128_JamlAttrHash_fragment", 243);
        try {
            // ../etc/JamlAttrHash.g:728:9: ( localVariableDeclaration SEMI )
            // ../etc/JamlAttrHash.g:728:9: localVariableDeclaration SEMI
            {
            pushFollow(FOLLOW_localVariableDeclaration_in_synpred128_JamlAttrHash8880);
            localVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,SEMI,FOLLOW_SEMI_in_synpred128_JamlAttrHash8882); if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred128_JamlAttrHash_fragment", 243);
        }}
    // $ANTLR end synpred128_JamlAttrHash

    // $ANTLR start synpred129_JamlAttrHash
    public final void synpred129_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred129_JamlAttrHash_fragment", 244);
        try {
            // ../etc/JamlAttrHash.g:729:9: ( typeDeclaration )
            // ../etc/JamlAttrHash.g:729:9: typeDeclaration
            {
            pushFollow(FOLLOW_typeDeclaration_in_synpred129_JamlAttrHash8893);
            typeDeclaration();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred129_JamlAttrHash_fragment", 244);
        }}
    // $ANTLR end synpred129_JamlAttrHash

    // $ANTLR start synpred133_JamlAttrHash
    public final void synpred133_JamlAttrHash_fragment() throws RecognitionException {   
        JamlAttrHashParser.statement_return elseStat = null;


        traceIn("synpred133_JamlAttrHash_fragment", 248);
        try {
            // ../etc/JamlAttrHash.g:746:13: ( ELSE elseStat= statement )
            // ../etc/JamlAttrHash.g:746:13: ELSE elseStat= statement
            {
            match(input,ELSE,FOLLOW_ELSE_in_synpred133_JamlAttrHash9191); if (state.failed) return ;
            pushFollow(FOLLOW_statement_in_synpred133_JamlAttrHash9195);
            elseStat=statement();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred133_JamlAttrHash_fragment", 248);
        }}
    // $ANTLR end synpred133_JamlAttrHash

    // $ANTLR start synpred135_JamlAttrHash
    public final void synpred135_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred135_JamlAttrHash_fragment", 250);
        try {
            // ../etc/JamlAttrHash.g:750:13: ( forInit SEMI forCondition SEMI forUpdater RPAREN statement )
            // ../etc/JamlAttrHash.g:750:13: forInit SEMI forCondition SEMI forUpdater RPAREN statement
            {
            pushFollow(FOLLOW_forInit_in_synpred135_JamlAttrHash9378);
            forInit();

            state._fsp--;
            if (state.failed) return ;
            match(input,SEMI,FOLLOW_SEMI_in_synpred135_JamlAttrHash9380); if (state.failed) return ;
            pushFollow(FOLLOW_forCondition_in_synpred135_JamlAttrHash9382);
            forCondition();

            state._fsp--;
            if (state.failed) return ;
            match(input,SEMI,FOLLOW_SEMI_in_synpred135_JamlAttrHash9384); if (state.failed) return ;
            pushFollow(FOLLOW_forUpdater_in_synpred135_JamlAttrHash9386);
            forUpdater();

            state._fsp--;
            if (state.failed) return ;
            match(input,RPAREN,FOLLOW_RPAREN_in_synpred135_JamlAttrHash9388); if (state.failed) return ;
            pushFollow(FOLLOW_statement_in_synpred135_JamlAttrHash9390);
            statement();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred135_JamlAttrHash_fragment", 250);
        }}
    // $ANTLR end synpred135_JamlAttrHash

    // $ANTLR start synpred155_JamlAttrHash
    public final void synpred155_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred155_JamlAttrHash_fragment", 270);
        try {
            // ../etc/JamlAttrHash.g:788:9: ( switchCaseLabel )
            // ../etc/JamlAttrHash.g:788:9: switchCaseLabel
            {
            pushFollow(FOLLOW_switchCaseLabel_in_synpred155_JamlAttrHash10357);
            switchCaseLabel();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred155_JamlAttrHash_fragment", 270);
        }}
    // $ANTLR end synpred155_JamlAttrHash

    // $ANTLR start synpred158_JamlAttrHash
    public final void synpred158_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred158_JamlAttrHash_fragment", 273);
        try {
            // ../etc/JamlAttrHash.g:800:9: ( localVariableDeclaration )
            // ../etc/JamlAttrHash.g:800:9: localVariableDeclaration
            {
            pushFollow(FOLLOW_localVariableDeclaration_in_synpred158_JamlAttrHash10447);
            localVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred158_JamlAttrHash_fragment", 273);
        }}
    // $ANTLR end synpred158_JamlAttrHash

    // $ANTLR start synpred159_JamlAttrHash
    public final void synpred159_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred159_JamlAttrHash_fragment", 274);
        try {
            // ../etc/JamlAttrHash.g:801:9: ( expressionList )
            // ../etc/JamlAttrHash.g:801:9: expressionList
            {
            pushFollow(FOLLOW_expressionList_in_synpred159_JamlAttrHash10469);
            expressionList();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred159_JamlAttrHash_fragment", 274);
        }}
    // $ANTLR end synpred159_JamlAttrHash

    // $ANTLR start synpred202_JamlAttrHash
    public final void synpred202_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred202_JamlAttrHash_fragment", 317);
        try {
            // ../etc/JamlAttrHash.g:937:9: ( LPAREN type RPAREN unaryExpression )
            // ../etc/JamlAttrHash.g:937:9: LPAREN type RPAREN unaryExpression
            {
            match(input,LPAREN,FOLLOW_LPAREN_in_synpred202_JamlAttrHash12002); if (state.failed) return ;
            pushFollow(FOLLOW_type_in_synpred202_JamlAttrHash12004);
            type();

            state._fsp--;
            if (state.failed) return ;
            match(input,RPAREN,FOLLOW_RPAREN_in_synpred202_JamlAttrHash12006); if (state.failed) return ;
            pushFollow(FOLLOW_unaryExpression_in_synpred202_JamlAttrHash12008);
            unaryExpression();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred202_JamlAttrHash_fragment", 317);
        }}
    // $ANTLR end synpred202_JamlAttrHash

    // $ANTLR start synpred230_JamlAttrHash
    public final void synpred230_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred230_JamlAttrHash_fragment", 345);
        try {
            // ../etc/JamlAttrHash.g:1005:13: ( ( arrayDeclarator )+ ( DOT CLASS ) )
            // ../etc/JamlAttrHash.g:1005:13: ( arrayDeclarator )+ ( DOT CLASS )
            {
            // ../etc/JamlAttrHash.g:1005:13: ( arrayDeclarator )+
            int cnt225=0;
            loop225:
            do {
                int alt225=2;
                int LA225_0 = input.LA(1);

                if ( (LA225_0==LBRACK) ) {
                    alt225=1;
                }


                switch (alt225) {
            	case 1 :
            	    // ../etc/JamlAttrHash.g:1005:17: arrayDeclarator
            	    {
            	    pushFollow(FOLLOW_arrayDeclarator_in_synpred230_JamlAttrHash13909);
            	    arrayDeclarator();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    if ( cnt225 >= 1 ) break loop225;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(225, input);
                        throw eee;
                }
                cnt225++;
            } while (true);

            // ../etc/JamlAttrHash.g:1007:13: ( DOT CLASS )
            // ../etc/JamlAttrHash.g:1007:17: DOT CLASS
            {
            match(input,DOT,FOLLOW_DOT_in_synpred230_JamlAttrHash13977); if (state.failed) return ;
            match(input,CLASS,FOLLOW_CLASS_in_synpred230_JamlAttrHash13979); if (state.failed) return ;

            }


            }

        }
        finally {
            traceOut("synpred230_JamlAttrHash_fragment", 345);
        }}
    // $ANTLR end synpred230_JamlAttrHash

    // $ANTLR start synpred238_JamlAttrHash
    public final void synpred238_JamlAttrHash_fragment() throws RecognitionException {   
        Token outerDot=null;
        Token Super=null;
        Token innerDot=null;

        traceIn("synpred238_JamlAttrHash_fragment", 353);
        try {
            // ../etc/JamlAttrHash.g:1010:13: (outerDot= DOT ( CLASS | genericTypeArgumentListSimplified (Super= SUPER arguments | SUPER innerDot= DOT IDENT arguments | IDENT arguments ) | THIS | Super= SUPER arguments | innerNewExpression ) )
            // ../etc/JamlAttrHash.g:1010:13: outerDot= DOT ( CLASS | genericTypeArgumentListSimplified (Super= SUPER arguments | SUPER innerDot= DOT IDENT arguments | IDENT arguments ) | THIS | Super= SUPER arguments | innerNewExpression )
            {
            outerDot=(Token)match(input,DOT,FOLLOW_DOT_in_synpred238_JamlAttrHash14110); if (state.failed) return ;
            // ../etc/JamlAttrHash.g:1011:13: ( CLASS | genericTypeArgumentListSimplified (Super= SUPER arguments | SUPER innerDot= DOT IDENT arguments | IDENT arguments ) | THIS | Super= SUPER arguments | innerNewExpression )
            int alt228=5;
            switch ( input.LA(1) ) {
            case CLASS:
                {
                alt228=1;
                }
                break;
            case LESS_THAN:
                {
                alt228=2;
                }
                break;
            case THIS:
                {
                alt228=3;
                }
                break;
            case SUPER:
                {
                alt228=4;
                }
                break;
            case NEW:
                {
                alt228=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 228, 0, input);

                throw nvae;
            }

            switch (alt228) {
                case 1 :
                    // ../etc/JamlAttrHash.g:1011:17: CLASS
                    {
                    match(input,CLASS,FOLLOW_CLASS_in_synpred238_JamlAttrHash14128); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // ../etc/JamlAttrHash.g:1012:17: genericTypeArgumentListSimplified (Super= SUPER arguments | SUPER innerDot= DOT IDENT arguments | IDENT arguments )
                    {
                    pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_synpred238_JamlAttrHash14191);
                    genericTypeArgumentListSimplified();

                    state._fsp--;
                    if (state.failed) return ;
                    // ../etc/JamlAttrHash.g:1013:17: (Super= SUPER arguments | SUPER innerDot= DOT IDENT arguments | IDENT arguments )
                    int alt227=3;
                    int LA227_0 = input.LA(1);

                    if ( (LA227_0==SUPER) ) {
                        int LA227_1 = input.LA(2);

                        if ( (LA227_1==DOT) ) {
                            alt227=2;
                        }
                        else if ( (LA227_1==LPAREN) ) {
                            alt227=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return ;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 227, 1, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA227_0==IDENT) ) {
                        alt227=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 227, 0, input);

                        throw nvae;
                    }
                    switch (alt227) {
                        case 1 :
                            // ../etc/JamlAttrHash.g:1013:21: Super= SUPER arguments
                            {
                            Super=(Token)match(input,SUPER,FOLLOW_SUPER_in_synpred238_JamlAttrHash14216); if (state.failed) return ;
                            pushFollow(FOLLOW_arguments_in_synpred238_JamlAttrHash14218);
                            arguments();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;
                        case 2 :
                            // ../etc/JamlAttrHash.g:1014:21: SUPER innerDot= DOT IDENT arguments
                            {
                            match(input,SUPER,FOLLOW_SUPER_in_synpred238_JamlAttrHash14268); if (state.failed) return ;
                            innerDot=(Token)match(input,DOT,FOLLOW_DOT_in_synpred238_JamlAttrHash14272); if (state.failed) return ;
                            match(input,IDENT,FOLLOW_IDENT_in_synpred238_JamlAttrHash14274); if (state.failed) return ;
                            pushFollow(FOLLOW_arguments_in_synpred238_JamlAttrHash14276);
                            arguments();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;
                        case 3 :
                            // ../etc/JamlAttrHash.g:1015:21: IDENT arguments
                            {
                            match(input,IDENT,FOLLOW_IDENT_in_synpred238_JamlAttrHash14326); if (state.failed) return ;
                            pushFollow(FOLLOW_arguments_in_synpred238_JamlAttrHash14328);
                            arguments();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // ../etc/JamlAttrHash.g:1017:17: THIS
                    {
                    match(input,THIS,FOLLOW_THIS_in_synpred238_JamlAttrHash14403); if (state.failed) return ;

                    }
                    break;
                case 4 :
                    // ../etc/JamlAttrHash.g:1018:17: Super= SUPER arguments
                    {
                    Super=(Token)match(input,SUPER,FOLLOW_SUPER_in_synpred238_JamlAttrHash14469); if (state.failed) return ;
                    pushFollow(FOLLOW_arguments_in_synpred238_JamlAttrHash14471);
                    arguments();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 5 :
                    // ../etc/JamlAttrHash.g:1019:17: innerNewExpression
                    {
                    pushFollow(FOLLOW_innerNewExpression_in_synpred238_JamlAttrHash14519);
                    innerNewExpression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        finally {
            traceOut("synpred238_JamlAttrHash_fragment", 353);
        }}
    // $ANTLR end synpred238_JamlAttrHash

    // $ANTLR start synpred246_JamlAttrHash
    public final void synpred246_JamlAttrHash_fragment() throws RecognitionException {   
        traceIn("synpred246_JamlAttrHash_fragment", 361);
        try {
            // ../etc/JamlAttrHash.g:1044:37: ( LBRACK expression RBRACK )
            // ../etc/JamlAttrHash.g:1044:37: LBRACK expression RBRACK
            {
            match(input,LBRACK,FOLLOW_LBRACK_in_synpred246_JamlAttrHash14920); if (state.failed) return ;
            pushFollow(FOLLOW_expression_in_synpred246_JamlAttrHash14923);
            expression();

            state._fsp--;
            if (state.failed) return ;
            match(input,RBRACK,FOLLOW_RBRACK_in_synpred246_JamlAttrHash14925); if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred246_JamlAttrHash_fragment", 361);
        }}
    // $ANTLR end synpred246_JamlAttrHash

    // Delegated rules

    public final boolean synpred102_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred102_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred63_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred63_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred88_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred88_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred128_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred128_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred113_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred113_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred28_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred28_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred238_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred238_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred91_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred91_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred230_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred230_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred62_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred62_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred55_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred55_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred133_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred133_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred29_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred29_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred158_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred158_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred44_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred44_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred111_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred111_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred109_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred109_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred155_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred155_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred64_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred64_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred129_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred129_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred27_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred104_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred104_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred114_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred114_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred246_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred246_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred159_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred159_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred54_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred54_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred202_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred202_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred26_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred26_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred56_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred56_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred112_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred112_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred126_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred126_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred70_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred70_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred89_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred89_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred135_JamlAttrHash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred135_JamlAttrHash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA40 dfa40 = new DFA40(this);
    protected DFA47 dfa47 = new DFA47(this);
    protected DFA90 dfa90 = new DFA90(this);
    protected DFA92 dfa92 = new DFA92(this);
    protected DFA101 dfa101 = new DFA101(this);
    protected DFA95 dfa95 = new DFA95(this);
    protected DFA107 dfa107 = new DFA107(this);
    protected DFA131 dfa131 = new DFA131(this);
    protected DFA143 dfa143 = new DFA143(this);
    protected DFA147 dfa147 = new DFA147(this);
    protected DFA154 dfa154 = new DFA154(this);
    static final String DFA40_eotS =
        "\27\uffff";
    static final String DFA40_eofS =
        "\27\uffff";
    static final String DFA40_minS =
        "\1\7\1\uffff\14\0\11\uffff";
    static final String DFA40_maxS =
        "\1\u00a4\1\uffff\14\0\11\uffff";
    static final String DFA40_acceptS =
        "\1\uffff\1\1\14\uffff\1\3\3\uffff\1\4\2\uffff\1\5\1\2";
    static final String DFA40_specialS =
        "\2\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\11"+
        "\uffff}>";
    static final String[] DFA40_transitionS = {
            "\1\15\17\uffff\1\1\1\uffff\1\16\22\uffff\1\25\10\uffff\1\6\1"+
            "\uffff\1\16\1\uffff\1\16\2\uffff\1\16\1\22\3\uffff\1\16\1\uffff"+
            "\1\22\2\uffff\1\14\1\uffff\1\16\4\uffff\1\22\1\uffff\2\16\1"+
            "\7\3\uffff\1\5\1\4\1\3\1\uffff\1\16\1\2\1\13\2\uffff\1\10\3"+
            "\uffff\1\11\2\uffff\1\16\1\12\75\uffff\1\16",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA40_eot = DFA.unpackEncodedString(DFA40_eotS);
    static final short[] DFA40_eof = DFA.unpackEncodedString(DFA40_eofS);
    static final char[] DFA40_min = DFA.unpackEncodedStringToUnsignedChars(DFA40_minS);
    static final char[] DFA40_max = DFA.unpackEncodedStringToUnsignedChars(DFA40_maxS);
    static final short[] DFA40_accept = DFA.unpackEncodedString(DFA40_acceptS);
    static final short[] DFA40_special = DFA.unpackEncodedString(DFA40_specialS);
    static final short[][] DFA40_transition;

    static {
        int numStates = DFA40_transitionS.length;
        DFA40_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA40_transition[i] = DFA.unpackEncodedString(DFA40_transitionS[i]);
        }
    }

    class DFA40 extends DFA {

        public DFA40(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 40;
            this.eot = DFA40_eot;
            this.eof = DFA40_eof;
            this.min = DFA40_min;
            this.max = DFA40_max;
            this.accept = DFA40_accept;
            this.special = DFA40_special;
            this.transition = DFA40_transition;
        }
        public String getDescription() {
            return "432:1: classScopeDeclarations : ( block -> ^( CLASS_INSTANCE_INITIALIZER block ) | STATIC block -> ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block ) | modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration | SEMI );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA40_2 = input.LA(1);

                         
                        int index40_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_JamlAttrHash()) ) {s = 22;}

                        else if ( (synpred55_JamlAttrHash()) ) {s = 14;}

                        else if ( (synpred56_JamlAttrHash()) ) {s = 18;}

                         
                        input.seek(index40_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA40_3 = input.LA(1);

                         
                        int index40_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_JamlAttrHash()) ) {s = 14;}

                        else if ( (synpred56_JamlAttrHash()) ) {s = 18;}

                         
                        input.seek(index40_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA40_4 = input.LA(1);

                         
                        int index40_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_JamlAttrHash()) ) {s = 14;}

                        else if ( (synpred56_JamlAttrHash()) ) {s = 18;}

                         
                        input.seek(index40_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA40_5 = input.LA(1);

                         
                        int index40_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_JamlAttrHash()) ) {s = 14;}

                        else if ( (synpred56_JamlAttrHash()) ) {s = 18;}

                         
                        input.seek(index40_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA40_6 = input.LA(1);

                         
                        int index40_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_JamlAttrHash()) ) {s = 14;}

                        else if ( (synpred56_JamlAttrHash()) ) {s = 18;}

                         
                        input.seek(index40_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA40_7 = input.LA(1);

                         
                        int index40_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_JamlAttrHash()) ) {s = 14;}

                        else if ( (synpred56_JamlAttrHash()) ) {s = 18;}

                         
                        input.seek(index40_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA40_8 = input.LA(1);

                         
                        int index40_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_JamlAttrHash()) ) {s = 14;}

                        else if ( (synpred56_JamlAttrHash()) ) {s = 18;}

                         
                        input.seek(index40_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA40_9 = input.LA(1);

                         
                        int index40_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_JamlAttrHash()) ) {s = 14;}

                        else if ( (synpred56_JamlAttrHash()) ) {s = 18;}

                         
                        input.seek(index40_9);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA40_10 = input.LA(1);

                         
                        int index40_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_JamlAttrHash()) ) {s = 14;}

                        else if ( (synpred56_JamlAttrHash()) ) {s = 18;}

                         
                        input.seek(index40_10);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA40_11 = input.LA(1);

                         
                        int index40_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_JamlAttrHash()) ) {s = 14;}

                        else if ( (synpred56_JamlAttrHash()) ) {s = 18;}

                         
                        input.seek(index40_11);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA40_12 = input.LA(1);

                         
                        int index40_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_JamlAttrHash()) ) {s = 14;}

                        else if ( (synpred56_JamlAttrHash()) ) {s = 18;}

                         
                        input.seek(index40_12);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA40_13 = input.LA(1);

                         
                        int index40_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_JamlAttrHash()) ) {s = 14;}

                        else if ( (synpred56_JamlAttrHash()) ) {s = 18;}

                         
                        input.seek(index40_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 40, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA47_eotS =
        "\25\uffff";
    static final String DFA47_eofS =
        "\25\uffff";
    static final String DFA47_minS =
        "\1\7\14\0\10\uffff";
    static final String DFA47_maxS =
        "\1\u00a4\14\0\10\uffff";
    static final String DFA47_acceptS =
        "\15\uffff\1\1\3\uffff\1\2\2\uffff\1\3";
    static final String DFA47_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\10"+
        "\uffff}>";
    static final String[] DFA47_transitionS = {
            "\1\14\21\uffff\1\15\22\uffff\1\24\10\uffff\1\5\1\uffff\1\15"+
            "\1\uffff\1\15\2\uffff\1\15\1\21\3\uffff\1\15\1\uffff\1\21\2"+
            "\uffff\1\13\1\uffff\1\15\4\uffff\1\21\1\uffff\2\15\1\6\3\uffff"+
            "\1\3\1\2\1\1\1\uffff\1\15\1\4\1\12\2\uffff\1\7\3\uffff\1\10"+
            "\2\uffff\1\15\1\11\75\uffff\1\15",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA47_eot = DFA.unpackEncodedString(DFA47_eotS);
    static final short[] DFA47_eof = DFA.unpackEncodedString(DFA47_eofS);
    static final char[] DFA47_min = DFA.unpackEncodedStringToUnsignedChars(DFA47_minS);
    static final char[] DFA47_max = DFA.unpackEncodedStringToUnsignedChars(DFA47_maxS);
    static final short[] DFA47_accept = DFA.unpackEncodedString(DFA47_acceptS);
    static final short[] DFA47_special = DFA.unpackEncodedString(DFA47_specialS);
    static final short[][] DFA47_transition;

    static {
        int numStates = DFA47_transitionS.length;
        DFA47_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA47_transition[i] = DFA.unpackEncodedString(DFA47_transitionS[i]);
        }
    }

    class DFA47 extends DFA {

        public DFA47(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 47;
            this.eot = DFA47_eot;
            this.eof = DFA47_eof;
            this.min = DFA47_min;
            this.max = DFA47_max;
            this.accept = DFA47_accept;
            this.special = DFA47_special;
            this.transition = DFA47_transition;
        }
        public String getDescription() {
            return "451:1: interfaceScopeDeclarations : ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) ) | typeDeclaration | SEMI );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA47_1 = input.LA(1);

                         
                        int index47_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_JamlAttrHash()) ) {s = 13;}

                        else if ( (synpred64_JamlAttrHash()) ) {s = 17;}

                         
                        input.seek(index47_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA47_2 = input.LA(1);

                         
                        int index47_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_JamlAttrHash()) ) {s = 13;}

                        else if ( (synpred64_JamlAttrHash()) ) {s = 17;}

                         
                        input.seek(index47_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA47_3 = input.LA(1);

                         
                        int index47_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_JamlAttrHash()) ) {s = 13;}

                        else if ( (synpred64_JamlAttrHash()) ) {s = 17;}

                         
                        input.seek(index47_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA47_4 = input.LA(1);

                         
                        int index47_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_JamlAttrHash()) ) {s = 13;}

                        else if ( (synpred64_JamlAttrHash()) ) {s = 17;}

                         
                        input.seek(index47_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA47_5 = input.LA(1);

                         
                        int index47_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_JamlAttrHash()) ) {s = 13;}

                        else if ( (synpred64_JamlAttrHash()) ) {s = 17;}

                         
                        input.seek(index47_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA47_6 = input.LA(1);

                         
                        int index47_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_JamlAttrHash()) ) {s = 13;}

                        else if ( (synpred64_JamlAttrHash()) ) {s = 17;}

                         
                        input.seek(index47_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA47_7 = input.LA(1);

                         
                        int index47_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_JamlAttrHash()) ) {s = 13;}

                        else if ( (synpred64_JamlAttrHash()) ) {s = 17;}

                         
                        input.seek(index47_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA47_8 = input.LA(1);

                         
                        int index47_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_JamlAttrHash()) ) {s = 13;}

                        else if ( (synpred64_JamlAttrHash()) ) {s = 17;}

                         
                        input.seek(index47_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA47_9 = input.LA(1);

                         
                        int index47_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_JamlAttrHash()) ) {s = 13;}

                        else if ( (synpred64_JamlAttrHash()) ) {s = 17;}

                         
                        input.seek(index47_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA47_10 = input.LA(1);

                         
                        int index47_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_JamlAttrHash()) ) {s = 13;}

                        else if ( (synpred64_JamlAttrHash()) ) {s = 17;}

                         
                        input.seek(index47_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA47_11 = input.LA(1);

                         
                        int index47_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_JamlAttrHash()) ) {s = 13;}

                        else if ( (synpred64_JamlAttrHash()) ) {s = 17;}

                         
                        input.seek(index47_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA47_12 = input.LA(1);

                         
                        int index47_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_JamlAttrHash()) ) {s = 13;}

                        else if ( (synpred64_JamlAttrHash()) ) {s = 17;}

                         
                        input.seek(index47_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 47, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA90_eotS =
        "\22\uffff";
    static final String DFA90_eofS =
        "\22\uffff";
    static final String DFA90_minS =
        "\1\7\14\0\5\uffff";
    static final String DFA90_maxS =
        "\1\u00a4\14\0\5\uffff";
    static final String DFA90_acceptS =
        "\15\uffff\1\1\1\uffff\1\2\2\uffff";
    static final String DFA90_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\5\uffff}>";
    static final String[] DFA90_transitionS = {
            "\1\14\55\uffff\1\5\1\uffff\1\15\1\uffff\1\15\2\uffff\1\15\1"+
            "\17\3\uffff\1\15\1\uffff\1\17\2\uffff\1\13\1\uffff\1\15\4\uffff"+
            "\1\17\1\uffff\2\15\1\6\3\uffff\1\3\1\2\1\1\1\uffff\1\15\1\4"+
            "\1\12\2\uffff\1\7\3\uffff\1\10\3\uffff\1\11\75\uffff\1\15",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA90_eot = DFA.unpackEncodedString(DFA90_eotS);
    static final short[] DFA90_eof = DFA.unpackEncodedString(DFA90_eofS);
    static final char[] DFA90_min = DFA.unpackEncodedStringToUnsignedChars(DFA90_minS);
    static final char[] DFA90_max = DFA.unpackEncodedStringToUnsignedChars(DFA90_maxS);
    static final short[] DFA90_accept = DFA.unpackEncodedString(DFA90_acceptS);
    static final short[] DFA90_special = DFA.unpackEncodedString(DFA90_specialS);
    static final short[][] DFA90_transition;

    static {
        int numStates = DFA90_transitionS.length;
        DFA90_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA90_transition[i] = DFA.unpackEncodedString(DFA90_transitionS[i]);
        }
    }

    class DFA90 extends DFA {

        public DFA90(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 90;
            this.eot = DFA90_eot;
            this.eof = DFA90_eof;
            this.min = DFA90_min;
            this.max = DFA90_max;
            this.accept = DFA90_accept;
            this.special = DFA90_special;
            this.transition = DFA90_transition;
        }
        public String getDescription() {
            return "706:1: annotationScopeDeclarations : ( modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA90_1 = input.LA(1);

                         
                        int index90_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_JamlAttrHash()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index90_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA90_2 = input.LA(1);

                         
                        int index90_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_JamlAttrHash()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index90_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA90_3 = input.LA(1);

                         
                        int index90_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_JamlAttrHash()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index90_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA90_4 = input.LA(1);

                         
                        int index90_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_JamlAttrHash()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index90_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA90_5 = input.LA(1);

                         
                        int index90_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_JamlAttrHash()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index90_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA90_6 = input.LA(1);

                         
                        int index90_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_JamlAttrHash()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index90_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA90_7 = input.LA(1);

                         
                        int index90_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_JamlAttrHash()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index90_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA90_8 = input.LA(1);

                         
                        int index90_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_JamlAttrHash()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index90_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA90_9 = input.LA(1);

                         
                        int index90_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_JamlAttrHash()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index90_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA90_10 = input.LA(1);

                         
                        int index90_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_JamlAttrHash()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index90_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA90_11 = input.LA(1);

                         
                        int index90_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_JamlAttrHash()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index90_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA90_12 = input.LA(1);

                         
                        int index90_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_JamlAttrHash()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index90_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 90, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA92_eotS =
        "\61\uffff";
    static final String DFA92_eofS =
        "\61\uffff";
    static final String DFA92_minS =
        "\1\7\4\0\6\uffff\1\0\45\uffff";
    static final String DFA92_maxS =
        "\1\u00aa\4\0\6\uffff\1\0\45\uffff";
    static final String DFA92_acceptS =
        "\5\uffff\1\2\14\uffff\1\3\35\uffff\1\1";
    static final String DFA92_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\6\uffff\1\4\45\uffff}>";
    static final String[] DFA92_transitionS = {
            "\1\2\4\uffff\1\22\10\uffff\1\22\1\uffff\1\22\1\uffff\1\22\1"+
            "\uffff\1\22\1\uffff\2\22\3\uffff\1\22\3\uffff\1\22\5\uffff\1"+
            "\22\10\uffff\1\5\1\22\1\3\1\22\1\3\2\uffff\1\3\1\5\1\22\1\uffff"+
            "\1\22\1\3\1\uffff\1\5\1\uffff\1\22\1\1\1\uffff\1\3\2\22\2\uffff"+
            "\1\5\1\uffff\2\3\1\5\2\22\1\uffff\3\5\1\22\1\3\2\5\2\22\1\13"+
            "\2\22\1\uffff\1\5\3\22\1\5\1\22\74\uffff\1\4\6\22",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA92_eot = DFA.unpackEncodedString(DFA92_eotS);
    static final short[] DFA92_eof = DFA.unpackEncodedString(DFA92_eofS);
    static final char[] DFA92_min = DFA.unpackEncodedStringToUnsignedChars(DFA92_minS);
    static final char[] DFA92_max = DFA.unpackEncodedStringToUnsignedChars(DFA92_maxS);
    static final short[] DFA92_accept = DFA.unpackEncodedString(DFA92_acceptS);
    static final short[] DFA92_special = DFA.unpackEncodedString(DFA92_specialS);
    static final short[][] DFA92_transition;

    static {
        int numStates = DFA92_transitionS.length;
        DFA92_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA92_transition[i] = DFA.unpackEncodedString(DFA92_transitionS[i]);
        }
    }

    class DFA92 extends DFA {

        public DFA92(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 92;
            this.eot = DFA92_eot;
            this.eof = DFA92_eof;
            this.min = DFA92_min;
            this.max = DFA92_max;
            this.accept = DFA92_accept;
            this.special = DFA92_special;
            this.transition = DFA92_transition;
        }
        public String getDescription() {
            return "727:1: blockStatement : ( localVariableDeclaration SEMI | typeDeclaration | statement );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA92_1 = input.LA(1);

                         
                        int index92_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_JamlAttrHash()) ) {s = 48;}

                        else if ( (synpred129_JamlAttrHash()) ) {s = 5;}

                         
                        input.seek(index92_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA92_2 = input.LA(1);

                         
                        int index92_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_JamlAttrHash()) ) {s = 48;}

                        else if ( (synpred129_JamlAttrHash()) ) {s = 5;}

                         
                        input.seek(index92_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA92_3 = input.LA(1);

                         
                        int index92_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_JamlAttrHash()) ) {s = 48;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index92_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA92_4 = input.LA(1);

                         
                        int index92_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_JamlAttrHash()) ) {s = 48;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index92_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA92_11 = input.LA(1);

                         
                        int index92_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_JamlAttrHash()) ) {s = 5;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index92_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 92, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA101_eotS =
        "\22\uffff";
    static final String DFA101_eofS =
        "\22\uffff";
    static final String DFA101_minS =
        "\1\14\15\uffff\1\4\3\uffff";
    static final String DFA101_maxS =
        "\1\u00aa\15\uffff\1\114\3\uffff";
    static final String DFA101_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15\1\uffff\1\17\1\20\1\16";
    static final String DFA101_specialS =
        "\22\uffff}>";
    static final String[] DFA101_transitionS = {
            "\1\17\10\uffff\1\17\1\uffff\1\1\1\uffff\1\17\1\uffff\1\17\1"+
            "\uffff\2\17\3\uffff\1\17\3\uffff\1\17\5\uffff\1\20\11\uffff"+
            "\1\2\1\17\1\14\1\17\2\uffff\1\17\1\uffff\1\15\1\uffff\1\6\1"+
            "\17\3\uffff\1\17\2\uffff\1\17\1\4\1\3\4\uffff\2\17\1\uffff\2"+
            "\17\4\uffff\1\12\1\17\2\uffff\1\17\1\10\1\11\1\17\1\13\2\uffff"+
            "\1\17\1\7\1\17\1\uffff\1\5\74\uffff\1\16\6\17",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\3\17\1\uffff\2\17\1\21\1\uffff\4\17\2\uffff\5\17\1\uffff\3"+
            "\17\1\uffff\6\17\1\uffff\6\17\3\uffff\11\17\27\uffff\1\17",
            "",
            "",
            ""
    };

    static final short[] DFA101_eot = DFA.unpackEncodedString(DFA101_eotS);
    static final short[] DFA101_eof = DFA.unpackEncodedString(DFA101_eofS);
    static final char[] DFA101_min = DFA.unpackEncodedStringToUnsignedChars(DFA101_minS);
    static final char[] DFA101_max = DFA.unpackEncodedStringToUnsignedChars(DFA101_maxS);
    static final short[] DFA101_accept = DFA.unpackEncodedString(DFA101_acceptS);
    static final short[] DFA101_special = DFA.unpackEncodedString(DFA101_specialS);
    static final short[][] DFA101_transition;

    static {
        int numStates = DFA101_transitionS.length;
        DFA101_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA101_transition[i] = DFA.unpackEncodedString(DFA101_transitionS[i]);
        }
    }

    class DFA101 extends DFA {

        public DFA101(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 101;
            this.eot = DFA101_eot;
            this.eof = DFA101_eof;
            this.min = DFA101_min;
            this.max = DFA101_max;
            this.accept = DFA101_accept;
            this.special = DFA101_special;
            this.transition = DFA101_transition;
        }
        public String getDescription() {
            return "739:1: statement : ( block | ASSERT expr1= expression ( COLON expr2= expression SEMI -> ^( ASSERT $expr1 $expr2) | SEMI -> ^( ASSERT $expr1) ) | IF parenthesizedExpression ifStat= statement ( ELSE elseStat= statement -> ^( IF parenthesizedExpression $ifStat $elseStat) | -> ^( IF parenthesizedExpression $ifStat) ) | FOR LPAREN ( forInit SEMI forCondition SEMI forUpdater RPAREN statement -> ^( FOR forInit forCondition forUpdater statement ) | localModifierList type IDENT COLON expression RPAREN statement -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement ) ) | WHILE parenthesizedExpression statement -> ^( WHILE parenthesizedExpression statement ) | DO statement WHILE parenthesizedExpression SEMI -> ^( DO statement parenthesizedExpression ) | TRY block ( catches ( finallyClause )? | finallyClause ) -> ^( TRY block ( catches )? ( finallyClause )? ) | SWITCH parenthesizedExpression LCURLY switchBlockLabels RCURLY -> ^( SWITCH parenthesizedExpression switchBlockLabels ) | SYNCHRONIZED parenthesizedExpression block -> ^( SYNCHRONIZED parenthesizedExpression block ) | RETURN ( expression )? SEMI -> ^( RETURN ( expression )? ) | THROW expression SEMI -> ^( THROW expression ) | BREAK ( IDENT )? SEMI -> ^( BREAK ( IDENT )? ) | CONTINUE ( IDENT )? SEMI -> ^( CONTINUE ( IDENT )? ) | IDENT COLON statement -> ^( LABELED_STATEMENT IDENT statement ) | expression SEMI | SEMI );";
        }
    }
    static final String DFA95_eotS =
        "\30\uffff";
    static final String DFA95_eofS =
        "\30\uffff";
    static final String DFA95_minS =
        "\1\7\4\0\23\uffff";
    static final String DFA95_maxS =
        "\1\u00aa\4\0\23\uffff";
    static final String DFA95_acceptS =
        "\5\uffff\1\1\21\uffff\1\2";
    static final String DFA95_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\23\uffff}>";
    static final String[] DFA95_transitionS = {
            "\1\2\4\uffff\1\5\10\uffff\1\5\3\uffff\1\5\1\uffff\1\5\1\uffff"+
            "\2\5\3\uffff\1\5\3\uffff\1\5\5\uffff\1\5\12\uffff\1\3\1\uffff"+
            "\1\3\2\uffff\1\3\4\uffff\1\3\3\uffff\1\5\1\1\1\uffff\1\3\6\uffff"+
            "\2\3\1\uffff\2\5\5\uffff\1\3\2\uffff\1\5\2\uffff\1\5\3\uffff"+
            "\1\5\1\uffff\1\5\76\uffff\1\4\6\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA95_eot = DFA.unpackEncodedString(DFA95_eotS);
    static final short[] DFA95_eof = DFA.unpackEncodedString(DFA95_eofS);
    static final char[] DFA95_min = DFA.unpackEncodedStringToUnsignedChars(DFA95_minS);
    static final char[] DFA95_max = DFA.unpackEncodedStringToUnsignedChars(DFA95_maxS);
    static final short[] DFA95_accept = DFA.unpackEncodedString(DFA95_acceptS);
    static final short[] DFA95_special = DFA.unpackEncodedString(DFA95_specialS);
    static final short[][] DFA95_transition;

    static {
        int numStates = DFA95_transitionS.length;
        DFA95_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA95_transition[i] = DFA.unpackEncodedString(DFA95_transitionS[i]);
        }
    }

    class DFA95 extends DFA {

        public DFA95(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 95;
            this.eot = DFA95_eot;
            this.eof = DFA95_eof;
            this.min = DFA95_min;
            this.max = DFA95_max;
            this.accept = DFA95_accept;
            this.special = DFA95_special;
            this.transition = DFA95_transition;
        }
        public String getDescription() {
            return "750:9: ( forInit SEMI forCondition SEMI forUpdater RPAREN statement -> ^( FOR forInit forCondition forUpdater statement ) | localModifierList type IDENT COLON expression RPAREN statement -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA95_1 = input.LA(1);

                         
                        int index95_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_JamlAttrHash()) ) {s = 5;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index95_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA95_2 = input.LA(1);

                         
                        int index95_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_JamlAttrHash()) ) {s = 5;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index95_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA95_3 = input.LA(1);

                         
                        int index95_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_JamlAttrHash()) ) {s = 5;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index95_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA95_4 = input.LA(1);

                         
                        int index95_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_JamlAttrHash()) ) {s = 5;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index95_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 95, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA107_eotS =
        "\27\uffff";
    static final String DFA107_eofS =
        "\27\uffff";
    static final String DFA107_minS =
        "\1\7\2\uffff\2\0\22\uffff";
    static final String DFA107_maxS =
        "\1\u00aa\2\uffff\2\0\22\uffff";
    static final String DFA107_acceptS =
        "\1\uffff\1\1\3\uffff\1\2\20\uffff\1\3";
    static final String DFA107_specialS =
        "\3\uffff\1\0\1\1\22\uffff}>";
    static final String[] DFA107_transitionS = {
            "\1\1\4\uffff\1\5\10\uffff\1\5\3\uffff\1\5\1\uffff\1\5\1\uffff"+
            "\2\5\3\uffff\1\5\3\uffff\1\5\5\uffff\1\26\12\uffff\1\3\1\uffff"+
            "\1\3\2\uffff\1\3\4\uffff\1\3\3\uffff\1\5\1\1\1\uffff\1\3\6\uffff"+
            "\2\3\1\uffff\2\5\5\uffff\1\3\2\uffff\1\5\2\uffff\1\5\3\uffff"+
            "\1\5\1\uffff\1\5\76\uffff\1\4\6\5",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA107_eot = DFA.unpackEncodedString(DFA107_eotS);
    static final short[] DFA107_eof = DFA.unpackEncodedString(DFA107_eofS);
    static final char[] DFA107_min = DFA.unpackEncodedStringToUnsignedChars(DFA107_minS);
    static final char[] DFA107_max = DFA.unpackEncodedStringToUnsignedChars(DFA107_maxS);
    static final short[] DFA107_accept = DFA.unpackEncodedString(DFA107_acceptS);
    static final short[] DFA107_special = DFA.unpackEncodedString(DFA107_specialS);
    static final short[][] DFA107_transition;

    static {
        int numStates = DFA107_transitionS.length;
        DFA107_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA107_transition[i] = DFA.unpackEncodedString(DFA107_transitionS[i]);
        }
    }

    class DFA107 extends DFA {

        public DFA107(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 107;
            this.eot = DFA107_eot;
            this.eof = DFA107_eof;
            this.min = DFA107_min;
            this.max = DFA107_max;
            this.accept = DFA107_accept;
            this.special = DFA107_special;
            this.transition = DFA107_transition;
        }
        public String getDescription() {
            return "799:1: forInit : ( localVariableDeclaration -> ^( FOR_INIT localVariableDeclaration ) | expressionList -> ^( FOR_INIT expressionList ) | -> ^( FOR_INIT ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA107_3 = input.LA(1);

                         
                        int index107_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred158_JamlAttrHash()) ) {s = 1;}

                        else if ( (synpred159_JamlAttrHash()) ) {s = 5;}

                         
                        input.seek(index107_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA107_4 = input.LA(1);

                         
                        int index107_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred158_JamlAttrHash()) ) {s = 1;}

                        else if ( (synpred159_JamlAttrHash()) ) {s = 5;}

                         
                        input.seek(index107_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 107, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA131_eotS =
        "\21\uffff";
    static final String DFA131_eofS =
        "\21\uffff";
    static final String DFA131_minS =
        "\1\31\2\uffff\1\0\15\uffff";
    static final String DFA131_maxS =
        "\1\u00aa\2\uffff\1\0\15\uffff";
    static final String DFA131_acceptS =
        "\1\uffff\1\1\1\2\1\uffff\1\4\13\uffff\1\3";
    static final String DFA131_specialS =
        "\3\uffff\1\0\15\uffff}>";
    static final String[] DFA131_transitionS = {
            "\1\4\1\uffff\1\2\1\uffff\1\3\4\uffff\1\1\24\uffff\1\4\1\uffff"+
            "\1\4\2\uffff\1\4\4\uffff\1\4\3\uffff\1\4\2\uffff\1\4\6\uffff"+
            "\2\4\1\uffff\2\4\5\uffff\1\4\2\uffff\1\4\2\uffff\1\4\3\uffff"+
            "\1\4\1\uffff\1\4\76\uffff\7\4",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA131_eot = DFA.unpackEncodedString(DFA131_eotS);
    static final short[] DFA131_eof = DFA.unpackEncodedString(DFA131_eofS);
    static final char[] DFA131_min = DFA.unpackEncodedStringToUnsignedChars(DFA131_minS);
    static final char[] DFA131_max = DFA.unpackEncodedStringToUnsignedChars(DFA131_maxS);
    static final short[] DFA131_accept = DFA.unpackEncodedString(DFA131_acceptS);
    static final short[] DFA131_special = DFA.unpackEncodedString(DFA131_specialS);
    static final short[][] DFA131_transition;

    static {
        int numStates = DFA131_transitionS.length;
        DFA131_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA131_transition[i] = DFA.unpackEncodedString(DFA131_transitionS[i]);
        }
    }

    class DFA131 extends DFA {

        public DFA131(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 131;
            this.eot = DFA131_eot;
            this.eof = DFA131_eof;
            this.min = DFA131_min;
            this.max = DFA131_max;
            this.accept = DFA131_accept;
            this.special = DFA131_special;
            this.transition = DFA131_transition;
        }
        public String getDescription() {
            return "934:1: unaryExpressionNotPlusMinus : ( NOT unaryExpression -> ^( NOT unaryExpression ) | LOGICAL_NOT unaryExpression -> ^( LOGICAL_NOT unaryExpression ) | LPAREN type RPAREN unaryExpression -> ^( CAST_EXPR[$LPAREN, \"CAST_EXPR\"] type unaryExpression ) | postfixedExpression );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA131_3 = input.LA(1);

                         
                        int index131_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred202_JamlAttrHash()) ) {s = 16;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index131_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 131, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA143_eotS =
        "\14\uffff";
    static final String DFA143_eofS =
        "\14\uffff";
    static final String DFA143_minS =
        "\1\31\6\uffff\1\17\4\uffff";
    static final String DFA143_maxS =
        "\1\u00aa\6\uffff\1\35\4\uffff";
    static final String DFA143_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\uffff\1\11\1\12\1\10\1\7";
    static final String DFA143_specialS =
        "\14\uffff}>";
    static final String[] DFA143_transitionS = {
            "\1\5\3\uffff\1\1\31\uffff\1\10\1\uffff\1\10\2\uffff\1\10\4\uffff"+
            "\1\10\3\uffff\1\2\2\uffff\1\10\6\uffff\2\10\1\uffff\1\3\1\2"+
            "\5\uffff\1\10\2\uffff\1\7\2\uffff\1\6\3\uffff\1\2\1\uffff\1"+
            "\11\76\uffff\1\4\6\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\12\15\uffff\1\13",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA143_eot = DFA.unpackEncodedString(DFA143_eotS);
    static final short[] DFA143_eof = DFA.unpackEncodedString(DFA143_eofS);
    static final char[] DFA143_min = DFA.unpackEncodedStringToUnsignedChars(DFA143_minS);
    static final char[] DFA143_max = DFA.unpackEncodedStringToUnsignedChars(DFA143_maxS);
    static final short[] DFA143_accept = DFA.unpackEncodedString(DFA143_acceptS);
    static final short[] DFA143_special = DFA.unpackEncodedString(DFA143_specialS);
    static final short[][] DFA143_transition;

    static {
        int numStates = DFA143_transitionS.length;
        DFA143_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA143_transition[i] = DFA.unpackEncodedString(DFA143_transitionS[i]);
        }
    }

    class DFA143 extends DFA {

        public DFA143(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 143;
            this.eot = DFA143_eot;
            this.eof = DFA143_eof;
            this.min = DFA143_min;
            this.max = DFA143_max;
            this.accept = DFA143_accept;
            this.special = DFA143_special;
            this.transition = DFA143_transition;
        }
        public String getDescription() {
            return "969:1: primaryExpression : ( parenthesizedExpression | literal | newExpression | qualifiedIdentExpression | genericTypeArgumentListSimplified ( SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) ) | IDENT arguments -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments ) | THIS arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) ) | ( THIS -> THIS ) ( arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments ) )? | SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] arguments ) | ( SUPER DOT IDENT ) ( arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) ) | ( primitiveType -> primitiveType ) ( arrayDeclarator -> ^( arrayDeclarator $primaryExpression) )* DOT CLASS -> ^( DOT $primaryExpression CLASS ) | VOID DOT CLASS -> ^( DOT VOID CLASS ) );";
        }
    }
    static final String DFA147_eotS =
        "\60\uffff";
    static final String DFA147_eofS =
        "\1\4\57\uffff";
    static final String DFA147_minS =
        "\1\4\1\0\1\uffff\1\0\54\uffff";
    static final String DFA147_maxS =
        "\1\114\1\0\1\uffff\1\0\54\uffff";
    static final String DFA147_acceptS =
        "\2\uffff\1\2\1\uffff\1\4\51\uffff\1\1\1\3";
    static final String DFA147_specialS =
        "\1\uffff\1\0\1\uffff\1\1\54\uffff}>";
    static final String[] DFA147_transitionS = {
            "\3\4\1\uffff\7\4\1\3\2\uffff\4\4\1\1\1\uffff\3\4\1\uffff\1\4"+
            "\1\2\4\4\1\uffff\22\4\27\uffff\1\4",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA147_eot = DFA.unpackEncodedString(DFA147_eotS);
    static final short[] DFA147_eof = DFA.unpackEncodedString(DFA147_eofS);
    static final char[] DFA147_min = DFA.unpackEncodedStringToUnsignedChars(DFA147_minS);
    static final char[] DFA147_max = DFA.unpackEncodedStringToUnsignedChars(DFA147_maxS);
    static final short[] DFA147_accept = DFA.unpackEncodedString(DFA147_acceptS);
    static final short[] DFA147_special = DFA.unpackEncodedString(DFA147_specialS);
    static final short[][] DFA147_transition;

    static {
        int numStates = DFA147_transitionS.length;
        DFA147_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA147_transition[i] = DFA.unpackEncodedString(DFA147_transitionS[i]);
        }
    }

    class DFA147 extends DFA {

        public DFA147(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 147;
            this.eot = DFA147_eot;
            this.eof = DFA147_eof;
            this.min = DFA147_min;
            this.max = DFA147_max;
            this.accept = DFA147_accept;
            this.special = DFA147_special;
            this.transition = DFA147_transition;
        }
        public String getDescription() {
            return "1005:9: ( ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) ) | arguments -> ^( METHOD_CALL qualifiedIdentifier arguments ) | outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA147_1 = input.LA(1);

                         
                        int index147_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred230_JamlAttrHash()) ) {s = 46;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index147_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA147_3 = input.LA(1);

                         
                        int index147_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_JamlAttrHash()) ) {s = 47;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index147_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 147, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA154_eotS =
        "\56\uffff";
    static final String DFA154_eofS =
        "\1\2\55\uffff";
    static final String DFA154_minS =
        "\1\4\1\0\54\uffff";
    static final String DFA154_maxS =
        "\1\114\1\0\54\uffff";
    static final String DFA154_acceptS =
        "\2\uffff\1\2\52\uffff\1\1";
    static final String DFA154_specialS =
        "\1\uffff\1\0\54\uffff}>";
    static final String[] DFA154_transitionS = {
            "\3\2\1\uffff\10\2\2\uffff\4\2\1\1\1\uffff\3\2\1\uffff\1\2\1"+
            "\uffff\4\2\1\uffff\22\2\27\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA154_eot = DFA.unpackEncodedString(DFA154_eotS);
    static final short[] DFA154_eof = DFA.unpackEncodedString(DFA154_eofS);
    static final char[] DFA154_min = DFA.unpackEncodedStringToUnsignedChars(DFA154_minS);
    static final char[] DFA154_max = DFA.unpackEncodedStringToUnsignedChars(DFA154_maxS);
    static final short[] DFA154_accept = DFA.unpackEncodedString(DFA154_acceptS);
    static final short[] DFA154_special = DFA.unpackEncodedString(DFA154_specialS);
    static final short[][] DFA154_transition;

    static {
        int numStates = DFA154_transitionS.length;
        DFA154_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA154_transition[i] = DFA.unpackEncodedString(DFA154_transitionS[i]);
        }
    }

    class DFA154 extends DFA {

        public DFA154(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 154;
            this.eot = DFA154_eot;
            this.eof = DFA154_eof;
            this.min = DFA154_min;
            this.max = DFA154_max;
            this.accept = DFA154_accept;
            this.special = DFA154_special;
            this.transition = DFA154_transition;
        }
        public String getDescription() {
            return "()* loopback of 1044:36: ( LBRACK expression RBRACK )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA154_1 = input.LA(1);

                         
                        int index154_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_JamlAttrHash()) ) {s = 45;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index154_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 154, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_attrMapping_in_attrMappings4526 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_attrMappings4537 = new BitSet(new long[]{0x0000000000000400L,0x0000000800080020L,0x000007E000000000L});
    public static final BitSet FOLLOW_attrMapping_in_attrMappings4541 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_attribute_in_attrMapping4561 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_ASSIGN_in_attrMapping4568 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_GREATER_THAN_in_attrMapping4570 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_attributeValue_in_attrMapping4575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_attribute4589 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_attribute4591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_attribute4597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_attributeValue4626 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_attributeValue4633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_literal4654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLOATING_POINT_LITERAL_in_literal4670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARACTER_LITERAL_in_literal4680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_literal4690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_literal4700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compilationUnit_in_javaSource4725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationList_in_compilationUnit4761 = new BitSet(new long[]{0x2020100000000082L,0x000000444CF26048L});
    public static final BitSet FOLLOW_packageDeclaration_in_compilationUnit4772 = new BitSet(new long[]{0x2020100000000082L,0x000000444CE26048L});
    public static final BitSet FOLLOW_importDeclaration_in_compilationUnit4784 = new BitSet(new long[]{0x2020100000000082L,0x000000444CE26048L});
    public static final BitSet FOLLOW_typeDecls_in_compilationUnit4796 = new BitSet(new long[]{0x2020100000000082L,0x000000444CE22048L});
    public static final BitSet FOLLOW_typeDeclaration_in_typeDecls4816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_typeDecls4826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PACKAGE_in_packageDeclaration4846 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_qualifiedIdentifier_in_packageDeclaration4849 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_packageDeclaration4851 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_importDeclaration4877 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_STATIC_in_importDeclaration4880 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_qualifiedIdentifier_in_importDeclaration4883 = new BitSet(new long[]{0x0000100000010000L});
    public static final BitSet FOLLOW_DOTSTAR_in_importDeclaration4885 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_importDeclaration4888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifierList_in_typeDeclaration4912 = new BitSet(new long[]{0x2020000000000080L,0x000000444CE22048L});
    public static final BitSet FOLLOW_classTypeDeclaration_in_typeDeclaration4927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceTypeDeclaration_in_typeDeclaration4942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumTypeDeclaration_in_typeDeclaration4957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeDeclaration_in_typeDeclaration4972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CLASS_in_classTypeDeclaration5007 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_classTypeDeclaration5009 = new BitSet(new long[]{0x0000000002800000L,0x0000000000000810L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_classTypeDeclaration5011 = new BitSet(new long[]{0x0000000002800000L,0x0000000000000810L});
    public static final BitSet FOLLOW_classExtendsClause_in_classTypeDeclaration5014 = new BitSet(new long[]{0x0000000002800000L,0x0000000000000810L});
    public static final BitSet FOLLOW_implementsClause_in_classTypeDeclaration5017 = new BitSet(new long[]{0x0000000002800000L,0x0000000000000810L});
    public static final BitSet FOLLOW_classBody_in_classTypeDeclaration5020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTENDS_in_classExtendsClause5073 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_classExtendsClause5075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTENDS_in_interfaceExtendsClause5119 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_typeList_in_interfaceExtendsClause5121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPLEMENTS_in_implementsClause5165 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_typeList_in_implementsClause5167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_THAN_in_genericTypeParameterList5212 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeParameter_in_genericTypeParameterList5214 = new BitSet(new long[]{0x0000800000100900L});
    public static final BitSet FOLLOW_COMMA_in_genericTypeParameterList5217 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeParameter_in_genericTypeParameterList5219 = new BitSet(new long[]{0x0000800000100900L});
    public static final BitSet FOLLOW_genericTypeListClosing_in_genericTypeParameterList5223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATER_THAN_in_genericTypeListClosing5338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHIFT_RIGHT_in_genericTypeListClosing5348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BIT_SHIFT_RIGHT_in_genericTypeListClosing5358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_genericTypeParameter5386 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_bound_in_genericTypeParameter5388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTENDS_in_bound5434 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_bound5436 = new BitSet(new long[]{0x0000000000000012L});
    public static final BitSet FOLLOW_AND_in_bound5439 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_bound5441 = new BitSet(new long[]{0x0000000000000012L});
    public static final BitSet FOLLOW_ENUM_in_enumTypeDeclaration5482 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_enumTypeDeclaration5484 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000800L});
    public static final BitSet FOLLOW_implementsClause_in_enumTypeDeclaration5486 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000800L});
    public static final BitSet FOLLOW_enumBody_in_enumTypeDeclaration5489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_enumBody5536 = new BitSet(new long[]{0x0020000000000080L,0x000000444CE20040L,0x0000001000000000L});
    public static final BitSet FOLLOW_enumScopeDeclarations_in_enumBody5538 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_RCURLY_in_enumBody5540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumConstants_in_enumScopeDeclarations5577 = new BitSet(new long[]{0x0000100000000802L});
    public static final BitSet FOLLOW_COMMA_in_enumScopeDeclarations5580 = new BitSet(new long[]{0x0000100000000002L});
    public static final BitSet FOLLOW_enumClassScopeDeclarations_in_enumScopeDeclarations5585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_enumClassScopeDeclarations5605 = new BitSet(new long[]{0x32A0100002800082L,0x000000644EE3A14AL,0x0000001000000000L});
    public static final BitSet FOLLOW_classScopeDeclarations_in_enumClassScopeDeclarations5607 = new BitSet(new long[]{0x32A0100002800082L,0x000000644EE3A14AL,0x0000001000000000L});
    public static final BitSet FOLLOW_enumConstant_in_enumConstants5646 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_enumConstants5649 = new BitSet(new long[]{0x0020000000000080L,0x000000444CE20040L,0x0000001000000000L});
    public static final BitSet FOLLOW_enumConstant_in_enumConstants5652 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_annotationList_in_enumConstant5677 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_enumConstant5679 = new BitSet(new long[]{0x0000000022800002L,0x0000000000000810L});
    public static final BitSet FOLLOW_arguments_in_enumConstant5682 = new BitSet(new long[]{0x0000000002800002L,0x0000000000000810L});
    public static final BitSet FOLLOW_classBody_in_enumConstant5685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERFACE_in_interfaceTypeDeclaration5710 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_interfaceTypeDeclaration5712 = new BitSet(new long[]{0x0000000002800000L,0x0000000000000010L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_interfaceTypeDeclaration5714 = new BitSet(new long[]{0x0000000002800000L,0x0000000000000010L});
    public static final BitSet FOLLOW_interfaceExtendsClause_in_interfaceTypeDeclaration5717 = new BitSet(new long[]{0x0000000002800000L,0x0000000000000010L});
    public static final BitSet FOLLOW_interfaceBody_in_interfaceTypeDeclaration5720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeList5770 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_typeList5773 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_typeList5776 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_LCURLY_in_classBody5801 = new BitSet(new long[]{0x32A0140002800080L,0x000000644EE3A14AL,0x0000001000000000L});
    public static final BitSet FOLLOW_classScopeDeclarations_in_classBody5803 = new BitSet(new long[]{0x32A0140002800080L,0x000000644EE3A14AL,0x0000001000000000L});
    public static final BitSet FOLLOW_RCURLY_in_classBody5806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_interfaceBody5848 = new BitSet(new long[]{0x32A0140002000080L,0x000000644EE3A14AL,0x0000001000000000L});
    public static final BitSet FOLLOW_interfaceScopeDeclarations_in_interfaceBody5850 = new BitSet(new long[]{0x32A0140002000080L,0x000000644EE3A14AL,0x0000001000000000L});
    public static final BitSet FOLLOW_RCURLY_in_interfaceBody5853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_classScopeDeclarations5891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_in_classScopeDeclarations5920 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_block_in_classScopeDeclarations5922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifierList_in_classScopeDeclarations5945 = new BitSet(new long[]{0x1280000002000000L,0x0000002002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_classScopeDeclarations5959 = new BitSet(new long[]{0x1280000000000000L,0x0000002002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_classScopeDeclarations5978 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_classScopeDeclarations5980 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_classScopeDeclarations5982 = new BitSet(new long[]{0x0000100000C00000L,0x0000000200000000L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_classScopeDeclarations5984 = new BitSet(new long[]{0x0000100000800000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_classScopeDeclarations5987 = new BitSet(new long[]{0x0000100000800000L});
    public static final BitSet FOLLOW_block_in_classScopeDeclarations5991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_classScopeDeclarations5995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_classScopeDeclarations6057 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_classScopeDeclarations6059 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_classScopeDeclarations6061 = new BitSet(new long[]{0x0000100000800000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_classScopeDeclarations6063 = new BitSet(new long[]{0x0000100000800000L});
    public static final BitSet FOLLOW_block_in_classScopeDeclarations6067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_classScopeDeclarations6071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_classScopeDeclarations6130 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_classScopeDeclarations6132 = new BitSet(new long[]{0x0000000000800000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_classScopeDeclarations6134 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_block_in_classScopeDeclarations6137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_classScopeDeclarations6201 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_classFieldDeclaratorList_in_classScopeDeclarations6203 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_classScopeDeclarations6205 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_classScopeDeclarations6250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_classScopeDeclarations6260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifierList_in_interfaceScopeDeclarations6292 = new BitSet(new long[]{0x1280000002000000L,0x0000002002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_interfaceScopeDeclarations6306 = new BitSet(new long[]{0x1280000000000000L,0x0000002002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_interfaceScopeDeclarations6325 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_interfaceScopeDeclarations6327 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_interfaceScopeDeclarations6329 = new BitSet(new long[]{0x0000100000400000L,0x0000000200000000L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_interfaceScopeDeclarations6331 = new BitSet(new long[]{0x0000100000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_interfaceScopeDeclarations6334 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_interfaceScopeDeclarations6337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_interfaceScopeDeclarations6395 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_interfaceScopeDeclarations6397 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_interfaceScopeDeclarations6399 = new BitSet(new long[]{0x0000100000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_interfaceScopeDeclarations6401 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_interfaceScopeDeclarations6404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_interfaceScopeDeclarations6467 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_interfaceFieldDeclaratorList_in_interfaceScopeDeclarations6469 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_interfaceScopeDeclarations6471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_interfaceScopeDeclarations6516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_interfaceScopeDeclarations6526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classFieldDeclarator_in_classFieldDeclaratorList6546 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_classFieldDeclaratorList6549 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_classFieldDeclarator_in_classFieldDeclaratorList6551 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_classFieldDeclarator6590 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_ASSIGN_in_classFieldDeclarator6593 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_variableInitializer_in_classFieldDeclarator6595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceFieldDeclarator_in_interfaceFieldDeclaratorList6640 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_interfaceFieldDeclaratorList6643 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_interfaceFieldDeclarator_in_interfaceFieldDeclaratorList6645 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_interfaceFieldDeclarator6684 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_ASSIGN_in_interfaceFieldDeclarator6686 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_variableInitializer_in_interfaceFieldDeclarator6688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_variableDeclaratorId6730 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_variableDeclaratorId6733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayInitializer_in_variableInitializer6753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_variableInitializer6763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_arrayDeclarator6782 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_RBRACK_in_arrayDeclarator6784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayDeclarator_in_arrayDeclaratorList6818 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_LCURLY_in_arrayInitializer6863 = new BitSet(new long[]{0x128004446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_variableInitializer_in_arrayInitializer6866 = new BitSet(new long[]{0x0000040000000800L});
    public static final BitSet FOLLOW_COMMA_in_arrayInitializer6869 = new BitSet(new long[]{0x128000446AA01400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_variableInitializer_in_arrayInitializer6871 = new BitSet(new long[]{0x0000040000000800L});
    public static final BitSet FOLLOW_COMMA_in_arrayInitializer6875 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_RCURLY_in_arrayInitializer6880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THROWS_in_throwsClause6918 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_qualifiedIdentList_in_throwsClause6920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_modifierList6957 = new BitSet(new long[]{0x0020000000000082L,0x000000444CE20040L});
    public static final BitSet FOLLOW_PUBLIC_in_modifier6998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROTECTED_in_modifier7008 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIVATE_in_modifier7018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_in_modifier7028 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ABSTRACT_in_modifier7038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NATIVE_in_modifier7048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SYNCHRONIZED_in_modifier7058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRANSIENT_in_modifier7068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOLATILE_in_modifier7078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRICTFP_in_modifier7088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localModifier_in_modifier7098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localModifier_in_localModifierList7117 = new BitSet(new long[]{0x0020000000000082L,0x000000444CE20040L});
    public static final BitSet FOLLOW_FINAL_in_localModifier7158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_localModifier7168 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simpleType_in_type7187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_objectType_in_type7197 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitiveType_in_simpleType7217 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_simpleType7219 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedTypeIdent_in_objectType7266 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_objectType7268 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedTypeIdentSimplified_in_objectTypeSimplified7308 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_objectTypeSimplified7310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeIdent_in_qualifiedTypeIdent7350 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_DOT_in_qualifiedTypeIdent7353 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_typeIdent_in_qualifiedTypeIdent7355 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_typeIdentSimplified_in_qualifiedTypeIdentSimplified7395 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_DOT_in_qualifiedTypeIdentSimplified7398 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_typeIdentSimplified_in_qualifiedTypeIdentSimplified7400 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_IDENT_in_typeIdent7440 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_genericTypeArgumentList_in_typeIdent7443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_typeIdentSimplified7463 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_genericTypeArgumentListSimplified_in_typeIdentSimplified7466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_primitiveType0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_THAN_in_genericTypeArgumentList7575 = new BitSet(new long[]{0x1280010000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeArgument_in_genericTypeArgumentList7577 = new BitSet(new long[]{0x0000800000100900L});
    public static final BitSet FOLLOW_COMMA_in_genericTypeArgumentList7580 = new BitSet(new long[]{0x1280010000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeArgument_in_genericTypeArgumentList7582 = new BitSet(new long[]{0x0000800000100900L});
    public static final BitSet FOLLOW_genericTypeListClosing_in_genericTypeArgumentList7586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_genericTypeArgument7624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_genericTypeArgument7634 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000010L});
    public static final BitSet FOLLOW_genericWildcardBoundType_in_genericTypeArgument7636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_genericWildcardBoundType7678 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_genericWildcardBoundType7687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_THAN_in_genericTypeArgumentListSimplified7706 = new BitSet(new long[]{0x1280010000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeArgumentSimplified_in_genericTypeArgumentListSimplified7708 = new BitSet(new long[]{0x0000800000100900L});
    public static final BitSet FOLLOW_COMMA_in_genericTypeArgumentListSimplified7711 = new BitSet(new long[]{0x1280010000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeArgumentSimplified_in_genericTypeArgumentListSimplified7713 = new BitSet(new long[]{0x0000800000100900L});
    public static final BitSet FOLLOW_genericTypeListClosing_in_genericTypeArgumentListSimplified7717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_genericTypeArgumentSimplified7759 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_genericTypeArgumentSimplified7769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedIdentifier_in_qualifiedIdentList7792 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_qualifiedIdentList7795 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_qualifiedIdentifier_in_qualifiedIdentList7798 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_LPAREN_in_formalParameterList7823 = new BitSet(new long[]{0x12A0080000000080L,0x000000444EE38142L,0x0000001000000000L});
    public static final BitSet FOLLOW_formalParameterStandardDecl_in_formalParameterList7851 = new BitSet(new long[]{0x0000080000000800L});
    public static final BitSet FOLLOW_COMMA_in_formalParameterList7854 = new BitSet(new long[]{0x12A0000000000080L,0x000000444EE38142L,0x0000001000000000L});
    public static final BitSet FOLLOW_formalParameterStandardDecl_in_formalParameterList7856 = new BitSet(new long[]{0x0000080000000800L});
    public static final BitSet FOLLOW_COMMA_in_formalParameterList7861 = new BitSet(new long[]{0x12A0000000000080L,0x000000444EE38142L,0x0000001000000000L});
    public static final BitSet FOLLOW_formalParameterVarArgDecl_in_formalParameterList7863 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_formalParameterVarArgDecl_in_formalParameterList7920 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_formalParameterList7997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localModifierList_in_formalParameterStandardDecl8020 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_formalParameterStandardDecl8022 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameterStandardDecl8024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localModifierList_in_formalParameterVarArgDecl8068 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_formalParameterVarArgDecl8070 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_ELLIPSIS_in_formalParameterVarArgDecl8072 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameterVarArgDecl8074 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_qualifiedIdentifier8122 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_DOT_in_qualifiedIdentifier8165 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_qualifiedIdentifier8169 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_annotation_in_annotationList8222 = new BitSet(new long[]{0x0020000000000082L,0x000000444CE20040L});
    public static final BitSet FOLLOW_AT_in_annotation8260 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_qualifiedIdentifier_in_annotation8263 = new BitSet(new long[]{0x0000000020000002L});
    public static final BitSet FOLLOW_annotationInit_in_annotation8265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_annotationInit8289 = new BitSet(new long[]{0x12A000446AA01480L,0x0000006CDEEF8162L,0x000007F000000000L});
    public static final BitSet FOLLOW_annotationInitializers_in_annotationInit8291 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationInit8293 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationInitializer_in_annotationInitializers8330 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_annotationInitializers8333 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_annotationInitializer_in_annotationInitializers8335 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_annotationElementValue_in_annotationInitializers8365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_annotationInitializer8406 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_ASSIGN_in_annotationInitializer8409 = new BitSet(new long[]{0x12A000446AA01480L,0x0000006CDEEF8162L,0x000007F000000000L});
    public static final BitSet FOLLOW_annotationElementValue_in_annotationInitializer8412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationElementValueExpression_in_annotationElementValue8435 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_annotationElementValue8445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationElementValueArrayInitializer_in_annotationElementValue8455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_annotationElementValueExpression8478 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_annotationElementValueArrayInitializer8518 = new BitSet(new long[]{0x12A004446AA01C80L,0x0000006CDEEF8162L,0x000007F000000000L});
    public static final BitSet FOLLOW_annotationElementValue_in_annotationElementValueArrayInitializer8521 = new BitSet(new long[]{0x0000040000000800L});
    public static final BitSet FOLLOW_COMMA_in_annotationElementValueArrayInitializer8524 = new BitSet(new long[]{0x12A000446AA01480L,0x0000006CDEEF8162L,0x000007F000000000L});
    public static final BitSet FOLLOW_annotationElementValue_in_annotationElementValueArrayInitializer8526 = new BitSet(new long[]{0x0000040000000800L});
    public static final BitSet FOLLOW_COMMA_in_annotationElementValueArrayInitializer8533 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_RCURLY_in_annotationElementValueArrayInitializer8537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_annotationTypeDeclaration8580 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_INTERFACE_in_annotationTypeDeclaration8582 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_annotationTypeDeclaration8584 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_annotationBody_in_annotationTypeDeclaration8586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_annotationBody8629 = new BitSet(new long[]{0x32A0040000000080L,0x000000444EE3A14AL,0x0000001000000000L});
    public static final BitSet FOLLOW_annotationScopeDeclarations_in_annotationBody8631 = new BitSet(new long[]{0x32A0040000000080L,0x000000444EE3A14AL,0x0000001000000000L});
    public static final BitSet FOLLOW_RCURLY_in_annotationBody8634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifierList_in_annotationScopeDeclarations8676 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_annotationScopeDeclarations8678 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_annotationScopeDeclarations8692 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_LPAREN_in_annotationScopeDeclarations8694 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationScopeDeclarations8696 = new BitSet(new long[]{0x8000100000000000L});
    public static final BitSet FOLLOW_annotationDefaultValue_in_annotationScopeDeclarations8698 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_annotationScopeDeclarations8701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classFieldDeclaratorList_in_annotationScopeDeclarations8743 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_annotationScopeDeclarations8745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_annotationScopeDeclarations8790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_annotationDefaultValue8813 = new BitSet(new long[]{0x12A000446AA01480L,0x0000006CDEEF8162L,0x000007F000000000L});
    public static final BitSet FOLLOW_annotationElementValue_in_annotationDefaultValue8816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_block8837 = new BitSet(new long[]{0x73E014446AA01480L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_blockStatement_in_block8839 = new BitSet(new long[]{0x73E014446AA01480L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_RCURLY_in_block8842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_blockStatement8880 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_blockStatement8882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_blockStatement8893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_blockStatement8903 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localModifierList_in_localVariableDeclaration8926 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_localVariableDeclaration8928 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_classFieldDeclaratorList_in_localVariableDeclaration8930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_statement8983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSERT_in_statement8993 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_statement8997 = new BitSet(new long[]{0x0000100000000400L});
    public static final BitSet FOLLOW_COLON_in_statement9012 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_statement9016 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement9018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_statement9081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_statement9170 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_parenthesizedExpression_in_statement9172 = new BitSet(new long[]{0x73E010446AA01480L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_statement_in_statement9176 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_ELSE_in_statement9191 = new BitSet(new long[]{0x73E010446AA01480L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_statement_in_statement9195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_statement9361 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_LPAREN_in_statement9363 = new BitSet(new long[]{0x12A010446A201480L,0x0000006CDEEF8162L,0x000007F000000000L});
    public static final BitSet FOLLOW_forInit_in_statement9378 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement9380 = new BitSet(new long[]{0x128010446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_forCondition_in_statement9382 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement9384 = new BitSet(new long[]{0x128008446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_forUpdater_in_statement9386 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_statement9388 = new BitSet(new long[]{0x73E010446AA01480L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_statement_in_statement9390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localModifierList_in_statement9425 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_statement9427 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_statement9429 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_statement9431 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_statement9433 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_statement9435 = new BitSet(new long[]{0x73E010446AA01480L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_statement_in_statement9437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_statement9552 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_parenthesizedExpression_in_statement9554 = new BitSet(new long[]{0x73E010446AA01480L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_statement_in_statement9556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DO_in_statement9605 = new BitSet(new long[]{0x73E010446AA01480L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_statement_in_statement9607 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_WHILE_in_statement9609 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_parenthesizedExpression_in_statement9611 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement9613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRY_in_statement9654 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_block_in_statement9656 = new BitSet(new long[]{0x0800000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_catches_in_statement9659 = new BitSet(new long[]{0x0800000000000002L,0x0000000000000080L});
    public static final BitSet FOLLOW_finallyClause_in_statement9661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_finallyClause_in_statement9666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SWITCH_in_statement9709 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_parenthesizedExpression_in_statement9711 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_LCURLY_in_statement9713 = new BitSet(new long[]{0x8400000000000000L});
    public static final BitSet FOLLOW_switchBlockLabels_in_statement9715 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_RCURLY_in_statement9717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SYNCHRONIZED_in_statement9743 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_parenthesizedExpression_in_statement9745 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_block_in_statement9747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETURN_in_statement9793 = new BitSet(new long[]{0x128010446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_statement9795 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement9798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THROW_in_statement9862 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_statement9864 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement9866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BREAK_in_statement9931 = new BitSet(new long[]{0x0000100000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_statement9933 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement9936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONTINUE_in_statement10006 = new BitSet(new long[]{0x0000100000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_statement10008 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement10011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_statement10078 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_statement10080 = new BitSet(new long[]{0x73E010446AA01480L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_statement_in_statement10082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_statement10149 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement10151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_statement10162 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catchClause_in_catches10201 = new BitSet(new long[]{0x0800000000000002L});
    public static final BitSet FOLLOW_CATCH_in_catchClause10243 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_LPAREN_in_catchClause10246 = new BitSet(new long[]{0x12A0000000000080L,0x000000444EE38142L,0x0000001000000000L});
    public static final BitSet FOLLOW_formalParameterStandardDecl_in_catchClause10249 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_catchClause10251 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_block_in_catchClause10254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FINALLY_in_finallyClause10273 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_block_in_finallyClause10275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchCaseLabels_in_switchBlockLabels10307 = new BitSet(new long[]{0x8400000000000000L});
    public static final BitSet FOLLOW_switchDefaultLabel_in_switchBlockLabels10309 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_switchCaseLabels_in_switchBlockLabels10312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchCaseLabel_in_switchCaseLabels10357 = new BitSet(new long[]{0x0400000000000002L});
    public static final BitSet FOLLOW_CASE_in_switchCaseLabel10385 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_switchCaseLabel10388 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_switchCaseLabel10390 = new BitSet(new long[]{0x73E010446AA01482L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_blockStatement_in_switchCaseLabel10393 = new BitSet(new long[]{0x73E010446AA01482L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_DEFAULT_in_switchDefaultLabel10417 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_switchDefaultLabel10420 = new BitSet(new long[]{0x73E010446AA01482L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_blockStatement_in_switchDefaultLabel10423 = new BitSet(new long[]{0x73E010446AA01482L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_forInit10447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_forInit10469 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_forCondition10557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_forUpdater10599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_parenthesizedExpression10639 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_parenthesizedExpression10641 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_parenthesizedExpression10643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionList10684 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_expressionList10687 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_expressionList10690 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_assignmentExpression_in_expression10711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_assignmentExpression10747 = new BitSet(new long[]{0x001540A280004262L});
    public static final BitSet FOLLOW_ASSIGN_in_assignmentExpression10766 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_PLUS_ASSIGN_in_assignmentExpression10785 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_MINUS_ASSIGN_in_assignmentExpression10804 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_STAR_ASSIGN_in_assignmentExpression10823 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_DIV_ASSIGN_in_assignmentExpression10842 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_AND_ASSIGN_in_assignmentExpression10861 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_OR_ASSIGN_in_assignmentExpression10880 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_XOR_ASSIGN_in_assignmentExpression10899 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_MOD_ASSIGN_in_assignmentExpression10918 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_SHIFT_LEFT_ASSIGN_in_assignmentExpression10937 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_SHIFT_RIGHT_ASSIGN_in_assignmentExpression10956 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_BIT_SHIFT_RIGHT_ASSIGN_in_assignmentExpression10975 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_assignmentExpression_in_assignmentExpression10997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_logicalOrExpression_in_conditionalExpression11022 = new BitSet(new long[]{0x0000010000000002L});
    public static final BitSet FOLLOW_QUESTION_in_conditionalExpression11025 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_assignmentExpression_in_conditionalExpression11028 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_conditionalExpression11030 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_conditionalExpression_in_conditionalExpression11033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_logicalAndExpression_in_logicalOrExpression11054 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_LOGICAL_OR_in_logicalOrExpression11057 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_logicalAndExpression_in_logicalOrExpression11060 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_inclusiveOrExpression_in_logicalAndExpression11081 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_LOGICAL_AND_in_logicalAndExpression11084 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_inclusiveOrExpression_in_logicalAndExpression11087 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression11108 = new BitSet(new long[]{0x0000001000000002L});
    public static final BitSet FOLLOW_OR_in_inclusiveOrExpression11111 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression11114 = new BitSet(new long[]{0x0000001000000002L});
    public static final BitSet FOLLOW_andExpression_in_exclusiveOrExpression11135 = new BitSet(new long[]{0x0008000000000002L});
    public static final BitSet FOLLOW_XOR_in_exclusiveOrExpression11138 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_andExpression_in_exclusiveOrExpression11141 = new BitSet(new long[]{0x0008000000000002L});
    public static final BitSet FOLLOW_equalityExpression_in_andExpression11162 = new BitSet(new long[]{0x0000000000000012L});
    public static final BitSet FOLLOW_AND_in_andExpression11165 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_equalityExpression_in_andExpression11168 = new BitSet(new long[]{0x0000000000000012L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression11189 = new BitSet(new long[]{0x0000000800040002L});
    public static final BitSet FOLLOW_EQUAL_in_equalityExpression11208 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_NOT_EQUAL_in_equalityExpression11227 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression11257 = new BitSet(new long[]{0x0000000800040002L});
    public static final BitSet FOLLOW_relationalExpression_in_instanceOfExpression11287 = new BitSet(new long[]{0x0000000000000002L,0x0000000000001000L});
    public static final BitSet FOLLOW_INSTANCEOF_in_instanceOfExpression11290 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_instanceOfExpression11293 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression11314 = new BitSet(new long[]{0x0000000003180002L});
    public static final BitSet FOLLOW_LESS_OR_EQUAL_in_relationalExpression11333 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_GREATER_OR_EQUAL_in_relationalExpression11352 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_LESS_THAN_in_relationalExpression11371 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_GREATER_THAN_in_relationalExpression11390 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression11419 = new BitSet(new long[]{0x0000000003180002L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression11453 = new BitSet(new long[]{0x0000A00000000102L});
    public static final BitSet FOLLOW_BIT_SHIFT_RIGHT_in_shiftExpression11471 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_SHIFT_RIGHT_in_shiftExpression11490 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_SHIFT_LEFT_in_shiftExpression11509 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression11538 = new BitSet(new long[]{0x0000A00000000102L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression11568 = new BitSet(new long[]{0x0000004040000002L});
    public static final BitSet FOLLOW_PLUS_in_additiveExpression11586 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_MINUS_in_additiveExpression11605 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression11634 = new BitSet(new long[]{0x0000004040000002L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression11664 = new BitSet(new long[]{0x0002000100002002L});
    public static final BitSet FOLLOW_STAR_in_multiplicativeExpression11683 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_DIV_in_multiplicativeExpression11702 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_MOD_in_multiplicativeExpression11721 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression11750 = new BitSet(new long[]{0x0002000100002002L});
    public static final BitSet FOLLOW_PLUS_in_unaryExpression11784 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression11786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_unaryExpression11813 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression11815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INC_in_unaryExpression11841 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_postfixedExpression_in_unaryExpression11843 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEC_in_unaryExpression11867 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_postfixedExpression_in_unaryExpression11869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression11893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_unaryExpressionNotPlusMinus11912 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus11914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOGICAL_NOT_in_unaryExpressionNotPlusMinus11961 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus11963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_unaryExpressionNotPlusMinus12002 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_unaryExpressionNotPlusMinus12004 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_unaryExpressionNotPlusMinus12006 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus12008 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_postfixedExpression_in_unaryExpressionNotPlusMinus12043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primaryExpression_in_postfixedExpression12079 = new BitSet(new long[]{0x0000000000609002L});
    public static final BitSet FOLLOW_DOT_in_postfixedExpression12141 = new BitSet(new long[]{0x0000000002000000L,0x0000000090040000L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeArgumentListSimplified_in_postfixedExpression12191 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_postfixedExpression12273 = new BitSet(new long[]{0x0000000020609002L});
    public static final BitSet FOLLOW_arguments_in_postfixedExpression12352 = new BitSet(new long[]{0x0000000000609002L});
    public static final BitSet FOLLOW_THIS_in_postfixedExpression12426 = new BitSet(new long[]{0x0000000000609002L});
    public static final BitSet FOLLOW_SUPER_in_postfixedExpression12489 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_postfixedExpression12491 = new BitSet(new long[]{0x0000000000609002L});
    public static final BitSet FOLLOW_SUPER_in_postfixedExpression12544 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_DOT_in_postfixedExpression12548 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_postfixedExpression12550 = new BitSet(new long[]{0x0000000020609002L});
    public static final BitSet FOLLOW_arguments_in_postfixedExpression12617 = new BitSet(new long[]{0x0000000000609002L});
    public static final BitSet FOLLOW_innerNewExpression_in_postfixedExpression12688 = new BitSet(new long[]{0x0000000000609002L});
    public static final BitSet FOLLOW_LBRACK_in_postfixedExpression12745 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_postfixedExpression12747 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_RBRACK_in_postfixedExpression12749 = new BitSet(new long[]{0x0000000000609002L});
    public static final BitSet FOLLOW_INC_in_postfixedExpression12810 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEC_in_postfixedExpression12834 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parenthesizedExpression_in_primaryExpression12882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_primaryExpression12892 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_newExpression_in_primaryExpression12902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedIdentExpression_in_primaryExpression12912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericTypeArgumentListSimplified_in_primaryExpression12922 = new BitSet(new long[]{0x0000000000000000L,0x0000000090000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_SUPER_in_primaryExpression12937 = new BitSet(new long[]{0x0000000020008000L});
    public static final BitSet FOLLOW_arguments_in_primaryExpression12955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_primaryExpression13015 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_primaryExpression13017 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_primaryExpression13019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_primaryExpression13086 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_primaryExpression13088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THIS_in_primaryExpression13143 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_primaryExpression13145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THIS_in_primaryExpression13210 = new BitSet(new long[]{0x0000000020000002L});
    public static final BitSet FOLLOW_arguments_in_primaryExpression13278 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUPER_in_primaryExpression13343 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_primaryExpression13345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUPER_in_primaryExpression13401 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_DOT_in_primaryExpression13403 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_primaryExpression13405 = new BitSet(new long[]{0x0000000020000002L});
    public static final BitSet FOLLOW_arguments_in_primaryExpression13429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitiveType_in_primaryExpression13571 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_arrayDeclarator_in_primaryExpression13630 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_DOT_in_primaryExpression13693 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_CLASS_in_primaryExpression13695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_primaryExpression13755 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_DOT_in_primaryExpression13757 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_CLASS_in_primaryExpression13759 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedIdentifier_in_qualifiedIdentExpression13839 = new BitSet(new long[]{0x0000000020408002L});
    public static final BitSet FOLLOW_arrayDeclarator_in_qualifiedIdentExpression13909 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_DOT_in_qualifiedIdentExpression13977 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_CLASS_in_qualifiedIdentExpression13979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_qualifiedIdentExpression14049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_qualifiedIdentExpression14110 = new BitSet(new long[]{0x2000000002000000L,0x0000000090040000L,0x0000001000000000L});
    public static final BitSet FOLLOW_CLASS_in_qualifiedIdentExpression14128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericTypeArgumentListSimplified_in_qualifiedIdentExpression14191 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_SUPER_in_qualifiedIdentExpression14216 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_qualifiedIdentExpression14218 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUPER_in_qualifiedIdentExpression14268 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_DOT_in_qualifiedIdentExpression14272 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_qualifiedIdentExpression14274 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_qualifiedIdentExpression14276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_qualifiedIdentExpression14326 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_qualifiedIdentExpression14328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THIS_in_qualifiedIdentExpression14403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUPER_in_qualifiedIdentExpression14469 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_qualifiedIdentExpression14471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_innerNewExpression_in_qualifiedIdentExpression14519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_newExpression14595 = new BitSet(new long[]{0x1280000002000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_primitiveType_in_newExpression14611 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_newArrayConstruction_in_newExpression14613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericTypeArgumentListSimplified_in_newExpression14657 = new BitSet(new long[]{0x1280000002000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_qualifiedTypeIdentSimplified_in_newExpression14660 = new BitSet(new long[]{0x0000000020400000L});
    public static final BitSet FOLLOW_newArrayConstruction_in_newExpression14678 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_newExpression14743 = new BitSet(new long[]{0x0000000002800002L,0x0000000000000810L});
    public static final BitSet FOLLOW_classBody_in_newExpression14745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_innerNewExpression14844 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeArgumentListSimplified_in_innerNewExpression14846 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_innerNewExpression14849 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_innerNewExpression14851 = new BitSet(new long[]{0x0000000002800002L,0x0000000000000810L});
    public static final BitSet FOLLOW_classBody_in_innerNewExpression14853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_newArrayConstruction14899 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_arrayInitializer_in_newArrayConstruction14901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_newArrayConstruction14911 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_newArrayConstruction14914 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_RBRACK_in_newArrayConstruction14916 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_LBRACK_in_newArrayConstruction14920 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_newArrayConstruction14923 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_RBRACK_in_newArrayConstruction14925 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_newArrayConstruction14930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_arguments14950 = new BitSet(new long[]{0x128008446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expressionList_in_arguments14952 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_arguments14955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_synpred4_JamlAttrHash4613 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_synpred4_JamlAttrHash4615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_synpred4_JamlAttrHash4619 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_synpred4_JamlAttrHash4621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATER_THAN_in_synpred26_JamlAttrHash5338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHIFT_RIGHT_in_synpred27_JamlAttrHash5348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BIT_SHIFT_RIGHT_in_synpred28_JamlAttrHash5358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bound_in_synpred29_JamlAttrHash5388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_in_synpred44_JamlAttrHash5920 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_block_in_synpred44_JamlAttrHash5922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_synpred54_JamlAttrHash5959 = new BitSet(new long[]{0x1280000000000000L,0x0000002002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_synpred54_JamlAttrHash5978 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred54_JamlAttrHash5980 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred54_JamlAttrHash5982 = new BitSet(new long[]{0x0000100000C00000L,0x0000000200000000L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_synpred54_JamlAttrHash5984 = new BitSet(new long[]{0x0000100000800000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred54_JamlAttrHash5987 = new BitSet(new long[]{0x0000100000800000L});
    public static final BitSet FOLLOW_block_in_synpred54_JamlAttrHash5991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_synpred54_JamlAttrHash5995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_synpred54_JamlAttrHash6057 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred54_JamlAttrHash6059 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred54_JamlAttrHash6061 = new BitSet(new long[]{0x0000100000800000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred54_JamlAttrHash6063 = new BitSet(new long[]{0x0000100000800000L});
    public static final BitSet FOLLOW_block_in_synpred54_JamlAttrHash6067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_synpred54_JamlAttrHash6071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred54_JamlAttrHash6130 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred54_JamlAttrHash6132 = new BitSet(new long[]{0x0000000000800000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred54_JamlAttrHash6134 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_block_in_synpred54_JamlAttrHash6137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifierList_in_synpred55_JamlAttrHash5945 = new BitSet(new long[]{0x1280000002000000L,0x0000002002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_synpred55_JamlAttrHash5959 = new BitSet(new long[]{0x1280000000000000L,0x0000002002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_synpred55_JamlAttrHash5978 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred55_JamlAttrHash5980 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred55_JamlAttrHash5982 = new BitSet(new long[]{0x0000100000C00000L,0x0000000200000000L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_synpred55_JamlAttrHash5984 = new BitSet(new long[]{0x0000100000800000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred55_JamlAttrHash5987 = new BitSet(new long[]{0x0000100000800000L});
    public static final BitSet FOLLOW_block_in_synpred55_JamlAttrHash5991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_synpred55_JamlAttrHash5995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_synpred55_JamlAttrHash6057 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred55_JamlAttrHash6059 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred55_JamlAttrHash6061 = new BitSet(new long[]{0x0000100000800000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred55_JamlAttrHash6063 = new BitSet(new long[]{0x0000100000800000L});
    public static final BitSet FOLLOW_block_in_synpred55_JamlAttrHash6067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_synpred55_JamlAttrHash6071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred55_JamlAttrHash6130 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred55_JamlAttrHash6132 = new BitSet(new long[]{0x0000000000800000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred55_JamlAttrHash6134 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_block_in_synpred55_JamlAttrHash6137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_synpred55_JamlAttrHash6201 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_classFieldDeclaratorList_in_synpred55_JamlAttrHash6203 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred55_JamlAttrHash6205 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_synpred56_JamlAttrHash6250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_synpred62_JamlAttrHash6306 = new BitSet(new long[]{0x1280000000000000L,0x0000002002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_synpred62_JamlAttrHash6325 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred62_JamlAttrHash6327 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred62_JamlAttrHash6329 = new BitSet(new long[]{0x0000100000400000L,0x0000000200000000L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_synpred62_JamlAttrHash6331 = new BitSet(new long[]{0x0000100000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred62_JamlAttrHash6334 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred62_JamlAttrHash6337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_synpred62_JamlAttrHash6395 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred62_JamlAttrHash6397 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred62_JamlAttrHash6399 = new BitSet(new long[]{0x0000100000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred62_JamlAttrHash6401 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred62_JamlAttrHash6404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifierList_in_synpred63_JamlAttrHash6292 = new BitSet(new long[]{0x1280000002000000L,0x0000002002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_synpred63_JamlAttrHash6306 = new BitSet(new long[]{0x1280000000000000L,0x0000002002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_synpred63_JamlAttrHash6325 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred63_JamlAttrHash6327 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred63_JamlAttrHash6329 = new BitSet(new long[]{0x0000100000400000L,0x0000000200000000L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_synpred63_JamlAttrHash6331 = new BitSet(new long[]{0x0000100000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred63_JamlAttrHash6334 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred63_JamlAttrHash6337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_synpred63_JamlAttrHash6395 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred63_JamlAttrHash6397 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred63_JamlAttrHash6399 = new BitSet(new long[]{0x0000100000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred63_JamlAttrHash6401 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred63_JamlAttrHash6404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_synpred63_JamlAttrHash6467 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_interfaceFieldDeclaratorList_in_synpred63_JamlAttrHash6469 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred63_JamlAttrHash6471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_synpred64_JamlAttrHash6516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayDeclarator_in_synpred70_JamlAttrHash6818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_synpred88_JamlAttrHash7219 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_synpred89_JamlAttrHash7268 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred91_JamlAttrHash7353 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_typeIdent_in_synpred91_JamlAttrHash7355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred102_JamlAttrHash7580 = new BitSet(new long[]{0x1280010000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeArgument_in_synpred102_JamlAttrHash7582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericWildcardBoundType_in_synpred104_JamlAttrHash7636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred109_JamlAttrHash7854 = new BitSet(new long[]{0x12A0000000000080L,0x000000444EE38142L,0x0000001000000000L});
    public static final BitSet FOLLOW_formalParameterStandardDecl_in_synpred109_JamlAttrHash7856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameterStandardDecl_in_synpred111_JamlAttrHash7851 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_synpred111_JamlAttrHash7854 = new BitSet(new long[]{0x12A0000000000080L,0x000000444EE38142L,0x0000001000000000L});
    public static final BitSet FOLLOW_formalParameterStandardDecl_in_synpred111_JamlAttrHash7856 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_synpred111_JamlAttrHash7861 = new BitSet(new long[]{0x12A0000000000080L,0x000000444EE38142L,0x0000001000000000L});
    public static final BitSet FOLLOW_formalParameterVarArgDecl_in_synpred111_JamlAttrHash7863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameterVarArgDecl_in_synpred112_JamlAttrHash7920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred113_JamlAttrHash8165 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred113_JamlAttrHash8169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_synpred114_JamlAttrHash8222 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifierList_in_synpred126_JamlAttrHash8676 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_synpred126_JamlAttrHash8678 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred126_JamlAttrHash8692 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred126_JamlAttrHash8694 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred126_JamlAttrHash8696 = new BitSet(new long[]{0x8000100000000000L});
    public static final BitSet FOLLOW_annotationDefaultValue_in_synpred126_JamlAttrHash8698 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred126_JamlAttrHash8701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classFieldDeclaratorList_in_synpred126_JamlAttrHash8743 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred126_JamlAttrHash8745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_synpred128_JamlAttrHash8880 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred128_JamlAttrHash8882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_synpred129_JamlAttrHash8893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_in_synpred133_JamlAttrHash9191 = new BitSet(new long[]{0x73E010446AA01480L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_statement_in_synpred133_JamlAttrHash9195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forInit_in_synpred135_JamlAttrHash9378 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred135_JamlAttrHash9380 = new BitSet(new long[]{0x128010446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_forCondition_in_synpred135_JamlAttrHash9382 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred135_JamlAttrHash9384 = new BitSet(new long[]{0x128008446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_forUpdater_in_synpred135_JamlAttrHash9386 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred135_JamlAttrHash9388 = new BitSet(new long[]{0x73E010446AA01480L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_statement_in_synpred135_JamlAttrHash9390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchCaseLabel_in_synpred155_JamlAttrHash10357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_synpred158_JamlAttrHash10447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_synpred159_JamlAttrHash10469 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred202_JamlAttrHash12002 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_synpred202_JamlAttrHash12004 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred202_JamlAttrHash12006 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_synpred202_JamlAttrHash12008 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayDeclarator_in_synpred230_JamlAttrHash13909 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_DOT_in_synpred230_JamlAttrHash13977 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_CLASS_in_synpred230_JamlAttrHash13979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred238_JamlAttrHash14110 = new BitSet(new long[]{0x2000000002000000L,0x0000000090040000L,0x0000001000000000L});
    public static final BitSet FOLLOW_CLASS_in_synpred238_JamlAttrHash14128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericTypeArgumentListSimplified_in_synpred238_JamlAttrHash14191 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_SUPER_in_synpred238_JamlAttrHash14216 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_synpred238_JamlAttrHash14218 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUPER_in_synpred238_JamlAttrHash14268 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_DOT_in_synpred238_JamlAttrHash14272 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred238_JamlAttrHash14274 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_synpred238_JamlAttrHash14276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred238_JamlAttrHash14326 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_synpred238_JamlAttrHash14328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THIS_in_synpred238_JamlAttrHash14403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUPER_in_synpred238_JamlAttrHash14469 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_synpred238_JamlAttrHash14471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_innerNewExpression_in_synpred238_JamlAttrHash14519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_synpred246_JamlAttrHash14920 = new BitSet(new long[]{0x128000446A201400L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_synpred246_JamlAttrHash14923 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_RBRACK_in_synpred246_JamlAttrHash14925 = new BitSet(new long[]{0x0000000000000002L});

}